var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.366,1,2.681]],["body/guards/AccessTokenGuard.html",[0,2.855,1,3.235,2,2.413,3,0.125,4,0.112,5,0.112,6,5.396,7,4.471,8,2.912,9,0.787,10,4.274,11,5.173,12,0.205,13,0.85,14,1.481,15,4.867,16,1.34,17,4.828,18,1.31,19,2.912,20,6.291,21,5.396,22,5.396,23,0.497,24,3.346,25,0.997,26,0.014,27,0.789,28,0.371,29,0.725,30,3.789,31,3.892,32,3.346,33,2.629,34,4.202,35,1.407,36,2.855,37,1.051,38,1.355,39,3.009,40,2.702,41,4.202,42,3.235,43,4.202,44,4.828,45,4.121,46,3.346,47,4.828,48,4.828,49,0.618,50,2.855,51,0.308,52,3.555,53,0.337,54,3.795,55,0.393,56,2.1,57,2.242,58,2.242,59,2.413,60,3.346,61,2.626,62,2.912,63,0.125,64,0.026,65,1.778,66,1.869,67,0.984,68,2.413,69,2.413,70,2.912,71,1.679,72,2.912,73,3.346,74,2.047,75,1.684,76,1.979,77,3.789,78,0.939,79,3.346,80,3.346,81,2.912,82,4.202,83,4.202,84,3.03,85,4.202,86,3.789,87,4.202,88,4.202,89,4.202,90,2.1,91,4.202,92,0.85,93,3.346,94,0.008,95,0.008]],["title/interfaces/ActiveUserData.html",[96,2.024,97,2.681]],["body/interfaces/ActiveUserData.html",[3,0.198,4,0.178,5,0.178,9,1.251,12,0.326,26,0.014,28,0.469,35,1.823,49,1.037,63,0.198,77,4.175,94,0.011,95,0.011,96,3.335,97,4.417,98,3.564,99,4.629,100,4.629,101,4.629,102,1.917,103,3.786,104,3.62,105,6.516,106,2.059]],["title/injectables/AddToCartProvider.html",[53,0.279,107,2.511]],["body/injectables/AddToCartProvider.html",[3,0.154,4,0.138,5,0.138,12,0.253,13,0.984,14,1.658,16,1.386,18,1.182,23,0.491,25,0.984,26,0.014,27,0.779,28,0.366,29,0.716,35,0.937,37,0.7,38,1.57,49,0.812,51,0.347,53,0.39,54,2.767,55,0.485,63,0.154,64,0.032,67,1.386,71,1.118,78,1.159,94,0.009,95,0.009,107,3.511,108,1.042,109,5.52,110,3.241,111,4.978,112,4.13,113,4.331,114,4.191,115,4.978,116,2.891,117,4.191,118,4.13,119,3.241,120,4.701,121,4.13,122,2.473,123,4.13,124,1.906,125,3.28,126,2.978,127,3.241,128,1.159,129,2.089,130,2.194,131,1.826,132,1.44,133,2.978,134,3.594,135,1.908,136,1.686,137,3.13,138,2.442,139,2.767,140,3.241,141,1.751,142,3.594,143,4.13,144,4.13,145,3.594]],["title/controllers/AppController.html",[146,1.628,147,2.885]],["body/controllers/AppController.html",[3,0.211,4,0.19,5,0.19,12,0.347,13,1.206,23,0.498,26,0.014,37,0.961,49,0.878,51,0.308,55,0.666,63,0.211,64,0.045,67,1.156,92,0.998,94,0.011,95,0.011,146,2.79,147,4.943,148,2.507,149,4.935,150,6.661,151,1.905,152,5.67,153,4.624,154,4.935,155,4.935,156,5.67]],["title/modules/AppModule.html",[157,1.628,158,2.885]],["body/modules/AppModule.html",[1,3.287,3,0.127,4,0.114,5,0.114,7,2.467,26,0.014,28,0.224,39,2.607,40,2.745,51,0.362,52,2.148,55,0.402,56,2.148,57,2.293,59,2.467,63,0.127,64,0.027,71,0.927,92,0.602,94,0.008,95,0.008,132,1.193,147,4.135,148,2.169,153,4.332,154,2.978,157,2.334,158,5.701,159,1.731,160,1.731,161,1.915,162,1.915,163,1.731,164,3.209,165,1.915,166,2.978,167,2.978,168,2.978,169,4.332,170,4.332,171,4.625,172,4.332,173,4.081,174,2.745,175,1.818,176,1.818,177,2.685,178,3.6,179,3.422,180,4.27,181,5.452,182,4.906,183,3.422,184,4.906,185,3.422,186,4.906,187,3.422,188,2.293,189,3.422,190,3.422,191,5.735,192,4.906,193,2.293,194,3.537,195,3.422,196,2.685,197,3.422,198,3.537,199,3.422,200,3.537,201,3.422,202,3.422,203,2.978,204,3.422,205,2.978,206,3.422,207,3.422,208,3.422,209,2.978,210,2.978,211,4.501,212,4.27,213,3.422,214,3.422,215,3.422,216,3.422,217,3.422,218,3.422,219,3.422,220,3.422,221,3.422,222,3.422,223,3.422,224,3.422,225,3.422,226,3.422,227,3.422,228,3.422,229,3.422,230,1.652,231,3.422,232,2.685,233,3.422,234,2.148,235,3.422,236,3.422,237,2.978,238,3.422,239,3.422,240,2.978,241,2.978,242,4.991,243,4.991]],["title/injectables/AppService.html",[53,0.279,153,2.511]],["body/injectables/AppService.html",[3,0.218,4,0.196,5,0.196,12,0.359,13,1.23,23,0.514,26,0.014,37,0.992,49,0.895,51,0.263,53,0.488,55,0.687,63,0.218,64,0.046,92,1.03,94,0.012,95,0.012,108,1.478,150,6.733,153,4.386,244,5.096,245,5.855,246,5.855,247,5.855]],["title/controllers/AuthController.html",[146,1.628,248,2.885]],["body/controllers/AuthController.html",[3,0.108,4,0.097,5,0.097,9,1.724,10,3.986,11,4.517,12,0.177,13,0.763,16,0.589,18,0.611,23,0.254,25,0.509,26,0.014,27,0.402,28,0.486,29,0.37,35,1.721,37,1.102,39,2.303,43,3.773,49,0.74,50,1.71,51,0.303,55,0.339,63,0.108,64,0.023,66,0.871,67,0.589,68,3.126,92,0.509,94,0.007,95,0.007,102,1.261,103,3.487,104,2.001,135,0.811,137,1.618,146,2.52,148,1.278,151,0.971,175,2.303,230,3.54,248,3.126,249,2.516,250,1.937,251,3.265,252,3.403,253,4.536,254,3.773,255,3.773,256,4.335,257,4.999,258,4.335,259,4.335,260,4.335,261,3.773,262,4.335,263,4.335,264,4.335,265,2.205,266,3.403,267,2.269,268,4.352,269,4.335,270,2.891,271,5.779,272,4.861,273,2.891,274,5.657,275,3.773,276,2.891,277,4.335,278,3.126,279,5.029,280,2.891,281,3.751,282,3.773,283,4.335,284,2.891,285,3.773,286,3.773,287,4.335,288,3.751,289,4.335,290,4.335,291,3.126,292,4.356,293,3.773,294,1.937,295,2.516,296,1.815,297,1.937,298,3.265,299,2.516,300,4.335,301,3.773,302,2.891,303,3.773,304,3.773,305,2.516,306,1.618,307,2.891,308,1.815,309,2.891,310,2.564,311,2.269,312,2.269,313,2.891,314,2.891,315,2.891,316,2.269,317,2.891,318,2.516,319,2.891,320,1.937,321,2.516,322,4.517,323,2.516,324,1.463,325,2.269,326,2.891,327,2.516,328,4.335,329,2.269,330,2.891,331,2.085,332,1.71,333,2.516,334,1.71,335,2.516,336,2.269,337,2.269,338,2.269,339,1.177,340,2.085,341,1.618,342,2.891,343,2.891]],["title/modules/AuthModule.html",[157,1.628,169,2.511]],["body/modules/AuthModule.html",[3,0.163,4,0.147,5,0.147,26,0.014,51,0.358,55,0.515,56,2.753,57,2.939,59,3.163,63,0.163,64,0.034,68,3.163,69,3.163,94,0.01,95,0.01,148,2.575,157,2.951,159,2.219,160,2.219,161,2.454,162,2.454,163,2.219,164,3.659,165,3.659,169,4.995,173,3.444,174,3.259,175,2.331,176,2.331,178,2.753,180,3.817,205,3.817,240,3.817,241,3.817,242,3.817,243,3.817,248,4.715,298,4.678,299,3.817,344,3.817,345,3.817,346,3.817,347,4.321,348,4.678,349,4.678,350,4.386,351,4.199,352,4.386,353,3.817,354,3.817,355,4.386,356,4.199,357,4.386,358,4.386,359,3.817,360,4.386,361,3.817,362,4.386,363,4.386,364,4.386]],["title/injectables/AuthService.html",[53,0.279,298,2.511]],["body/injectables/AuthService.html",[3,0.18,4,0.162,5,0.162,10,3.671,12,0.296,13,1.093,14,1.792,16,0.986,18,1.312,23,0.545,25,1.093,26,0.014,27,0.864,28,0.406,29,0.795,33,2.632,35,1.409,37,1.052,51,0.308,53,0.433,55,0.568,63,0.18,64,0.038,66,1.458,67,0.986,78,1.357,92,0.851,94,0.01,95,0.01,108,1.221,135,1.357,141,2.051,257,4.477,265,2.907,266,4.873,267,4.873,268,4.805,272,4.477,288,4.477,298,3.897,311,3.797,312,3.797,349,4.805,359,4.21,365,4.21,366,4.837,367,4.837,368,4.837,369,5.403,370,2.861,371,4.837]],["title/guards/AuthenticationGuard.html",[0,2.366,198,2.885]],["body/guards/AuthenticationGuard.html",[0,3.311,1,4.817,2,4.905,3,0.122,4,0.11,5,0.11,7,2.365,9,0.771,10,3.311,11,2.198,12,0.201,13,0.837,14,1.464,15,5.751,16,1.387,18,1.298,23,0.418,25,0.837,26,0.014,27,0.78,28,0.367,29,0.609,30,3.735,31,3.856,33,2.017,35,1.394,36,3.311,37,0.949,38,1.335,39,3.264,40,2.662,42,3.188,51,0.306,53,0.332,54,3.188,55,0.385,62,2.854,63,0.122,64,0.053,65,1.743,66,1.687,67,1.387,71,1.664,74,2.017,75,1.144,76,1.939,78,0.92,90,2.059,92,0.577,94,0.008,95,0.008,101,4.141,102,0.954,135,1.335,193,2.198,198,3.431,203,2.854,251,3.856,253,3.735,308,2.059,310,1.939,372,2.854,373,4.758,374,4.873,375,4.758,376,2.854,377,6.477,378,3.28,379,3.28,380,4.758,381,3.735,382,2.574,383,2.365,384,2.365,385,2.574,386,2.365,387,2.854,388,2.987,389,2.854,390,2.365,391,2.854,392,2.528,393,4.758,394,2.854,395,4.395,396,2.854,397,3.28,398,3.28,399,3.28,400,3.28,401,2.059,402,2.854,403,4.758,404,2.854,405,1.939,406,2.854,407,3.28,408,2.854,409,2.854,410,3.28,411,1.743,412,3.28,413,3.28,414,3.133,415,2.854,416,3.28,417,3.28,418,3.28,419,3.28,420,4.758]],["title/injectables/BcryptProvider.html",[53,0.279,356,2.885]],["body/injectables/BcryptProvider.html",[3,0.154,4,0.138,5,0.138,9,0.973,12,0.253,13,0.986,14,1.916,23,0.492,25,0.986,26,0.014,27,0.78,28,0.367,29,0.717,33,2.885,35,1.271,37,1.153,38,1.909,42,3.753,49,0.989,51,0.286,53,0.391,55,0.486,63,0.154,64,0.033,65,2.199,66,1.913,71,1.121,78,1.572,92,0.986,94,0.009,95,0.009,108,1.044,141,2.375,230,3.68,265,3.107,324,3.597,347,3.134,356,4.039,421,3.602,422,5.921,423,5.526,424,4.875,425,3.602,426,6.378,427,6.187,428,4.138,429,4.875,430,3.516,431,5.601,432,5.601,433,4.875,434,4.138,435,4.039,436,4.875,437,3.602,438,3.248,439,6.349,440,4.138,441,4.138,442,4.138]],["title/interfaces/Cart.html",[96,2.024,125,1.847]],["body/interfaces/Cart.html",[3,0.206,4,0.185,5,0.185,12,0.338,26,0.014,28,0.509,49,0.708,51,0.249,63,0.206,94,0.011,95,0.011,96,2.796,98,3.704,102,1.962,106,1.727,125,3.116,136,2.196,339,3.262,443,4.811,444,4.487,445,5.955,446,5.471,447,5.874,448,4.338,449,3.269]],["title/controllers/CartController.html",[146,1.628,450,2.885]],["body/controllers/CartController.html",[3,0.137,4,0.123,5,0.123,12,0.226,13,0.911,16,0.752,18,0.78,23,0.599,25,1.201,26,0.014,27,0.95,28,0.447,29,0.874,37,1.157,49,1.043,51,0.307,55,0.433,63,0.137,64,0.029,66,1.112,67,0.752,92,1.201,94,0.009,95,0.009,111,4.062,119,2.896,120,4.068,122,3.412,124,1.703,125,2.76,126,3.732,135,1.035,146,1.502,148,1.631,151,2.293,250,2.473,294,4.006,297,4.006,450,3.732,451,3.211,452,5.176,453,4.692,454,5.176,455,5.203,456,4.342,457,3.69,458,3.69,459,5.176,460,3.69,461,2.896,462,5.82,463,4.654,464,5.176,465,3.69,466,3.69,467,3.69,468,3.211,469,5.176,470,3.69,471,2.661,472,3.211,473,3.832,474,3.211,475,2.661,476,2.661,477,3.211,478,2.316,479,3.69,480,3.69,481,3.211,482,3.69,483,3.69,484,3.69,485,3.69,486,3.69,487,4.504,488,5.176,489,3.69,490,3.69,491,3.69,492,3.69]],["title/entities/CartItem.html",[129,2.024,493,1.628]],["body/entities/CartItem.html",[3,0.15,4,0.135,5,0.135,12,0.247,23,0.653,26,0.014,28,0.487,29,0.704,35,1.78,49,0.704,51,0.282,63,0.15,64,0.032,94,0.009,95,0.009,102,1.599,106,1.956,125,2.891,128,1.13,129,2.782,136,2.315,139,2.7,151,2.5,339,2.239,381,3.162,392,2.14,444,2.382,448,3.162,449,3.703,471,2.905,493,2.239,494,2.529,495,5.945,496,4.317,497,3.504,498,3.703,499,4.515,500,4.299,501,4.515,502,4.029,503,6.262,504,4.029,505,3.685,506,4.029,507,4.317,508,5.5,509,5.281,510,4.852,511,4.029,512,3.506,513,3.252,514,4.029,515,4.515,516,4.029,517,5.5,518,4.029,519,4.029,520,4.029,521,4.029,522,3.162,523,3.506,524,2.7,525,3.252,526,4.915,527,4.029,528,4.029]],["title/modules/CartModule.html",[157,1.628,170,2.511]],["body/modules/CartModule.html",[3,0.156,4,0.14,5,0.14,26,0.014,51,0.355,55,0.493,63,0.156,64,0.033,94,0.009,95,0.009,107,4.62,117,4.119,125,2.612,129,2.125,130,2.231,132,1.465,133,4.079,136,2.218,148,2.501,157,2.604,159,2.125,160,2.125,161,2.35,162,2.35,163,2.125,164,3.58,165,3.58,170,5.15,172,4.62,173,4.352,174,3.166,175,2.231,176,2.231,178,3.551,188,2.814,354,3.655,450,4.613,473,4.707,474,3.655,529,3.655,530,3.655,531,3.655,532,3.655,533,4.62,534,4.2,535,4.2,536,4.2,537,4.2,538,3.655,539,3.655,540,3.296,541,4.2,542,4.2]],["title/injectables/CartService.html",[53,0.279,473,2.366]],["body/injectables/CartService.html",[3,0.123,4,0.111,5,0.111,12,0.203,13,0.844,14,2.079,16,1.148,18,1.013,23,0.618,25,1.239,26,0.014,27,0.98,28,0.461,29,0.902,35,0.752,37,1.157,49,1.04,51,0.307,53,0.334,55,0.389,63,0.123,64,0.026,67,1.148,78,1.916,92,1.201,94,0.008,95,0.008,107,4.419,108,0.836,111,3.762,117,4.034,119,3.762,120,4.525,122,3.248,124,1.529,125,2.849,126,3.456,133,3.456,135,1.58,370,4.037,453,4.42,461,2.6,462,5.658,463,4.525,473,2.834,478,2.079,481,2.883,533,4.419,539,2.883,543,2.883,544,4.171,545,4.171,546,4.793,547,4.171,548,3.313,549,3.313,550,3.313,551,4.171,552,3.313,553,3.313,554,4.171,555,3.313,556,4.793,557,3.313,558,4.171,559,3.313,560,3.313,561,4.171,562,3.313,563,2.883,564,3.313,565,3.313,566,3.313,567,3.313]],["title/classes/CreateCartItemDto.html",[64,0.031,120,2.511]],["body/classes/CreateCartItemDto.html",[3,0.206,4,0.185,5,0.185,12,0.338,23,0.592,26,0.014,28,0.442,49,0.864,51,0.249,63,0.206,64,0.053,94,0.011,95,0.011,102,1.962,120,4.236,125,3.364,151,2.268,339,2.747,449,4.309,568,2.25,569,6.341,570,4.338,571,4.309,572,4.309,573,5.528,574,4.811,575,5.528,576,5.297,577,3.986,578,2.669,579,4.338]],["title/classes/CreateOrderDto.html",[64,0.031,580,2.511]],["body/classes/CreateOrderDto.html",[3,0.195,4,0.175,5,0.175,12,0.321,23,0.624,26,0.014,28,0.466,29,0.911,49,1,51,0.235,63,0.195,64,0.051,94,0.011,95,0.011,102,1.898,151,2.39,405,3.095,568,2.131,572,4.402,578,2.527,580,4.096,581,6.479,582,4.556,583,6.189,584,6.189,585,6.189,586,6.526,587,5.235,588,5.235,589,5.235,590,5.235,591,5.128,592,4.373,593,4.556,594,4.556]],["title/injectables/CreateOrderProvider.html",[53,0.279,595,2.511]],["body/injectables/CreateOrderProvider.html",[3,0.113,4,0.102,5,0.102,9,1.06,12,0.187,13,0.793,14,1.403,16,0.919,18,0.953,23,0.396,25,0.793,26,0.014,27,0.628,28,0.295,29,0.577,35,1.346,37,0.516,38,1.265,49,0.687,51,0.323,53,0.315,55,0.358,63,0.113,64,0.024,67,0.919,71,1.948,74,2.514,75,2.068,76,3.173,78,2.108,90,3.368,92,0.536,94,0.007,95,0.007,106,1.978,108,0.769,122,2.93,124,1.407,128,0.855,129,2.281,130,2.395,136,1.359,139,3.021,388,1.913,414,3.003,445,2.391,446,3.251,449,2.666,473,4.055,493,1.24,495,2.391,540,2.391,571,1.802,580,4.42,595,2.83,596,4.67,597,2.652,598,4.212,599,3.047,600,6.858,601,3.047,602,2.391,603,3.047,604,3.047,605,2.652,606,1.802,607,2.684,608,2.042,609,2.391,610,3.047,611,2.391,612,3.047,613,2.652,614,3.047,615,3.047,616,3.047,617,2.652,618,4.508,619,2.652,620,3.047,621,3.047,622,3.047,623,1.802,624,3.047,625,3.047,626,3.047,627,3.047,628,3.047,629,3.047,630,3.047,631,3.047,632,3.047,633,2.042,634,3.047,635,3.047,636,3.047,637,2.391,638,2.652,639,3.596,640,3.047,641,3.047,642,3.047,643,3.047,644,3.173,645,3.047,646,2.395,647,3.047,648,3.047,649,2.395,650,3.047,651,3.047,652,3.047,653,3.047,654,4.508,655,4.655,656,3.047,657,3.047,658,3.047,659,2.652,660,3.047,661,4.508,662,3.047,663,3.047,664,3.924,665,3.047,666,3.047,667,2.391,668,3.047,669,3.047,670,3.047,671,3.047,672,3.047,673,3.047,674,4.508,675,3.047,676,3.047,677,3.047,678,2.197]],["title/classes/CreateProductDto.html",[64,0.031,679,2.366]],["body/classes/CreateProductDto.html",[3,0.171,4,0.153,5,0.153,9,1.572,12,0.281,23,0.662,26,0.014,27,0.931,28,0.494,49,0.967,51,0.27,63,0.171,64,0.047,94,0.01,95,0.01,102,1.745,151,2.536,339,2.886,568,1.868,572,4.193,576,5.248,577,3.31,578,2.216,579,3.603,591,5.544,644,3.954,646,3.552,679,3.549,680,6.692,681,3.603,682,4.197,683,4.821,684,4.48,685,4.59,686,4.59,687,4.59,688,4.59,689,4.59,690,4.59,691,4.59,692,4.59,693,4.59,694,4.59,695,4.59,696,4.59,697,4.59,698,3.995,699,3.995,700,3.31,701,3.31,702,6.001,703,4.59,704,4.59,705,4.59]],["title/injectables/CreateProductProvider.html",[53,0.279,706,2.511]],["body/injectables/CreateProductProvider.html",[3,0.181,4,0.163,5,0.163,12,0.298,13,1.098,14,1.799,16,0.993,18,1.318,23,0.547,25,1.098,26,0.014,27,0.868,28,0.408,29,0.799,37,0.826,38,1.75,51,0.337,53,0.435,55,0.572,63,0.181,64,0.038,67,0.993,71,1.32,78,1.367,92,0.858,94,0.01,95,0.01,108,1.23,116,3.052,124,2.25,128,1.367,131,2.154,132,1.699,135,1.367,136,1.88,679,4.535,706,3.915,707,5.988,708,3.514,709,4.896,710,3.265,711,4.241,712,4.18,713,4.896,714,4.241,715,2.727,716,3.265,717,3.059,718,4.873,719,4.873,720,4.873]],["title/classes/CreateUserDto.html",[64,0.031,721,2.511]],["body/classes/CreateUserDto.html",[3,0.147,4,0.132,5,0.132,9,1.57,12,0.242,23,0.586,26,0.014,28,0.437,35,1.83,49,0.966,51,0.244,63,0.147,64,0.043,94,0.009,95,0.009,102,1.579,103,3.575,151,2.244,230,3.575,306,2.214,322,5.054,332,4.379,333,3.443,334,4.379,335,3.443,336,3.105,339,2.211,341,3.039,568,1.61,572,3.949,578,1.91,591,5.046,698,3.443,699,3.443,721,3.409,722,6.091,723,3.443,724,5.811,725,3.956,726,3.956,727,3.956,728,3.956,729,3.956,730,3.956,731,3.956,732,5.432,733,5.432,734,5.432,735,5.432,736,5.432,737,5.432,738,4.727,739,5.432,740,5.432,741,5.432,742,3.956,743,6.091,744,4.727,745,3.956,746,5.432,747,6.677,748,3.956,749,3.956,750,3.956]],["title/injectables/CreateUserProvider.html",[53,0.279,751,2.511]],["body/injectables/CreateUserProvider.html",[3,0.15,4,0.134,5,0.134,12,0.246,13,0.967,14,1.635,16,1.12,18,1.161,23,0.482,25,0.967,26,0.014,27,0.765,28,0.36,29,0.703,35,1.42,37,0.681,38,1.541,51,0.341,52,2.523,53,0.383,55,0.472,63,0.15,64,0.032,67,1.12,71,1.089,74,1.704,75,1.915,78,1.755,92,0.708,94,0.009,95,0.009,103,2.652,104,2.888,106,1.256,108,1.015,116,2.865,124,1.856,128,1.128,131,1.777,132,1.402,135,1.541,138,2.377,141,1.704,230,1.941,265,2.652,310,2.377,332,2.377,334,2.377,337,3.155,347,4.237,351,2.899,411,2.136,435,2.899,497,2.25,721,4.668,751,3.447,752,5.444,753,3.155,754,4.91,755,3.155,756,4.02,757,4.311,758,3.155,759,4.02,760,2.523,761,4.02,762,3.155,763,3.68,764,2.694,765,3.499,766,2.694,767,3.155,768,3.499,769,5.492,770,3.155,771,5.492,772,3.499,773,3.155,774,5.492,775,4.02,776,4.02,777,4.02,778,4.02,779,4.02,780,4.02,781,4.02,782,4.02,783,4.02]],["title/injectables/DataResponseInterceptor.html",[53,0.279,194,2.885]],["body/injectables/DataResponseInterceptor.html",[3,0.157,4,0.141,5,0.141,9,0.992,12,0.258,13,0.999,16,0.86,18,1.449,23,0.498,25,0.999,26,0.014,27,0.79,28,0.371,29,0.727,31,4.304,33,2.405,36,3.355,37,0.962,51,0.288,53,0.396,55,0.495,56,2.647,63,0.157,64,0.033,65,2.241,66,1.932,67,0.86,69,3.041,84,4.304,92,0.742,94,0.009,95,0.009,108,1.064,135,1.184,137,2.36,141,2.405,181,6.554,194,4.091,196,5.032,321,5.58,323,4.938,324,3.873,382,5.032,383,3.041,394,3.671,402,4.938,405,3.355,637,4.453,784,5.58,785,3.671,786,4.938,787,4.938,788,4.938,789,4.218,790,4.218,791,4.938,792,5.968,793,4.218,794,5.674,795,4.938,796,4.218,797,3.671,798,3.671,799,4.218,800,4.218]],["title/classes/DatabaseConnectionException.html",[64,0.031,801,2.681]],["body/classes/DatabaseConnectionException.html",[3,0.174,4,0.156,5,0.156,9,1.428,18,1.509,23,0.41,25,0.823,26,0.014,27,0.651,28,0.306,29,0.599,45,2.617,49,0.915,51,0.21,55,0.549,63,0.226,64,0.048,66,1.831,76,2.766,94,0.01,95,0.01,234,4.646,291,4.865,296,2.936,341,3.399,414,2.617,568,1.904,678,5.15,763,3.134,764,4.071,801,4.071,802,3.671,803,5.47,804,4.521,805,5.15,806,5.287,807,4.677,808,5.872,809,3.671,810,5.287,811,4.07,812,4.07,813,4.07,814,3.372,815,3.671,816,4.07,817,4.38,818,4.07,819,4.07,820,4.071,821,4.07,822,3.372,823,3.372,824,3.372]],["title/injectables/DeleteProductProvider.html",[53,0.279,825,2.511]],["body/injectables/DeleteProductProvider.html",[3,0.174,4,0.156,5,0.156,12,0.286,13,1.068,14,1.762,16,0.951,18,1.282,23,0.532,25,1.068,26,0.014,27,0.844,28,0.397,29,0.777,37,0.791,38,1.702,39,2.479,49,0.863,51,0.321,53,0.423,55,0.548,63,0.174,64,0.037,67,0.951,71,1.264,74,1.978,75,2.115,78,1.702,92,0.821,94,0.01,95,0.01,106,1.458,108,1.178,116,3.011,128,1.309,131,2.063,132,1.627,135,1.309,136,2.229,265,2.857,278,3.364,341,2.611,498,2.759,500,2.759,571,3.587,708,3.364,710,3.127,712,4.064,715,2.611,717,2.929,825,3.807,826,5.865,827,4.761,828,4.666,829,4.761,830,4.666,831,2.759,832,2.611,833,4.061,834,3.662,835,2.611,836,4.061,837,3.127,838,4.666]],["title/injectables/ErrorHandlingInterceptor.html",[53,0.279,839,3.14]],["body/injectables/ErrorHandlingInterceptor.html",[3,0.135,4,0.122,5,0.122,9,0.855,12,0.223,13,0.901,16,1.209,23,0.449,25,0.901,26,0.014,27,0.713,28,0.335,29,0.656,31,4.041,33,2.729,34,4.458,36,3.029,37,1.091,42,4.314,45,2.034,51,0.305,53,0.357,55,0.427,63,0.135,64,0.029,65,1.932,66,1.787,71,1.387,74,1.541,75,1.786,76,2.15,84,4.041,92,1.194,94,0.008,95,0.008,108,0.918,128,1.02,234,2.282,252,4.02,382,4.654,383,2.622,404,3.164,414,4.347,430,4.041,605,4.458,619,3.164,678,4.894,764,2.436,765,3.164,787,4.458,788,5.603,791,4.458,792,5.603,795,4.458,798,3.164,801,3.432,814,2.622,815,2.854,820,2.436,839,4.02,840,5.161,841,5.161,842,3.164,843,5.122,844,3.636,845,5.122,846,5.327,847,3.636,848,6.438,849,5.122,850,3.636,851,6.438,852,3.636,853,3.636,854,3.164,855,3.636,856,3.636,857,2.622,858,4.02,859,3.636,860,3.636,861,3.164,862,3.636,863,3.164,864,2.854,865,2.854,866,3.636,867,3.636,868,3.636,869,3.636,870,3.636,871,3.636,872,3.636,873,3.636,874,3.636,875,3.636]],["title/interfaces/ErrorResponse.html",[96,2.024,876,2.885]],["body/interfaces/ErrorResponse.html",[3,0.123,4,0.068,5,0.068,9,0.478,12,0.125,16,1.144,26,0.014,27,0.91,28,0.446,29,0.422,33,2.38,36,1.203,37,0.889,45,3.74,49,0.997,50,1.203,51,0.187,55,0.239,58,1.363,63,0.123,64,0.016,65,1.081,66,1.969,67,0.415,71,1.81,75,1.149,90,2.606,92,1.04,94,0.005,95,0.005,96,2.101,98,1.363,102,0.958,128,0.571,146,3.032,232,2.586,234,2.068,281,1.467,292,1.363,296,1.277,320,4.262,324,1.029,331,4.819,338,4.116,339,1.943,340,1.467,341,3.876,370,1.948,388,1.277,395,1.596,401,1.277,405,3.64,414,4.343,493,0.828,513,1.203,522,2.586,525,1.203,623,1.203,649,1.081,667,1.596,786,3.762,803,4.819,805,2.375,817,4.819,820,1.363,822,1.467,823,1.467,824,2.375,835,1.138,846,3.259,857,1.467,858,4.406,864,1.596,865,1.596,876,3.782,877,1.596,878,1.596,879,5.817,880,6.194,881,5.357,882,4.64,883,5.145,884,2.867,885,2.867,886,3.614,887,3.614,888,2.867,889,1.467,890,1.77,891,1.77,892,1.596,893,1.77,894,1.77,895,1.77,896,2.867,897,1.77,898,1.77,899,1.77,900,1.77,901,1.77,902,1.467,903,1.77,904,1.77,905,1.77,906,1.77,907,1.77,908,1.77,909,1.77,910,1.77,911,1.77,912,1.77,913,1.596,914,1.77,915,2.867,916,1.77,917,1.77,918,2.867,919,2.867,920,1.77,921,1.77,922,1.77,923,1.77,924,1.77,925,1.77,926,1.77,927,1.596,928,1.77,929,1.596,930,1.77,931,1.77,932,1.77,933,1.77,934,2.867,935,1.77,936,3.259,937,2.867,938,1.77,939,2.867,940,1.77,941,1.77,942,2.867,943,1.77,944,2.867,945,1.77,946,1.77,947,1.77,948,1.77,949,1.77,950,1.77,951,1.77,952,1.77,953,1.77,954,2.867,955,1.77,956,1.77,957,1.77,958,1.77,959,1.77,960,1.77,961,1.77,962,1.77,963,1.77,964,1.77,965,1.77,966,1.77,967,1.77,968,1.77,969,1.77,970,1.77,971,1.77,972,1.77,973,1.77,974,1.77,975,1.77,976,1.77,977,1.77,978,1.77,979,1.77,980,1.77,981,2.867,982,1.77,983,1.77,984,1.77,985,1.77,986,1.467,987,1.77,988,1.77,989,1.77,990,1.77,991,1.77]],["title/injectables/FindAllOrdersForUserProvider.html",[53,0.279,992,2.511]],["body/injectables/FindAllOrdersForUserProvider.html",[3,0.181,4,0.163,5,0.163,12,0.298,13,1.098,14,1.799,16,0.993,18,1.318,23,0.547,25,1.098,26,0.014,27,0.868,28,0.408,29,0.799,35,1.106,37,0.826,38,1.75,49,0.881,51,0.326,53,0.435,55,0.572,63,0.181,64,0.038,67,0.993,92,0.858,94,0.01,95,0.01,106,1.522,108,1.23,116,2.952,122,2.758,128,1.367,131,2.154,132,1.699,444,2.882,497,2.727,607,2.645,608,3.265,753,3.825,992,3.915,993,5.4,994,3.85,995,5.429,996,4.241,997,4.873,998,5.429,999,5.429,1000,4.873,1001,4.241,1002,4.873,1003,3.265,1004,4.241,1005,4.241]],["title/injectables/FindAllProductsProvider.html",[53,0.279,1006,2.511]],["body/injectables/FindAllProductsProvider.html",[3,0.115,4,0.103,5,0.103,12,0.189,13,0.8,14,1.412,16,1.296,18,0.96,23,0.474,25,0.951,26,0.014,27,0.752,28,0.354,29,0.692,37,0.77,38,1.275,40,1.724,50,2.688,51,0.318,53,0.317,55,0.362,63,0.115,64,0.024,67,0.926,71,1.987,78,0.864,82,2.681,83,2.681,84,1.933,85,2.681,86,2.418,87,2.681,88,2.681,89,2.681,91,2.681,92,0.8,94,0.008,95,0.008,108,0.777,116,2.588,128,0.864,131,1.362,132,1.074,135,1.275,136,0.928,141,1.306,291,2.221,388,1.933,392,2.415,497,1.724,513,1.821,577,2.221,607,2.29,623,1.821,649,2.415,710,2.064,712,3.045,715,1.724,717,1.933,832,1.724,837,2.064,1005,5.189,1006,2.853,1007,4.679,1008,2.681,1009,4.545,1010,4.239,1011,4.434,1012,3.08,1013,4.545,1014,4.337,1015,3.08,1016,2.681,1017,3.08,1018,3.955,1019,2.418,1020,2.418,1021,1.821,1022,3.08,1023,3.08,1024,4.545,1025,3.08,1026,2.688,1027,2.064,1028,2.221,1029,3.08,1030,2.418,1031,4.545,1032,3.08,1033,3.955,1034,3.955,1035,4.239,1036,4.545,1037,4.545,1038,2.064,1039,4.545,1040,4.545,1041,3.08,1042,3.08,1043,3.08,1044,4.545,1045,4.545,1046,3.08,1047,3.08,1048,3.08,1049,3.08,1050,3.08,1051,3.08,1052,3.08,1053,3.08,1054,3.08,1055,3.08,1056,2.681,1057,3.08,1058,3.08,1059,3.08,1060,3.08,1061,3.08,1062,3.08,1063,3.08,1064,3.567,1065,3.08,1066,5.401,1067,5.401,1068,5.401,1069,2.418,1070,3.08,1071,2.418,1072,3.08,1073,3.08,1074,3.08,1075,2.681,1076,3.955,1077,4.545,1078,3.08,1079,3.08,1080,3.08,1081,3.08,1082,3.742]],["title/injectables/FindOrderByIdProvider.html",[53,0.279,1083,2.511]],["body/injectables/FindOrderByIdProvider.html",[3,0.175,4,0.157,5,0.157,12,0.287,13,1.071,14,1.766,16,0.956,18,1.286,23,0.534,25,1.071,26,0.014,27,0.847,28,0.398,29,0.779,35,1.064,37,0.795,38,1.707,49,0.972,51,0.322,53,0.424,55,0.55,63,0.175,64,0.037,67,0.956,71,1.27,74,1.988,75,1.635,78,1.316,92,0.825,94,0.01,95,0.01,106,1.901,108,1.183,116,2.91,122,2.69,128,1.316,131,2.073,132,1.635,444,2.772,607,3.276,608,3.141,831,2.772,835,2.623,993,5.301,996,4.08,998,5.295,1001,4.08,1003,3.141,1004,4.08,1083,3.819,1084,3.38,1085,5.295,1086,3.68,1087,5.295,1088,5.611,1089,4.688,1090,4.688,1091,4.688]],["title/injectables/FindProductByIdProvider.html",[53,0.279,1092,2.511]],["body/injectables/FindProductByIdProvider.html",[3,0.177,4,0.159,5,0.159,12,0.292,13,1.082,14,1.78,16,0.972,18,1.3,23,0.54,25,1.082,26,0.014,27,0.856,28,0.403,29,0.788,37,0.808,38,1.726,49,0.872,51,0.324,53,0.429,55,0.56,63,0.177,64,0.037,67,0.972,71,1.291,74,2.021,75,1.662,78,1.338,92,0.839,94,0.01,95,0.01,106,1.489,108,1.203,116,3.031,128,1.338,131,2.108,132,1.662,135,1.338,136,2.338,265,2.887,571,3.637,710,3.195,712,4.121,715,2.668,717,2.992,831,2.819,832,2.668,834,3.742,835,2.668,1007,5.344,1084,3.437,1086,3.742,1092,3.861,1093,5.353,1094,5.353,1095,4.149,1096,4.767]],["title/injectables/FindUserByEmailProvider.html",[53,0.279,1097,2.511]],["body/injectables/FindUserByEmailProvider.html",[3,0.166,4,0.149,5,0.149,12,0.273,13,1.037,14,1.725,16,0.91,18,1.245,23,0.517,25,1.037,26,0.014,27,0.821,28,0.386,29,0.755,33,2.499,35,1.824,37,0.999,38,1.654,49,0.845,51,0.316,53,0.411,55,0.524,63,0.166,64,0.035,66,1.346,67,0.91,71,1.209,74,1.893,75,1.557,78,1.253,92,0.786,94,0.01,95,0.01,103,3.743,104,2.061,106,1.395,108,1.127,116,2.968,128,1.253,131,1.974,132,1.557,135,1.253,138,2.641,230,2.156,265,2.797,332,2.641,334,2.641,755,3.505,757,4.626,760,2.803,767,3.505,770,3.505,831,3.485,1097,3.699,1098,5.178,1099,3.886,1100,5.129,1101,4.466,1102,5.129,1103,4.466,1104,5.894,1105,3.505,1106,4.466]],["title/injectables/FindUserByIdProvider.html",[53,0.279,1107,2.511]],["body/injectables/FindUserByIdProvider.html",[3,0.179,4,0.161,5,0.161,12,0.294,13,1.088,14,1.786,16,0.979,18,1.306,23,0.542,25,1.088,26,0.014,27,0.86,28,0.405,29,0.791,35,1.764,37,0.814,38,1.734,49,0.875,51,0.324,53,0.431,55,0.564,63,0.179,64,0.038,67,0.979,71,1.301,74,2.036,75,1.675,78,1.347,92,0.845,94,0.01,95,0.01,106,1.5,108,1.212,116,3.038,122,2.732,128,1.347,131,2.123,132,1.675,135,1.347,138,2.84,755,3.769,757,4.85,760,3.014,767,3.769,770,3.769,831,2.84,835,2.687,1084,3.463,1086,3.769,1095,4.179,1098,5.363,1107,3.879,1108,5.378,1109,5.378,1110,4.802]],["title/injectables/GenerateTokensProvider.html",[53,0.279,348,2.511]],["body/injectables/GenerateTokensProvider.html",[3,0.211,4,0.112,5,0.112,9,0.79,10,3.356,11,3.243,12,0.206,13,0.852,14,1.793,16,1.342,18,1.312,19,2.922,20,6.152,21,5.405,22,5.405,23,0.498,25,1.093,26,0.014,27,0.79,28,0.407,29,0.727,33,2.633,35,1.719,37,1.053,49,0.727,51,0.308,52,2.108,53,0.338,55,0.394,56,2.108,57,2.25,59,2.421,63,0.125,64,0.026,66,2.067,67,0.987,68,4.478,69,2.421,70,2.922,71,0.909,77,5.548,78,1.358,92,0.852,94,0.008,95,0.008,97,2.25,103,1.621,104,1.55,105,2.922,108,0.847,122,2.509,135,1.358,137,1.879,141,2.052,142,2.922,257,3.49,265,2.406,272,4.092,285,4.212,288,4.945,292,3.243,293,4.212,325,3.799,329,3.799,339,2.31,348,3.038,353,2.922,370,2.862,386,3.49,438,3.799,609,2.635,809,2.635,1111,5.405,1112,2.922,1113,6.21,1114,4.84,1115,4.84,1116,3.358,1117,4.84,1118,3.358,1119,4.84,1120,6.583,1121,4.478,1122,3.358,1123,3.358,1124,3.358,1125,3.358,1126,2.922,1127,3.358,1128,2.922,1129,2.635,1130,3.358,1131,3.358,1132,3.358,1133,3.358,1134,3.358,1135,3.358,1136,3.358,1137,3.358,1138,3.358]],["title/injectables/GetCartProvider.html",[53,0.279,117,2.239]],["body/injectables/GetCartProvider.html",[3,0.152,4,0.137,5,0.137,12,0.251,13,0.979,14,1.91,16,1.381,18,1.175,23,0.554,25,1.112,26,0.014,27,0.879,28,0.413,29,0.809,35,0.929,37,0.943,38,1.901,49,0.809,51,0.319,53,0.388,55,0.481,63,0.152,64,0.032,67,0.835,71,1.835,78,1.561,92,0.979,94,0.009,95,0.009,106,1.737,108,1.034,110,3.214,115,4.365,116,2.883,117,3.112,122,2.459,125,3.27,127,3.214,128,1.149,129,2.072,130,2.176,131,1.811,132,1.428,135,1.149,136,1.676,139,3.727,140,3.214,444,4.006,445,5.56,446,2.953,449,2.422,498,2.422,545,4.84,554,4.84,633,2.744,639,2.744,649,2.176,655,4.365,659,3.564,1003,2.744,1139,5.896,1140,5.562,1141,3.564,1142,4.095,1143,5.562,1144,4.095,1145,4.095,1146,3.564,1147,4.095,1148,4.095,1149,4.095,1150,4.095,1151,4.095,1152,4.095]],["title/classes/GetProductsBaseDto.html",[64,0.031,1153,2.885]],["body/classes/GetProductsBaseDto.html",[3,0.16,4,0.144,5,0.144,12,0.264,23,0.607,26,0.014,27,1.004,28,0.453,29,0.985,49,0.886,51,0.311,63,0.214,64,0.051,94,0.01,95,0.01,102,1.674,136,2.235,151,2.324,306,2.412,456,2.888,568,1.754,572,4.262,578,2.081,592,4.83,646,3.83,682,4.524,684,4.343,700,3.108,701,3.108,804,2.888,1014,2.549,1026,3.404,1027,2.888,1028,3.108,1035,5.087,1064,4.518,1069,5.429,1071,5.429,1153,4.673,1154,5.657,1155,3.383,1156,6.481,1157,4.31,1158,4.31,1159,4.31,1160,4.31,1161,4.31,1162,3.751,1163,5.01,1164,3.751,1165,3.751]],["title/classes/GetProductsDto.html",[64,0.031,1014,2.366]],["body/classes/GetProductsDto.html",[3,0.184,4,0.165,5,0.165,9,1.163,26,0.014,27,0.877,49,0.806,51,0.328,63,0.234,64,0.054,94,0.01,95,0.01,136,2.088,306,2.768,456,4.22,568,2.013,572,4.454,578,2.388,592,5.047,646,3.346,682,3.953,684,4.22,700,3.567,701,3.567,804,4.22,1014,3.724,1026,4.097,1027,3.315,1028,3.567,1035,3.882,1064,3.882,1069,4.943,1071,4.943,1153,4.996,1154,3.882,1155,3.882,1162,4.305,1163,6.03,1164,4.305,1165,5.481]],["title/classes/GlobalExceptionFilter.html",[64,0.031,889,2.885]],["body/classes/GlobalExceptionFilter.html",[3,0.114,4,0.062,5,0.062,9,0.437,12,0.114,13,0.539,16,1.468,23,0.499,25,0.947,26,0.014,27,0.992,28,0.372,29,0.689,33,2.814,36,1.099,37,1.102,45,4.128,49,0.938,50,1.099,51,0.175,55,0.218,58,1.245,63,0.114,64,0.015,65,1.626,66,1.911,67,0.795,71,1.76,75,1.36,90,3.377,92,1.001,94,0.005,95,0.005,96,1.548,102,0.89,128,0.521,146,2.93,232,3.549,234,1.921,281,1.34,292,2.05,296,1.166,320,4.126,324,0.94,331,4.101,338,2.401,339,1.841,340,1.34,341,3.446,370,1.809,388,1.166,392,0.987,395,1.458,401,1.166,405,2.674,414,4.35,493,0.756,513,1.099,522,3.549,525,1.099,568,0.756,623,1.099,649,0.987,667,1.458,786,3.811,803,4.952,805,2.206,817,4.285,820,1.245,822,1.34,823,1.34,824,2.206,835,1.04,846,3.925,857,1.34,858,4.222,864,2.401,865,2.401,876,3.606,877,4.664,878,1.458,879,5.172,880,6.136,881,3.936,882,3.062,883,4.95,884,3.395,885,3.936,886,4.682,887,3.395,888,2.663,889,2.206,890,2.663,891,2.663,892,1.458,893,1.617,894,1.617,895,1.617,896,2.663,897,1.617,898,1.617,899,1.617,900,1.617,901,1.617,902,1.34,903,1.617,904,1.617,905,1.617,906,1.617,907,1.617,908,1.617,909,2.663,910,3.395,911,1.617,912,1.617,913,1.458,914,1.617,915,2.663,916,1.617,917,1.617,918,2.663,919,2.663,920,1.617,921,1.617,922,1.617,923,1.617,924,1.617,925,1.617,926,1.617,927,1.458,928,1.617,929,1.458,930,1.617,931,1.617,932,1.617,933,1.617,934,2.663,935,1.617,936,4.222,937,3.936,938,2.663,939,2.663,940,1.617,941,1.617,942,2.663,943,1.617,944,2.663,945,1.617,946,1.617,947,2.663,948,1.617,949,1.617,950,1.617,951,1.617,952,1.617,953,1.617,954,3.936,955,2.663,956,1.617,957,1.617,958,1.617,959,1.617,960,1.617,961,1.617,962,1.617,963,1.617,964,1.617,965,1.617,966,1.617,967,1.617,968,1.617,969,1.617,970,1.617,971,1.617,972,1.617,973,1.617,974,1.617,975,1.617,976,1.617,977,1.617,978,2.663,979,2.663,980,1.617,981,2.663,982,1.617,983,1.617,984,1.617,985,1.617,986,1.34,987,1.617,988,1.617,989,1.617,990,1.617,991,1.617,1082,1.166,1166,3.06,1167,3.06,1168,3.06,1169,3.06,1170,1.858,1171,1.858,1172,1.858,1173,1.858,1174,1.858,1175,1.858,1176,1.858,1177,1.858,1178,1.858]],["title/injectables/HashingProvider.html",[53,0.279,347,2.239]],["body/injectables/HashingProvider.html",[3,0.172,4,0.155,5,0.155,9,1.089,12,0.284,13,1.063,23,0.53,25,1.063,26,0.014,27,0.841,28,0.395,29,0.773,37,1.023,38,1.997,49,1.012,51,0.208,53,0.421,55,0.544,63,0.172,64,0.036,66,2.024,94,0.01,95,0.01,108,1.169,141,2.56,230,3.436,324,3.734,347,3.378,405,4.208,423,5.845,424,5.255,425,4.032,426,6.586,427,6.193,429,5.255,433,5.255,435,5.131,1179,4.032,1180,8.029,1181,4.633,1182,4.633]],["title/entities/Order.html",[493,1.628,607,1.696]],["body/entities/Order.html",[3,0.135,4,0.121,5,0.121,12,0.222,23,0.667,26,0.014,28,0.519,35,1.703,49,0.945,50,2.142,51,0.289,63,0.135,64,0.028,94,0.008,95,0.008,102,1.485,106,1.849,128,1.016,130,1.925,151,2.556,320,3.966,339,2.079,392,3.415,405,3.021,444,3.5,446,4.267,493,1.474,494,2.274,497,3.312,499,4.267,500,3.801,501,4.267,505,3.423,507,2.843,509,4.01,510,3.684,515,4.267,523,3.153,524,2.427,525,4.159,526,4.01,583,5.151,584,5.151,585,5.151,593,4.446,594,4.446,606,4.159,607,2.509,1038,3.423,1183,3.153,1184,4.887,1185,6.121,1186,3.622,1187,3.622,1188,3.622,1189,2.843,1190,5.109,1191,3.622,1192,4.01,1193,3.684,1194,3.622,1195,3.622,1196,5.898,1197,5.045,1198,3.622,1199,4.01,1200,4.01,1201,4.01,1202,3.684,1203,3.622,1204,3.622,1205,5.109,1206,3.622,1207,4.01,1208,3.622,1209,3.622,1210,3.622,1211,3.622]],["title/entities/OrderItem.html",[493,1.628,606,2.366]],["body/entities/OrderItem.html",[3,0.167,4,0.15,5,0.15,12,0.275,23,0.641,26,0.014,28,0.491,49,0.757,51,0.297,63,0.167,64,0.035,94,0.01,95,0.01,102,1.719,106,2.065,128,1.259,136,2.304,151,2.454,339,2.86,448,3.521,449,3.91,493,1.826,494,2.816,496,3.521,505,3.961,507,4.64,509,5.516,510,5.067,524,3.006,525,4.156,526,5.189,606,3.496,607,3.329,608,3.006,646,3.513,1038,3.961,1184,3.235,1199,4.64,1200,4.64,1201,4.64,1202,4.262,1212,6.527,1213,4.486,1214,5.911,1215,4.486,1216,4.486,1217,4.486,1218,4.486,1219,4.486]],["title/controllers/OrdersController.html",[146,1.628,1220,2.885]],["body/controllers/OrdersController.html",[3,0.158,4,0.142,5,0.142,12,0.26,13,1.003,14,2.03,16,0.865,18,0.897,23,0.564,25,1.132,26,0.014,27,0.896,28,0.421,29,0.824,37,1.09,49,1.021,51,0.309,55,0.498,63,0.158,64,0.033,66,1.279,67,0.865,92,1.132,94,0.009,95,0.009,122,3.264,124,1.96,135,1.191,137,2.375,146,1.728,148,1.877,151,2.161,250,2.845,294,3.818,297,4.31,370,3.804,475,3.061,476,3.061,477,3.694,487,4.959,580,4.812,598,5.048,602,3.332,611,3.332,994,3.188,1088,5.396,1220,4.109,1221,3.694,1222,6.432,1223,5.698,1224,4.245,1225,4.245,1226,5.698,1227,4.245,1228,4.245,1229,4.245,1230,4.037,1231,3.694,1232,4.245,1233,4.245,1234,4.245,1235,4.245,1236,4.245,1237,4.245]],["title/modules/OrdersModule.html",[157,1.628,171,2.681]],["body/modules/OrdersModule.html",[3,0.168,4,0.151,5,0.151,26,0.014,51,0.357,55,0.529,63,0.168,64,0.035,94,0.01,95,0.01,130,2.394,132,1.571,148,2.621,157,2.697,159,2.28,160,2.28,161,2.522,162,2.522,163,2.28,164,3.708,165,2.522,170,4.714,171,5.447,174,3.318,175,2.394,176,2.394,178,3.722,188,3.02,595,4.714,606,3.506,607,2.809,608,3.02,992,4.714,994,2.522,1083,4.714,1220,4.778,1230,4.714,1231,3.922,1238,3.922,1239,3.922,1240,4.506,1241,4.506,1242,4.506,1243,3.537,1244,3.922,1245,4.506,1246,4.653,1247,3.249,1248,2.829,1249,4.506]],["title/injectables/OrdersService.html",[53,0.279,1230,2.511]],["body/injectables/OrdersService.html",[3,0.153,4,0.137,5,0.137,12,0.252,13,0.982,14,2.017,16,1.29,18,1.179,23,0.596,25,1.194,26,0.014,27,0.945,28,0.444,29,0.869,37,1.073,49,1.016,51,0.319,53,0.389,55,0.483,63,0.153,64,0.032,67,1.29,78,1.776,92,1.114,94,0.009,95,0.009,108,1.038,122,2.798,124,1.898,141,1.743,370,3.743,411,2.185,580,4.777,595,4.591,598,4.967,602,4.378,607,1.743,611,3.228,992,4.696,994,2.301,995,4.854,999,4.854,1083,4.696,1085,4.854,1087,4.854,1088,5.326,1230,3.501,1244,3.579,1247,2.965,1248,2.581,1250,3.579,1251,4.112,1252,4.112,1253,4.112,1254,4.112,1255,4.112,1256,4.022,1257,4.112,1258,4.112,1259,4.112]],["title/interfaces/Paginated.html",[96,2.024,1021,2.366]],["body/interfaces/Paginated.html",[3,0.185,4,0.166,5,0.166,9,1.169,12,0.304,26,0.014,28,0.513,49,0.966,63,0.185,84,3.12,94,0.01,95,0.01,96,3.196,98,3.331,102,1.837,324,4.08,339,2.974,401,3.965,447,6.359,786,3.331,1021,4.107,1121,5.007,1260,4.326,1261,4.326,1262,6.71,1263,6.359,1264,6.318,1265,6.318,1266,6.318,1267,4.326,1268,4.326,1269,4.326,1270,4.326,1271,4.326,1272,4.326,1273,4.326,1274,4.326]],["title/modules/PaginationModule.html",[157,1.628,1275,2.681]],["body/modules/PaginationModule.html",[3,0.204,4,0.183,5,0.183,26,0.014,51,0.302,55,0.643,63,0.204,64,0.043,94,0.011,95,0.011,157,2.955,159,2.773,160,2.773,161,3.067,162,3.067,163,2.773,164,4.062,165,4.062,174,3.757,175,2.912,176,2.912,1011,5.187,1275,5.361,1276,4.771,1277,4.771,1278,4.771,1279,5.482,1280,5.482]],["title/injectables/PaginationProvider.html",[53,0.279,1011,2.511]],["body/injectables/PaginationProvider.html",[3,0.12,4,0.108,5,0.108,9,0.756,12,0.197,13,0.826,14,1.448,16,0.656,18,1.286,23,0.412,25,0.974,26,0.014,27,0.653,28,0.362,29,0.601,33,1.989,37,0.795,38,1.316,45,4.201,51,0.304,52,2.944,53,0.327,55,0.377,58,2.155,63,0.12,64,0.025,66,1.834,67,0.656,71,1.936,75,1.121,78,1.316,84,2.018,92,0.566,94,0.01,95,0.008,108,0.812,116,2.91,128,0.902,135,0.902,141,2.347,193,2.155,265,2.347,324,2.801,401,2.944,411,1.708,513,3.827,607,1.363,623,3.599,738,5.297,809,2.524,1003,3.143,1011,2.944,1021,2.774,1026,3.599,1028,2.319,1030,3.681,1075,5.297,1076,5.88,1105,3.681,1121,2.319,1256,3.382,1261,5.297,1262,4.819,1263,2.799,1267,2.799,1268,4.819,1269,2.799,1270,5.297,1271,2.799,1272,2.799,1273,2.799,1274,2.799,1281,2.799,1282,3.216,1283,3.216,1284,3.216,1285,3.216,1286,4.69,1287,4.69,1288,3.216,1289,3.216,1290,3.216,1291,3.216,1292,3.216,1293,3.216,1294,6.086,1295,6.086,1296,7.292,1297,6.756,1298,6.086,1299,4.69,1300,4.69,1301,4.69,1302,3.216,1303,3.216,1304,4.69,1305,3.216,1306,3.216,1307,3.216,1308,3.216,1309,3.216,1310,3.216,1311,3.216,1312,3.216,1313,4.69,1314,3.216,1315,3.216,1316,3.216,1317,3.216,1318,3.216]],["title/classes/PaginationQueryDto.html",[64,0.031,1026,2.366]],["body/classes/PaginationQueryDto.html",[3,0.184,4,0.165,5,0.165,9,1.163,12,0.303,23,0.553,26,0.014,28,0.412,29,0.934,51,0.222,63,0.184,64,0.05,94,0.01,95,0.01,102,1.831,151,2.116,327,6.348,339,3.224,392,3.346,444,3.724,456,4.22,513,3.724,568,2.013,578,2.388,592,4.887,623,3.724,649,3.346,1026,3.724,1027,4.643,1030,4.943,1033,6.555,1034,6.555,1082,3.953,1319,4.305,1320,4.946,1321,4.946,1322,4.946,1323,6.298]],["title/entities/Product.html",[136,1.206,493,1.628]],["body/entities/Product.html",[3,0.114,4,0.103,5,0.103,9,1.269,12,0.33,23,0.673,26,0.014,27,0.751,28,0.515,29,0.852,39,3.533,40,4.211,49,0.904,51,0.286,63,0.114,64,0.024,94,0.008,95,0.008,102,1.32,106,1.686,128,0.863,129,3.364,130,2.412,136,1.368,151,2.577,339,2.707,392,3.165,430,3.739,493,1.252,494,1.93,497,3.019,498,3.191,499,3.891,500,3.933,501,3.273,505,3.042,512,3.951,515,3.891,524,2.061,525,4.336,606,2.684,607,2.694,639,3.616,644,3.191,646,2.867,649,3.165,664,4.696,682,3.387,683,3.891,684,4.258,700,2.218,701,2.218,837,3.616,882,3.563,994,3.019,1038,3.042,1184,4.296,1189,3.563,1192,4.235,1193,3.273,1197,3.563,1199,3.563,1200,3.563,1201,3.563,1202,3.273,1207,4.235,1324,2.677,1325,4.54,1326,3.075,1327,5.396,1328,3.951,1329,6.674,1330,3.075,1331,2.677,1332,3.075,1333,3.075,1334,3.951,1335,3.075,1336,3.075,1337,4.54,1338,3.075,1339,3.075,1340,3.563,1341,3.075,1342,4.54,1343,3.075,1344,3.075,1345,3.075,1346,3.075,1347,3.075,1348,2.677,1349,2.677,1350,3.075,1351,3.075,1352,3.075,1353,3.075]],["title/controllers/ProductsController.html",[146,1.628,1354,2.885]],["body/controllers/ProductsController.html",[3,0.141,4,0.126,5,0.126,12,0.232,13,0.927,16,0.771,18,0.799,23,0.575,25,1.153,26,0.014,27,0.912,28,0.429,29,0.839,37,1.11,38,1.838,49,0.913,51,0.349,55,0.444,63,0.141,64,0.03,66,1.14,67,0.771,92,1.153,94,0.009,95,0.009,104,1.746,113,3.873,124,1.746,135,1.061,136,1.14,146,1.539,148,1.672,151,2.201,250,2.534,251,2.374,294,3.528,297,3.528,308,2.374,310,3.114,316,2.968,384,2.727,471,2.727,472,3.291,478,2.374,571,4.072,623,3.114,679,4.216,709,4.133,713,2.968,715,2.116,716,3.528,766,2.534,827,4.133,829,2.968,832,2.116,1010,4.754,1014,3.873,1019,2.968,1020,2.968,1021,2.236,1354,3.797,1355,3.291,1356,4.754,1357,3.782,1358,3.782,1359,3.782,1360,3.782,1361,3.782,1362,3.782,1363,3.782,1364,5.265,1365,3.782,1366,4.592,1367,3.782,1368,3.782,1369,3.291,1370,3.291,1371,2.968,1372,3.782,1373,3.291,1374,3.782,1375,6.058,1376,3.782,1377,3.782,1378,3.782,1379,3.782,1380,3.782,1381,3.782,1382,3.782,1383,3.782,1384,3.782,1385,3.782]],["title/modules/ProductsModule.html",[157,1.628,172,2.511]],["body/modules/ProductsModule.html",[3,0.156,4,0.14,5,0.14,26,0.014,51,0.355,55,0.493,63,0.156,64,0.033,94,0.009,95,0.009,113,4.707,132,1.465,136,1.705,148,2.501,157,2.604,159,2.125,160,2.125,161,2.35,162,2.35,163,2.125,164,3.58,165,3.58,172,5.15,174,3.166,175,2.231,176,2.231,178,3.551,188,3.791,538,3.655,706,4.62,715,2.35,825,4.62,1006,4.62,1092,4.62,1243,3.296,1246,4.44,1248,2.636,1275,4.932,1354,4.613,1369,3.655,1386,3.655,1387,4.2,1388,3.655,1389,3.655,1390,4.62,1391,4.2,1392,4.2,1393,5.568,1394,3.655,1395,4.2,1396,4.2,1397,4.2]],["title/injectables/ProductsService.html",[53,0.279,113,2.366]],["body/injectables/ProductsService.html",[3,0.121,4,0.108,5,0.108,12,0.199,13,0.83,14,2.038,16,1.324,18,0.997,23,0.595,25,1.193,26,0.014,27,0.943,28,0.444,29,0.868,37,1.1,38,2.083,49,0.936,51,0.338,53,0.329,55,0.381,63,0.121,64,0.025,67,1.324,78,1.561,92,1.143,94,0.008,95,0.008,108,0.818,113,2.79,124,1.497,135,1.822,136,1.841,141,2.358,411,2.507,471,2.338,478,2.035,561,4.106,571,4.007,679,3.839,706,4.253,709,3.703,713,3.703,715,1.814,716,3.162,825,4.498,827,3.703,829,3.703,832,1.814,1006,4.39,1010,4.366,1014,3.613,1016,2.821,1018,4.106,1019,2.544,1020,2.544,1021,1.917,1092,4.498,1093,4.106,1094,4.106,1248,2.035,1256,4.011,1356,4.366,1366,4.39,1373,2.821,1390,4.39,1393,4.841,1394,2.821,1398,2.821,1399,3.242,1400,3.242,1401,3.242,1402,3.242,1403,3.242,1404,3.242,1405,2.821,1406,3.242,1407,3.242,1408,3.242,1409,3.242,1410,3.242,1411,3.242]],["title/guards/RolesGuard.html",[0,2.366,200,2.885]],["body/guards/RolesGuard.html",[0,3.203,2,2.841,3,0.147,4,0.132,5,0.132,9,0.927,10,3.203,12,0.241,13,0.953,15,5.232,16,0.803,18,1.308,23,0.475,25,0.953,26,0.014,27,0.862,28,0.355,29,0.694,30,4.252,31,4.184,33,2.297,35,1.513,36,3.203,37,0.918,39,3.542,40,3.031,41,4.714,42,3.63,51,0.3,53,0.378,55,0.462,63,0.147,64,0.043,65,2.094,66,1.632,67,0.803,71,1.677,72,3.429,74,2.297,75,1.889,92,0.953,94,0.009,95,0.009,104,3.662,138,3.203,155,3.429,193,2.64,200,3.906,310,2.33,374,4.714,376,3.429,377,6.438,386,2.841,387,3.429,388,2.473,389,3.429,390,2.841,391,3.429,408,3.429,409,3.429,430,3.4,766,2.64,835,2.205,927,3.093,1129,3.093,1412,3.429,1413,3.94,1414,3.94,1415,5.417,1416,5.417,1417,5.417,1418,4.714,1419,5.417,1420,3.093,1421,3.94,1422,3.94,1423,3.94,1424,5.417,1425,3.94,1426,3.94,1427,3.94,1428,5.417,1429,3.94,1430,3.94]],["title/classes/SeedProducts1759619432047.html",[64,0.031,1431,3.14]],["body/classes/SeedProducts1759619432047.html",[3,0.143,4,0.128,5,0.178,9,1.25,12,0.374,13,0.935,14,1.872,23,0.466,25,0.935,26,0.014,27,1.022,28,0.348,29,0.681,37,0.901,38,1.849,51,0.239,63,0.143,64,0.03,65,2.824,71,1.038,78,1.849,94,0.009,95,0.009,106,1.197,128,1.491,136,1.155,145,3.336,265,3.036,324,2.689,392,2.037,411,2.824,493,1.56,510,2.764,513,2.267,568,1.56,613,6.614,633,4.798,644,3.143,646,2.824,649,2.037,682,3.83,683,3.832,773,4.789,832,3.687,861,3.336,902,2.764,986,4.99,1202,2.764,1334,3.336,1340,4.172,1431,4.172,1432,5.31,1433,3.336,1434,6.101,1435,5.315,1436,4.626,1437,5.315,1438,3.833,1439,5.315,1440,3.833,1441,4.172,1442,6.101,1443,3.336,1444,3.833,1445,3.833,1446,3.833,1447,3.833,1448,6.101,1449,3.833,1450,3.833,1451,3.833,1452,3.833,1453,3.833,1454,3.833,1455,3.833,1456,3.833,1457,3.833,1458,3.833,1459,5.315,1460,3.833,1461,3.833,1462,3.336,1463,3.833,1464,3.833,1465,3.336,1466,3.336,1467,3.009,1468,3.009,1469,3.833,1470,3.833,1471,3.833,1472,3.833,1473,3.833,1474,3.833,1475,3.833,1476,3.833,1477,3.833,1478,3.833,1479,3.833,1480,5.315,1481,5.315,1482,3.833,1483,3.833,1484,3.833,1485,3.336,1486,3.833]],["title/classes/SignInDto.html",[64,0.031,268,2.511]],["body/classes/SignInDto.html",[3,0.183,4,0.164,5,0.164,9,1.623,12,0.301,23,0.55,26,0.014,28,0.41,35,1.651,49,0.931,51,0.282,63,0.183,64,0.049,94,0.01,95,0.01,102,1.822,103,3.771,151,2.106,230,3.771,257,4.519,268,3.934,306,2.747,322,4.874,336,3.853,456,4.2,568,1.998,572,3.706,578,2.37,591,4.978,724,5.455,743,6.009,744,5.455,1487,6.009,1488,4.273,1489,4.909,1490,4.909,1491,6.268,1492,4.909,1493,4.909,1494,4.909]],["title/injectables/SignInProvider.html",[53,0.279,349,2.511]],["body/injectables/SignInProvider.html",[3,0.136,4,0.122,5,0.122,9,0.861,10,3.521,11,3.45,12,0.224,13,0.906,14,1.557,16,1.214,18,1.365,23,0.452,25,0.906,26,0.014,27,0.717,28,0.337,29,0.659,33,2.183,35,1.545,37,0.873,38,1.445,40,2.049,51,0.317,52,2.299,53,0.359,54,2.454,55,0.43,63,0.136,64,0.029,66,1.946,67,1.214,71,1.394,74,1.553,75,1.277,78,1.671,92,0.645,94,0.009,95,0.009,103,2.486,104,1.691,106,1.144,108,0.924,114,4.141,134,3.188,135,1.671,137,2.049,138,3.82,141,2.738,230,1.768,265,2.524,266,4.041,267,4.041,268,4.43,272,3.713,288,3.713,311,2.875,312,2.875,325,4.041,329,4.041,332,2.166,334,2.166,347,4.141,348,4.054,349,3.232,351,2.641,361,3.188,369,4.481,430,2.299,435,2.641,437,3.188,438,4.673,609,2.875,768,3.188,1126,3.188,1128,3.188,1129,2.875,1495,5.182,1496,3.188,1497,5.149,1498,3.663,1499,6.459,1500,3.663,1501,3.663,1502,3.663,1503,5.954,1504,3.663,1505,3.663,1506,3.663,1507,3.663,1508,3.663,1509,3.663,1510,3.663]],["title/classes/UpdateCartItemDto.html",[64,0.031,463,2.511]],["body/classes/UpdateCartItemDto.html",[3,0.215,4,0.193,5,0.193,12,0.354,23,0.508,26,0.013,28,0.379,51,0.26,63,0.215,64,0.055,94,0.011,95,0.011,102,2.018,125,3.203,151,1.944,339,2.824,449,4.395,463,4.355,568,2.355,570,4.542,574,5.036,576,5.446,577,4.172,578,2.794,579,4.542,1511,6.039,1512,5.787]],["title/injectables/UpdateCartItemProvider.html",[53,0.279,533,2.511]],["body/injectables/UpdateCartItemProvider.html",[3,0.107,4,0.096,5,0.096,12,0.176,13,0.76,14,1.961,16,1.057,18,0.912,23,0.569,25,1.142,26,0.014,27,0.903,28,0.425,29,0.831,35,1.402,37,1.047,38,1.942,49,0.998,51,0.311,53,0.301,54,1.926,55,0.337,63,0.107,64,0.023,67,1.057,71,1.757,74,1.83,75,1.505,76,1.7,78,1.888,90,1.804,92,0.76,94,0.007,95,0.007,106,2.162,108,0.725,115,3.388,116,2.738,117,3.765,122,3.238,125,3.526,126,2.072,127,2.256,128,0.807,129,3.124,130,1.527,131,1.271,132,1.002,133,2.072,135,1.211,136,1.562,139,2.892,140,2.256,141,1.218,278,2.072,341,1.608,414,1.608,453,4.068,455,3.757,461,2.256,462,5.281,463,4.223,468,2.501,478,1.804,498,2.552,533,2.709,540,2.256,544,3.757,547,3.757,551,3.757,558,3.757,563,2.501,607,1.218,617,2.501,633,2.892,639,3.861,644,1.7,655,2.256,717,1.804,797,2.501,831,1.7,994,1.608,1003,2.892,1141,2.501,1146,3.757,1513,5.855,1514,2.501,1515,4.316,1516,5.183,1517,2.874,1518,2.874,1519,2.874,1520,2.874,1521,2.874,1522,2.874,1523,2.874,1524,2.874,1525,4.316,1526,4.316,1527,2.874,1528,4.316,1529,2.874,1530,2.874,1531,2.874,1532,4.316,1533,2.874,1534,2.874,1535,2.874]],["title/classes/UpdateProductDto.html",[64,0.031,1366,2.511]],["body/classes/UpdateProductDto.html",[3,0.195,4,0.175,5,0.175,12,0.321,23,0.574,26,0.014,28,0.428,29,0.954,51,0.32,63,0.195,64,0.051,94,0.011,95,0.011,102,1.901,151,2.197,306,2.937,411,2.789,430,4.103,498,4.21,500,3.866,568,2.136,578,2.534,592,4.993,633,4.38,679,3.104,681,4.119,716,3.517,804,4.38,837,4.771,1366,4.103,1536,6.196,1537,6.537,1538,5.249,1539,5.249,1540,5.249,1541,5.249,1542,6.537]],["title/injectables/UpdateProductProvider.html",[53,0.279,1390,2.511]],["body/injectables/UpdateProductProvider.html",[3,0.149,4,0.134,5,0.134,9,0.942,12,0.245,13,0.964,14,1.632,16,1.368,18,1.157,23,0.548,25,1.181,26,0.014,27,0.869,28,0.439,29,0.799,37,0.928,38,1.537,49,0.799,51,0.316,53,0.382,55,0.47,63,0.149,64,0.031,67,0.816,71,1.691,74,1.698,75,1.396,78,1.537,92,0.964,94,0.009,95,0.009,106,1.251,108,1.01,116,2.861,128,1.124,131,1.77,132,1.396,135,1.124,136,2.022,265,2.647,396,4.767,478,2.513,498,2.368,571,3.969,644,2.368,646,2.127,708,2.887,710,2.683,711,3.485,712,3.67,714,3.485,715,2.241,716,2.683,717,2.513,831,2.368,832,2.241,833,3.485,834,3.143,835,2.241,836,3.485,837,2.683,1121,5.068,1356,4.899,1366,4.663,1390,3.438,1405,3.485,1543,5.841,1544,6.243,1545,4.004,1546,6.243,1547,4.004,1548,5.477,1549,4.004,1550,5.477,1551,4.004,1552,3.485,1553,5.477,1554,4.004,1555,4.004,1556,4.004,1557,4.004]],["title/entities/User.html",[35,0.908,493,1.628]],["body/entities/User.html",[3,0.129,4,0.116,5,0.116,12,0.353,23,0.661,26,0.014,28,0.515,29,0.806,35,1.122,39,2.626,40,4.264,49,0.964,51,0.3,63,0.129,64,0.039,94,0.008,95,0.008,102,1.437,103,2.785,104,3.366,106,1.802,128,0.97,129,3.504,130,1.837,151,2.53,230,2.785,310,2.045,332,3.411,334,3.411,493,2.012,494,2.17,497,3.228,499,4.159,500,3.722,501,3.564,505,3.312,515,4.159,524,2.317,525,4.096,607,2.936,639,3.866,994,3.228,1105,3.879,1184,4.801,1185,6.346,1189,3.879,1192,5.723,1197,4.94,1207,4.528,1329,6.554,1331,3.009,1340,3.879,1348,3.009,1349,3.009,1558,3.009,1559,4.943,1560,3.458,1561,3.458,1562,7.292,1563,3.458,1564,3.458,1565,3.458,1566,3.458,1567,4.943,1568,3.458,1569,3.458,1570,3.458,1571,3.458,1572,3.458,1573,4.943,1574,3.009,1575,3.458]],["title/controllers/UsersController.html",[146,1.628,1576,2.885]],["body/controllers/UsersController.html",[3,0.108,4,0.097,5,0.097,9,1.671,12,0.178,13,0.767,16,0.594,18,0.615,23,0.256,25,0.513,26,0.014,27,0.405,28,0.474,29,0.373,35,1.822,37,0.983,38,1.628,39,2.316,49,0.865,51,0.313,55,0.342,63,0.108,64,0.023,66,0.878,67,0.594,75,2.273,92,0.513,94,0.007,95,0.007,102,0.847,103,3.263,104,2.012,106,0.91,114,2.923,124,1.344,135,0.817,137,1.63,138,3.43,146,2.126,148,1.287,151,0.979,230,3.493,250,1.951,251,1.828,252,3.421,254,4.547,255,4.547,261,3.794,265,2.215,274,3.794,275,3.794,278,3.143,279,3.794,281,2.1,282,2.535,286,2.535,292,3.501,294,2.921,295,2.535,296,1.828,297,2.921,301,3.794,303,3.794,304,4.547,305,2.535,306,1.63,308,1.828,310,2.578,316,2.286,318,4.547,320,2.921,322,4.162,324,2.205,331,5.01,332,3.673,334,3.673,337,2.286,340,3.143,384,2.1,390,3.143,411,2.316,436,2.535,497,1.63,500,1.722,637,2.286,721,4.46,754,4.101,758,2.286,760,1.828,762,2.286,766,1.951,772,3.794,773,2.286,786,2.921,929,3.421,1082,2.736,1370,2.535,1576,3.143,1577,2.535,1578,4.359,1579,4.359,1580,2.912,1581,6.519,1582,4.359,1583,4.359,1584,4.359,1585,2.912,1586,6.519,1587,4.359,1588,4.359,1589,4.359,1590,5.8,1591,2.912,1592,2.912,1593,4.359,1594,4.359,1595,2.535,1596,2.912,1597,2.912,1598,2.912,1599,4.359,1600,4.359,1601,4.359,1602,2.912,1603,2.912,1604,2.912,1605,2.912,1606,2.912,1607,2.912,1608,2.535,1609,2.912,1610,2.912]],["title/modules/UsersModule.html",[157,1.628,173,2.366]],["body/modules/UsersModule.html",[3,0.169,4,0.151,5,0.151,26,0.014,35,1.507,51,0.354,55,0.531,63,0.169,64,0.036,94,0.01,95,0.01,114,4.505,132,1.579,148,2.629,157,2.703,159,2.29,160,2.29,161,2.533,162,2.533,163,2.29,164,3.716,165,3.716,169,3.733,173,4.787,174,3.328,175,2.405,176,2.405,178,2.841,188,3.034,351,4.288,751,4.72,760,2.841,1097,4.72,1107,4.72,1243,3.553,1246,4.667,1247,3.264,1248,2.841,1576,4.789,1595,3.94,1611,3.94,1612,3.94,1613,3.94,1614,4.527,1615,4.527,1616,4.527,1617,3.94,1618,4.527]],["title/injectables/UsersService.html",[53,0.279,114,2.239]],["body/injectables/UsersService.html",[3,0.142,4,0.127,5,0.127,12,0.233,13,0.93,14,1.984,16,1.239,18,1.117,23,0.576,25,1.156,26,0.014,27,0.914,28,0.43,29,0.841,35,1.744,37,1.113,38,2.004,49,0.915,51,0.321,53,0.369,55,0.446,63,0.142,64,0.03,66,1.146,67,1.239,78,1.705,92,1.069,94,0.009,95,0.009,103,2.552,106,1.188,108,0.96,114,2.958,122,1.682,124,1.756,135,1.705,137,2.958,141,2.576,265,3.217,411,2.809,721,4.599,751,4.484,754,4.769,758,2.985,760,2.387,762,2.985,1097,4.599,1100,4.601,1102,4.601,1107,4.599,1108,4.601,1109,4.601,1247,2.743,1248,2.387,1256,4.735,1617,3.31,1619,3.31,1620,3.804,1621,3.804,1622,3.804,1623,5.287,1624,3.804,1625,3.804,1626,3.804,1627,3.804,1628,3.804]],["title/classes/ValidationException.html",[64,0.031,763,2.681]],["body/classes/ValidationException.html",[3,0.175,4,0.157,5,0.157,9,1.435,18,1.513,23,0.413,25,0.829,26,0.014,27,0.656,28,0.308,29,0.603,45,2.636,49,0.917,51,0.212,55,0.553,63,0.227,64,0.048,66,1.839,76,2.786,94,0.01,95,0.01,234,4.249,291,5.349,296,2.957,341,3.415,414,2.636,568,1.917,678,4.401,763,4.09,764,4.09,801,3.156,802,3.697,803,5.481,804,4.537,805,5.164,806,4.1,808,5.311,810,5.311,811,4.1,812,4.1,813,4.1,814,3.396,815,3.697,816,4.1,817,4.401,818,4.1,819,4.1,820,4.537,821,5.311,822,3.396,823,3.396,824,3.396,1629,4.71]],["title/coverage.html",[1630,4.296]],["body/coverage.html",[0,2.844,1,1.705,5,0.085,6,2.215,7,1.835,8,2.215,26,0.014,28,0.167,33,1.079,35,1.228,53,0.555,61,1.997,64,0.059,75,0.887,94,0.007,95,0.007,96,2.738,97,1.705,99,2.215,100,2.215,107,1.597,109,2.215,110,3.088,113,1.505,114,1.424,117,1.424,120,1.597,125,2.498,129,1.287,136,1.449,146,2.517,147,1.835,149,2.215,153,1.597,163,1.287,177,1.997,194,1.835,196,1.997,198,1.835,200,1.835,211,1.997,244,2.215,248,1.835,249,2.215,251,1.597,268,1.597,298,1.597,347,1.424,348,1.597,349,1.597,356,1.835,365,2.215,372,2.215,385,1.997,421,2.215,443,2.215,450,1.835,451,2.215,463,1.597,473,1.505,475,1.835,476,1.835,493,2.381,495,1.997,496,3.088,533,1.597,543,2.215,569,2.215,570,3.088,580,1.597,581,2.215,582,2.215,595,1.597,596,2.215,597,2.215,606,1.505,607,1.668,649,4.315,679,1.505,680,2.215,681,3.088,706,1.597,707,2.215,708,3.468,721,1.597,722,2.215,723,2.215,751,1.597,752,2.215,753,3.088,763,1.705,764,2.636,784,2.215,785,2.215,801,1.705,802,3.088,825,1.597,826,2.215,839,1.997,840,2.215,841,2.215,842,2.215,876,1.835,877,3.088,878,3.088,889,1.835,986,1.835,992,1.597,993,3.088,994,1.424,1006,1.597,1007,3.088,1008,2.215,1011,1.597,1014,1.505,1021,1.505,1026,1.505,1027,1.705,1083,1.597,1084,3.468,1092,1.597,1097,1.597,1098,3.088,1099,2.215,1107,1.597,1111,2.215,1112,2.215,1139,2.215,1153,1.835,1154,3.088,1155,3.088,1179,2.215,1183,2.215,1193,5.753,1212,2.215,1220,1.835,1221,2.215,1230,1.597,1250,2.215,1260,2.215,1281,2.215,1319,2.215,1324,3.424,1354,1.835,1355,2.215,1366,1.597,1371,1.997,1390,1.597,1398,2.215,1412,2.215,1420,1.997,1431,1.997,1432,2.215,1433,2.215,1441,1.997,1487,2.215,1488,2.215,1495,2.215,1496,2.215,1511,2.215,1513,2.215,1514,2.215,1536,2.215,1543,2.215,1558,2.215,1576,1.835,1577,2.215,1619,2.215,1630,1.997,1631,2.215,1632,2.545,1633,2.545,1634,4.809,1635,6.662,1636,6.662,1637,5.411,1638,3.424,1639,2.215,1640,2.215,1641,2.215,1642,2.215,1643,6.837,1644,5.411,1645,2.545,1646,3.934,1647,3.934,1648,6.449,1649,2.545,1650,7.218,1651,6.185,1652,2.545,1653,4.809,1654,2.545,1655,2.545,1656,2.215,1657,3.934,1658,2.215,1659,2.545,1660,2.545,1661,2.215,1662,2.215,1663,2.215,1664,2.545,1665,2.215,1666,2.545,1667,2.545]],["title/dependencies.html",[160,2.436,1668,2.902]],["body/dependencies.html",[26,0.014,55,0.647,56,3.46,57,3.694,58,3.694,64,0.053,94,0.011,95,0.011,128,1.547,132,1.922,160,2.789,193,3.694,306,3.084,383,3.974,401,3.46,422,4.797,578,2.661,1574,4.797,1669,5.512,1670,5.512,1671,7.277,1672,5.512,1673,6.738,1674,5.512,1675,5.512,1676,5.512,1677,5.512,1678,5.512,1679,5.512,1680,5.512,1681,5.512,1682,5.512,1683,5.512,1684,5.512,1685,5.512,1686,5.512,1687,5.512,1688,5.512]],["title/miscellaneous/enumerations.html",[1689,2.093,1690,4.191]],["body/miscellaneous/enumerations.html",[12,0.312,26,0.014,35,1.457,94,0.011,95,0.011,104,2.964,308,4.03,384,3.677,684,4.302,766,3.417,1082,5.18,1196,5.588,1689,3.201,1690,4.438,1691,5.1,1692,7.375,1693,5.1,1694,6.42,1695,5.1,1696,6.42,1697,5.1,1698,5.1,1699,5.1,1700,5.1,1701,6.42,1702,6.42,1703,6.42,1704,6.42,1705,6.42,1706,5.1,1707,5.588,1708,5.588,1709,5.588,1710,5.588,1711,5.588,1712,5.588,1713,5.1,1714,4.438,1715,6.42]],["title/miscellaneous/functions.html",[1689,2.093,1716,4.191]],["body/miscellaneous/functions.html",[12,0.39,26,0.012,94,0.012,95,0.012,163,3.912,1656,5.539,1689,3.995,1716,5.539,1717,6.364]],["title/index.html",[12,0.204,936,2.617,1718,3.334]],["body/index.html",[4,0.141,9,0.99,26,0.013,86,3.303,94,0.009,95,0.009,116,1.713,176,3.64,237,3.663,322,4.292,386,3.035,415,3.663,638,3.663,814,4.085,902,3.035,913,3.303,1056,3.663,1462,6.55,1608,5.574,1630,3.303,1631,3.663,1719,4.209,1720,4.209,1721,6.404,1722,4.209,1723,4.209,1724,4.209,1725,4.209,1726,4.209,1727,6.404,1728,4.209,1729,6.851,1730,4.209,1731,7.526,1732,4.209,1733,4.209,1734,4.209,1735,4.209,1736,5.665,1737,4.209,1738,4.209,1739,6.404,1740,4.209,1741,5.665,1742,4.209,1743,4.209,1744,4.209,1745,6.851,1746,4.209,1747,4.209,1748,4.209,1749,4.209,1750,4.209,1751,6.851,1752,5.665,1753,4.209,1754,6.404,1755,4.209,1756,5.963,1757,4.209,1758,4.209,1759,4.209,1760,4.209,1761,4.209,1762,4.209,1763,6.404,1764,4.209,1765,4.209,1766,4.209,1767,5.665,1768,4.209,1769,4.209,1770,4.209,1771,4.209,1772,4.209,1773,4.209,1774,4.209,1775,5.665,1776,4.209,1777,4.209,1778,4.209,1779,4.209,1780,4.209,1781,5.665,1782,4.209,1783,4.209,1784,3.663,1785,5.665,1786,5.665,1787,4.209,1788,4.209,1789,4.209,1790,4.209,1791,4.209,1792,4.209,1793,4.209,1794,4.209,1795,4.209,1796,4.209,1797,3.663,1798,4.209,1799,4.209,1800,4.209,1801,4.209,1802,4.209,1803,4.209,1804,3.663]],["title/modules.html",[159,2.769]],["body/modules.html",[26,0.012,94,0.012,95,0.012,158,4.209,159,2.953,169,3.664,170,3.664,171,3.912,172,3.664,173,3.452,1275,3.912,1756,7.053,1805,8.104,1806,8.104,1807,8.104]],["title/overview.html",[1808,4.764]],["body/overview.html",[2,2.484,26,0.014,94,0.008,95,0.008,98,2.309,107,3.614,108,0.87,113,4.212,114,3.986,117,3.222,136,1.735,148,1.523,153,3.614,157,1.402,158,5.637,159,1.743,160,1.743,161,1.928,162,1.928,163,1.743,164,1.928,165,1.928,166,2.999,167,2.999,168,2.999,169,4.723,170,5.037,171,5.2,172,5.037,173,4.589,174,2.759,175,1.831,176,1.831,298,3.614,344,2.999,345,2.999,346,2.999,347,3.517,348,3.614,349,3.614,473,4.212,494,2.163,529,2.999,530,2.999,531,2.999,532,2.999,533,3.614,568,1.402,595,3.614,706,3.614,751,3.614,825,3.614,992,3.614,1006,3.614,1011,4.471,1083,3.614,1092,3.614,1097,3.614,1107,3.614,1230,3.614,1238,2.999,1239,2.999,1275,4.636,1276,2.999,1277,2.999,1278,2.999,1386,2.999,1388,2.999,1389,2.999,1390,3.614,1465,2.999,1466,2.999,1467,2.704,1468,2.704,1611,2.999,1612,2.999,1613,2.999,1808,2.999,1809,3.445,1810,3.445,1811,2.999]],["title/properties.html",[102,1.4,1668,2.902]],["body/properties.html",[9,1.482,26,0.013,94,0.012,95,0.012,102,1.833,1797,5.486,1804,5.486,1812,6.303,1813,6.303,1814,6.303]],["title/miscellaneous/variables.html",[1689,2.093,1815,4.191]],["body/miscellaneous/variables.html",[9,1.796,12,0.083,26,0.014,27,1.063,28,0.273,31,0.852,35,1.111,45,1.313,49,0.397,50,0.802,61,1.841,66,0.409,71,0.635,81,1.181,92,0.239,94,0.004,95,0.004,97,1.572,104,0.626,177,1.065,209,1.181,210,1.181,211,1.841,212,1.181,251,1.945,253,1.065,308,1.472,381,1.065,385,1.841,390,1.692,392,2.751,406,2.042,475,1.692,476,0.978,644,4.515,646,4.057,682,4.793,683,5.506,832,2.74,854,2.042,857,1.692,863,1.181,892,1.065,1038,0.909,1082,3.25,1193,1.692,1328,2.697,1371,3.843,1418,2.042,1420,1.841,1436,2.042,1441,1.841,1443,1.181,1467,1.841,1468,3.583,1485,1.181,1552,1.181,1638,1.181,1639,1.181,1640,2.042,1641,1.181,1642,1.181,1658,2.042,1661,1.181,1662,2.042,1663,2.042,1665,2.697,1689,0.852,1707,4.261,1708,4.717,1709,4.261,1710,4.506,1711,4.506,1712,4.506,1714,4.261,1784,3.973,1811,2.042,1815,1.181,1816,1.357,1817,1.357,1818,2.346,1819,1.357,1820,1.357,1821,1.357,1822,1.357,1823,1.357,1824,2.346,1825,1.357,1826,1.357,1827,1.357,1828,1.357,1829,1.357,1830,1.357,1831,3.099,1832,1.357,1833,1.357,1834,1.357,1835,6.96,1836,1.357,1837,5.42,1838,2.346,1839,1.357,1840,2.346,1841,1.357,1842,1.357,1843,2.346,1844,2.346,1845,1.357,1846,7.636,1847,1.357,1848,1.357,1849,4.896,1850,6.257,1851,2.346,1852,1.357,1853,2.346,1854,3.099,1855,3.099,1856,4.171,1857,2.346,1858,2.346,1859,2.346,1860,2.346,1861,4.171,1862,1.357,1863,1.357,1864,3.099,1865,1.357,1866,3.692,1867,1.357,1868,3.099,1869,2.346,1870,1.357,1871,2.346,1872,3.099,1873,1.357,1874,1.357,1875,2.346,1876,4.171,1877,1.357,1878,1.357,1879,1.357,1880,1.357,1881,3.099,1882,1.357,1883,3.692,1884,2.346,1885,2.346,1886,2.346,1887,2.346,1888,2.346,1889,2.346,1890,4.565,1891,1.357,1892,2.346,1893,1.357,1894,3.099,1895,1.357,1896,1.357,1897,3.692,1898,2.346,1899,1.357,1900,2.346,1901,1.357,1902,4.171,1903,2.346,1904,2.346,1905,3.099,1906,3.099,1907,2.346,1908,2.346,1909,2.346,1910,2.346,1911,3.692,1912,2.346,1913,2.346,1914,1.357,1915,1.357,1916,3.692,1917,2.346,1918,2.346,1919,2.346,1920,1.357,1921,1.357,1922,1.357,1923,1.357,1924,2.346,1925,1.357,1926,1.357,1927,2.346,1928,1.357,1929,2.346,1930,3.099,1931,2.346,1932,3.692,1933,1.357,1934,1.357,1935,1.357,1936,3.692,1937,1.357,1938,1.357,1939,1.357,1940,1.357,1941,1.357,1942,2.346,1943,1.357,1944,1.357,1945,4.565,1946,4.565,1947,2.346,1948,2.346,1949,1.357,1950,1.357,1951,1.357,1952,1.357,1953,1.357,1954,1.357,1955,2.346,1956,1.357,1957,2.346,1958,1.357,1959,2.346,1960,1.357,1961,2.346,1962,1.357,1963,1.357,1964,2.346,1965,1.357,1966,1.357,1967,1.357,1968,1.357,1969,1.357,1970,1.357,1971,1.357,1972,1.357,1973,2.346,1974,2.346,1975,2.346,1976,3.692,1977,1.357,1978,2.346,1979,1.357,1980,1.357,1981,1.357,1982,2.346,1983,2.346,1984,1.357,1985,1.357,1986,1.357,1987,1.357,1988,1.357,1989,2.346,1990,3.099,1991,1.357,1992,1.357,1993,1.357,1994,3.099,1995,1.357,1996,1.357,1997,1.357,1998,2.346,1999,3.692,2000,1.357,2001,1.357,2002,1.357,2003,2.346,2004,2.346,2005,1.357,2006,1.357,2007,1.357,2008,1.357,2009,2.346,2010,2.346,2011,1.357,2012,1.357,2013,1.357,2014,2.346,2015,2.346,2016,1.357,2017,1.357,2018,1.357,2019,1.357,2020,1.357,2021,1.357,2022,1.357,2023,1.357,2024,1.357,2025,1.357,2026,1.357,2027,1.357,2028,1.357,2029,2.346,2030,1.357,2031,1.357,2032,2.346,2033,1.357,2034,1.357,2035,1.357,2036,1.357,2037,1.357,2038,1.357,2039,1.357,2040,1.357,2041,1.357,2042,1.357,2043,2.346,2044,1.357,2045,1.357,2046,1.357,2047,1.357,2048,1.357,2049,1.357,2050,1.357,2051,1.357,2052,1.357,2053,1.357,2054,1.357,2055,3.692,2056,1.357,2057,1.357,2058,1.357,2059,2.346,2060,2.346,2061,2.346,2062,2.346,2063,1.357,2064,1.357,2065,1.357,2066,1.357,2067,1.357,2068,1.357,2069,1.357,2070,1.357,2071,1.357,2072,1.357,2073,2.346,2074,1.357,2075,1.357,2076,1.357,2077,1.357,2078,1.357,2079,2.346,2080,1.357,2081,1.357,2082,1.357,2083,1.357,2084,1.357,2085,2.346,2086,1.357,2087,1.357,2088,1.357,2089,1.357,2090,1.357,2091,1.357,2092,1.357,2093,1.357,2094,2.346,2095,1.357,2096,2.346,2097,2.346,2098,1.357,2099,3.692,2100,1.357,2101,1.357,2102,3.692,2103,1.357,2104,1.357,2105,1.357,2106,1.357,2107,2.346,2108,2.346,2109,1.357,2110,1.357,2111,1.357,2112,1.357,2113,1.357,2114,1.357,2115,1.357,2116,1.357,2117,1.357,2118,2.346,2119,1.357,2120,1.357,2121,1.357,2122,1.357,2123,2.346,2124,1.357,2125,1.357,2126,1.357,2127,1.357,2128,1.357,2129,1.357,2130,2.346,2131,1.357,2132,1.357,2133,1.357,2134,1.357,2135,1.357,2136,1.357,2137,1.357,2138,1.357,2139,1.357,2140,1.357,2141,1.357,2142,1.357,2143,1.357,2144,2.346,2145,1.357,2146,1.357,2147,1.357,2148,1.357,2149,1.357]],["title/routes.html",[2150,4.764]],["body/routes.html",[26,0.012,94,0.012,95,0.012,2150,5.667]]],"invertedIndex":[["",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["0",{"_index":649,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1813,"title":{},"body":{"properties.html":{}}}],["0.14.2",{"_index":1678,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1686,"title":{},"body":{"dependencies.html":{}}}],["0.3.27",{"_index":1688,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1677,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1648,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1660,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1634,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1650,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1651,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1657,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1649,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1653,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1652,"title":{},"body":{"coverage.html":{}}}],["01798e348b17?w=400&h=400&fit=crop",{"_index":2031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0cb981a83e2e?w=400&h=400&fit=crop",{"_index":1908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":513,"title":{},"body":{"entities/CartItem.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllProductsProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/SeedProducts1759619432047.html":{}}}],["1.0.0",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DataResponseInterceptor.html":{}}}],["1.1.26",{"_index":1670,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1636,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1647,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":1666,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1038,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"miscellaneous/variables.html":{}}}],["10.0",{"_index":1913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10.0.0",{"_index":1671,"title":{},"body":{"dependencies.html":{}}}],["10.5",{"_index":2143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["100",{"_index":1193,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["11.0",{"_index":2014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11.0.0",{"_index":1673,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":1675,"title":{},"body":{"dependencies.html":{}}}],["11/11",{"_index":1655,"title":{},"body":{"coverage.html":{}}}],["11502861dcfa?w=400&h=400&fit=crop",{"_index":1848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12.0",{"_index":1845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12.5",{"_index":2081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12oz",{"_index":2011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["13.0",{"_index":2058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["14.0",{"_index":2005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["14.5",{"_index":2104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1452251889946",{"_index":2135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1464226184884",{"_index":2111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1486427944299",{"_index":2076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1495474472287",{"_index":2070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["15",{"_index":1811,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["15.0",{"_index":1923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1514228742587",{"_index":2006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1514432324607",{"_index":1991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1517487881594",{"_index":2016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1528821128474",{"_index":1980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1547928576",{"_index":2105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1556909212",{"_index":1859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1556910103",{"_index":2082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1556911220",{"_index":2096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1563453392212",{"_index":2025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1577705998148",{"_index":2148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1578916171728",{"_index":1884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1583947215259",{"_index":2049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1584862728452",{"_index":1934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1584990347449",{"_index":1895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1585421514738",{"_index":2030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1586444248902",{"_index":2059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1590736969955",{"_index":1925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1591086509456",{"_index":1962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1591361443450",{"_index":1914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1593618998160",{"_index":2090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1594756202469",{"_index":2087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1599751449307",{"_index":1873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["16.0",{"_index":1998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1600334089648",{"_index":2053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1600334129128",{"_index":2040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1602143407151",{"_index":1973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1604335399105",{"_index":2125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1606923829579",{"_index":1907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1609840114035",{"_index":1952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1610701596007",{"_index":1847,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1620799140408",{"_index":1943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["17.0",{"_index":2122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["17.2.3",{"_index":1680,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":2134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["18.0",{"_index":1933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["18.0.1",{"_index":1682,"title":{},"body":{"dependencies.html":{}}}],["19.0",{"_index":2086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1].charat(0).touppercase()}${pathsegments[pathsegments.length",{"_index":951,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["1].slice(1",{"_index":952,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["1c02745aae4d?w=400&h=400&fit=crop",{"_index":2083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1fc0b1e4e841?w=400&h=400&fit=crop",{"_index":1874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":1202,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{}}}],["2/2",{"_index":1637,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1665,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["20.0",{"_index":1972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["200",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{}}}],["201",{"_index":1589,"title":{},"body":{"controllers/UsersController.html":{}}}],["20oz",{"_index":1966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["21.0",{"_index":2129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["22.0",{"_index":1951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["24",{"_index":1970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["24.0",{"_index":2133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["25",{"_index":1924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["255",{"_index":1337,"title":{},"body":{"entities/Product.html":{}}}],["27",{"_index":1810,"title":{},"body":{"overview.html":{}}}],["2750a74f824d?w=400&h=400&fit=crop",{"_index":1935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2787fef5ebf7?w=400&h=400&fit=crop",{"_index":2017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["27f963b062bf?w=400&h=400&fit=crop",{"_index":1981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["28.0",{"_index":2089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2f64eddc13df?w=400&h=400&fit=crop",{"_index":2060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":1465,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"overview.html":{}}}],["3/3",{"_index":1643,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":1659,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":854,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["326f5e854473?w=400&h=400&fit=crop",{"_index":2026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["32oz",{"_index":1995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["33",{"_index":1646,"title":{},"body":{"coverage.html":{}}}],["35",{"_index":1906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["38e31be8751f?w=400&h=400&fit=crop",{"_index":2050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["39d4a3b91a7d?w=400&h=400&fit=crop",{"_index":1896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3c981769e3ad?w=400&h=400&fit=crop",{"_index":1953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":1466,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"overview.html":{}}}],["4.0",{"_index":1979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.2",{"_index":1672,"title":{},"body":{"dependencies.html":{}}}],["4.5",{"_index":2028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4/4",{"_index":1644,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":1664,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":1883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["400",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/UsersController.html":{}}}],["401",{"_index":958,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["403",{"_index":960,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["404",{"_index":962,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["409",{"_index":964,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["422",{"_index":966,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["429",{"_index":967,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["45",{"_index":1942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["450°f",{"_index":2075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["46686eac8d58?w=400&h=400&fit=crop",{"_index":1885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4d71bcdd2085?w=400&h=400&fit=crop",{"_index":2071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4e566b60f93f?w=400&h=400&fit=crop",{"_index":1963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":1467,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["5.0",{"_index":1871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5.5",{"_index":2023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5/5",{"_index":1645,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1328,"title":{},"body":{"entities/Product.html":{},"miscellaneous/variables.html":{}}}],["500",{"_index":969,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["502",{"_index":970,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["503",{"_index":972,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["504",{"_index":974,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["55",{"_index":1894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":1468,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["6.0",{"_index":1961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6.0.0",{"_index":1676,"title":{},"body":{"dependencies.html":{}}}],["6.5",{"_index":1882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["60",{"_index":1658,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["65",{"_index":2015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["685c5582fd35?w=400&h=400&fit=crop",{"_index":2041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6b1558fcca3d?w=400&h=400&fit=crop",{"_index":2007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6da4f3963bc8?w=400&h=400&fit=crop",{"_index":2149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7",{"_index":1809,"title":{},"body":{"overview.html":{}}}],["7.0",{"_index":1990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7.5",{"_index":1893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7.8.1",{"_index":1687,"title":{},"body":{"dependencies.html":{}}}],["70",{"_index":2029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7111542de6e8?w=400&h=400&fit=crop",{"_index":1974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["71cc94901144?w=400&h=400&fit=crop",{"_index":1926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["75",{"_index":1872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8.0",{"_index":1858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8.16.3",{"_index":1684,"title":{},"body":{"dependencies.html":{}}}],["8.5",{"_index":2110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8/8",{"_index":1654,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1663,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["85",{"_index":2048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8ff5ea7f27f3?w=400&h=400&fit=crop",{"_index":2136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9.0",{"_index":1905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9.5",{"_index":1941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["90",{"_index":2024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["96",{"_index":1562,"title":{},"body":{"entities/User.html":{}}}],["9ff9799b2e4e?w=400&h=400&fit=crop",{"_index":2088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_",{"_index":91,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["a09d9b4aefdd?w=400&h=400&fit=crop",{"_index":1992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["a0c585fd81a1?w=400&h=400&fit=crop",{"_index":2126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["a891a97c1d35?w=400&h=400&fit=crop",{"_index":1915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["absorbent",{"_index":2146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abstract",{"_index":1180,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["acacia",{"_index":2100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GenerateTokensProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{}}}],["accesstoken",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["account",{"_index":1581,"title":{},"body":{"controllers/UsersController.html":{}}}],["active",{"_index":1828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["activeuser",{"_index":475,"title":{},"body":{"controllers/CartController.html":{},"controllers/OrdersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["activeuser('sub",{"_index":487,"title":{},"body":{"controllers/CartController.html":{},"controllers/OrdersController.html":{}}}],["activeuserdata",{"_index":97,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["add",{"_index":560,"title":{},"body":{"injectables/CartService.html":{}}}],["address",{"_index":1491,"title":{},"body":{"classes/SignInDto.html":{}}}],["addtocart",{"_index":111,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{}}}],["addtocart(@activeuser('sub",{"_index":483,"title":{},"body":{"controllers/CartController.html":{}}}],["addtocart(userid",{"_index":119,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{}}}],["addtocartprovider",{"_index":107,"title":{"injectables/AddToCartProvider.html":{}},"body":{"injectables/AddToCartProvider.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"coverage.html":{},"overview.html":{}}}],["adjust",{"_index":1472,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["admin",{"_index":1715,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["again",{"_index":860,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["agnes",{"_index":1600,"title":{},"body":{"controllers/UsersController.html":{}}}],["airtight",{"_index":1922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allow",{"_index":1426,"title":{},"body":{"guards/RolesGuard.html":{}}}],["allowedfields",{"_index":1546,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["allowedfields.includes(el",{"_index":1555,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["already",{"_index":772,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{}}}],["alternative",{"_index":1485,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["amazing",{"_index":1791,"title":{},"body":{"index.html":{}}}],["andwhere('ci.deletedat",{"_index":632,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["antibacterial",{"_index":1978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["any).code",{"_index":983,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["any).column",{"_index":988,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["any).constraint",{"_index":985,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["any).table",{"_index":987,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["apibadrequestresponse",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibody",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apiconsumes",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiconsumes('application/json",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":1580,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiproperty",{"_index":743,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["apiproperty({description",{"_index":724,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["apiresponse",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":1596,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiversion",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DataResponseInterceptor.html":{}}}],["app",{"_index":209,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["app.controller",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":154,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":147,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appetizers",{"_index":2120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application",{"_index":1767,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1726,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":158,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":153,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":885,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["array",{"_index":403,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["asc",{"_index":1070,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["assumes",{"_index":1471,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["async",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"injectables/UsersService.html":{}}}],["asynchrousnously",{"_index":362,"title":{},"body":{"modules/AuthModule.html":{}}}],["atleast",{"_index":737,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["audience",{"_index":1133,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["auth",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.none",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["auth(authtype.none)@get",{"_index":1362,"title":{},"body":{"controllers/ProductsController.html":{}}}],["auth.controller",{"_index":352,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/config/jwt.config",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/enums/role",{"_index":1575,"title":{},"body":{"entities/User.html":{}}}],["auth/guards/access",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/authentication/authentication.guard",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/roles/roles.guard",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_type_key",{"_index":385,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":248,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticates",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticating",{"_index":380,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authentication",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authenticationguard",{"_index":198,"title":{"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":410,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authmodule",{"_index":169,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1797,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":298,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":393,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":398,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":373,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":406,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((type",{"_index":412,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["autoloadentities",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"injectables/UsersService.html":{}}}],["b0d9d3028eb2?w=400&h=400&fit=crop",{"_index":2054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backers",{"_index":1792,"title":{},"body":{"index.html":{}}}],["bags",{"_index":1936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["baking",{"_index":1711,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["bamboo",{"_index":1835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base",{"_index":1578,"title":{},"body":{"controllers/UsersController.html":{}}}],["based",{"_index":381,"title":{},"body":{"guards/AuthenticationGuard.html":{},"entities/CartItem.html":{},"miscellaneous/variables.html":{}}}],["baseurl",{"_index":1304,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["bcrypt",{"_index":422,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":442,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt",{"_index":440,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(data",{"_index":441,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":356,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":1698,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["beechwood",{"_index":2064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beeswax",{"_index":1909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["before",{"_index":797,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["between",{"_index":1023,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["between(min",{"_index":1052,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["bff31c812dba?w=400&h=400&fit=crop",{"_index":2097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["billingaddress",{"_index":583,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{}}}],["biodegradable",{"_index":1904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["board",{"_index":1784,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":430,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"entities/Product.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"classes/UpdateProductDto.html":{}}}],["bootstrap",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["borosilicate",{"_index":1919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bottle",{"_index":1994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bottles",{"_index":2052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bowl",{"_index":2099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bpa",{"_index":1887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["break",{"_index":1068,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["breathable",{"_index":1960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bristles",{"_index":1881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["browse",{"_index":1807,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1805,"title":{},"body":{"modules.html":{}}}],["brush",{"_index":1976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer",{"_index":426,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["build",{"_index":1062,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["builder",{"_index":624,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["builderrorresponse",{"_index":910,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["builderrorresponse(exception",{"_index":1171,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["building",{"_index":1722,"title":{},"body":{"index.html":{}}}],["builds",{"_index":909,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["calculatesubtotal",{"_index":1140,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["calculatesubtotal(items",{"_index":1143,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["callhandler",{"_index":792,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["canactivate",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["cancelled",{"_index":1705,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["canisters",{"_index":1947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cannotcreateentityidmaperror",{"_index":888,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["cap",{"_index":1997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cart",{"_index":125,"title":{"interfaces/Cart.html":{}},"body":{"injectables/AddToCartProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"injectables/GetCartProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"coverage.html":{}}}],["cart.controller",{"_index":535,"title":{},"body":{"modules/CartModule.html":{}}}],["cart.provider",{"_index":133,"title":{},"body":{"injectables/AddToCartProvider.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["cart.provider.ts",{"_index":110,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/GetCartProvider.html":{},"coverage.html":{}}}],["cart.provider.ts:12",{"_index":118,"title":{},"body":{"injectables/AddToCartProvider.html":{}}}],["cart.provider.ts:17",{"_index":1145,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["cart.provider.ts:36",{"_index":121,"title":{},"body":{"injectables/AddToCartProvider.html":{}}}],["cart.provider.ts:37",{"_index":1144,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["cart.provider.ts:8",{"_index":1142,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["cart/cart",{"_index":1348,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{}}}],["cart/cart.module",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["cart['items",{"_index":1150,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["cartcontroller",{"_index":450,"title":{"controllers/CartController.html":{}},"body":{"controllers/CartController.html":{},"modules/CartModule.html":{},"coverage.html":{}}}],["cartid",{"_index":462,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["cartitem",{"_index":129,"title":{"entities/CartItem.html":{}},"body":{"injectables/AddToCartProvider.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Product.html":{},"injectables/UpdateCartItemProvider.html":{},"entities/User.html":{},"coverage.html":{}}}],["cartitem.id",{"_index":1529,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["cartitem.product",{"_index":1325,"title":{},"body":{"entities/Product.html":{}}}],["cartitem.quantity",{"_index":1527,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["cartitem.user",{"_index":1559,"title":{},"body":{"entities/User.html":{}}}],["cartitemrepository",{"_index":115,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["cartitems",{"_index":639,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Product.html":{},"injectables/UpdateCartItemProvider.html":{},"entities/User.html":{}}}],["cartitems.length",{"_index":648,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["cartitems.map((item",{"_index":659,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{}}}],["cartitemsraw",{"_index":625,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["cartitemsraw.map((ci",{"_index":640,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["cartmodule",{"_index":170,"title":{"modules/CartModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules.html":{},"overview.html":{}}}],["cartrepository",{"_index":1524,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["cartservice",{"_index":473,"title":{"injectables/CartService.html":{}},"body":{"controllers/CartController.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"coverage.html":{},"overview.html":{}}}],["carved",{"_index":1901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cascade",{"_index":510,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/SeedProducts1759619432047.html":{}}}],["case",{"_index":1066,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["catch",{"_index":90,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateOrderProvider.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["catch(exception",{"_index":891,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["catcherror",{"_index":850,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["catcherror((error",{"_index":856,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["category",{"_index":682,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["category.enum",{"_index":701,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"entities/Product.html":{}}}],["category.enum.ts",{"_index":1696,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cellulose",{"_index":2020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ceramic",{"_index":1999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["certified",{"_index":1865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["channel",{"_index":1758,"title":{},"body":{"index.html":{}}}],["character",{"_index":741,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":736,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":1745,"title":{},"body":{"index.html":{}}}],["checking",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["checkout",{"_index":1531,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["cheese",{"_index":2130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chemicals",{"_index":2047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chopping",{"_index":2094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ci",{"_index":628,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["ci.id",{"_index":641,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["ci.product.id",{"_index":643,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["ci.product.price",{"_index":647,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["ci.product.stock",{"_index":645,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["ci.quantity",{"_index":642,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["class",{"_index":64,"title":{"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseConnectionException.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateProductDto.html":{},"classes/ValidationException.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":568,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseConnectionException.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateProductDto.html":{},"classes/ValidationException.html":{},"overview.html":{}}}],["clay",{"_index":2004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cleanedquery",{"_index":1031,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleanedquery.category",{"_index":1041,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleanedquery.name",{"_index":1053,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleanedquery.name.split",{"_index":1055,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleanedquery.price",{"_index":1044,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleaning",{"_index":1710,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["cleanquery",{"_index":1009,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleanquery(query",{"_index":1013,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["clear",{"_index":1534,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["clearcart",{"_index":544,"title":{},"body":{"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["clearcart(userid",{"_index":551,"title":{},"body":{"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["cleared",{"_index":1535,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["clearusercart",{"_index":452,"title":{},"body":{"controllers/CartController.html":{}}}],["clearusercart(@activeuser('sub",{"_index":480,"title":{},"body":{"controllers/CartController.html":{}}}],["clearusercart(userid",{"_index":458,"title":{},"body":{"controllers/CartController.html":{}}}],["cloths",{"_index":2043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":344,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":346,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":345,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_cartmodule",{"_index":529,"title":{},"body":{"modules/CartModule.html":{},"overview.html":{}}}],["cluster_cartmodule_exports",{"_index":532,"title":{},"body":{"modules/CartModule.html":{},"overview.html":{}}}],["cluster_cartmodule_imports",{"_index":530,"title":{},"body":{"modules/CartModule.html":{},"overview.html":{}}}],["cluster_cartmodule_providers",{"_index":531,"title":{},"body":{"modules/CartModule.html":{},"overview.html":{}}}],["cluster_ordersmodule",{"_index":1238,"title":{},"body":{"modules/OrdersModule.html":{},"overview.html":{}}}],["cluster_ordersmodule_imports",{"_index":1240,"title":{},"body":{"modules/OrdersModule.html":{}}}],["cluster_ordersmodule_providers",{"_index":1239,"title":{},"body":{"modules/OrdersModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":1276,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":1277,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":1278,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_productsmodule",{"_index":1386,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_exports",{"_index":1389,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_imports",{"_index":1387,"title":{},"body":{"modules/ProductsModule.html":{}}}],["cluster_productsmodule_providers",{"_index":1388,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1611,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1612,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1613,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["coasters",{"_index":2144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coated",{"_index":1889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coconut",{"_index":1897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["code",{"_index":883,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["coffee",{"_index":1982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coir",{"_index":2032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["collapsible",{"_index":2008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["column",{"_index":525,"title":{},"body":{"entities/CartItem.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["column({default",{"_index":512,"title":{},"body":{"entities/CartItem.html":{},"entities/Product.html":{}}}],["column({length",{"_index":1327,"title":{},"body":{"entities/Product.html":{}}}],["column({type",{"_index":1184,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["come",{"_index":1748,"title":{},"body":{"index.html":{}}}],["commit",{"_index":669,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["common/interceptors/data",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["common/pagination/interfaces/paginated.interface",{"_index":1373,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["comparepassword",{"_index":423,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepassword(data",{"_index":425,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparing",{"_index":429,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["complete",{"_index":672,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["compodoc/compodoc",{"_index":1669,"title":{},"body":{"dependencies.html":{}}}],["compostable",{"_index":1932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conditions",{"_index":1063,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["config",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthModule.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokensProvider.html":{}}}],["config/app.config",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["config/enviroment.validation",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":353,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{}}}],["configmodule",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":240,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{}}}],["configservice.get('database.autoloadentities",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["confirmed",{"_index":1702,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["conflict",{"_index":1469,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["conflictexception",{"_index":604,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["conflictexception('cart",{"_index":650,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["conflictexception('could",{"_index":671,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["connect",{"_index":619,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["connecting",{"_index":816,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["connection",{"_index":678,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"classes/ValidationException.html":{}}}],["connectionerrorcodes",{"_index":866,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["connectionerrorcodes.some((code",{"_index":874,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["console.log('before",{"_index":796,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["console.log('clearing",{"_index":481,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{}}}],["console.log('controller",{"_index":898,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["console.log('qty",{"_index":490,"title":{},"body":{"controllers/CartController.html":{}}}],["console.log(error",{"_index":617,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["console.log(product",{"_index":1549,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["const",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":1831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constraint",{"_index":984,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["constructor",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{}}}],["constructor(addtocartprovider",{"_index":548,"title":{},"body":{"injectables/CartService.html":{}}}],["constructor(cartitemrepository",{"_index":1141,"title":{},"body":{"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["constructor(configservice",{"_index":789,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["constructor(createorderprovider",{"_index":1251,"title":{},"body":{"injectables/OrdersService.html":{}}}],["constructor(createproductprovider",{"_index":1399,"title":{},"body":{"injectables/ProductsService.html":{}}}],["constructor(createuserprovider",{"_index":1620,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(datasource",{"_index":599,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["constructor(errors",{"_index":821,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["constructor(jwtservice",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["constructor(operation",{"_index":806,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["constructor(orderrepository",{"_index":996,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{}}}],["constructor(private",{"_index":155,"title":{},"body":{"controllers/AppController.html":{},"guards/RolesGuard.html":{}}}],["constructor(productsrepository",{"_index":710,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["constructor(productsservice",{"_index":112,"title":{},"body":{"injectables/AddToCartProvider.html":{}}}],["constructor(reflector",{"_index":376,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["constructor(request",{"_index":1282,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(signinprovider",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(usersrepository",{"_index":755,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{}}}],["constructor(usersservice",{"_index":1498,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["containers",{"_index":1927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["containing",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{}}}],["context",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":409,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":408,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":146,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CartController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CartController.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('cart",{"_index":479,"title":{},"body":{"controllers/CartController.html":{}}}],["controller('orders",{"_index":1232,"title":{},"body":{"controllers/OrdersController.html":{}}}],["controller('products",{"_index":1374,"title":{},"body":{"controllers/ProductsController.html":{}}}],["controller('users",{"_index":1597,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":148,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CartController.html":{},"modules/CartModule.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["controller}::${handler",{"_index":905,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["cookware",{"_index":1870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cooling",{"_index":2078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cork",{"_index":1949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cotton",{"_index":1912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["courses",{"_index":1765,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1630,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":411,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"classes/SeedProducts1759619432047.html":{},"classes/UpdateProductDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createcartitemdto",{"_index":120,"title":{"classes/CreateCartItemDto.html":{}},"body":{"injectables/AddToCartProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"coverage.html":{}}}],["created",{"_index":1590,"title":{},"body":{"controllers/UsersController.html":{}}}],["createdat",{"_index":497,"title":{},"body":{"entities/CartItem.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["createdatecolumn",{"_index":501,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["createdatecolumn()@index",{"_index":1331,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{}}}],["createorder",{"_index":598,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["createorder(userid",{"_index":602,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["createorderdto",{"_index":580,"title":{"classes/CreateOrderDto.html":{}},"body":{"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"coverage.html":{}}}],["createorderprovider",{"_index":595,"title":{"injectables/CreateOrderProvider.html":{}},"body":{"injectables/CreateOrderProvider.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"overview.html":{}}}],["createparamdecorator",{"_index":1823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createproduct",{"_index":709,"title":{},"body":{"injectables/CreateProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["createproduct(@body",{"_index":1376,"title":{},"body":{"controllers/ProductsController.html":{}}}],["createproduct(createproductdto",{"_index":713,"title":{},"body":{"injectables/CreateProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["createproductdto",{"_index":679,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["createproductprovider",{"_index":706,"title":{"injectables/CreateProductProvider.html":{}},"body":{"injectables/CreateProductProvider.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["createquerybuilder(cartitem",{"_index":627,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["creates",{"_index":1593,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser",{"_index":754,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":758,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":721,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":771,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserprovider",{"_index":751,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["creating",{"_index":1623,"title":{},"body":{"injectables/UsersService.html":{}}}],["credentials",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["ctx",{"_index":892,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":895,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":894,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1825,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cup",{"_index":2009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cups",{"_index":2073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":1273,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpage",{"_index":1269,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["custom",{"_index":1827,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cutlery",{"_index":1836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cutting",{"_index":1712,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["d1955d23e34d?w=400&h=400&fit=crop",{"_index":2077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["d5b604d0c90d?w=400&h=400&fit=crop",{"_index":1860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["d6a59a2e2f3e?w=400&h=400&fit=crop",{"_index":2106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dashes",{"_index":1058,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["data",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/SeedProducts1759619432047.html":{},"controllers/UsersController.html":{}}}],["data.interface",{"_index":1124,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["data.interface.ts",{"_index":100,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["database",{"_index":234,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["databaseconfig",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseconnectionexception",{"_index":801,"title":{"classes/DatabaseConnectionException.html":{}},"body":{"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"classes/ValidationException.html":{},"coverage.html":{}}}],["databaseerror",{"_index":922,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["dataresponseinterceptor",{"_index":194,"title":{"injectables/DataResponseInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["datasource",{"_index":600,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["date",{"_index":500,"title":{},"body":{"entities/CartItem.html":{},"injectables/DeleteProductProvider.html":{},"entities/Order.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["date().toisostring",{"_index":933,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["db",{"_index":522,"title":{},"body":{"entities/CartItem.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["decimal",{"_index":1199,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{}}}],["decimal(10,2",{"_index":1454,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["declarations",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decoraror",{"_index":1833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorator",{"_index":1418,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["decorator/auth.decorator",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators",{"_index":151,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/GetProductsBaseDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"classes/SignInDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["decrementquantity",{"_index":453,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["decrementquantity(userid",{"_index":461,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["deductstock",{"_index":1515,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["deductstock(userid",{"_index":1520,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["deep",{"_index":2051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deeper",{"_index":1760,"title":{},"body":{"index.html":{}}}],["default",{"_index":392,"title":{},"body":{"guards/AuthenticationGuard.html":{},"entities/CartItem.html":{},"injectables/FindAllProductsProvider.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":375,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defaultroletype",{"_index":1422,"title":{},"body":{"guards/RolesGuard.html":{}}}],["defined",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{}}}],["delete",{"_index":471,"title":{},"body":{"controllers/CartController.html":{},"entities/CartItem.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["delete(':cartid",{"_index":469,"title":{},"body":{"controllers/CartController.html":{}}}],["delete(':productid",{"_index":1382,"title":{},"body":{"controllers/ProductsController.html":{}}}],["delete('clear",{"_index":459,"title":{},"body":{"controllers/CartController.html":{}}}],["deleted",{"_index":838,"title":{},"body":{"injectables/DeleteProductProvider.html":{}}}],["deletedat",{"_index":498,"title":{},"body":{"entities/CartItem.html":{},"injectables/DeleteProductProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Product.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{}}}],["deletedatecolumn",{"_index":503,"title":{},"body":{"entities/CartItem.html":{}}}],["deleteproduct",{"_index":827,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["deleteproduct(@param('productid",{"_index":1384,"title":{},"body":{"controllers/ProductsController.html":{}}}],["deleteproduct(productid",{"_index":829,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["deleteproductprovider",{"_index":825,"title":{"injectables/DeleteProductProvider.html":{}},"body":{"injectables/DeleteProductProvider.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["delivered",{"_index":1704,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dependencies",{"_index":160,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["depending",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/RolesGuard.html":{}}}],["desc",{"_index":1005,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{}}}],["description",{"_index":9,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"classes/ValidationException.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["details",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/UsersController.html":{}}}],["development",{"_index":1733,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1771,"title":{},"body":{"index.html":{}}}],["diff",{"_index":400,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["different",{"_index":916,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["disable",{"_index":83,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["discord",{"_index":1757,"title":{},"body":{"index.html":{}}}],["dish",{"_index":2033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dishes",{"_index":2142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dive",{"_index":1759,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1631,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":1606,"title":{},"body":{"controllers/UsersController.html":{}}}],["don't",{"_index":667,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["dotenv",{"_index":1679,"title":{},"body":{"dependencies.html":{}}}],["dough",{"_index":2065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["down",{"_index":1435,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["down(queryrunner",{"_index":1437,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["drinks",{"_index":1968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["drinkware",{"_index":1709,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["drop",{"_index":1481,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["dry",{"_index":1920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto",{"_index":456,"title":{},"body":{"controllers/CartController.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SignInDto.html":{}}}],["dtos/create",{"_index":124,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":1019,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["dtos/pagination",{"_index":1288,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["dtos/sign",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["dtos/update",{"_index":478,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["duplicates",{"_index":1461,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["durable",{"_index":1852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dust",{"_index":2045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e2e",{"_index":1742,"title":{},"body":{"index.html":{}}}],["e34014e67546?w=400&h=400&fit=crop",{"_index":2091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eco",{"_index":1876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["econnrefused",{"_index":867,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["econnreset",{"_index":870,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["edc6dcb6d633?w=400&h=400&fit=crop",{"_index":1944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["efficient",{"_index":1723,"title":{},"body":{"index.html":{}}}],["eggs",{"_index":1878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eigt",{"_index":735,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ejim",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{}}}],["ejim'})@isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":729,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["elegant",{"_index":2119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email",{"_index":103,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["email.provider",{"_index":1617,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["email.provider.ts",{"_index":1099,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"coverage.html":{}}}],["email.provider.ts:21",{"_index":1103,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{}}}],["email.provider.ts:7",{"_index":1101,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{}}}],["empty",{"_index":651,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["encrypted",{"_index":427,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["endpoint",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["endpoints",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["engraved",{"_index":2145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enotfound",{"_index":868,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["enterprise",{"_index":1774,"title":{},"body":{"index.html":{}}}],["entities",{"_index":494,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":493,"title":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{}},"body":{"entities/CartItem.html":{},"injectables/CreateOrderProvider.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('cart_items",{"_index":527,"title":{},"body":{"entities/CartItem.html":{}}}],["entity('order_items",{"_index":1219,"title":{},"body":{"entities/OrderItem.html":{}}}],["entity('orders",{"_index":1210,"title":{},"body":{"entities/Order.html":{}}}],["entity('products",{"_index":1351,"title":{},"body":{"entities/Product.html":{}}}],["entitynotfounderror",{"_index":887,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["entityvalidationerror",{"_index":930,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["enum",{"_index":1197,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["enumerations",{"_index":1690,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/auth",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{}}}],["enums/order",{"_index":1208,"title":{},"body":{"entities/Order.html":{}}}],["enums/product",{"_index":700,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"entities/Product.html":{}}}],["enums/role",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{}}}],["env",{"_index":211,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["enviromentvalidation",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":210,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["ergonomic",{"_index":2114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err",{"_index":420,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["err_bad_gateway",{"_index":971,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_bad_request",{"_index":957,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_conflict",{"_index":965,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_db_connection",{"_index":818,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["err_db_query_failed",{"_index":923,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_entity_not_found",{"_index":928,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_entity_validation",{"_index":931,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_forbidden",{"_index":961,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_gateway_timeout",{"_index":975,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_internal",{"_index":915,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_not_found",{"_index":963,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_rate_limit",{"_index":968,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_service_unavailable",{"_index":973,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_unauthorized",{"_index":959,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_unknown",{"_index":932,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_unknown_http",{"_index":977,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_validation",{"_index":823,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["error",{"_index":414,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateOrderProvider.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/ValidationException.html":{}}}],["error.message.tolowercase",{"_index":873,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["errorcode",{"_index":817,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["errorhandlinginterceptor",{"_index":839,"title":{"injectables/ErrorHandlingInterceptor.html":{}},"body":{"injectables/ErrorHandlingInterceptor.html":{},"coverage.html":{}}}],["errormessage",{"_index":872,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["errormessage.includes(code.tolowercase",{"_index":875,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["errorresponse",{"_index":876,"title":{"interfaces/ErrorResponse.html":{}},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["errorresponse.errortype",{"_index":904,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["errors",{"_index":820,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["errortype",{"_index":879,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["eslint",{"_index":82,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["eslint/no",{"_index":87,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["etimedout",{"_index":869,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["events",{"_index":1165,"title":{},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["example",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["examples",{"_index":1587,"title":{},"body":{"controllers/UsersController.html":{}}}],["exception",{"_index":803,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["exception.constructor.name",{"_index":919,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":878,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:115",{"_index":1172,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:175",{"_index":1175,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:193",{"_index":1176,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:209",{"_index":1177,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:232",{"_index":1178,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:70",{"_index":1170,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:77",{"_index":1173,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.getresponse",{"_index":921,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exception.getstatus",{"_index":917,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exception.message",{"_index":918,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exception.stack",{"_index":907,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exceptionfilter",{"_index":884,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exceptions.filter",{"_index":765,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["exceptions.filter.ts",{"_index":802,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{},"coverage.html":{}}}],["exceptions.filter.ts:28",{"_index":1629,"title":{},"body":{"classes/ValidationException.html":{}}}],["exceptions.filter.ts:6",{"_index":807,"title":{},"body":{"classes/DatabaseConnectionException.html":{}}}],["exclude",{"_index":1573,"title":{},"body":{"entities/User.html":{}}}],["excluded",{"_index":1594,"title":{},"body":{"controllers/UsersController.html":{}}}],["execution",{"_index":402,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["executioncontext",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1106,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{}}}],["existinguser",{"_index":769,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["exists",{"_index":773,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/SeedProducts1759619432047.html":{},"controllers/UsersController.html":{}}}],["exists})@post('')@httpcode(httpstatus.created)@auth(authtype.none",{"_index":1591,"title":{},"body":{"controllers/UsersController.html":{}}}],["experience",{"_index":1762,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":1120,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["explicit",{"_index":1446,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["export",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{}}}],["exports",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["expose",{"_index":989,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["express",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["extends",{"_index":804,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/UpdateProductDto.html":{},"classes/ValidationException.html":{}}}],["extract",{"_index":896,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["extracting",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(request",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["fa280b87c399?w=400&h=400&fit=crop",{"_index":2112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fabric",{"_index":1954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["failed",{"_index":822,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["fallback",{"_index":1073,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["false",{"_index":40,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/FindAllProductsProvider.html":{},"entities/Product.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{}}}],["false})@exclude",{"_index":1569,"title":{},"body":{"entities/User.html":{}}}],["favour",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{}}}],["favour'})@isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":727,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["favour233",{"_index":1494,"title":{},"body":{"classes/SignInDto.html":{}}}],["favour233'})@isnotempty()@isstring",{"_index":1492,"title":{},"body":{"classes/SignInDto.html":{}}}],["favour@ejim1",{"_index":748,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["favour@ejim1'})@isstring()@isnotempty()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":731,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["favour@gmail.com",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["favour@gmail.com'})@isemail()@isnotempty",{"_index":1489,"title":{},"body":{"classes/SignInDto.html":{}}}],["favour@gmail.com'})@isemail()@isnotempty()@maxlength(96",{"_index":725,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["few",{"_index":1746,"title":{},"body":{"index.html":{}}}],["fiber",{"_index":1930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fibers",{"_index":2035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["field",{"_index":1824,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fields",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"coverage.html":{}}}],["file.ts",{"_index":1662,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["filter",{"_index":865,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["filteredpayload",{"_index":1550,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["filterobj",{"_index":1544,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["filterobj(obj",{"_index":1545,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["filters",{"_index":1983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finally",{"_index":675,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["finalresponse",{"_index":1313,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["find",{"_index":1256,"title":{},"body":{"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":1287,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["findallorders",{"_index":995,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/OrdersService.html":{}}}],["findallorders(userid",{"_index":999,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/OrdersService.html":{}}}],["findallordersforuserprovider",{"_index":992,"title":{"injectables/FindAllOrdersForUserProvider.html":{}},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"overview.html":{}}}],["findallproducts",{"_index":1010,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["findallproducts(productquery",{"_index":1016,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"injectables/ProductsService.html":{}}}],["findallproducts(productsquery",{"_index":1361,"title":{},"body":{"controllers/ProductsController.html":{}}}],["findallproductsprovider",{"_index":1006,"title":{"injectables/FindAllProductsProvider.html":{}},"body":{"injectables/FindAllProductsProvider.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["finding",{"_index":1104,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{}}}],["findoptionsorder",{"_index":1024,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["findorderbyid",{"_index":1085,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{},"injectables/OrdersService.html":{}}}],["findorderbyid(userid",{"_index":1087,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{},"injectables/OrdersService.html":{}}}],["findorderbyidprovider",{"_index":1083,"title":{"injectables/FindOrderByIdProvider.html":{}},"body":{"injectables/FindOrderByIdProvider.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"overview.html":{}}}],["findproductbyid",{"_index":1093,"title":{},"body":{"injectables/FindProductByIdProvider.html":{},"injectables/ProductsService.html":{}}}],["findproductbyid(productid",{"_index":1094,"title":{},"body":{"injectables/FindProductByIdProvider.html":{},"injectables/ProductsService.html":{}}}],["findproductbyidprovider",{"_index":1092,"title":{"injectables/FindProductByIdProvider.html":{}},"body":{"injectables/FindProductByIdProvider.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["finduserbyemail",{"_index":1100,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["finduserbyemail(email",{"_index":1102,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["finduserbyemailprovider",{"_index":1097,"title":{"injectables/FindUserByEmailProvider.html":{}},"body":{"injectables/FindUserByEmailProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["finduserbyid",{"_index":1108,"title":{},"body":{"injectables/FindUserByIdProvider.html":{},"injectables/UsersService.html":{}}}],["finduserbyid(userid",{"_index":1109,"title":{},"body":{"injectables/FindUserByIdProvider.html":{},"injectables/UsersService.html":{}}}],["finduserbyidprovider",{"_index":1107,"title":{"injectables/FindUserByIdProvider.html":{}},"body":{"injectables/FindUserByIdProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["fire",{"_index":417,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["first",{"_index":1271,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["firstname",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fixed",{"_index":622,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["flat",{"_index":2013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["flipping",{"_index":1891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["flows",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["folds",{"_index":2012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["follow",{"_index":1777,"title":{},"body":{"index.html":{}}}],["food",{"_index":1856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forbiddenexception",{"_index":1419,"title":{},"body":{"guards/RolesGuard.html":{}}}],["forbiddenexception('user",{"_index":1427,"title":{},"body":{"guards/RolesGuard.html":{}}}],["forget",{"_index":668,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["forgot",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{}}}],["fork",{"_index":1839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format",{"_index":637,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/UsersController.html":{}}}],["formatting",{"_index":794,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["forwardref",{"_index":351,"title":{},"body":{"modules/AuthModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":835,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByIdProvider.html":{},"classes/GlobalExceptionFilter.html":{},"guards/RolesGuard.html":{},"injectables/UpdateProductProvider.html":{}}}],["frame",{"_index":2080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["framework",{"_index":1721,"title":{},"body":{"index.html":{}}}],["free",{"_index":1888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["freezer",{"_index":1940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fresh",{"_index":1958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fruits",{"_index":2117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fsc",{"_index":1864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["full",{"_index":902,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/SeedProducts1759619432047.html":{},"index.html":{}}}],["fully",{"_index":1903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["functions",{"_index":1716,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gaurding",{"_index":1834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generate",{"_index":438,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["generatetokenprovider",{"_index":1499,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["generatetokens",{"_index":1114,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokens(user",{"_index":1117,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokensprovider",{"_index":348,"title":{"injectables/GenerateTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["generating",{"_index":1113,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["gentle",{"_index":2084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get(':id",{"_index":1226,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getcart",{"_index":545,"title":{},"body":{"injectables/CartService.html":{},"injectables/GetCartProvider.html":{}}}],["getcart(userid",{"_index":554,"title":{},"body":{"injectables/CartService.html":{},"injectables/GetCartProvider.html":{}}}],["getcartprovider",{"_index":117,"title":{"injectables/GetCartProvider.html":{}},"body":{"injectables/AddToCartProvider.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"coverage.html":{},"overview.html":{}}}],["getcontrollername",{"_index":1166,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["getcontrollername(request",{"_index":938,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["gethandlername",{"_index":1167,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["gethandlername(request",{"_index":947,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["gethello",{"_index":150,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gethttperrorcode",{"_index":1168,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["gethttperrorcode(status",{"_index":955,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["getmany",{"_index":635,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["getorder",{"_index":1222,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getorder(userid",{"_index":1225,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getorders",{"_index":1223,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getorders(@activeuser('sub",{"_index":1234,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getorders(userid",{"_index":1228,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getproductsbasedto",{"_index":1153,"title":{"classes/GetProductsBaseDto.html":{}},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"coverage.html":{}}}],["getproductsdto",{"_index":1014,"title":{"classes/GetProductsDto.html":{}},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["getting",{"_index":936,"title":{"index.html":{}},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["getusercart",{"_index":454,"title":{},"body":{"controllers/CartController.html":{}}}],["getusercart(@activeuser('sub",{"_index":485,"title":{},"body":{"controllers/CartController.html":{}}}],["getusercart(userid",{"_index":466,"title":{},"body":{"controllers/CartController.html":{}}}],["glass",{"_index":1916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["glazed",{"_index":2127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["global",{"_index":864,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["globalexceptionfilter",{"_index":889,"title":{"classes/GlobalExceptionFilter.html":{}},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["gold",{"_index":1984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["goods",{"_index":1921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grade",{"_index":1857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["graph",{"_index":1768,"title":{},"body":{"index.html":{}}}],["grease",{"_index":2038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gripping",{"_index":1892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grow",{"_index":1788,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["guarding",{"_index":1830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{},"overview.html":{}}}],["hand",{"_index":1900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handcrafted",{"_index":1863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handle",{"_index":857,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["handled",{"_index":863,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["handler",{"_index":880,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["handles",{"_index":1443,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["handling",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ErrorHandlingInterceptor.html":{},"controllers/UsersController.html":{}}}],["handling.interceptor.ts",{"_index":842,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"coverage.html":{}}}],["handling.interceptor.ts:24",{"_index":844,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["handling.interceptor.ts:55",{"_index":847,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["handling/error",{"_index":841,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"coverage.html":{}}}],["hands",{"_index":1761,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1749,"title":{},"body":{"index.html":{}}}],["hashed",{"_index":436,"title":{},"body":{"injectables/BcryptProvider.html":{},"controllers/UsersController.html":{}}}],["hashed.'})@apibody({description",{"_index":1585,"title":{},"body":{"controllers/UsersController.html":{}}}],["hashing",{"_index":435,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashing.provider",{"_index":437,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashingprovider",{"_index":347,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":424,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(data",{"_index":433,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hasrole",{"_index":1428,"title":{},"body":{"guards/RolesGuard.html":{}}}],["headers",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["heat",{"_index":1853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hello",{"_index":246,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1772,"title":{},"body":{"index.html":{}}}],["herb",{"_index":2107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["here",{"_index":1795,"title":{},"body":{"index.html":{}}}],["host",{"_index":232,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":893,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["hot",{"_index":2141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hot/cold",{"_index":1969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hours",{"_index":1971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":954,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["httpcode",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["httpcode(204",{"_index":1383,"title":{},"body":{"controllers/ProductsController.html":{}}}],["httpcode(httpstatus.created",{"_index":1609,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpcode(httpstatus.ok",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":805,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["https",{"_index":1463,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["https://images.unsplash.com/photo",{"_index":1846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":1801,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{},"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/UsersController.html":{},"classes/ValidationException.html":{}}}],["httpstatus.bad_request",{"_index":824,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["httpstatus.internal_server_error",{"_index":911,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["httpstatus.not_found",{"_index":925,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["httpstatus.request_timeout",{"_index":819,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["husks",{"_index":2036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["id",{"_index":106,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/Cart.html":{},"entities/CartItem.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id.provider",{"_index":1248,"title":{},"body":{"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["id.provider.ts",{"_index":1084,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByIdProvider.html":{},"coverage.html":{}}}],["id.provider.ts:12",{"_index":1089,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{}}}],["id.provider.ts:16",{"_index":1095,"title":{},"body":{"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByIdProvider.html":{}}}],["id.provider.ts:7",{"_index":1086,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByIdProvider.html":{}}}],["identifier",{"_index":1632,"title":{},"body":{"coverage.html":{}}}],["identity",{"_index":1484,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["idx_category",{"_index":1458,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["idx_name",{"_index":1457,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["ignore",{"_index":1460,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["ilike",{"_index":1025,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["ilike(`%${searchterm",{"_index":1061,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["iloghaluagneskc@gmail.com",{"_index":1601,"title":{},"body":{"controllers/UsersController.html":{}}}],["imageurl",{"_index":683,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["implements",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{}}}],["import",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{}}}],["imports",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["in')@auth(authtype.none)@httpcode(httpstatus.ok)@apioperation({summary",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{}}}],["in(cleanedquery.category.split",{"_index":1043,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["in.dto",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["in.dto.ts",{"_index":1488,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["in.dto.ts:17",{"_index":1490,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.dto.ts:28",{"_index":1493,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.provider",{"_index":359,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["in.provider.ts",{"_index":1496,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["in.provider.ts:17",{"_index":1500,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["in.provider.ts:47",{"_index":1501,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["including",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index(['category",{"_index":1353,"title":{},"body":{"entities/Product.html":{}}}],["index(['name",{"_index":1352,"title":{},"body":{"entities/Product.html":{}}}],["indicates",{"_index":431,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{}}}],["information",{"_index":982,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["inject",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(forwardref",{"_index":768,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(jwtconfig.key",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["inject(request",{"_index":1292,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["injectable",{"_index":53,"title":{"injectables/AddToCartProvider.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/HashingProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"injectables/UsersService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/HashingProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":108,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/HashingProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":135,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"controllers/OrdersController.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["injectrepository",{"_index":131,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["injectrepository(cartitem",{"_index":140,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["injectrepository(order",{"_index":1001,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{}}}],["injectrepository(product",{"_index":717,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["injectrepository(user",{"_index":767,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{}}}],["innerjoinandselect('ci.product",{"_index":629,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["inorder",{"_index":1290,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["insert",{"_index":1459,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["installcompile",{"_index":1732,"title":{},"body":{"index.html":{}}}],["instance",{"_index":418,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["instanceof",{"_index":858,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["insulated",{"_index":1965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["integer",{"_index":1455,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["interact",{"_index":1769,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":788,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["intercept(context",{"_index":791,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["interceptor",{"_index":787,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["interface",{"_index":96,"title":{"interfaces/ActiveUserData.html":{},"interfaces/Cart.html":{},"interfaces/ErrorResponse.html":{},"interfaces/Paginated.html":{}},"body":{"interfaces/ActiveUserData.html":{},"interfaces/Cart.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"interfaces/Paginated.html":{},"coverage.html":{}}}],["interfaces",{"_index":98,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/Cart.html":{},"interfaces/ErrorResponse.html":{},"interfaces/Paginated.html":{},"overview.html":{}}}],["interfaces/active",{"_index":1123,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["interfaces/cart.interface",{"_index":127,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["interfaces/paginated.interface",{"_index":1291,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["internal",{"_index":912,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["internalservererror",{"_index":914,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["intersectiontype",{"_index":1163,"title":{},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["invalid",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/UsersController.html":{}}}],["invaliduser",{"_index":1603,"title":{},"body":{"controllers/UsersController.html":{}}}],["isboolean",{"_index":1542,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["isconnectionerror",{"_index":843,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["isconnectionerror(error",{"_index":845,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["isdeleted",{"_index":837,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{}}}],["isemail",{"_index":744,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isenum",{"_index":697,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isenum(productcategory",{"_index":705,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isenum(productcategory)@isnotempty",{"_index":685,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isglobal",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":1162,"title":{},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["isin(['newest",{"_index":1164,"title":{},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["isint",{"_index":576,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateProductDto.html":{},"classes/UpdateCartItemDto.html":{}}}],["isint()@isnotempty",{"_index":693,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isint()@isnotempty()@min(1",{"_index":695,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isint()@min(1",{"_index":574,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/UpdateCartItemDto.html":{}}}],["isnan(max",{"_index":1050,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["isnan(min",{"_index":1049,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["isnotempty",{"_index":591,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isnotempty()@isstring",{"_index":586,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["isoptional",{"_index":592,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/PaginationQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["isoptional()@isboolean",{"_index":1539,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["isoptional()@ispositive",{"_index":1321,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isoptional()@isstring",{"_index":588,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["isoptional()@isstring()@isin(['newest",{"_index":1160,"title":{},"body":{"classes/GetProductsBaseDto.html":{}}}],["ispasswordequal",{"_index":1503,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["ispositive",{"_index":1323,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":572,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/SignInDto.html":{}}}],["isstring()@isnotempty",{"_index":689,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isstring()@isnotempty()@minlength(5)@maxlength(150",{"_index":691,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isstring()@isnotempty()@minlength(5)@maxlength(350",{"_index":687,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isstring()@isoptional",{"_index":1156,"title":{},"body":{"classes/GetProductsBaseDto.html":{}}}],["issuer",{"_index":1135,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["item",{"_index":139,"title":{},"body":{"injectables/AddToCartProvider.html":{},"entities/CartItem.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["item.dto",{"_index":126,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["item.dto.ts",{"_index":570,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/UpdateCartItemDto.html":{},"coverage.html":{}}}],["item.dto.ts:5",{"_index":573,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["item.dto.ts:6",{"_index":1512,"title":{},"body":{"classes/UpdateCartItemDto.html":{}}}],["item.dto.ts:9",{"_index":575,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["item.entity",{"_index":130,"title":{},"body":{"injectables/AddToCartProvider.html":{},"modules/CartModule.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Order.html":{},"modules/OrdersModule.html":{},"entities/Product.html":{},"injectables/UpdateCartItemProvider.html":{},"entities/User.html":{}}}],["item.entity.ts",{"_index":496,"title":{},"body":{"entities/CartItem.html":{},"entities/OrderItem.html":{},"coverage.html":{}}}],["item.entity.ts:11",{"_index":1218,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:14",{"_index":1216,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:17",{"_index":1215,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:18",{"_index":506,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:20",{"_index":1217,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:21",{"_index":514,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:24",{"_index":518,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:29",{"_index":511,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:32",{"_index":502,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:35",{"_index":516,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:38",{"_index":504,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:8",{"_index":1213,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.id",{"_index":1147,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["item.price",{"_index":654,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["item.product",{"_index":1148,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["item.product.price",{"_index":1151,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["item.product.stock",{"_index":1532,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.productid",{"_index":661,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["item.provider",{"_index":539,"title":{},"body":{"modules/CartModule.html":{},"injectables/CartService.html":{}}}],["item.provider.ts",{"_index":1514,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{},"coverage.html":{}}}],["item.provider.ts:101",{"_index":1518,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.provider.ts:15",{"_index":1517,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.provider.ts:32",{"_index":1519,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.provider.ts:58",{"_index":1522,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.provider.ts:72",{"_index":1523,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.provider.ts:88",{"_index":1521,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.quantity",{"_index":655,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["item.stock",{"_index":652,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["items",{"_index":444,"title":{},"body":{"interfaces/Cart.html":{},"entities/CartItem.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Order.html":{},"classes/PaginationQueryDto.html":{}}}],["items.product",{"_index":1004,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{}}}],["itemsperpage",{"_index":1267,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["jars",{"_index":1917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["job",{"_index":1781,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1783,"title":{},"body":{"index.html":{}}}],["john",{"_index":1605,"title":{},"body":{"controllers/UsersController.html":{}}}],["john.doe@example.com",{"_index":1607,"title":{},"body":{"controllers/UsersController.html":{}}}],["joi",{"_index":1681,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":1056,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"index.html":{}}}],["jsbfiwhvfquobdfj",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{}}}],["jwt",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{}}}],["jwtconfig",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{}}}],["jwtconfiguration",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["jwtmodule",{"_index":205,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":241,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtservice",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["kamil",{"_index":1798,"title":{},"body":{"index.html":{}}}],["keeps",{"_index":1967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kelechi",{"_index":1599,"title":{},"body":{"controllers/UsersController.html":{}}}],["key",{"_index":1451,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["keyof",{"_index":1552,"title":{},"body":{"injectables/UpdateProductProvider.html":{},"miscellaneous/variables.html":{}}}],["keyword",{"_index":391,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["knife",{"_index":1840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["knives",{"_index":2085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ladle",{"_index":1899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":1272,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["lastname",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["later",{"_index":815,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"classes/ValidationException.html":{}}}],["leak",{"_index":1928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["learn",{"_index":1753,"title":{},"body":{"index.html":{}}}],["legend",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":1192,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["letter",{"_index":739,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":1804,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1786,"title":{},"body":{"index.html":{}}}],["lids",{"_index":1918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["limit",{"_index":1033,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/PaginationQueryDto.html":{}}}],["line",{"_index":85,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["linkedin",{"_index":1779,"title":{},"body":{"index.html":{}}}],["links",{"_index":1262,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["literal",{"_index":447,"title":{},"body":{"interfaces/Cart.html":{},"interfaces/Paginated.html":{}}}],["load",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["lock",{"_index":1938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log",{"_index":901,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["logged",{"_index":101,"title":{},"body":{"interfaces/ActiveUserData.html":{},"guards/AuthenticationGuard.html":{}}}],["logger",{"_index":886,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["logger(globalexceptionfilter.name",{"_index":890,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["logging",{"_index":239,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["looking",{"_index":1780,"title":{},"body":{"index.html":{}}}],["loop",{"_index":415,"title":{},"body":{"guards/AuthenticationGuard.html":{},"index.html":{}}}],["made",{"_index":1855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mains",{"_index":2121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["makes",{"_index":399,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["manytoone",{"_index":526,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{}}}],["manytoone(undefined",{"_index":507,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{}}}],["map",{"_index":394,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["map((data",{"_index":799,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["map((p",{"_index":1047,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["mat",{"_index":2055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matches",{"_index":745,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":750,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":95,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["math.ceil(totalitems",{"_index":1310,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["max",{"_index":1045,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["maxlength",{"_index":698,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(150",{"_index":703,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["maxlength(350",{"_index":704,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["maxlength(96",{"_index":747,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["means",{"_index":387,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["measurements",{"_index":2068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meets",{"_index":1416,"title":{},"body":{"guards/RolesGuard.html":{}}}],["mesh",{"_index":1957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/ValidationException.html":{}}}],["meta",{"_index":1263,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["metadata",{"_index":401,"title":{},"body":{"guards/AuthenticationGuard.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["method",{"_index":405,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/CreateOrderDto.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{}}}],["methods",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["method}${pathsegments[pathsegments.length",{"_index":950,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["method}handler",{"_index":953,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["microfiber",{"_index":2042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["microwave",{"_index":1931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migration",{"_index":1447,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["migrationinterface",{"_index":1434,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["min",{"_index":577,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateProductDto.html":{},"injectables/FindAllProductsProvider.html":{},"classes/UpdateCartItemDto.html":{}}}],["min(1",{"_index":579,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateProductDto.html":{},"classes/UpdateCartItemDto.html":{}}}],["minimum",{"_index":734,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":699,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":746,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(5",{"_index":702,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["minlength(8",{"_index":749,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1689,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["misses",{"_index":1074,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["missing",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["mit",{"_index":1785,"title":{},"body":{"index.html":{}}}],["mocked",{"_index":594,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{}}}],["mode",{"_index":1736,"title":{},"body":{"index.html":{}}}],["module",{"_index":157,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":159,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":813,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["more",{"_index":1754,"title":{},"body":{"index.html":{}}}],["most_purchased",{"_index":1071,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["muffin",{"_index":2072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mug",{"_index":2000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mugs",{"_index":2002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["myśliwiec",{"_index":1799,"title":{},"body":{"index.html":{}}}],["name",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"miscellaneous/variables.html":{}}}],["napkins",{"_index":2123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["natural",{"_index":1902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["naturally",{"_index":1977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["need",{"_index":638,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"index.html":{}}}],["needed",{"_index":1473,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["nest",{"_index":1727,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1803,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":795,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["nestjs",{"_index":1751,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokensProvider.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/PaginationProvider.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1674,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/SignInDto.html":{},"classes/UpdateProductDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":132,"title":{},"body":{"injectables/AddToCartProvider.html":{},"modules/AppModule.html":{},"modules/CartModule.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GetCartProvider.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["new",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["newest",{"_index":1064,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["newobj",{"_index":1553,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["newobj[el",{"_index":1556,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["newproduct",{"_index":718,"title":{},"body":{"injectables/CreateProductProvider.html":{}}}],["newurl",{"_index":1307,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${nextpage",{"_index":1317,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${paginationquery.page",{"_index":1316,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${prevpage",{"_index":1318,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${totalpages",{"_index":1315,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=1",{"_index":1314,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":774,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.createdat",{"_index":783,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.email",{"_index":781,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.firstname",{"_index":779,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.id",{"_index":778,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.lastname",{"_index":780,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.role",{"_index":782,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["next",{"_index":84,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllProductsProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["next.handle().pipe",{"_index":798,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["nextpage",{"_index":1311,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":1720,"title":{},"body":{"index.html":{}}}],["non",{"_index":1868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["none",{"_index":1699,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notfoundexception",{"_index":831,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["notfoundexception('item",{"_index":1526,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["notfoundexception('order",{"_index":1091,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{}}}],["notfoundexception('product",{"_index":834,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["notfoundexception(`user",{"_index":1110,"title":{},"body":{"injectables/FindUserByIdProvider.html":{}}}],["nothing",{"_index":1470,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["npm",{"_index":1731,"title":{},"body":{"index.html":{}}}],["null",{"_index":633,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{}}}],["nullable",{"_index":1329,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{}}}],["number",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Cart.html":{},"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ErrorResponse.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"classes/UpdateCartItemDto.html":{}}}],["number(limit",{"_index":1037,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["number(page",{"_index":1040,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["number(subtotal.tofixed(2",{"_index":1152,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["obj",{"_index":1548,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["obj[el",{"_index":1557,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["object",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/UsersController.html":{}}}],["object.entries(query).filter",{"_index":1081,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["object.fromentries",{"_index":1080,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["object.keys(obj).foreach((el",{"_index":1554,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["objectliteral",{"_index":1289,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["observable",{"_index":382,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["offer",{"_index":1782,"title":{},"body":{"index.html":{}}}],["official",{"_index":1763,"title":{},"body":{"index.html":{}}}],["oils",{"_index":2132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oldest",{"_index":1069,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["olive",{"_index":2131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ondelete",{"_index":509,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{}}}],["one",{"_index":738,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/PaginationProvider.html":{}}}],["onetomany",{"_index":1207,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":1189,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["open",{"_index":1787,"title":{},"body":{"index.html":{}}}],["operation",{"_index":808,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["operations",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["optional",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"injectables/CartService.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{}}}],["options",{"_index":1075,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"injectables/PaginationProvider.html":{}}}],["options.order",{"_index":1302,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["options.relations",{"_index":1299,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["options.select",{"_index":1300,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["options.where",{"_index":1301,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["order",{"_index":607,"title":{"entities/Order.html":{}},"body":{"injectables/CreateOrderProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"entities/Product.html":{},"injectables/UpdateCartItemProvider.html":{},"entities/User.html":{},"coverage.html":{}}}],["order.createdat",{"_index":1067,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["order.dto",{"_index":611,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["order.dto.ts",{"_index":582,"title":{},"body":{"classes/CreateOrderDto.html":{},"coverage.html":{}}}],["order.dto.ts:10",{"_index":587,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.dto.ts:15",{"_index":589,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.dto.ts:6",{"_index":590,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.entity",{"_index":608,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"entities/OrderItem.html":{},"modules/OrdersModule.html":{}}}],["order.items",{"_index":1214,"title":{},"body":{"entities/OrderItem.html":{}}}],["order.product",{"_index":1342,"title":{},"body":{"entities/Product.html":{}}}],["order.provider",{"_index":1244,"title":{},"body":{"modules/OrdersModule.html":{},"injectables/OrdersService.html":{}}}],["order.provider.ts",{"_index":597,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"coverage.html":{}}}],["order.provider.ts:16",{"_index":601,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["order.provider.ts:21",{"_index":603,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["order.purchasecount",{"_index":1072,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["order.user",{"_index":1567,"title":{},"body":{"entities/User.html":{}}}],["orderid",{"_index":1088,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["orderitem",{"_index":606,"title":{"entities/OrderItem.html":{}},"body":{"injectables/CreateOrderProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"modules/OrdersModule.html":{},"entities/Product.html":{},"coverage.html":{}}}],["orderitem.order",{"_index":1190,"title":{},"body":{"entities/Order.html":{}}}],["orderitems",{"_index":658,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["orderrepository",{"_index":998,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{}}}],["orders",{"_index":994,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"entities/Product.html":{},"injectables/UpdateCartItemProvider.html":{},"entities/User.html":{},"coverage.html":{}}}],["orders.controller",{"_index":1242,"title":{},"body":{"modules/OrdersModule.html":{}}}],["orders/order",{"_index":1350,"title":{},"body":{"entities/Product.html":{}}}],["orders/order.entity",{"_index":1349,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{}}}],["orders/orders.module",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["orderscontroller",{"_index":1220,"title":{"controllers/OrdersController.html":{}},"body":{"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"coverage.html":{}}}],["ordersmodule",{"_index":171,"title":{"modules/OrdersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OrdersModule.html":{},"modules.html":{},"overview.html":{}}}],["ordersservice",{"_index":1230,"title":{"injectables/OrdersService.html":{}},"body":{"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"overview.html":{}}}],["orderstatus",{"_index":1196,"title":{},"body":{"entities/Order.html":{},"miscellaneous/enumerations.html":{}}}],["orderstatus.pending",{"_index":1211,"title":{},"body":{"entities/Order.html":{}}}],["organic",{"_index":1956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["original",{"_index":862,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["originated",{"_index":937,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["out",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["oven",{"_index":2074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["over",{"_index":1987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["overview",{"_index":1808,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":630,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["pack",{"_index":1911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["package",{"_index":1668,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1034,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/PaginationQueryDto.html":{}}}],["pages",{"_index":1266,"title":{},"body":{"interfaces/Paginated.html":{}}}],["paginated",{"_index":1021,"title":{"interfaces/Paginated.html":{}},"body":{"injectables/FindAllProductsProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["paginatedproducts",{"_index":1077,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["paginating",{"_index":1286,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pagination",{"_index":1030,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{}}}],["paginationmodule",{"_index":1275,"title":{"modules/PaginationModule.html":{}},"body":{"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":1011,"title":{"injectables/PaginationProvider.html":{}},"body":{"injectables/FindAllProductsProvider.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquery",{"_index":1076,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"injectables/PaginationProvider.html":{}}}],["paginationquery(paginationquery",{"_index":1284,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.limit",{"_index":1297,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.page",{"_index":1296,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto",{"_index":1026,"title":{"classes/PaginationQueryDto.html":{}},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["paper",{"_index":1989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["param",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"miscellaneous/variables.html":{}}}],["param('cartid",{"_index":488,"title":{},"body":{"controllers/CartController.html":{}}}],["param('id",{"_index":1236,"title":{},"body":{"controllers/OrdersController.html":{}}}],["param('productid",{"_index":1380,"title":{},"body":{"controllers/ProductsController.html":{}}}],["parameters",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{}}}],["parchment",{"_index":2057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parsefloat(p.trim",{"_index":1048,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["part",{"_index":1773,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":1541,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["partialtype(createproductdto",{"_index":1537,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["passing",{"_index":364,"title":{},"body":{"modules/AuthModule.html":{}}}],["password",{"_index":230,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["password1",{"_index":1602,"title":{},"body":{"controllers/UsersController.html":{}}}],["pastry",{"_index":2067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":472,"title":{},"body":{"controllers/CartController.html":{},"controllers/ProductsController.html":{}}}],["patch(':cartid",{"_index":464,"title":{},"body":{"controllers/CartController.html":{}}}],["patch(':productid",{"_index":1379,"title":{},"body":{"controllers/ProductsController.html":{}}}],["path",{"_index":881,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["pathsegments",{"_index":942,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["pathsegments.length",{"_index":944,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["pathsegments[2].charat(0).touppercase()}${pathsegments[2].slice(1)}controller",{"_index":945,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["payload",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{}}}],["payment",{"_index":593,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{}}}],["paymentmethod",{"_index":584,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{}}}],["peeler",{"_index":2113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["peelers",{"_index":2115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pending",{"_index":1701,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["per",{"_index":521,"title":{},"body":{"entities/CartItem.html":{}}}],["perfect",{"_index":1867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["permission",{"_index":1430,"title":{},"body":{"guards/RolesGuard.html":{}}}],["persists",{"_index":520,"title":{},"body":{"entities/CartItem.html":{}}}],["personal",{"_index":1583,"title":{},"body":{"controllers/UsersController.html":{}}}],["pg",{"_index":1683,"title":{},"body":{"dependencies.html":{}}}],["pin",{"_index":2062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plant",{"_index":2019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plastic",{"_index":1843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["platinum",{"_index":1939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["platter",{"_index":2118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":814,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"classes/ValidationException.html":{},"index.html":{}}}],["port",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["portable",{"_index":2010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["post('')@roles(role.admin",{"_index":1357,"title":{},"body":{"controllers/ProductsController.html":{}}}],["post('/sign",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["posts",{"_index":1294,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pour",{"_index":1986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["precise",{"_index":2069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["precision",{"_index":1200,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{}}}],["preferred",{"_index":1482,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["prefix",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["prep",{"_index":2066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prepping",{"_index":2101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["previous",{"_index":1274,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["prevpage",{"_index":1312,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["price",{"_index":646,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/UpdateProductProvider.html":{},"miscellaneous/variables.html":{}}}],["primary",{"_index":1450,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["primarygeneratedcolumn",{"_index":524,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":505,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["private",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":812,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["process.env.node_env",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["produce",{"_index":1955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["product",{"_index":136,"title":{"entities/Product.html":{}},"body":{"injectables/AddToCartProvider.html":{},"interfaces/Cart.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"coverage.html":{},"overview.html":{}}}],["product.cartitems",{"_index":508,"title":{},"body":{"entities/CartItem.html":{}}}],["product.category",{"_index":1475,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["product.description",{"_index":1476,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["product.dto",{"_index":716,"title":{},"body":{"injectables/CreateProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{}}}],["product.dto.ts",{"_index":681,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:11",{"_index":1538,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:17",{"_index":692,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:23",{"_index":688,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:27",{"_index":686,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:31",{"_index":694,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:36",{"_index":696,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:40",{"_index":690,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:8",{"_index":1540,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.entity",{"_index":715,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/UpdateProductProvider.html":{}}}],["product.imageurl",{"_index":1478,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["product.name",{"_index":1474,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["product.price",{"_index":1477,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["product.provider",{"_index":1393,"title":{},"body":{"modules/ProductsModule.html":{},"injectables/ProductsService.html":{}}}],["product.provider.ts",{"_index":708,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/UpdateProductProvider.html":{},"coverage.html":{}}}],["product.provider.ts:16",{"_index":830,"title":{},"body":{"injectables/DeleteProductProvider.html":{}}}],["product.provider.ts:17",{"_index":714,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["product.provider.ts:42",{"_index":1547,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["product.provider.ts:7",{"_index":828,"title":{},"body":{"injectables/DeleteProductProvider.html":{}}}],["product.provider.ts:8",{"_index":711,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["product.stock",{"_index":145,"title":{},"body":{"injectables/AddToCartProvider.html":{},"classes/SeedProducts1759619432047.html":{}}}],["productcategory",{"_index":684,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["productid",{"_index":571,"title":{},"body":{"classes/CreateCartItemDto.html":{},"injectables/CreateOrderProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindProductByIdProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/UpdateProductProvider.html":{}}}],["production",{"_index":237,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["productquery",{"_index":1018,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"injectables/ProductsService.html":{}}}],["productrepository",{"_index":1516,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["products",{"_index":832,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/UpdateProductProvider.html":{},"miscellaneous/variables.html":{}}}],["products.controller",{"_index":1392,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products.dto",{"_index":1020,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["products.dto.ts",{"_index":1155,"title":{},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"coverage.html":{}}}],["products.dto.ts:12",{"_index":1158,"title":{},"body":{"classes/GetProductsBaseDto.html":{}}}],["products.dto.ts:19",{"_index":1157,"title":{},"body":{"classes/GetProductsBaseDto.html":{}}}],["products.dto.ts:26",{"_index":1159,"title":{},"body":{"classes/GetProductsBaseDto.html":{}}}],["products.dto.ts:31",{"_index":1161,"title":{},"body":{"classes/GetProductsBaseDto.html":{}}}],["products.provider",{"_index":1394,"title":{},"body":{"modules/ProductsModule.html":{},"injectables/ProductsService.html":{}}}],["products.provider.ts",{"_index":1008,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"coverage.html":{}}}],["products.provider.ts:11",{"_index":1012,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["products.provider.ts:25",{"_index":1017,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["products.provider.ts:95",{"_index":1015,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["products/product.entity",{"_index":448,"title":{},"body":{"interfaces/Cart.html":{},"entities/CartItem.html":{},"entities/OrderItem.html":{}}}],["products/products.module",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["productscontroller",{"_index":1354,"title":{"controllers/ProductsController.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["productsmodule",{"_index":172,"title":{"modules/ProductsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CartModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["productsquery",{"_index":1364,"title":{},"body":{"controllers/ProductsController.html":{}}}],["productsrepository",{"_index":712,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["productsservice",{"_index":113,"title":{"injectables/ProductsService.html":{}},"body":{"injectables/AddToCartProvider.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["progressive",{"_index":1719,"title":{},"body":{"index.html":{}}}],["project",{"_index":1729,"title":{},"body":{"index.html":{}}}],["promise",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/HashingProvider.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":142,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/GenerateTokensProvider.html":{}}}],["promise.resolve(instance.canactivate(context",{"_index":419,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["proof",{"_index":1929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":102,"title":{"properties.html":{}},"body":{"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"interfaces/Cart.html":{},"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ErrorResponse.html":{},"classes/GetProductsBaseDto.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"classes/SignInDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"properties.html":{}}}],["property",{"_index":389,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["protect",{"_index":2139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provide",{"_index":242,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["provided",{"_index":929,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/UsersController.html":{}}}],["provider",{"_index":141,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/HashingProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UsersService.html":{}}}],["providers",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/add",{"_index":536,"title":{},"body":{"modules/CartModule.html":{}}}],["providers/auth.service",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/bcrypt.provider",{"_index":357,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/cart.service",{"_index":474,"title":{},"body":{"controllers/CartController.html":{},"modules/CartModule.html":{}}}],["providers/create",{"_index":1243,"title":{},"body":{"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["providers/delete",{"_index":1396,"title":{},"body":{"modules/ProductsModule.html":{}}}],["providers/find",{"_index":1246,"title":{},"body":{"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["providers/generate",{"_index":360,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/get",{"_index":537,"title":{},"body":{"modules/CartModule.html":{}}}],["providers/hashing.provider",{"_index":355,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/orders.service",{"_index":1231,"title":{},"body":{"controllers/OrdersController.html":{},"modules/OrdersModule.html":{}}}],["providers/pagination.provider",{"_index":1280,"title":{},"body":{"modules/PaginationModule.html":{}}}],["providers/products.service",{"_index":1369,"title":{},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{}}}],["providers/sign",{"_index":358,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/update",{"_index":538,"title":{},"body":{"modules/CartModule.html":{},"modules/ProductsModule.html":{}}}],["providers/users.service",{"_index":1595,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["public",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/PaginationProvider.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["purchasecount",{"_index":664,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"entities/Product.html":{}}}],["quantity",{"_index":449,"title":{},"body":{"interfaces/Cart.html":{},"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"entities/OrderItem.html":{},"classes/UpdateCartItemDto.html":{}}}],["queries",{"_index":1261,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["query",{"_index":623,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllProductsProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/ProductsController.html":{}}}],["query.dto",{"_index":1028,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"injectables/PaginationProvider.html":{}}}],["query.dto.ts",{"_index":1319,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:12",{"_index":1320,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:19",{"_index":1322,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryfailederror",{"_index":846,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["queryrunner",{"_index":613,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"classes/SeedProducts1759619432047.html":{}}}],["queryrunner.committransaction",{"_index":666,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.connect",{"_index":615,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager",{"_index":626,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.create(order",{"_index":656,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.getrepository(order).save(order",{"_index":657,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.getrepository(orderitem).create",{"_index":660,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.getrepository(orderitem).save(orderitems",{"_index":662,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.getrepository(product).update",{"_index":663,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.getrepository(user).findone",{"_index":621,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.softdelete(cartitem",{"_index":665,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.query",{"_index":1448,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["queryrunner.query(`drop",{"_index":1486,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["queryrunner.release",{"_index":676,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.rollbacktransaction",{"_index":670,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.starttransaction",{"_index":616,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["questions",{"_index":1755,"title":{},"body":{"index.html":{}}}],["quick",{"_index":2109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rack",{"_index":2079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["raw",{"_index":990,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["re",{"_index":861,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"classes/SeedProducts1759619432047.html":{}}}],["read",{"_index":1794,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["real",{"_index":1770,"title":{},"body":{"index.html":{}}}],["record",{"_index":396,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/UpdateProductProvider.html":{}}}],["recycled",{"_index":2003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reduces",{"_index":1988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":1685,"title":{},"body":{"dependencies.html":{}}}],["reflection",{"_index":940,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["reflector",{"_index":377,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["refreshtoken",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["refused",{"_index":871,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["register",{"_index":1582,"title":{},"body":{"controllers/UsersController.html":{}}}],["registering",{"_index":363,"title":{},"body":{"modules/AuthModule.html":{}}}],["registration",{"_index":1586,"title":{},"body":{"controllers/UsersController.html":{}}}],["rejectunauthorized",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["related",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["relations",{"_index":1003,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["release",{"_index":677,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["removal",{"_index":2039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remove",{"_index":980,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["removecartitem",{"_index":546,"title":{},"body":{"injectables/CartService.html":{}}}],["removecartitem(userid",{"_index":556,"title":{},"body":{"injectables/CartService.html":{}}}],["removefromcart",{"_index":455,"title":{},"body":{"controllers/CartController.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["removefromcart(userid",{"_index":468,"title":{},"body":{"controllers/CartController.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["renewal",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{}}}],["replace",{"_index":1057,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["replaces",{"_index":2056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["repository",{"_index":116,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"index.html":{}}}],["repository.count",{"_index":1309,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository.find",{"_index":1293,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["request",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"classes/ValidationException.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":93,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request.method",{"_index":935,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["request.method.tolowercase",{"_index":948,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["request.route?.path",{"_index":941,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["request.url",{"_index":934,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["request.url.split('/').filter(boolean",{"_index":949,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["request[request_user_key",{"_index":81,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requested",{"_index":926,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["requests",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{},"classes/PaginationQueryDto.html":{}}}],["requesttimeoutexception",{"_index":605,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["requesttimeoutexception('could",{"_index":618,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["required",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["requiredroles",{"_index":1424,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":1429,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requirements",{"_index":1417,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reset",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resistant",{"_index":1854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resource",{"_index":927,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"guards/RolesGuard.html":{}}}],["resources",{"_index":1747,"title":{},"body":{"index.html":{}}}],["response",{"_index":786,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"interfaces/Paginated.html":{},"controllers/UsersController.html":{}}}],["response.interceptor",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["response.interceptor.ts",{"_index":785,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:14",{"_index":790,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response.interceptor.ts:32",{"_index":793,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response.status(errorresponse.statuscode).json(errorresponse",{"_index":908,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["response/data",{"_index":196,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["restart",{"_index":1483,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["results",{"_index":94,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["return",{"_index":92,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1264,"title":{},"body":{"interfaces/Paginated.html":{}}}],["returns",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reusable",{"_index":1849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["role",{"_index":104,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.admin",{"_index":1423,"title":{},"body":{"guards/RolesGuard.html":{}}}],["role.user",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{}}}],["roles",{"_index":1371,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":1375,"title":{},"body":{"controllers/ProductsController.html":{}}}],["roles(role.admin)@delete(':productid",{"_index":1359,"title":{},"body":{"controllers/ProductsController.html":{}}}],["roles(role.admin)@patch(':productid",{"_index":1367,"title":{},"body":{"controllers/ProductsController.html":{}}}],["roles_key",{"_index":1420,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":200,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rollback",{"_index":1479,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["rolling",{"_index":2061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rolls",{"_index":2095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["route",{"_index":939,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["route.split('/').filter(boolean",{"_index":943,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["routes",{"_index":2150,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":1462,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"index.html":{}}}],["rust",{"_index":1948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":383,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":852,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["safe",{"_index":1890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["safelimit",{"_index":1036,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["safepage",{"_index":1039,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["salad",{"_index":2098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["salads",{"_index":2103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["salt",{"_index":439,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["same",{"_index":432,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["sanitizedatabaseerror",{"_index":1169,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["sanitizedatabaseerror(error",{"_index":979,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["sanitizing",{"_index":978,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["sauces",{"_index":1879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scalable",{"_index":1724,"title":{},"body":{"index.html":{}}}],["scale",{"_index":1201,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{}}}],["schema",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["scissors",{"_index":2108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scrub",{"_index":2027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scrubby",{"_index":2022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seals",{"_index":1950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["searchterm",{"_index":1054,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["second",{"_index":855,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["secret",{"_index":1137,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["securely",{"_index":1584,"title":{},"body":{"controllers/UsersController.html":{}}}],["seed",{"_index":1442,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["seedproducts",{"_index":1441,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["seedproducts.ts",{"_index":1433,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"coverage.html":{}}}],["seedproducts.ts:39",{"_index":1438,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["seedproducts.ts:5",{"_index":1440,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["seedproducts1759619432047",{"_index":1431,"title":{"classes/SeedProducts1759619432047.html":{}},"body":{"classes/SeedProducts1759619432047.html":{},"coverage.html":{}}}],["select",{"_index":1105,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/PaginationProvider.html":{},"entities/User.html":{}}}],["sensitive",{"_index":981,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["serial",{"_index":1449,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["server",{"_index":913,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"index.html":{}}}],["serveware",{"_index":1714,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["service",{"_index":137,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/OrdersController.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["serving",{"_index":2102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["servware",{"_index":1713,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["set",{"_index":1837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setlock('pessimistic_write",{"_index":634,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["setmetadata(auth_type_key",{"_index":1829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":1832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1730,"title":{},"body":{"index.html":{}}}],["shell",{"_index":1898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shipped",{"_index":1703,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["shippingaddress",{"_index":585,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{}}}],["side",{"_index":1725,"title":{},"body":{"index.html":{}}}],["sigining",{"_index":1497,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["sign",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"classes/SignInDto.html":{}}}],["signed",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{}}}],["signin",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signin(@body",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signindto",{"_index":268,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["signindto.password",{"_index":1505,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["signindto})@apiresponse({status",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{}}}],["signing",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signinprovider",{"_index":349,"title":{"injectables/SignInProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["signs",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{}}}],["signtoken",{"_index":1115,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signtoken(userid",{"_index":1119,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["silicone",{"_index":1850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skip",{"_index":1295,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["sleeve",{"_index":1996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["slip",{"_index":2092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["smooth",{"_index":2063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["soft",{"_index":528,"title":{},"body":{"entities/CartItem.html":{}}}],["sort",{"_index":1035,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"index.html":{}}}],["sources",{"_index":2128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["spaces",{"_index":1059,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["spatulas",{"_index":1851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["special",{"_index":740,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":404,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["spills",{"_index":2046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["split",{"_index":1046,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["sponge",{"_index":2018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sponges",{"_index":2021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sponsors",{"_index":1790,"title":{},"body":{"index.html":{}}}],["spoon",{"_index":1841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["spoons",{"_index":1862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sql",{"_index":991,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["src/.../active",{"_index":1816,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.module.ts",{"_index":1819,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth",{"_index":1691,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constant.ts",{"_index":1818,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1817,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1717,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../order",{"_index":1693,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../product",{"_index":1695,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role",{"_index":1697,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role.constant.ts",{"_index":1821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.decorator.ts",{"_index":1820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../seed",{"_index":1822,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":149,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":152,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":244,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":245,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:97",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1616,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":350,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/config/jwt.config",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["src/auth/constants/auth.constant",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["src/auth/constants/auth.constant.ts",{"_index":1638,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/constants/role.constant",{"_index":1421,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/constants/role.constant.ts",{"_index":1639,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorator/active",{"_index":476,"title":{},"body":{"controllers/CartController.html":{},"controllers/OrdersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorator/auth.decorator",{"_index":1370,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["src/auth/decorator/auth.decorator.ts",{"_index":1641,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorator/role.decorator",{"_index":1372,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/auth/decorator/role.decorator.ts",{"_index":1642,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/sign",{"_index":1487,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/enums/auth",{"_index":384,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["src/auth/enums/role",{"_index":766,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts",{"_index":372,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:33",{"_index":378,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:59",{"_index":379,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/roles/roles.guard.ts",{"_index":1412,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles/roles.guard.ts:16",{"_index":1413,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles/roles.guard.ts:31",{"_index":1414,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/interfaces/active",{"_index":99,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:19",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:6",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":421,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:15",{"_index":434,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:27",{"_index":428,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/generate",{"_index":1111,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider",{"_index":761,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":1179,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:12",{"_index":1182,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:19",{"_index":1181,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/sign",{"_index":1495,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["src/cart/cart",{"_index":495,"title":{},"body":{"entities/CartItem.html":{},"injectables/CreateOrderProvider.html":{},"coverage.html":{}}}],["src/cart/cart.controller.ts",{"_index":451,"title":{},"body":{"controllers/CartController.html":{},"coverage.html":{}}}],["src/cart/cart.controller.ts:25",{"_index":460,"title":{},"body":{"controllers/CartController.html":{}}}],["src/cart/cart.controller.ts:31",{"_index":457,"title":{},"body":{"controllers/CartController.html":{}}}],["src/cart/cart.controller.ts:36",{"_index":467,"title":{},"body":{"controllers/CartController.html":{}}}],["src/cart/cart.controller.ts:41",{"_index":470,"title":{},"body":{"controllers/CartController.html":{}}}],["src/cart/cart.controller.ts:49",{"_index":465,"title":{},"body":{"controllers/CartController.html":{}}}],["src/cart/cart.module",{"_index":1245,"title":{},"body":{"modules/OrdersModule.html":{}}}],["src/cart/cart.module.ts",{"_index":534,"title":{},"body":{"modules/CartModule.html":{}}}],["src/cart/dtos/create",{"_index":569,"title":{},"body":{"classes/CreateCartItemDto.html":{},"coverage.html":{}}}],["src/cart/dtos/update",{"_index":1511,"title":{},"body":{"classes/UpdateCartItemDto.html":{},"coverage.html":{}}}],["src/cart/entities/cart",{"_index":519,"title":{},"body":{"entities/CartItem.html":{}}}],["src/cart/interfaces/cart.interface.ts",{"_index":443,"title":{},"body":{"interfaces/Cart.html":{},"coverage.html":{}}}],["src/cart/providers/add",{"_index":109,"title":{},"body":{"injectables/AddToCartProvider.html":{},"coverage.html":{}}}],["src/cart/providers/cart.service",{"_index":610,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["src/cart/providers/cart.service.ts",{"_index":543,"title":{},"body":{"injectables/CartService.html":{},"coverage.html":{}}}],["src/cart/providers/cart.service.ts:27",{"_index":550,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/cart.service.ts:31",{"_index":555,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/cart.service.ts:35",{"_index":557,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/cart.service.ts:39",{"_index":553,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/cart.service.ts:51",{"_index":559,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/cart.service.ts:55",{"_index":552,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/cart.service.ts:9",{"_index":549,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/get",{"_index":1139,"title":{},"body":{"injectables/GetCartProvider.html":{},"coverage.html":{}}}],["src/cart/providers/update",{"_index":1513,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{},"coverage.html":{}}}],["src/common/filters/common",{"_index":764,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"classes/ValidationException.html":{},"coverage.html":{}}}],["src/common/filters/global",{"_index":877,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["src/common/interceptors/data",{"_index":784,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/error",{"_index":840,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"coverage.html":{}}}],["src/common/pagination/dtos/pagination",{"_index":1027,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/pagination/interfaces/paginated.interface",{"_index":1022,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["src/common/pagination/interfaces/paginated.interface.ts",{"_index":1260,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.module",{"_index":1395,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/common/pagination/pagination.module.ts",{"_index":1279,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/providers/pagination.provider",{"_index":1029,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts",{"_index":1281,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:14",{"_index":1283,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:34",{"_index":1285,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/main.ts",{"_index":1656,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/migrations/1759619432047",{"_index":1432,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"coverage.html":{}}}],["src/orders/dtos/create",{"_index":581,"title":{},"body":{"classes/CreateOrderDto.html":{},"coverage.html":{}}}],["src/orders/enums/order",{"_index":1700,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/orders/order",{"_index":1212,"title":{},"body":{"entities/OrderItem.html":{},"coverage.html":{}}}],["src/orders/order.entity.ts",{"_index":1183,"title":{},"body":{"entities/Order.html":{},"coverage.html":{}}}],["src/orders/order.entity.ts:17",{"_index":1188,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:20",{"_index":1203,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:23",{"_index":1198,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:28",{"_index":1195,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:33",{"_index":1186,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:40",{"_index":1194,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:43",{"_index":1187,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:46",{"_index":1204,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:49",{"_index":1206,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:52",{"_index":1191,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/orders.controller.ts",{"_index":1221,"title":{},"body":{"controllers/OrdersController.html":{},"coverage.html":{}}}],["src/orders/orders.controller.ts:16",{"_index":1224,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.controller.ts:24",{"_index":1229,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.controller.ts:29",{"_index":1227,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.module.ts",{"_index":1241,"title":{},"body":{"modules/OrdersModule.html":{}}}],["src/orders/providers/create",{"_index":596,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"coverage.html":{}}}],["src/orders/providers/find",{"_index":993,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"coverage.html":{}}}],["src/orders/providers/orders.service.ts",{"_index":1250,"title":{},"body":{"injectables/OrdersService.html":{},"coverage.html":{}}}],["src/orders/providers/orders.service.ts:20",{"_index":1253,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/providers/orders.service.ts:24",{"_index":1254,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/providers/orders.service.ts:28",{"_index":1255,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/providers/orders.service.ts:8",{"_index":1252,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/products/dtos/create",{"_index":680,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/products/dtos/get",{"_index":1154,"title":{},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"coverage.html":{}}}],["src/products/dtos/update",{"_index":1536,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/products/enums/product",{"_index":1706,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/products/product.entity",{"_index":540,"title":{},"body":{"modules/CartModule.html":{},"injectables/CreateOrderProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["src/products/product.entity.ts",{"_index":1324,"title":{},"body":{"entities/Product.html":{},"coverage.html":{}}}],["src/products/product.entity.ts:20",{"_index":1336,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:23",{"_index":1341,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:26",{"_index":1330,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:29",{"_index":1335,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:32",{"_index":1344,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:35",{"_index":1346,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:38",{"_index":1338,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:42",{"_index":1332,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:45",{"_index":1347,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:51",{"_index":1339,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:57",{"_index":1333,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:62",{"_index":1345,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:65",{"_index":1326,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:68",{"_index":1343,"title":{},"body":{"entities/Product.html":{}}}],["src/products/products.controller.ts",{"_index":1355,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{}}}],["src/products/products.controller.ts:33",{"_index":1358,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:39",{"_index":1363,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:47",{"_index":1368,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:57",{"_index":1360,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.module",{"_index":541,"title":{},"body":{"modules/CartModule.html":{}}}],["src/products/products.module.ts",{"_index":1391,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/products/providers/create",{"_index":707,"title":{},"body":{"injectables/CreateProductProvider.html":{},"coverage.html":{}}}],["src/products/providers/delete",{"_index":826,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"coverage.html":{}}}],["src/products/providers/find",{"_index":1007,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"coverage.html":{}}}],["src/products/providers/products.service",{"_index":123,"title":{},"body":{"injectables/AddToCartProvider.html":{}}}],["src/products/providers/products.service.ts",{"_index":1398,"title":{},"body":{"injectables/ProductsService.html":{},"coverage.html":{}}}],["src/products/providers/products.service.ts:14",{"_index":1400,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:42",{"_index":1401,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:46",{"_index":1403,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:52",{"_index":1406,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:62",{"_index":1402,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:66",{"_index":1404,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/update",{"_index":1543,"title":{},"body":{"injectables/UpdateProductProvider.html":{},"coverage.html":{}}}],["src/seed",{"_index":1661,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/dtos/create",{"_index":722,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/providers/create",{"_index":752,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["src/users/providers/find",{"_index":1098,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":134,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/SignInProvider.html":{}}}],["src/users/providers/users.service.ts",{"_index":1619,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:32",{"_index":1622,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:38",{"_index":1624,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:42",{"_index":1625,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:9",{"_index":1621,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":609,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["src/users/user.entity.ts",{"_index":1558,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:18",{"_index":1565,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:25",{"_index":1564,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:32",{"_index":1566,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:40",{"_index":1563,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:47",{"_index":1571,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:56",{"_index":1570,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:60",{"_index":1561,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:63",{"_index":1572,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:66",{"_index":1560,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:69",{"_index":1568,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1577,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:82",{"_index":1592,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":354,"title":{},"body":{"modules/AuthModule.html":{},"modules/CartModule.html":{}}}],["src/users/users.module.ts",{"_index":1614,"title":{},"body":{"modules/UsersModule.html":{}}}],["ssl",{"_index":236,"title":{},"body":{"modules/AppModule.html":{}}}],["stable",{"_index":2093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stack",{"_index":906,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["stainless",{"_index":1945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start",{"_index":1734,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1737,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1738,"title":{},"body":{"index.html":{}}}],["started",{"_index":1718,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1728,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1633,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":374,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["status",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"controllers/UsersController.html":{}}}],["status.enum",{"_index":1209,"title":{},"body":{"entities/Order.html":{}}}],["status.enum.ts",{"_index":1694,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statuscode",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["statuscodes",{"_index":956,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["statuscodes[status",{"_index":976,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["stay",{"_index":1775,"title":{},"body":{"index.html":{}}}],["steel",{"_index":1946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stick",{"_index":1869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stiff",{"_index":2034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stock",{"_index":644,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"miscellaneous/variables.html":{}}}],["storage",{"_index":1708,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["straws",{"_index":1975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/SignInDto.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"miscellaneous/variables.html":{}}}],["string(error",{"_index":674,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["stylish",{"_index":2147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sub",{"_index":105,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{}}}],["subtotal",{"_index":445,"title":{},"body":{"interfaces/Cart.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{}}}],["successful",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["successfully",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DeleteProductProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"controllers/UsersController.html":{}}}],["such",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["sum",{"_index":653,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["summary",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":810,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["support",{"_index":1756,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sustainable",{"_index":1838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["svg",{"_index":1806,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":1065,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["sync",{"_index":1445,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["synchronize",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["synthetic",{"_index":1880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t",{"_index":1121,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["table",{"_index":986,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/SeedProducts1759619432047.html":{},"coverage.html":{}}}],["tables",{"_index":2140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1667,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1298,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["test",{"_index":1741,"title":{},"body":{"index.html":{}}}],["test:covresources",{"_index":1744,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1743,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1739,"title":{},"body":{"index.html":{}}}],["text",{"_index":1334,"title":{},"body":{"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{}}}],["thanks",{"_index":1789,"title":{},"body":{"index.html":{}}}],["this.accesstokenguard",{"_index":397,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.addtocartprovider.addtocart(userid",{"_index":562,"title":{},"body":{"injectables/CartService.html":{}}}],["this.appservice.gethello",{"_index":156,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.signin(signindto",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type]).flat",{"_index":413,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.builderrorresponse",{"_index":900,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["this.calculatesubtotal(items",{"_index":1149,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["this.cartitemrepository.find",{"_index":1146,"title":{},"body":{"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["this.cartitemrepository.findone",{"_index":1525,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["this.cartitemrepository.softdelete",{"_index":1528,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["this.cartservice.addtocart(userid",{"_index":484,"title":{},"body":{"controllers/CartController.html":{}}}],["this.cartservice.clearcart(userid",{"_index":482,"title":{},"body":{"controllers/CartController.html":{}}}],["this.cartservice.decrementquantity",{"_index":492,"title":{},"body":{"controllers/CartController.html":{}}}],["this.cartservice.getcart(userid",{"_index":486,"title":{},"body":{"controllers/CartController.html":{}}}],["this.cartservice.removecartitem(userid",{"_index":489,"title":{},"body":{"controllers/CartController.html":{}}}],["this.cartservice.validatecartstock(userid",{"_index":620,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["this.cleanquery(productquery",{"_index":1032,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["this.configservice.get('appconfig.apiversion",{"_index":800,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["this.createorderprovider.createorder(userid",{"_index":1257,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.createproductprovider.createproduct(createproductdto",{"_index":1407,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.createuserprovider.createuser(createuserdto",{"_index":1626,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.datasource.createqueryrunner",{"_index":614,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["this.deleteproductprovider.deleteproduct(productid",{"_index":1410,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.extractrequestfromheader(request",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.filterobj",{"_index":1551,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["this.findallordersforuserprovider.findallorders(userid",{"_index":1258,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.findallproductsprovider.findallproducts(productquery",{"_index":1408,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.findorderbyidprovider.findorderbyid(userid",{"_index":1259,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.findproductbyidprovider.findproductbyid(productid",{"_index":1411,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.finduserbyemailprovider.finduserbyemail(email",{"_index":1627,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.finduserbyidprovider.finduserbyid(userid",{"_index":1628,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.generatetokenprovider.generatetokens(user",{"_index":1508,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.getcartprovider.getcart(userid",{"_index":563,"title":{},"body":{"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["this.getcontrollername(request",{"_index":897,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["this.gethandlername(request",{"_index":899,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["this.gethttperrorcode(status",{"_index":920,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["this.hashingprovider.comparepassword",{"_index":1504,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.hashingprovider.hashpassword(createuserdto.password",{"_index":776,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.isconnectionerror(error",{"_index":859,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["this.jwtconfiguration",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":1127,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.audience",{"_index":1134,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.issuer",{"_index":1136,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.refreshtokenttl",{"_index":1131,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":1138,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.signasync",{"_index":1132,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.verify",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.logger.error",{"_index":903,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["this.orderrepository.find",{"_index":1002,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{}}}],["this.orderrepository.findone",{"_index":1090,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{}}}],["this.ordersservice.createorder(userid",{"_index":1233,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.ordersservice.findallorders(userid",{"_index":1235,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.ordersservice.findorderbyid(userid",{"_index":1237,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.paginationprovider.paginationquery",{"_index":1078,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["this.productrepository.save(item.product",{"_index":1533,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["this.productsrepository",{"_index":1079,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["this.productsrepository.create",{"_index":719,"title":{},"body":{"injectables/CreateProductProvider.html":{}}}],["this.productsrepository.findone",{"_index":1096,"title":{},"body":{"injectables/FindProductByIdProvider.html":{}}}],["this.productsrepository.findoneby",{"_index":833,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["this.productsrepository.save",{"_index":836,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["this.productsrepository.save(newproduct",{"_index":720,"title":{},"body":{"injectables/CreateProductProvider.html":{}}}],["this.productsservice.createproduct(createproductdto",{"_index":1377,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.deleteproduct(productid",{"_index":1385,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.findallproducts(productsquery",{"_index":1378,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.findproductbyid(createcartitemdto.productid",{"_index":144,"title":{},"body":{"injectables/AddToCartProvider.html":{}}}],["this.productsservice.updateproduct(updateproductdto",{"_index":1381,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.reflector.getallandoverride(auth_type_key",{"_index":407,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":1425,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.request.headers.host",{"_index":1306,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol",{"_index":1305,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.sanitizedatabaseerror(exception",{"_index":924,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["this.signinprovider.signin(signindto",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signtoken",{"_index":1125,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.signtoken(user.id",{"_index":1130,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.updatecartitemprovider.clearcart(userid",{"_index":567,"title":{},"body":{"injectables/CartService.html":{}}}],["this.updatecartitemprovider.decrementquantity",{"_index":565,"title":{},"body":{"injectables/CartService.html":{}}}],["this.updatecartitemprovider.removefromcart(userid",{"_index":564,"title":{},"body":{"injectables/CartService.html":{}}}],["this.updatecartitemprovider.validatecartstock(userid",{"_index":566,"title":{},"body":{"injectables/CartService.html":{}}}],["this.updateproductprovider.updateproduct",{"_index":1409,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.usersrepository.create",{"_index":775,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersrepository.findone",{"_index":770,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{}}}],["this.usersrepository.save(newuser",{"_index":777,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":1610,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.finduserbyemail(signindto.email",{"_index":1502,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.usersservice.finduserbyid(userid",{"_index":143,"title":{},"body":{"injectables/AddToCartProvider.html":{}}}],["through",{"_index":416,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["throw",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["throwerror",{"_index":848,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["thrown",{"_index":2001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["time",{"_index":1608,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["timeout",{"_index":851,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["timeout(30000",{"_index":853,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["timeouterror",{"_index":849,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["timestamp",{"_index":882,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Product.html":{}}}],["token",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["token.guard",{"_index":203,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:18",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:42",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:72",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["tokens",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["tokens.'})@apiconsumes('application/json')@apibody({description",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens.provider",{"_index":361,"title":{},"body":{"modules/AuthModule.html":{},"injectables/SignInProvider.html":{}}}],["tokens.provider.ts",{"_index":1112,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"coverage.html":{}}}],["tokens.provider.ts:12",{"_index":1116,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:36",{"_index":1118,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:64",{"_index":1122,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tone",{"_index":1985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tongs",{"_index":1886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["total",{"_index":446,"title":{},"body":{"interfaces/Cart.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Order.html":{}}}],["totalitems",{"_index":1268,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpages",{"_index":1270,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["touch",{"_index":1796,"title":{},"body":{"index.html":{}}}],["tough",{"_index":2037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transaction",{"_index":673,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["transactions",{"_index":612,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["transform",{"_index":636,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["transformer",{"_index":1574,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["trap",{"_index":2044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trivet",{"_index":2137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trivets",{"_index":2138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"injectables/DeleteProductProvider.html":{},"entities/Product.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["truncate",{"_index":1480,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["try",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateOrderProvider.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/ValidationException.html":{}}}],["tumbler",{"_index":1964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["twitter",{"_index":1802,"title":{},"body":{"index.html":{}}}],["type",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["type.enum.ts",{"_index":1692,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeorm",{"_index":128,"title":{},"body":{"injectables/AddToCartProvider.html":{},"entities/CartItem.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"injectables/PaginationProvider.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":188,"title":{},"body":{"modules/AppModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([cartitem",{"_index":542,"title":{},"body":{"modules/CartModule.html":{}}}],["typeormmodule.forfeature([order",{"_index":1249,"title":{},"body":{"modules/OrdersModule.html":{}}}],["typeormmodule.forfeature([product",{"_index":1397,"title":{},"body":{"modules/ProductsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1618,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":395,"title":{},"body":{"guards/AuthenticationGuard.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["typescript",{"_index":86,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{},"index.html":{}}}],["unable",{"_index":811,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["unauthorizedexception",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"guards/AuthenticationGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["unauthorizedexception('incorrect",{"_index":1507,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["unbleached",{"_index":2124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllProductsProvider.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"miscellaneous/variables.html":{}}}],["undefined})@apibadrequestresponse({description",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@apiresponse({status",{"_index":1588,"title":{},"body":{"controllers/UsersController.html":{}}}],["unique",{"_index":1340,"title":{},"body":{"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"entities/User.html":{}}}],["unit",{"_index":1740,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CartService.html":{},"interfaces/ErrorResponse.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["unknowncontroller",{"_index":946,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["unlicensed",{"_index":1814,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":88,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["up",{"_index":1436,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["up(queryrunner",{"_index":1439,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["update",{"_index":561,"title":{},"body":{"injectables/CartService.html":{},"injectables/ProductsService.html":{}}}],["updatecartitemdto",{"_index":463,"title":{"classes/UpdateCartItemDto.html":{}},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"coverage.html":{}}}],["updatecartitemdto.quantity",{"_index":491,"title":{},"body":{"controllers/CartController.html":{}}}],["updatecartitemprovider",{"_index":533,"title":{"injectables/UpdateCartItemProvider.html":{}},"body":{"modules/CartModule.html":{},"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{},"coverage.html":{},"overview.html":{}}}],["updatedat",{"_index":499,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["updatedatecolumn",{"_index":515,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["updateproduct",{"_index":1356,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/UpdateProductProvider.html":{}}}],["updateproduct(productid",{"_index":1365,"title":{},"body":{"controllers/ProductsController.html":{}}}],["updateproduct(updateproductdto",{"_index":1405,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/UpdateProductProvider.html":{}}}],["updateproductdto",{"_index":1366,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"coverage.html":{}}}],["updateproductprovider",{"_index":1390,"title":{"injectables/UpdateProductProvider.html":{}},"body":{"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/UpdateProductProvider.html":{},"coverage.html":{},"overview.html":{}}}],["updates",{"_index":1776,"title":{},"body":{"index.html":{}}}],["upon",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["url",{"_index":1579,"title":{},"body":{"controllers/UsersController.html":{}}}],["url(this.request.url",{"_index":1308,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["urls",{"_index":1303,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["use",{"_index":388,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateOrderProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllProductsProvider.html":{},"classes/GlobalExceptionFilter.html":{},"guards/RolesGuard.html":{}}}],["useclass",{"_index":243,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["usefactory",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":35,"title":{"entities/User.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/CartItem.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Order.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user.cartitems",{"_index":517,"title":{},"body":{"entities/CartItem.html":{}}}],["user.decorator",{"_index":477,"title":{},"body":{"controllers/CartController.html":{},"controllers/OrdersController.html":{}}}],["user.decorator.ts",{"_index":1640,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":762,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":723,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:23",{"_index":728,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":730,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:48",{"_index":726,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:65",{"_index":742,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":1128,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["user.entity",{"_index":760,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.firstname",{"_index":1509,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.id",{"_index":1126,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["user.lastname",{"_index":1510,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.orders",{"_index":1205,"title":{},"body":{"entities/Order.html":{}}}],["user.password",{"_index":1506,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.provider",{"_index":1247,"title":{},"body":{"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.provider.ts",{"_index":753,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:11",{"_index":756,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:12",{"_index":1000,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{}}}],["user.provider.ts:26",{"_index":759,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:7",{"_index":997,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{}}}],["user.role",{"_index":1129,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{}}}],["user?.[field",{"_index":1826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":122,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":138,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":1615,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/user.entity",{"_index":523,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{}}}],["users/users.module",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":1576,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":173,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":757,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{}}}],["usersservice",{"_index":114,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AddToCartProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":386,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/GenerateTokensProvider.html":{},"guards/RolesGuard.html":{},"index.html":{}}}],["utensils",{"_index":1707,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["uuid",{"_index":1604,"title":{},"body":{"controllers/UsersController.html":{}}}],["valid",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["validate",{"_index":1530,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["validatecartstock",{"_index":547,"title":{},"body":{"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["validatecartstock(userid",{"_index":558,"title":{},"body":{"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["validating",{"_index":1415,"title":{},"body":{"guards/RolesGuard.html":{}}}],["validation",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{},"classes/DatabaseConnectionException.html":{},"injectables/FindAllProductsProvider.html":{},"classes/ValidationException.html":{}}}],["validationexception",{"_index":763,"title":{"classes/ValidationException.html":{}},"body":{"injectables/CreateUserProvider.html":{},"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{},"coverage.html":{}}}],["validationschema",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":578,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SignInDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateProductDto.html":{},"dependencies.html":{}}}],["validuser",{"_index":1598,"title":{},"body":{"controllers/UsersController.html":{}}}],["value",{"_index":1082,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GlobalExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1464,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["varchar",{"_index":1185,"title":{},"body":{"entities/Order.html":{},"entities/User.html":{}}}],["varchar(100",{"_index":1452,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["varchar(255",{"_index":1456,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["varchar(50",{"_index":1453,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["variable",{"_index":1635,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1815,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":1265,"title":{},"body":{"interfaces/Paginated.html":{}}}],["vars",{"_index":89,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["veggies",{"_index":2116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{}}}],["version",{"_index":1812,"title":{},"body":{"properties.html":{}}}],["via",{"_index":1444,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["video",{"_index":1764,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1752,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1766,"title":{},"body":{"index.html":{}}}],["void",{"_index":1174,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["washable",{"_index":1959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["waste",{"_index":1844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":1735,"title":{},"body":{"index.html":{}}}],["water",{"_index":1993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["website",{"_index":1800,"title":{},"body":{"index.html":{}}}],["where('ci.user.id",{"_index":631,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["where.category",{"_index":1042,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["where.name",{"_index":1060,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["where.price",{"_index":1051,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["whether",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"guards/RolesGuard.html":{}}}],["whipping",{"_index":1877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whisk",{"_index":1875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["without",{"_index":390,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["wood",{"_index":1866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wooden",{"_index":1861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["working",{"_index":1750,"title":{},"body":{"index.html":{}}}],["world",{"_index":247,"title":{},"body":{"injectables/AppService.html":{}}}],["wraps",{"_index":1910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x",{"_index":1778,"title":{},"body":{"index.html":{}}}],["yes",{"_index":809,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/PaginationProvider.html":{}}}],["you'd",{"_index":1793,"title":{},"body":{"index.html":{}}}],["z])(?=.*\\d)(?=.*[\\w_]).{8",{"_index":733,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":732,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zero",{"_index":1842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zip",{"_index":1937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token/access-token.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    guard for access token\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token/access-token.guard.ts:18\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:42\n                        \n                    \n\n\n            \n                \n                        function for checking if user has access token\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                true or false depending on whether user is signed in or not\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:72\n                        \n                    \n\n\n            \n                \n                        function for extracting the access token from the request headers\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                access token\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { REQUEST_USER_KEY } from 'src/auth/constants/auth.constant';\n\n/**\n * guard for access token\n */\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  /**\n   * constructor\n   * @param jwtService\n   * @param jwtConfiguration\n   */\n  constructor(\n    /**\n     * Inject jwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * inject jwt config\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  /**\n   * function for checking if user has access token\n   * @param context\n   * @returns true or false depending on whether user is signed in or not\n   */\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n\n    const token = this.extractRequestFromHeader(request);\n\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n\n    try {\n      const payload = await this.jwtService.verify(\n        token,\n        this.jwtConfiguration,\n      );\n\n      request[REQUEST_USER_KEY] = payload;\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    } catch (_) {\n      throw new UnauthorizedException();\n    }\n\n    return true;\n  }\n\n  /**\n   * function for extracting the access token from the request headers\n   * @param request\n   * @returns access token\n   */\n  private extractRequestFromHeader(request: Request): string | undefined {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, token] = request.headers.authorization?.split(' ') ?? [];\n    return token;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActiveUserData.html":{"url":"interfaces/ActiveUserData.html","title":"interface - ActiveUserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActiveUserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/active-user-data.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                interface for a user that has logged in (payload)\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    user email\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    user role\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    id for user\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ActiveUserData {\n  /**\n   * id for user\n   */\n  sub: string;\n\n  /**\n   * user email\n   */\n  email: string;\n\n  /**\n   * user role\n   */\n  role: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AddToCartProvider.html":{"url":"injectables/AddToCartProvider.html","title":"injectable - AddToCartProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AddToCartProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/providers/add-to-cart.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addToCart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsService: ProductsService, usersService: UsersService, cartItemRepository: Repository, getCartProvider: GetCartProvider)\n                    \n                \n                        \n                            \n                                Defined in src/cart/providers/add-to-cart.provider.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsService\n                                                  \n                                                        \n                                                                        ProductsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cartItemRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        getCartProvider\n                                                  \n                                                        \n                                                                        GetCartProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addToCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    addToCart(userId: string, createCartItemDto: CreateCartItemDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/add-to-cart.provider.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createCartItemDto\n                                            \n                                                            CreateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ProductsService } from 'src/products/providers/products.service';\nimport { CreateCartItemDto } from '../dtos/create-cart-item.dto';\nimport { Cart } from '../interfaces/cart.interface';\nimport { Repository } from 'typeorm';\nimport { CartItem } from '../cart-item.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { GetCartProvider } from './get-cart.provider';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AddToCartProvider {\n  constructor(\n    /**\n     * injecting the product service\n     */\n    private readonly productsService: ProductsService,\n\n    /**\n     * injecting the users service\n     */\n    private readonly usersService: UsersService,\n\n    /**\n     * injecting the cart item repository\n     */\n    @InjectRepository(CartItem)\n    private readonly cartItemRepository: Repository,\n\n    /**\n     * injecting the get cart provider\n     */\n    private readonly getCartProvider: GetCartProvider,\n  ) {}\n\n  async addToCart(\n    userId: string,\n    createCartItemDto: CreateCartItemDto,\n  ): Promise {\n    const [user, product] = await Promise.all([\n      this.usersService.findUserById(userId),\n      this.productsService.findProductById(createCartItemDto.productId),\n    ]);\n\n    if (product.stock \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCartModule\n\nCartModule\n\nAppModule -->\n\nCartModule->AppModule\n\n\n\n\n\nOrdersModule\n\nOrdersModule\n\nAppModule -->\n\nOrdersModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CartModule\n                        \n                        \n                            OrdersModule\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport enviromentValidation from './config/enviroment.validation';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { DataResponseInterceptor } from './common/interceptors/data-response/data-response.interceptor';\nimport { AuthenticationGuard } from './auth/guards/authentication/authentication.guard';\nimport { RolesGuard } from './auth/guards/roles/roles.guard';\nimport { AccessTokenGuard } from './auth/guards/access-token/access-token.guard';\nimport jwtConfig from './auth/config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ProductsModule } from './products/products.module';\nimport { CartModule } from './cart/cart.module';\nimport { OrdersModule } from './orders/orders.module';\n\n/**\n * app environment\n */\nconst ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n      validationSchema: enviromentValidation,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return {\n          type: 'postgres',\n          autoLoadEntities: configService.get('database.autoLoadEntities'),\n          synchronize: configService.get('database.synchronize'),\n          port: +configService.get('database.port'),\n          username: configService.get('database.user'),\n          password: configService.get('database.password'),\n          host: configService.get('database.host'),\n          database: configService.get('database.name'),\n          ssl:\n            process.env.NODE_ENV === 'production'\n              ? {\n                  rejectUnauthorized: false,\n                }\n              : false,\n          logging: true,\n        };\n      },\n    }),\n    UsersModule,\n    AuthModule,\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    ProductsModule,\n    CartModule,\n    OrdersModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: DataResponseInterceptor,\n    },\n\n    { provide: APP_GUARD, useClass: AuthenticationGuard },\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard,\n    },\n    AccessTokenGuard,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Controller handling authentication-related operations such as sign-in\nThis controller provides endpoints for user authentication flows, including login, forgot password, reset password, and email verification.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/sign-in')@Auth(AuthType.None)@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Sign in a user with email and password', description: 'Authenticates a user and returns access and refresh tokens.'})@ApiConsumes('application/json')@ApiBody({description: 'Sign-in credentials', required: true, type: SignInDto})@ApiResponse({status: 200, description: 'User signed in successfully', schema: undefined})@ApiBadRequestResponse({description: 'Invalid credentials or missing fields', schema: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:97\n                        \n                    \n\n\n            \n                \n                        Signs in a user with valid email and password.\nThis endpoint authenticates the user and returns access and refresh tokens upon successful validation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe sign-in credentials (email and password).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An object containing the access token and refresh token.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiConsumes,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { Auth } from './decorator/auth.decorator';\nimport { AuthType } from './enums/auth-type.enum';\nimport { SignInDto } from './dtos/sign-in.dto';\nimport { Role } from './enums/role-type.enum';\n\n/**\n * Controller handling authentication-related operations such as sign-in\n *\n * This controller provides endpoints for user authentication flows, including login, forgot password, reset password, and email verification.\n */\n@ApiTags('Auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    /**\n     * injecting the auth service\n     */\n    private readonly authService: AuthService,\n  ) {}\n\n  /**\n   * Signs in a user with valid email and password.\n   *\n   * This endpoint authenticates the user and returns access and refresh tokens upon successful validation.\n   *\n   * @param signInDto - The sign-in credentials (email and password).\n   * @returns An object containing the access token and refresh token.\n   */\n  @Post('/sign-in')\n  @Auth(AuthType.None)\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Sign in a user with email and password',\n    description: 'Authenticates a user and returns access and refresh tokens.',\n  })\n  @ApiConsumes('application/json')\n  @ApiBody({\n    description: 'Sign-in credentials',\n    required: true,\n    type: SignInDto,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'User signed in successfully',\n    schema: {\n      type: 'object',\n      properties: {\n        apiVersion: { type: 'string', example: '1.0.0' },\n        data: {\n          type: 'object',\n          example: {\n            accessToken: {\n              type: 'string',\n              description: 'JWT access token for authenticated requests',\n              example: 'jsbfiwhvfquobdfj',\n            },\n            refreshToken: {\n              type: 'string',\n              description: 'JWT refresh token for token renewal',\n              example: 'jsbfiwhvfquobdfj',\n            },\n            user: {\n              type: 'object',\n              description: 'user details',\n              example: {\n                firstname: 'favour',\n                lastname: 'ejim',\n                email: 'favour@gmail.com',\n                role: Role.USER,\n              },\n            },\n          },\n        },\n      },\n    },\n  })\n  @ApiBadRequestResponse({\n    description: 'Invalid credentials or missing fields',\n    schema: {\n      type: 'object',\n      properties: {\n        statusCode: { type: 'number', example: 400 },\n        message: { type: 'string', example: 'Invalid email or password' },\n      },\n    },\n  })\n  public signIn(@Body() signInDto: SignInDto) {\n    return this.authService.signIn(signInDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GenerateTokensProvider\n                        \n                        \n                            SignInProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { ConfigModule } from '@nestjs/config';\nimport jwtConfig from './config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { UsersModule } from 'src/users/users.module';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { BcryptProvider } from './providers/bcrypt.provider';\nimport { SignInProvider } from './providers/sign-in.provider';\nimport { GenerateTokensProvider } from './providers/generate-tokens.provider';\n\n@Module({\n  imports: [\n    forwardRef(() => UsersModule),\n    ConfigModule.forFeature(jwtConfig),\n    // for asynchrousnously registering the jwt module and passing the config to the module\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    { provide: HashingProvider, useClass: BcryptProvider },\n    SignInProvider,\n    GenerateTokensProvider,\n  ],\n  exports: [HashingProvider],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(signInProvider: SignInProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        signInProvider\n                                                  \n                                                        \n                                                                        SignInProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:19\n                        \n                    \n\n\n            \n                \n                        function for signing in a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                access and refresh tokens\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { SignInProvider } from './sign-in.provider';\nimport { SignInDto } from '../dtos/sign-in.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    /**\n     * injecting the sign in provider\n     */\n    private readonly signInProvider: SignInProvider,\n  ) {}\n\n  /**\n   * function for signing in a user\n   * @param signInDto\n   * @returns access and refresh tokens\n   */\n  public async signIn(signInDto: SignInDto) {\n    return await this.signInProvider.signIn(signInDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication/authentication.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    guard for authentication\n\n                \n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authentication/authentication.guard.ts:33\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/authentication/authentication.guard.ts:59\n                        \n                    \n\n\n            \n                \n                        function for authenticating a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                true or false based on whether user is logged in or not\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n// import { Observable } from 'rxjs';\nimport { AccessTokenGuard } from '../access-token/access-token.guard';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { AUTH_TYPE_KEY } from 'src/auth/constants/auth.constant';\n\n/**\n * guard for authentication\n */\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  // using static means you can use the name of the property of the class without the \"this\" keyword\n  /**\n   * default auth type\n   */\n  private static readonly defaultAuthType = AuthType.Bearer;\n\n  /**\n   * map for auth types and guards they use\n   */\n  private readonly authTypeGuardMap: Record = {\n    [AuthType.Bearer]: this.accessTokenGuard,\n    [AuthType.None]: { canActivate: () => true },\n  };\n\n  /**\n   * constructor\n   * @param reflector\n   * @param accessTokenGuard\n   */\n  constructor(\n    /**\n     * injecting the reflector class\n     * The reflector class makes you access diff metadata from the execution context\n     */\n    private readonly reflector: Reflector,\n\n    /**\n     * Injecting the access token guard\n     *\n     */\n    private readonly accessTokenGuard: AccessTokenGuard,\n  ) {}\n\n  /**\n   * function for authenticating a user\n   * @param context\n   * @returns true or false based on whether user is logged in or not\n   */\n  async canActivate(context: ExecutionContext): Promise {\n    // Get all the auth types from reflector\n    // This returns an array of the auth types for a specific class or method in a class\n    const authTypes = this.reflector.getAllAndOverride(AUTH_TYPE_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]) ?? [AuthenticationGuard.defaultAuthType];\n\n    // create an array of the guards\n    const guards = authTypes.map((type) => this.authTypeGuardMap[type]).flat();\n\n    // Default error\n    const error = new UnauthorizedException();\n\n    // loop through the guards and fire the canActivate\n    for (const instance of guards) {\n      let canActivate;\n\n      try {\n        canActivate = await Promise.resolve(instance.canActivate(context));\n      } catch (err) {\n        throw err;\n      }\n\n      if (canActivate) {\n        return true;\n      }\n    }\n\n    throw error;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                bcrypt provider\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                comparePassword\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:27\n                        \n                    \n\n\n            \n                \n                        function for comparing password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                a boolean that indicates whether it is same password or not\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:15\n                        \n                    \n\n\n            \n                \n                        function for hashing user password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                hashed password\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing.provider';\nimport * as bcrypt from 'bcrypt';\n\n/**\n * bcrypt provider\n */\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n  /**\n   * function for hashing user password\n   * @param data\n   * @returns hashed password\n   */\n  public async hashPassword(data: string | Buffer): Promise {\n    // generate salt\n    const salt = await bcrypt.genSalt();\n    return bcrypt.hash(data, salt);\n  }\n\n  /**\n   * function for comparing password\n   * @param data\n   * @param encrypted\n   * @returns a boolean that indicates whether it is same password or not\n   */\n  public async comparePassword(\n    data: string | Buffer,\n    encrypted: string,\n  ): Promise {\n    return await bcrypt.compare(data, encrypted);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Cart.html":{"url":"interfaces/Cart.html","title":"interface - Cart","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Cart\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/interfaces/cart.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            items\n                                        \n                                \n                                \n                                        \n                                            subtotal\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        items:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subtotal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subtotal:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Product } from '../../products/product.entity';\n\nexport interface Cart {\n  items: {\n    id: string;\n    product: Product;\n    quantity: number;\n  }[];\n  subtotal: number;\n  total: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CartController.html":{"url":"controllers/CartController.html","title":"controller - CartController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CartController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/cart.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                cart\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addToCart\n                            \n                            \n                                    \n                                clearUserCart\n                            \n                            \n                                    \n                                decrementQuantity\n                            \n                            \n                                    \n                                getUserCart\n                            \n                            \n                                    \n                                removeFromCart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addToCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    addToCart(userId: string, dto: CreateCartItemDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/cart/cart.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        clearUserCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearUserCart(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('clear')\n                \n            \n\n                    \n                        \n                            Defined in src/cart/cart.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        decrementQuantity\n                        \n                    \n                \n            \n            \n                \n                        \n                    decrementQuantity(userId: string, cartId: string, updateCartItemDto: UpdateCartItemDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':cartId')\n                \n            \n\n                    \n                        \n                            Defined in src/cart/cart.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCartItemDto\n                                            \n                                                            UpdateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getUserCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserCart(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('')\n                \n            \n\n                    \n                        \n                            Defined in src/cart/cart.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeFromCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFromCart(userId: string, cartId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':cartId')\n                \n            \n\n                    \n                        \n                            Defined in src/cart/cart.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport { CartService } from './providers/cart.service';\nimport { ActiveUser } from 'src/auth/decorator/active-user.decorator';\nimport { CreateCartItemDto } from './dtos/create-cart-item.dto';\nimport { UpdateCartItemDto } from './dtos/update-cart-item.dto';\n\n@Controller('cart')\nexport class CartController {\n  constructor(\n    /**\n     * injecting the cartService\n     */\n    private readonly cartService: CartService,\n  ) {}\n\n  @Delete('clear')\n  clearUserCart(@ActiveUser('sub') userId: string) {\n    console.log('clearing...');\n    return this.cartService.clearCart(userId);\n  }\n\n  @Post('')\n  addToCart(@ActiveUser('sub') userId: string, @Body() dto: CreateCartItemDto) {\n    return this.cartService.addToCart(userId, dto);\n  }\n\n  @Get('')\n  getUserCart(@ActiveUser('sub') userId: string) {\n    return this.cartService.getCart(userId);\n  }\n\n  @Delete(':cartId')\n  removeFromCart(\n    @ActiveUser('sub') userId: string,\n    @Param('cartId') cartId: string,\n  ) {\n    return this.cartService.removeCartItem(userId, cartId);\n  }\n\n  @Patch(':cartId')\n  decrementQuantity(\n    @ActiveUser('sub') userId: string,\n    @Param('cartId') cartId: string,\n    @Body() updateCartItemDto: UpdateCartItemDto,\n  ) {\n    console.log('qty', updateCartItemDto.quantity);\n    return this.cartService.decrementQuantity(\n      userId,\n      cartId,\n      updateCartItemDto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CartItem.html":{"url":"entities/CartItem.html","title":"entity - CartItem","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CartItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/cart-item.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                product\n                            \n                            \n                                    \n                                quantity\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, product => product.cartItems, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.cartItems, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // src/cart/entities/cart-item.entity.ts\n// User-based cart item entity: Persists cart per user in DB\nimport { Product } from '../products/product.entity';\nimport { User } from '../users/user.entity';\nimport {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  DeleteDateColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity('cart_items')\nexport class CartItem {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ default: 1 })\n  quantity: number;\n\n  @ManyToOne(() => User, (user) => user.cartItems, { onDelete: 'CASCADE' })\n  user: User;\n\n  @ManyToOne(() => Product, (product) => product.cartItems, {\n    onDelete: 'CASCADE',\n  })\n  product: Product;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @DeleteDateColumn()\n  deletedAt?: Date; // Soft delete for cart items\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CartModule.html":{"url":"modules/CartModule.html","title":"module - CartModule","body":"\n                   \n\n\n\n\n    Modules\n    CartModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CartModule\n\n\n\ncluster_CartModule_imports\n\n\n\ncluster_CartModule_providers\n\n\n\ncluster_CartModule_exports\n\n\n\n\nProduct\n\nProduct\n\n\n\nCartModule\n\nCartModule\n\nCartModule -->\n\nProduct->CartModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nCartModule -->\n\nProductsModule->CartModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nCartModule -->\n\nUsersModule->CartModule\n\n\n\n\n\nCartService \n\nCartService \n\nCartService  -->\n\nCartModule->CartService \n\n\n\n\n\nAddToCartProvider\n\nAddToCartProvider\n\nCartModule -->\n\nAddToCartProvider->CartModule\n\n\n\n\n\nCartService\n\nCartService\n\nCartModule -->\n\nCartService->CartModule\n\n\n\n\n\nGetCartProvider\n\nGetCartProvider\n\nCartModule -->\n\nGetCartProvider->CartModule\n\n\n\n\n\nUpdateCartItemProvider\n\nUpdateCartItemProvider\n\nCartModule -->\n\nUpdateCartItemProvider->CartModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cart/cart.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AddToCartProvider\n                        \n                        \n                            CartService\n                        \n                        \n                            GetCartProvider\n                        \n                        \n                            UpdateCartItemProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CartController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            Product\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CartService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CartController } from './cart.controller';\nimport { CartItem } from './cart-item.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CartService } from './providers/cart.service';\nimport { AddToCartProvider } from './providers/add-to-cart.provider';\nimport { GetCartProvider } from './providers/get-cart.provider';\nimport { UsersModule } from 'src/users/users.module';\nimport { UpdateCartItemProvider } from './providers/update-cart-item.provider';\nimport { Product } from 'src/products/product.entity';\nimport { ProductsModule } from 'src/products/products.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([CartItem]),\n    Product,\n    UsersModule,\n    ProductsModule,\n  ],\n  controllers: [CartController],\n  providers: [\n    CartService,\n    AddToCartProvider,\n    GetCartProvider,\n    UpdateCartItemProvider,\n  ],\n  exports: [CartService],\n})\nexport class CartModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CartService.html":{"url":"injectables/CartService.html","title":"injectable - CartService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CartService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/providers/cart.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addToCart\n                            \n                            \n                                    Async\n                                clearCart\n                            \n                            \n                                    Async\n                                decrementQuantity\n                            \n                            \n                                    Async\n                                getCart\n                            \n                            \n                                    Async\n                                removeCartItem\n                            \n                            \n                                    Async\n                                validateCartStock\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(addToCartProvider: AddToCartProvider, getCartProvider: GetCartProvider, updateCartItemProvider: UpdateCartItemProvider)\n                    \n                \n                        \n                            \n                                Defined in src/cart/providers/cart.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        addToCartProvider\n                                                  \n                                                        \n                                                                        AddToCartProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        getCartProvider\n                                                  \n                                                        \n                                                                        GetCartProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateCartItemProvider\n                                                  \n                                                        \n                                                                        UpdateCartItemProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addToCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    addToCart(userId: string, createCartItemDto: CreateCartItemDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/cart.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createCartItemDto\n                                            \n                                                            CreateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        clearCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearCart(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/cart.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decrementQuantity\n                        \n                    \n                \n            \n            \n                \n                        \n                    decrementQuantity(userId: string, cartId: string, updateCartItemDto: UpdateCartItemDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/cart.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCartItemDto\n                                            \n                                                            UpdateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCart(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/cart.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeCartItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeCartItem(userId: string, cartId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/cart.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateCartStock\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateCartStock(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/cart.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AddToCartProvider } from './add-to-cart.provider';\nimport { CreateCartItemDto } from '../dtos/create-cart-item.dto';\nimport { GetCartProvider } from './get-cart.provider';\nimport { UpdateCartItemProvider } from './update-cart-item.provider';\nimport { UpdateCartItemDto } from '../dtos/update-cart-item.dto';\n\n@Injectable()\nexport class CartService {\n  constructor(\n    /**\n     * injecting the addToCartProvider\n     */\n    private readonly addToCartProvider: AddToCartProvider,\n\n    /**\n     * injecting the getCartProvider\n     */\n    private readonly getCartProvider: GetCartProvider,\n\n    /**\n     * injecting the update\n     */\n    private readonly updateCartItemProvider: UpdateCartItemProvider,\n  ) {}\n\n  async addToCart(userId: string, createCartItemDto: CreateCartItemDto) {\n    return await this.addToCartProvider.addToCart(userId, createCartItemDto);\n  }\n\n  async getCart(userId: string) {\n    return await this.getCartProvider.getCart(userId);\n  }\n\n  async removeCartItem(userId: string, cartId: string) {\n    return await this.updateCartItemProvider.removeFromCart(userId, cartId);\n  }\n\n  async decrementQuantity(\n    userId: string,\n    cartId: string,\n    updateCartItemDto: UpdateCartItemDto,\n  ) {\n    return await this.updateCartItemProvider.decrementQuantity(\n      userId,\n      cartId,\n      updateCartItemDto,\n    );\n  }\n\n  async validateCartStock(userId: string) {\n    return await this.updateCartItemProvider.validateCartStock(userId);\n  }\n\n  async clearCart(userId: string) {\n    console.log('Clearing cart for user:', userId);\n    return await this.updateCartItemProvider.clearCart(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCartItemDto.html":{"url":"classes/CreateCartItemDto.html","title":"class - CreateCartItemDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCartItemDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/dtos/create-cart-item.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                productId\n                            \n                            \n                                    \n                                    \n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/dtos/create-cart-item.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/dtos/create-cart-item.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsString, Min } from 'class-validator';\n\nexport class CreateCartItemDto {\n  @IsString()\n  productId: string;\n\n  @IsInt()\n  @Min(1)\n  quantity: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateOrderDto.html":{"url":"classes/CreateOrderDto.html","title":"class - CreateOrderDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateOrderDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/dtos/create-order.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                billingAddress\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                paymentMethod\n                            \n                            \n                                    \n                                    \n                                shippingAddress\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        billingAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dtos/create-order.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        paymentMethod\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dtos/create-order.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        shippingAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dtos/create-order.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport class CreateOrderDto {\n  @IsNotEmpty()\n  @IsString()\n  shippingAddress: string;\n\n  @IsNotEmpty()\n  @IsString()\n  billingAddress: string;\n\n  // Optional: Payment method (mocked)\n  @IsOptional()\n  @IsString()\n  paymentMethod?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateOrderProvider.html":{"url":"injectables/CreateOrderProvider.html","title":"injectable - CreateOrderProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateOrderProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/providers/create-order.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource, cartService: CartService)\n                    \n                \n                        \n                            \n                                Defined in src/orders/providers/create-order.provider.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cartService\n                                                  \n                                                        \n                                                                        CartService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrder(userId: string, createOrderDto: CreateOrderDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/create-order.provider.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createOrderDto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { OrderItem } from '../order-item.entity';\nimport { Order } from '../order.entity';\nimport { User } from 'src/users/user.entity';\nimport { DataSource } from 'typeorm';\nimport { Product } from 'src/products/product.entity';\nimport { CartService } from 'src/cart/providers/cart.service';\nimport { CreateOrderDto } from '../dtos/create-order.dto';\nimport { CartItem } from 'src/cart/cart-item.entity';\n\n@Injectable()\nexport class CreateOrderProvider {\n  constructor(\n    private readonly dataSource: DataSource, // For transactions\n    private readonly cartService: CartService,\n  ) {}\n  async createOrder(\n    userId: string,\n    createOrderDto: CreateOrderDto,\n  ): Promise {\n    const queryRunner = this.dataSource.createQueryRunner();\n\n    try {\n      await queryRunner.connect();\n      await queryRunner.startTransaction();\n    } catch (error) {\n      console.log(error);\n      throw new RequestTimeoutException('Could not connect to datasource');\n    }\n\n    try {\n      await this.cartService.validateCartStock(userId);\n\n      const user = await queryRunner.manager.getRepository(User).findOne({\n        where: { id: userId },\n      });\n\n      // Fixed: Use CartItem entity and Query Builder\n      const cartItemsRaw = await queryRunner.manager\n        .createQueryBuilder(CartItem, 'ci')\n        .innerJoinAndSelect('ci.product', 'p')\n        .where('ci.user.id = :userId', { userId })\n        .andWhere('ci.deletedAt IS NULL')\n        .setLock('pessimistic_write')\n        .getMany();\n\n      // Transform to the format you need\n      const cartItems = cartItemsRaw.map((ci) => ({\n        id: ci.id,\n        quantity: ci.quantity,\n        productId: ci.product.id,\n        stock: ci.product.stock,\n        price: ci.product.price,\n      }));\n\n      if (cartItems.length === 0) {\n        throw new ConflictException('Cart is empty');\n      }\n\n      for (const item of cartItems) {\n        if (item.stock  sum + item.price * item.quantity,\n        0,\n      );\n      const total = subtotal;\n\n      const order = queryRunner.manager.create(Order, {\n        user,\n        total,\n        ...createOrderDto,\n      });\n      await queryRunner.manager.getRepository(Order).save(order);\n\n      const orderItems = cartItems.map((item) =>\n        queryRunner.manager.getRepository(OrderItem).create({\n          order,\n          product: { id: item.productId },\n          quantity: item.quantity,\n          price: item.price,\n        }),\n      );\n      await queryRunner.manager.getRepository(OrderItem).save(orderItems);\n\n      for (const item of cartItems) {\n        await queryRunner.manager.getRepository(Product).update(\n          { id: item.productId },\n          {\n            stock: () => `stock - ${item.quantity}`,\n            purchaseCount: () => `\"purchaseCount\" + ${item.quantity}`,\n          },\n        );\n      }\n\n      await queryRunner.manager.softDelete(CartItem, { user: { id: userId } });\n\n      await queryRunner.commitTransaction(); // Don't forget to commit!\n      return order;\n    } catch (error) {\n      await queryRunner.rollbackTransaction();\n      throw new ConflictException('Could not complete the transaction', {\n        description: String(error),\n      });\n    } finally {\n      try {\n        await queryRunner.release();\n      } catch (error) {\n        throw new RequestTimeoutException('Could not release the connection', {\n          description: String(error),\n        });\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dtos/create-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                imageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                stock\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ProductCategory)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(5)@MaxLength(350)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(5)@MaxLength(150)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEnum,\n  IsInt,\n  IsNotEmpty,\n  IsString,\n  MaxLength,\n  Min,\n  MinLength,\n} from 'class-validator';\nimport { ProductCategory } from '../enums/product-category.enum';\n\nexport class CreateProductDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(5)\n  @MaxLength(150)\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(5)\n  @MaxLength(350)\n  description: string;\n\n  @IsEnum(ProductCategory)\n  @IsNotEmpty()\n  category: ProductCategory;\n\n  @IsInt()\n  @IsNotEmpty()\n  price: number;\n\n  @IsInt()\n  @IsNotEmpty()\n  @Min(1)\n  stock: number;\n\n  @IsString()\n  @IsNotEmpty()\n  imageUrl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateProductProvider.html":{"url":"injectables/CreateProductProvider.html","title":"injectable - CreateProductProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateProductProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/create-product.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/create-product.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProduct(createProductDto: CreateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/create-product.provider.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Product } from '../product.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateProductDto } from '../dtos/create-product.dto';\n\n@Injectable()\nexport class CreateProductProvider {\n  constructor(\n    /**\n     * injecting the product repository\n     */\n    @InjectRepository(Product)\n    private readonly productsRepository: Repository,\n  ) {}\n\n  async createProduct(createProductDto: CreateProductDto): Promise {\n    const newProduct = this.productsRepository.create({\n      ...createProductDto,\n    });\n\n    return await this.productsRepository.save(newProduct);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                firstname\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                lastname\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'user email', example: 'favour@gmail.com'})@IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:48\n                        \n                    \n\n            \n                \n                    user email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'user firstname', example: 'favour'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:23\n                        \n                    \n\n            \n                \n                    user firstname\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'user lastname', example: 'ejim'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:36\n                        \n                    \n\n            \n                \n                    user lastname\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'user password', example: 'favour@Ejim1'})@IsString()@IsNotEmpty()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[\\W_]).{8,}$/, {message: 'Minimum eigt characters, atleast one letter, number and special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:65\n                        \n                    \n\n            \n                \n                    user password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  /**\n   * user firstname\n   */\n  @ApiProperty({\n    description: 'user firstname',\n    example: 'favour',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstname: string;\n\n  /**\n   * user lastname\n   */\n  @ApiProperty({\n    description: 'user lastname',\n    example: 'ejim',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  lastname: string;\n\n  /**\n   * user email\n   */\n  @ApiProperty({\n    description: 'user email',\n    example: 'favour@gmail.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  /**\n   * user password\n   */\n  @ApiProperty({\n    description: 'user password',\n    example: 'favour@Ejim1',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(/^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[\\W_]).{8,}$/, {\n    message:\n      'Minimum eigt characters, atleast one letter, number and special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, hashingProvider: HashingProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-user.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-user.provider.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { ValidationException } from 'src/common/filters/common-exceptions.filter';\nimport { Role } from 'src/auth/enums/role-type.enum';\n\n@Injectable()\nexport class CreateUserProvider {\n  constructor(\n    /**\n     * injecting the users repository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n\n    /**\n     * Injecting hashing provider\n     */\n    @Inject(forwardRef(() => HashingProvider))\n    private readonly hashingProvider: HashingProvider,\n  ) {}\n\n  public async createUser(\n    createUserDto: CreateUserDto,\n  ): Promise> {\n    const existingUser = await this.usersRepository.findOne({\n      where: { email: createUserDto.email },\n    });\n\n    if (existingUser) {\n      throw new ValidationException([\n        `user with ${createUserDto.email} already exists`,\n      ]);\n    }\n\n    // create a new user\n    let newUser = this.usersRepository.create({\n      ...createUserDto,\n      role: Role.USER,\n      password: await this.hashingProvider.hashPassword(createUserDto.password),\n    });\n\n    newUser = await this.usersRepository.save(newUser);\n\n    return {\n      id: newUser.id,\n      firstname: newUser.firstname,\n      lastname: newUser.lastname,\n      email: newUser.email,\n      role: newUser.role,\n      createdAt: newUser.createdAt,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataResponseInterceptor.html":{"url":"injectables/DataResponseInterceptor.html","title":"injectable - DataResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/data-response/data-response.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for the data response interceptor\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/data-response/data-response.interceptor.ts:14\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/data-response/data-response.interceptor.ts:32\n                        \n                    \n\n\n            \n                \n                        function for formatting the response data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                the response in {apiVersion: \"1.0.0\", data: ...} format\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { map, Observable } from 'rxjs';\n\n/**\n * provider for the data response interceptor\n */\n@Injectable()\nexport class DataResponseInterceptor implements NestInterceptor {\n  /**\n   * constructor\n   * @param configService\n   */\n  constructor(\n    /**\n     * injecting config service\n     */\n    private readonly configService: ConfigService,\n  ) {}\n\n  /**\n   * function for formatting the response data\n   * @param context\n   * @param next\n   * @returns the response in {apiVersion: \"1.0.0\", data: ...} format\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    // console.log('Before ...');\n    // before method execution\n    return next.handle().pipe(\n      map((data) => ({\n        apiVersion: this.configService.get('appConfig.apiVersion'),\n        data: data,\n      })),\n    );\n    // After method execution\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseConnectionException.html":{"url":"classes/DatabaseConnectionException.html","title":"class - DatabaseConnectionException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseConnectionException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/common-exceptions.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                database connection exception\n\n            \n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(operation?: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/filters/common-exceptions.filter.ts:6\n                            \n                        \n\n                \n                    \n                            constructor for the database connection exception\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        operation\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\n/**\n * database connection exception\n */\nexport class DatabaseConnectionException extends HttpException {\n  /**\n   * constructor for the database connection exception\n   * @param operation\n   */\n  constructor(operation?: string) {\n    super(\n      {\n        message:\n          'Unable to process your request at the moment, please try later',\n        description: 'Error connecting to the database',\n        operation,\n        errorCode: 'ERR_DB_CONNECTION',\n      },\n      HttpStatus.REQUEST_TIMEOUT,\n    );\n  }\n}\n\n/**\n * validation exception\n */\nexport class ValidationException extends HttpException {\n  /**\n   * constructor for the validation exception\n   * @param errors\n   */\n  constructor(errors: string[]) {\n    super(\n      {\n        message: 'Validation failed',\n        errors,\n        errorCode: 'ERR_VALIDATION',\n      },\n      HttpStatus.BAD_REQUEST,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DeleteProductProvider.html":{"url":"injectables/DeleteProductProvider.html","title":"injectable - DeleteProductProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DeleteProductProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/delete-product.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                deleteProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/delete-product.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProduct(productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/delete-product.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Product } from '../product.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class DeleteProductProvider {\n  constructor(\n    /**\n     * injecting the products repository\n     */\n    @InjectRepository(Product)\n    private readonly productsRepository: Repository,\n  ) {}\n\n  public async deleteProduct(productId: string): Promise {\n    const product = await this.productsRepository.findOneBy({ id: productId });\n\n    if (!product) throw new NotFoundException('Product not found');\n\n    await this.productsRepository.save({\n      ...product,\n      isDeleted: true,\n      deletedAt: new Date(),\n    });\n\n    return {\n      message: 'Product deleted successfully.',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ErrorHandlingInterceptor.html":{"url":"injectables/ErrorHandlingInterceptor.html","title":"injectable - ErrorHandlingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ErrorHandlingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/error-handling/error-handling.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                interceptor for handling error\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                isConnectionError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/error-handling/error-handling.interceptor.ts:24\n                        \n                    \n\n\n            \n                \n                        intercept function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isConnectionError\n                        \n                    \n                \n            \n            \n                \n                        \n                    isConnectionError(error: QueryFailedError)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/error-handling/error-handling.interceptor.ts:55\n                        \n                    \n\n\n            \n                \n                        function for checking whether it is a connection error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                        QueryFailedError\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                boolean for whether it is a connection error\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { Observable, throwError, TimeoutError } from 'rxjs';\nimport { catchError, timeout } from 'rxjs/operators';\nimport { DatabaseConnectionException } from 'src/common/filters/common-exceptions.filter';\nimport { QueryFailedError } from 'typeorm';\n\n/**\n * interceptor for handling error\n */\n@Injectable()\nexport class ErrorHandlingInterceptor implements NestInterceptor {\n  /**\n   * intercept function\n   * @param context\n   * @param next\n   * @returns\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      timeout(30000), // 30 second timeout\n      catchError((error) => {\n        // Handle specific database errors\n        if (error instanceof QueryFailedError) {\n          if (this.isConnectionError(error)) {\n            return throwError(() => new DatabaseConnectionException());\n          }\n        }\n\n        if (error instanceof TimeoutError) {\n          return throwError(\n            () =>\n              new RequestTimeoutException(\n                'Request timeout - please try again later',\n              ),\n          );\n        }\n\n        // Re-throw the original error to be handled by global filter\n        return throwError(() => error);\n      }),\n    );\n  }\n\n  /**\n   * function for checking whether it is a connection error\n   * @param error\n   * @returns boolean for whether it is a connection error\n   */\n  private isConnectionError(error: QueryFailedError): boolean {\n    const connectionErrorCodes = [\n      'ECONNREFUSED',\n      'ENOTFOUND',\n      'ETIMEDOUT',\n      'ECONNRESET',\n      'connection refused',\n      'connect timeout',\n    ];\n\n    const errorMessage = error.message.toLowerCase();\n    return connectionErrorCodes.some((code) =>\n      errorMessage.includes(code.toLowerCase()),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ErrorResponse.html":{"url":"interfaces/ErrorResponse.html","title":"interface - ErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/global-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                error response interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            controller\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            details\n                                        \n                                \n                                \n                                        \n                                            errorCode\n                                        \n                                \n                                \n                                        \n                                            errorType\n                                        \n                                \n                                \n                                        \n                                            handler\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            method\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        controller\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        controller:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    controller name\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        details\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        details:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    error details\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    error code\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    error type\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        handler:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    handler name\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    error message\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    controller method name\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    controller path\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    status code\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    timestamp\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport {\n  QueryFailedError,\n  EntityNotFoundError,\n  CannotCreateEntityIdMapError,\n} from 'typeorm';\n\n/**\n * error response interface\n */\nexport interface ErrorResponse {\n  /**\n   * status code\n   */\n  statusCode: number;\n  /**\n   * timestamp\n   */\n  timestamp: string;\n  /**\n   * controller path\n   */\n  path: string;\n  /**\n   * controller method name\n   */\n  method: string;\n  /**\n   * controller name\n   */\n  controller: string;\n  /**\n   * handler name\n   */\n  handler: string;\n  /**\n   * error type\n   */\n  errorType: string;\n  /**\n   * error code\n   */\n  errorCode: string;\n  /**\n   * error message\n   */\n  message: string;\n  /**\n   * error details\n   */\n  details?: any;\n}\n\n/**\n * global exception filter\n */\n@Catch()\nexport class GlobalExceptionFilter implements ExceptionFilter {\n  /**\n   * logger\n   */\n  private readonly logger = new Logger(GlobalExceptionFilter.name);\n\n  /**\n   * catch function\n   * @param exception\n   * @param host\n   */\n  catch(exception: unknown, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n\n    // Extract controller and handler info from request\n    const controller = this.getControllerName(request);\n\n    console.log('controller: ', controller);\n    const handler = this.getHandlerName(request);\n\n    const errorResponse = this.buildErrorResponse(\n      exception,\n      request,\n      controller,\n      handler,\n    );\n\n    // Log the error with full context\n    this.logger.error(\n      `${errorResponse.errorType} in ${controller}::${handler}`,\n      {\n        ...errorResponse,\n        stack: exception instanceof Error ? exception.stack : undefined,\n      },\n    );\n\n    response.status(errorResponse.statusCode).json(errorResponse);\n  }\n\n  /**\n   * builds the error response\n   * @param exception\n   * @param request\n   * @param controller\n   * @param handler\n   * @returns error response\n   */\n  private buildErrorResponse(\n    exception: unknown,\n    request: Request,\n    controller: string,\n    handler: string,\n  ): ErrorResponse {\n    let status = HttpStatus.INTERNAL_SERVER_ERROR;\n    let message = 'Internal server error';\n    let errorType = 'InternalServerError';\n    let errorCode = 'ERR_INTERNAL';\n    let details: any;\n\n    // Handle different error types\n    if (exception instanceof HttpException) {\n      status = exception.getStatus();\n      message = exception.message;\n      errorType = exception.constructor.name;\n      errorCode = this.getHttpErrorCode(status);\n      details = exception.getResponse();\n    } else if (exception instanceof QueryFailedError) {\n      status = HttpStatus.BAD_REQUEST;\n      message = 'Database query failed';\n      errorType = 'DatabaseError';\n      errorCode = 'ERR_DB_QUERY_FAILED';\n      details = this.sanitizeDatabaseError(exception);\n    } else if (exception instanceof EntityNotFoundError) {\n      status = HttpStatus.NOT_FOUND;\n      message = 'Requested resource not found';\n      errorType = 'EntityNotFoundError';\n      errorCode = 'ERR_ENTITY_NOT_FOUND';\n    } else if (exception instanceof CannotCreateEntityIdMapError) {\n      status = HttpStatus.BAD_REQUEST;\n      message = 'Invalid entity data provided';\n      errorType = 'EntityValidationError';\n      errorCode = 'ERR_ENTITY_VALIDATION';\n    } else if (exception instanceof Error) {\n      message = exception.message;\n      errorType = exception.constructor.name;\n      errorCode = 'ERR_UNKNOWN';\n    }\n\n    return {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      method: request.method,\n      controller,\n      handler,\n      errorType,\n      errorCode,\n      message,\n      details,\n    };\n  }\n\n  /**\n   * function for getting the controller name where the error originated from\n   * @param request\n   * @returns controller name\n   */\n  private getControllerName(request: Request): string {\n    // Extract controller from route path or use reflection metadata\n    const route = request.route?.path || request.url;\n\n    const pathSegments = route.split('/').filter(Boolean);\n\n    if (pathSegments.length > 0) {\n      return `${pathSegments[2].charAt(0).toUpperCase()}${pathSegments[2].slice(1)}Controller`;\n    }\n\n    return 'UnknownController';\n  }\n\n  /**\n   * function for getting the handler name of the handler function where the error originated from\n   * @param request\n   * @returns the handler name\n   */\n  private getHandlerName(request: Request): string {\n    const method = request.method.toLowerCase();\n    const pathSegments = request.url.split('/').filter(Boolean);\n\n    if (pathSegments.length > 1) {\n      return `${method}${pathSegments[pathSegments.length - 1].charAt(0).toUpperCase()}${pathSegments[pathSegments.length - 1].slice(1)}`;\n    }\n\n    return `${method}Handler`;\n  }\n\n  /**\n   * function for getting the http error code\n   * @param status\n   * @returns  http error code\n   */\n  private getHttpErrorCode(status: number): string {\n    const statusCodes = {\n      400: 'ERR_BAD_REQUEST',\n      401: 'ERR_UNAUTHORIZED',\n      403: 'ERR_FORBIDDEN',\n      404: 'ERR_NOT_FOUND',\n      409: 'ERR_CONFLICT',\n      422: 'ERR_VALIDATION',\n      429: 'ERR_RATE_LIMIT',\n      500: 'ERR_INTERNAL',\n      502: 'ERR_BAD_GATEWAY',\n      503: 'ERR_SERVICE_UNAVAILABLE',\n      504: 'ERR_GATEWAY_TIMEOUT',\n    };\n\n    return statusCodes[status] || 'ERR_UNKNOWN_HTTP';\n  }\n\n  /**\n   * function for sanitizing the db error\n   * @param error\n   * @returns db error object\n   */\n  private sanitizeDatabaseError(error: QueryFailedError): any {\n    // Remove sensitive information from database errors\n    return {\n      code: (error as any).code,\n      constraint: (error as any).constraint,\n      table: (error as any).table,\n      column: (error as any).column,\n      // Don't expose raw SQL or sensitive details\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindAllOrdersForUserProvider.html":{"url":"injectables/FindAllOrdersForUserProvider.html","title":"injectable - FindAllOrdersForUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindAllOrdersForUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/providers/find-all-orders-for-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllOrders\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(orderRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/orders/providers/find-all-orders-for-user.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        orderRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllOrders\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllOrders(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/find-all-orders-for-user.provider.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Order } from '../order.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class FindAllOrdersForUserProvider {\n  constructor(\n    @InjectRepository(Order)\n    private readonly orderRepository: Repository,\n  ) {}\n  async findAllOrders(userId: string): Promise {\n    return this.orderRepository.find({\n      where: { user: { id: userId } },\n      relations: ['items', 'items.product'],\n      order: { createdAt: 'DESC' },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindAllProductsProvider.html":{"url":"injectables/FindAllProductsProvider.html","title":"injectable - FindAllProductsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindAllProductsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/find-all-products.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cleanQuery\n                            \n                            \n                                    Async\n                                findAllProducts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository, paginationProvider: PaginationProvider)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/find-all-products.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cleanQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanQuery(query: GetProductsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/find-all-products.provider.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            GetProductsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         GetProductsDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllProducts(productQuery: GetProductsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/find-all-products.provider.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productQuery\n                                            \n                                                            GetProductsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { GetProductsDto } from '../dtos/get-products.dto';\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\nimport { Product } from '../product.entity';\nimport { Between, FindOptionsOrder, ILike, In, Repository } from 'typeorm';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\n\n@Injectable()\nexport class FindAllProductsProvider {\n  constructor(\n    /**\n     * injecting the products repository\n     */\n    @InjectRepository(Product)\n    private readonly productsRepository: Repository,\n\n    /**\n     * injecting the pagination provider\n     */\n    private readonly paginationProvider: PaginationProvider,\n  ) {}\n\n  async findAllProducts(\n    productQuery: GetProductsDto,\n  ): Promise> {\n    const cleanedQuery = this.cleanQuery(productQuery);\n\n    const { limit, page, sort } = cleanedQuery;\n\n    const safeLimit = Number(limit) > 0 ? Number(limit) : 10;\n    const safePage = Number(page) > 0 ? Number(page) : 1;\n\n    const where: any = {\n      isDeleted: false,\n    };\n\n    if (cleanedQuery.category) {\n      where.category = In(cleanedQuery.category.split(','));\n    }\n    if (cleanedQuery.price) {\n      const [min, max] = cleanedQuery.price\n        .split('-')\n        .map((p) => parseFloat(p.trim()));\n\n      if (!isNaN(min) && !isNaN(max)) {\n        where.price = Between(min, max);\n      }\n    }\n    if (cleanedQuery.name) {\n      const searchTerm = cleanedQuery.name.split('-').join(' '); // Replace dashes with spaces\n      where.name = ILike(`%${searchTerm}%`);\n    }\n\n    // Build order conditions (default to newest)\n    const order: FindOptionsOrder = { createdAt: 'DESC' };\n    if (sort) {\n      switch (sort) {\n        case 'newest':\n          order.createdAt = 'DESC';\n          break;\n        case 'oldest':\n          order.createdAt = 'ASC';\n          break;\n        case 'most_purchased':\n          order.purchaseCount = 'DESC';\n          break;\n\n        default:\n          // Fallback if validation misses\n          order.createdAt = 'DESC';\n      }\n    }\n\n    // Use PaginationProvider with options\n    const paginationQuery: PaginationQueryDto = {\n      limit: safeLimit,\n      page: safePage,\n    };\n\n    const paginatedProducts =\n      await this.paginationProvider.paginationQuery(\n        paginationQuery,\n        this.productsRepository,\n        {\n          where,\n          order,\n        },\n      );\n\n    return paginatedProducts;\n  }\n\n  private cleanQuery(query: GetProductsDto): GetProductsDto {\n    return Object.fromEntries(\n      Object.entries(query).filter(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        ([_, value]) =>\n          value !== 'undefined' && value !== undefined && value !== '',\n      ),\n    ) as GetProductsDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOrderByIdProvider.html":{"url":"injectables/FindOrderByIdProvider.html","title":"injectable - FindOrderByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOrderByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/providers/find-order-by-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findOrderById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(orderRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/orders/providers/find-order-by-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        orderRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOrderById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOrderById(userId: string, orderId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/find-order-by-id.provider.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Order } from '../order.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class FindOrderByIdProvider {\n  constructor(\n    @InjectRepository(Order)\n    private readonly orderRepository: Repository,\n  ) {}\n  async findOrderById(userId: string, orderId: string): Promise {\n    const order = await this.orderRepository.findOne({\n      where: { id: orderId, user: { id: userId } },\n      relations: ['items', 'items.product'],\n    });\n\n    if (!order) {\n      throw new NotFoundException('Order not found');\n    }\n\n    return order;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindProductByIdProvider.html":{"url":"injectables/FindProductByIdProvider.html","title":"injectable - FindProductByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindProductByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/find-product-by-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findProductById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/find-product-by-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findProductById(productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/find-product-by-id.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Product } from '../product.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindProductByIdProvider {\n  constructor(\n    /**\n     * injecting the products repository\n     */\n    @InjectRepository(Product)\n    private readonly productsRepository: Repository,\n  ) {}\n\n  public async findProductById(productId: string): Promise {\n    const product = await this.productsRepository.findOne({\n      where: {\n        id: productId,\n      },\n    });\n\n    if (!product) throw new NotFoundException('Product not found!');\n\n    return product;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindUserByEmailProvider.html":{"url":"injectables/FindUserByEmailProvider.html","title":"injectable - FindUserByEmailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindUserByEmailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-user-by-email.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findUserByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-user-by-email.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-user-by-email.provider.ts:21\n                        \n                    \n\n\n            \n                \n                        function for finding user by email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                User\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindUserByEmailProvider {\n  constructor(\n    /**\n     * injecting the users repository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  /**\n   * function for finding user by email\n   * @param email\n   * @returns User\n   */\n  public async findUserByEmail(email: string): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { email },\n      select: ['id', 'password', 'email', 'role', 'firstname', 'lastname'],\n    });\n\n    if (!user)\n      throw new NotFoundException(\n        `user with this email: ${email} does not exist.`,\n      );\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindUserByIdProvider.html":{"url":"injectables/FindUserByIdProvider.html","title":"injectable - FindUserByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindUserByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-user-by-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findUserById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-user-by-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserById(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-user-by-id.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindUserByIdProvider {\n  constructor(\n    /**\n     * injecting the users repository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  async findUserById(userId: string): Promise {\n    const user = await this.usersRepository.findOne({\n      where: {\n        id: userId,\n      },\n    });\n\n    if (!user) throw new NotFoundException(`user not found!`);\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokensProvider.html":{"url":"injectables/GenerateTokensProvider.html","title":"injectable - GenerateTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-tokens.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for generating tokens\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                            \n                                    Private\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-tokens.provider.ts:12\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:36\n                        \n                    \n\n\n            \n                \n                        function for generating tokens\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                access and refresh tokens\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(userId: string, expiresIn: number, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:64\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        function for using jwt to sign the user info\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                the object containing payload when a user signs in\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../config/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { User } from 'src/users/user.entity';\nimport { ActiveUserData } from '../interfaces/active-user-data.interface';\n\n/**\n * provider for generating tokens\n */\n@Injectable()\nexport class GenerateTokensProvider {\n  /**\n   * constructor\n   * @param jwtService\n   * @param jwtConfiguration\n   */\n  constructor(\n    /**\n     * Injecting the jwt service\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * Injecting the jwt config\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  /**\n   * function for generating tokens\n   * @param user\n   * @returns access and refresh tokens\n   */\n  public async generateTokens(user: User) {\n    const [accessToken, refreshToken] = await Promise.all([\n      // Generate the access token\n      this.signToken>(\n        user.id,\n        this.jwtConfiguration.accessTokenTtl,\n        {\n          email: user.email,\n          role: user.role,\n        },\n      ),\n      // Generate the refresh token\n      this.signToken(user.id, this.jwtConfiguration.refreshTokenTtl),\n    ]);\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  /**\n   * function for using jwt to sign the user info\n   * @param userId\n   * @param expiresIn\n   * @param payload\n   * @returns the object containing payload when a user signs in\n   */\n  private async signToken(userId: string, expiresIn: number, payload?: T) {\n    return await this.jwtService.signAsync(\n      {\n        sub: userId,\n        ...payload,\n      },\n      {\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n        secret: this.jwtConfiguration.secret,\n        expiresIn,\n      },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GetCartProvider.html":{"url":"injectables/GetCartProvider.html","title":"injectable - GetCartProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GetCartProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/providers/get-cart.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                calculateSubtotal\n                            \n                            \n                                    Async\n                                getCart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cartItemRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/cart/providers/get-cart.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cartItemRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        calculateSubtotal\n                        \n                    \n                \n            \n            \n                \n                        \n                    calculateSubtotal(items: Cart)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/get-cart.provider.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                items\n                                            \n                                                            Cart\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCart(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/get-cart.provider.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Cart } from '../interfaces/cart.interface';\nimport { Repository } from 'typeorm';\nimport { CartItem } from '../cart-item.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class GetCartProvider {\n  constructor(\n    /**\n     * injecting the cart item repository\n     */\n    @InjectRepository(CartItem)\n    private readonly cartItemRepository: Repository,\n  ) {}\n\n  async getCart(userId: string): Promise {\n    const cartItems = await this.cartItemRepository.find({\n      where: { user: { id: userId }, deletedAt: null },\n      relations: ['product'],\n    });\n\n    const items = cartItems.map((item) => ({\n      id: item.id,\n      product: item.product,\n      quantity: item.quantity,\n    }));\n\n    const subtotal = await this.calculateSubtotal(items);\n    return {\n      items,\n      subtotal,\n      total: subtotal,\n    };\n  }\n\n  private async calculateSubtotal(items: Cart['items']): Promise {\n    let subtotal = 0;\n    for (const item of items) {\n      subtotal += item.product.price * item.quantity;\n    }\n    return Number(subtotal.toFixed(2));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetProductsBaseDto.html":{"url":"classes/GetProductsBaseDto.html","title":"class - GetProductsBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetProductsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dtos/get-products.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                category\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                sort\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/get-products.dto.ts:19\n                        \n                    \n\n            \n                \n                    product category\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/get-products.dto.ts:12\n                        \n                    \n\n            \n                \n                    product name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/get-products.dto.ts:26\n                        \n                    \n\n            \n                \n                    product price\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"newest\" | \"oldest\" | \"most_purchased\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsIn(['newest', 'oldest', 'most_purchased'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/get-products.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsOptional, IsString } from 'class-validator';\nimport { ProductCategory } from '../enums/product-category.enum';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\nimport { IntersectionType } from '@nestjs/swagger';\n\nexport class GetProductsBaseDto {\n  /**\n   * product name\n   */\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  /**\n   * product category\n   */\n  @IsString()\n  @IsOptional()\n  category?: ProductCategory;\n\n  /**\n   * product price\n   */\n  @IsString()\n  @IsOptional()\n  price?: string;\n\n  @IsOptional()\n  @IsString()\n  @IsIn(['newest', 'oldest', 'most_purchased'])\n  sort?: 'newest' | 'oldest' | 'most_purchased';\n}\n\n/**\n * dto for get events\n */\nexport class GetProductsDto extends IntersectionType(\n  GetProductsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetProductsDto.html":{"url":"classes/GetProductsDto.html","title":"class - GetProductsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetProductsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dtos/get-products.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                dto for get events\n\n            \n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetProductsBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsOptional, IsString } from 'class-validator';\nimport { ProductCategory } from '../enums/product-category.enum';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\nimport { IntersectionType } from '@nestjs/swagger';\n\nexport class GetProductsBaseDto {\n  /**\n   * product name\n   */\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  /**\n   * product category\n   */\n  @IsString()\n  @IsOptional()\n  category?: ProductCategory;\n\n  /**\n   * product price\n   */\n  @IsString()\n  @IsOptional()\n  price?: string;\n\n  @IsOptional()\n  @IsString()\n  @IsIn(['newest', 'oldest', 'most_purchased'])\n  sort?: 'newest' | 'oldest' | 'most_purchased';\n}\n\n/**\n * dto for get events\n */\nexport class GetProductsDto extends IntersectionType(\n  GetProductsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GlobalExceptionFilter.html":{"url":"classes/GlobalExceptionFilter.html","title":"class - GlobalExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GlobalExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/global-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                global exception filter\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                buildErrorResponse\n                            \n                            \n                                catch\n                            \n                            \n                                    Private\n                                getControllerName\n                            \n                            \n                                    Private\n                                getHandlerName\n                            \n                            \n                                    Private\n                                getHttpErrorCode\n                            \n                            \n                                    Private\n                                sanitizeDatabaseError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(GlobalExceptionFilter.name)\n                    \n                \n                    \n                        \n                                Defined in src/common/filters/global-exception.filter.ts:70\n                        \n                    \n\n            \n                \n                    logger\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildErrorResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildErrorResponse(exception, request: Request, controller: string, handler: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/global-exception.filter.ts:115\n                        \n                    \n\n\n            \n                \n                        builds the error response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                controller\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                handler\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ErrorResponse\n\n                        \n                            \n                                error response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/global-exception.filter.ts:77\n                        \n                    \n\n\n            \n                \n                        catch function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getControllerName\n                        \n                    \n                \n            \n            \n                \n                        \n                    getControllerName(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/global-exception.filter.ts:175\n                        \n                    \n\n\n            \n                \n                        function for getting the controller name where the error originated from\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                controller name\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getHandlerName\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHandlerName(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/global-exception.filter.ts:193\n                        \n                    \n\n\n            \n                \n                        function for getting the handler name of the handler function where the error originated from\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                the handler name\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getHttpErrorCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHttpErrorCode(status: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/global-exception.filter.ts:209\n                        \n                    \n\n\n            \n                \n                        function for getting the http error code\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                http error code\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeDatabaseError\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeDatabaseError(error: QueryFailedError)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/global-exception.filter.ts:232\n                        \n                    \n\n\n            \n                \n                        function for sanitizing the db error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                        QueryFailedError\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                db error object\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport {\n  QueryFailedError,\n  EntityNotFoundError,\n  CannotCreateEntityIdMapError,\n} from 'typeorm';\n\n/**\n * error response interface\n */\nexport interface ErrorResponse {\n  /**\n   * status code\n   */\n  statusCode: number;\n  /**\n   * timestamp\n   */\n  timestamp: string;\n  /**\n   * controller path\n   */\n  path: string;\n  /**\n   * controller method name\n   */\n  method: string;\n  /**\n   * controller name\n   */\n  controller: string;\n  /**\n   * handler name\n   */\n  handler: string;\n  /**\n   * error type\n   */\n  errorType: string;\n  /**\n   * error code\n   */\n  errorCode: string;\n  /**\n   * error message\n   */\n  message: string;\n  /**\n   * error details\n   */\n  details?: any;\n}\n\n/**\n * global exception filter\n */\n@Catch()\nexport class GlobalExceptionFilter implements ExceptionFilter {\n  /**\n   * logger\n   */\n  private readonly logger = new Logger(GlobalExceptionFilter.name);\n\n  /**\n   * catch function\n   * @param exception\n   * @param host\n   */\n  catch(exception: unknown, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n\n    // Extract controller and handler info from request\n    const controller = this.getControllerName(request);\n\n    console.log('controller: ', controller);\n    const handler = this.getHandlerName(request);\n\n    const errorResponse = this.buildErrorResponse(\n      exception,\n      request,\n      controller,\n      handler,\n    );\n\n    // Log the error with full context\n    this.logger.error(\n      `${errorResponse.errorType} in ${controller}::${handler}`,\n      {\n        ...errorResponse,\n        stack: exception instanceof Error ? exception.stack : undefined,\n      },\n    );\n\n    response.status(errorResponse.statusCode).json(errorResponse);\n  }\n\n  /**\n   * builds the error response\n   * @param exception\n   * @param request\n   * @param controller\n   * @param handler\n   * @returns error response\n   */\n  private buildErrorResponse(\n    exception: unknown,\n    request: Request,\n    controller: string,\n    handler: string,\n  ): ErrorResponse {\n    let status = HttpStatus.INTERNAL_SERVER_ERROR;\n    let message = 'Internal server error';\n    let errorType = 'InternalServerError';\n    let errorCode = 'ERR_INTERNAL';\n    let details: any;\n\n    // Handle different error types\n    if (exception instanceof HttpException) {\n      status = exception.getStatus();\n      message = exception.message;\n      errorType = exception.constructor.name;\n      errorCode = this.getHttpErrorCode(status);\n      details = exception.getResponse();\n    } else if (exception instanceof QueryFailedError) {\n      status = HttpStatus.BAD_REQUEST;\n      message = 'Database query failed';\n      errorType = 'DatabaseError';\n      errorCode = 'ERR_DB_QUERY_FAILED';\n      details = this.sanitizeDatabaseError(exception);\n    } else if (exception instanceof EntityNotFoundError) {\n      status = HttpStatus.NOT_FOUND;\n      message = 'Requested resource not found';\n      errorType = 'EntityNotFoundError';\n      errorCode = 'ERR_ENTITY_NOT_FOUND';\n    } else if (exception instanceof CannotCreateEntityIdMapError) {\n      status = HttpStatus.BAD_REQUEST;\n      message = 'Invalid entity data provided';\n      errorType = 'EntityValidationError';\n      errorCode = 'ERR_ENTITY_VALIDATION';\n    } else if (exception instanceof Error) {\n      message = exception.message;\n      errorType = exception.constructor.name;\n      errorCode = 'ERR_UNKNOWN';\n    }\n\n    return {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      method: request.method,\n      controller,\n      handler,\n      errorType,\n      errorCode,\n      message,\n      details,\n    };\n  }\n\n  /**\n   * function for getting the controller name where the error originated from\n   * @param request\n   * @returns controller name\n   */\n  private getControllerName(request: Request): string {\n    // Extract controller from route path or use reflection metadata\n    const route = request.route?.path || request.url;\n\n    const pathSegments = route.split('/').filter(Boolean);\n\n    if (pathSegments.length > 0) {\n      return `${pathSegments[2].charAt(0).toUpperCase()}${pathSegments[2].slice(1)}Controller`;\n    }\n\n    return 'UnknownController';\n  }\n\n  /**\n   * function for getting the handler name of the handler function where the error originated from\n   * @param request\n   * @returns the handler name\n   */\n  private getHandlerName(request: Request): string {\n    const method = request.method.toLowerCase();\n    const pathSegments = request.url.split('/').filter(Boolean);\n\n    if (pathSegments.length > 1) {\n      return `${method}${pathSegments[pathSegments.length - 1].charAt(0).toUpperCase()}${pathSegments[pathSegments.length - 1].slice(1)}`;\n    }\n\n    return `${method}Handler`;\n  }\n\n  /**\n   * function for getting the http error code\n   * @param status\n   * @returns  http error code\n   */\n  private getHttpErrorCode(status: number): string {\n    const statusCodes = {\n      400: 'ERR_BAD_REQUEST',\n      401: 'ERR_UNAUTHORIZED',\n      403: 'ERR_FORBIDDEN',\n      404: 'ERR_NOT_FOUND',\n      409: 'ERR_CONFLICT',\n      422: 'ERR_VALIDATION',\n      429: 'ERR_RATE_LIMIT',\n      500: 'ERR_INTERNAL',\n      502: 'ERR_BAD_GATEWAY',\n      503: 'ERR_SERVICE_UNAVAILABLE',\n      504: 'ERR_GATEWAY_TIMEOUT',\n    };\n\n    return statusCodes[status] || 'ERR_UNKNOWN_HTTP';\n  }\n\n  /**\n   * function for sanitizing the db error\n   * @param error\n   * @returns db error object\n   */\n  private sanitizeDatabaseError(error: QueryFailedError): any {\n    // Remove sensitive information from database errors\n    return {\n      code: (error as any).code,\n      constraint: (error as any).constraint,\n      table: (error as any).table,\n      column: (error as any).column,\n      // Don't expose raw SQL or sensitive details\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                hashing provider\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePassword\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:19\n                        \n                    \n\n\n            \n                \n                        abstract method for comparing password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:12\n                        \n                    \n\n\n            \n                \n                        abstract method for hashing password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * hashing provider\n */\n@Injectable()\nexport abstract class HashingProvider {\n  /**\n   * abstract method for hashing password\n   * @param data\n   */\n  abstract hashPassword(data: string | Buffer): Promise;\n\n  /**\n   * abstract method for comparing password\n   * @param data\n   * @param encrypted\n   */\n  abstract comparePassword(\n    data: string | Buffer,\n    encrypted: string,\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Order.html":{"url":"entities/Order.html","title":"entity - Order","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Order\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/order.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                billingAddress\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                items\n                            \n                            \n                                    \n                                paymentMethod\n                            \n                            \n                                    \n                                shippingAddress\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                total\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        billingAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OrderItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, orderItem => orderItem.order)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        paymentMethod\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 100, default: 'Mocked Payment Method'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        shippingAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: OrderStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        total\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.orders, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:49\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from '../users/user.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { OrderItem } from './order-item.entity';\nimport { OrderStatus } from './enums/order-status.enum';\n\n@Entity('orders')\nexport class Order {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  total: number;\n\n  @Column({ type: 'enum', enum: OrderStatus, default: OrderStatus.PENDING })\n  status: OrderStatus;\n\n  @Column({\n    type: 'varchar',\n  })\n  shippingAddress: string;\n\n  @Column({\n    type: 'varchar',\n  })\n  billingAddress: string;\n\n  @Column({\n    type: 'varchar',\n    length: 100,\n    default: 'Mocked Payment Method',\n  })\n  paymentMethod: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @ManyToOne(() => User, (user) => user.orders, { onDelete: 'CASCADE' })\n  user: User;\n\n  @OneToMany(() => OrderItem, (orderItem) => orderItem.order)\n  items: OrderItem[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/OrderItem.html":{"url":"entities/OrderItem.html","title":"entity - OrderItem","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  OrderItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/order-item.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                order\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                product\n                            \n                            \n                                    \n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, order => order.items, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Order } from './order.entity';\nimport { Product } from '../products/product.entity';\n\n@Entity('order_items')\nexport class OrderItem {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  quantity: number;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  price: number;\n\n  @ManyToOne(() => Order, (order) => order.items, { onDelete: 'CASCADE' })\n  order: Order;\n\n  @ManyToOne(() => Product, { onDelete: 'CASCADE' })\n  product: Product;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OrdersController.html":{"url":"controllers/OrdersController.html","title":"controller - OrdersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OrdersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/orders.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                orders\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createOrder\n                            \n                            \n                                    \n                                    Async\n                                getOrder\n                            \n                            \n                                    \n                                    Async\n                                getOrders\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrder(userId: string, createOrderDto: CreateOrderDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/orders/orders.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createOrderDto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrder(userId: string, orderId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/orders/orders.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getOrders\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrders(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/orders/orders.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post } from '@nestjs/common';\nimport { OrdersService } from './providers/orders.service';\nimport { ActiveUser } from 'src/auth/decorator/active-user.decorator';\nimport { CreateOrderDto } from './dtos/create-order.dto';\n\n@Controller('orders')\nexport class OrdersController {\n  constructor(\n    /**\n     * injecting the orders service\n     */\n    private readonly ordersService: OrdersService,\n  ) {}\n\n  @Post()\n  async createOrder(\n    @ActiveUser('sub') userId: string,\n    @Body() createOrderDto: CreateOrderDto,\n  ) {\n    return this.ordersService.createOrder(userId, createOrderDto);\n  }\n\n  @Get()\n  async getOrders(@ActiveUser('sub') userId: string) {\n    return this.ordersService.findAllOrders(userId);\n  }\n\n  @Get(':id')\n  async getOrder(\n    @ActiveUser('sub') userId: string,\n    @Param('id') orderId: string,\n  ) {\n    return this.ordersService.findOrderById(userId, orderId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OrdersModule.html":{"url":"modules/OrdersModule.html","title":"module - OrdersModule","body":"\n                   \n\n\n\n\n    Modules\n    OrdersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OrdersModule\n\n\n\ncluster_OrdersModule_providers\n\n\n\ncluster_OrdersModule_imports\n\n\n\n\nCartModule\n\nCartModule\n\n\n\nOrdersModule\n\nOrdersModule\n\nOrdersModule -->\n\nCartModule->OrdersModule\n\n\n\n\n\nCreateOrderProvider\n\nCreateOrderProvider\n\nOrdersModule -->\n\nCreateOrderProvider->OrdersModule\n\n\n\n\n\nFindAllOrdersForUserProvider\n\nFindAllOrdersForUserProvider\n\nOrdersModule -->\n\nFindAllOrdersForUserProvider->OrdersModule\n\n\n\n\n\nFindOrderByIdProvider\n\nFindOrderByIdProvider\n\nOrdersModule -->\n\nFindOrderByIdProvider->OrdersModule\n\n\n\n\n\nOrdersService\n\nOrdersService\n\nOrdersModule -->\n\nOrdersService->OrdersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/orders/orders.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateOrderProvider\n                        \n                        \n                            FindAllOrdersForUserProvider\n                        \n                        \n                            FindOrderByIdProvider\n                        \n                        \n                            OrdersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OrdersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CartModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OrdersController } from './orders.controller';\nimport { OrdersService } from './providers/orders.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Order } from './order.entity';\nimport { OrderItem } from './order-item.entity';\nimport { CreateOrderProvider } from './providers/create-order.provider';\nimport { CartModule } from 'src/cart/cart.module';\nimport { FindAllOrdersForUserProvider } from './providers/find-all-orders-for-user.provider';\nimport { FindOrderByIdProvider } from './providers/find-order-by-id.provider';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Order, OrderItem]), CartModule],\n  controllers: [OrdersController],\n  providers: [\n    OrdersService,\n    CreateOrderProvider,\n    FindAllOrdersForUserProvider,\n    FindOrderByIdProvider,\n  ],\n})\nexport class OrdersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OrdersService.html":{"url":"injectables/OrdersService.html","title":"injectable - OrdersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OrdersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/providers/orders.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createOrder\n                            \n                            \n                                    Async\n                                findAllOrders\n                            \n                            \n                                    Async\n                                findOrderById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createOrderProvider: CreateOrderProvider, findAllOrdersForUserProvider: FindAllOrdersForUserProvider, findOrderByIdProvider: FindOrderByIdProvider)\n                    \n                \n                        \n                            \n                                Defined in src/orders/providers/orders.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createOrderProvider\n                                                  \n                                                        \n                                                                        CreateOrderProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findAllOrdersForUserProvider\n                                                  \n                                                        \n                                                                        FindAllOrdersForUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOrderByIdProvider\n                                                  \n                                                        \n                                                                        FindOrderByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrder(userId: string, createOrderDto: CreateOrderDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/orders.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createOrderDto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllOrders\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllOrders(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/orders.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOrderById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOrderById(userId: string, orderId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/orders.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateOrderProvider } from './create-order.provider';\nimport { CreateOrderDto } from '../dtos/create-order.dto';\nimport { FindAllOrdersForUserProvider } from './find-all-orders-for-user.provider';\nimport { FindOrderByIdProvider } from './find-order-by-id.provider';\n\n@Injectable()\nexport class OrdersService {\n  constructor(\n    /**\n     * createOrder provider\n     */\n    private readonly createOrderProvider: CreateOrderProvider,\n\n    private readonly findAllOrdersForUserProvider: FindAllOrdersForUserProvider,\n\n    private readonly findOrderByIdProvider: FindOrderByIdProvider,\n  ) {}\n\n  async createOrder(userId: string, createOrderDto: CreateOrderDto) {\n    return await this.createOrderProvider.createOrder(userId, createOrderDto);\n  }\n\n  async findAllOrders(userId: string) {\n    return await this.findAllOrdersForUserProvider.findAllOrders(userId);\n  }\n\n  async findOrderById(userId: string, orderId: string) {\n    return await this.findOrderByIdProvider.findOrderById(userId, orderId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/interfaces/paginated.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                interface for the response on paginated queries\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the data to be returned\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    various links for the pages of the data\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the metadata for the data\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n  /**\n   * the data to be returned\n   */\n  data: T[];\n\n  /**\n   * the metadata for the data\n   */\n  meta: {\n    itemsPerPage: number;\n    totalItems: number;\n    currentPage: number;\n    totalPages: number;\n  };\n\n  /**\n   * various links for the pages of the data\n   */\n  links: {\n    first: string;\n    last: string;\n    current: string;\n    next: string;\n    previous: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationProvider } from './providers/pagination.provider';\n\n@Module({\n  providers: [PaginationProvider],\n  exports: [PaginationProvider],\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/providers/pagination.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for pagination\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginationQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/providers/pagination.provider.ts:14\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginationQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginationQuery(paginationQuery: PaginationQueryDto, repository: Repository, options?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/providers/pagination.provider.ts:34\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        function for paginating find all queries\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                data, metadata and links for the findAll queries\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { PaginationQueryDto } from '../dtos/pagination-query.dto';\nimport { ObjectLiteral, Repository } from 'typeorm';\n\n// inorder to inject a request to a provider\nimport { Request } from 'express';\nimport { REQUEST } from '@nestjs/core';\nimport { Paginated } from '../interfaces/paginated.interface';\n\n/**\n * provider for pagination\n */\n@Injectable()\nexport class PaginationProvider {\n  /**\n   * constructor\n   * @param request\n   */\n  constructor(\n    /**\n     * Injecting request\n     */\n    @Inject(REQUEST)\n    private readonly request: Request,\n  ) {}\n\n  /**\n   * function for paginating find all queries\n   * @param paginationQuery\n   * @param repository\n   * @param options\n   * @returns data, metadata and links for the findAll queries\n   */\n  public async paginationQuery(\n    paginationQuery: PaginationQueryDto,\n    repository: Repository,\n    options?: any,\n  ): Promise> {\n    const results = await repository.find({\n      // no of posts to skip in one query\n      skip: (paginationQuery.page - 1) * paginationQuery.limit,\n      // the no of posts to take in one query\n      take: paginationQuery.limit,\n      relations: options.relations,\n      select: options.select,\n      where: options.where,\n      order: options.order,\n    });\n\n    /**\n     * Create the request URLS\n     */\n    const baseURL =\n      this.request.protocol + '://' + this.request.headers.host + '/';\n\n    const newUrl = new URL(this.request.url, baseURL);\n\n    const totalItems = await repository.count({\n      // no of posts to skip in one query\n      skip: (paginationQuery.page - 1) * paginationQuery.limit,\n      // the no of posts to take in one query\n      take: paginationQuery.limit,\n      relations: options.relations,\n      select: options.select,\n      where: options.where,\n    });\n    const totalPages = Math.ceil(totalItems / paginationQuery.limit);\n    const nextPage =\n      paginationQuery.page === totalPages\n        ? paginationQuery.page\n        : paginationQuery.page + 1;\n    const prevPage =\n      paginationQuery.page === 1\n        ? paginationQuery.page\n        : paginationQuery.page - 1;\n\n    const finalResponse: Paginated = {\n      data: results,\n      meta: {\n        itemsPerPage: paginationQuery.limit,\n        totalItems: totalItems,\n        currentPage: paginationQuery.page,\n        totalPages: totalPages,\n      },\n      links: {\n        first: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=1`,\n        last: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${totalPages}`,\n        current: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${paginationQuery.page}`,\n        next: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${nextPage}`,\n        previous: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${prevPage}`,\n      },\n    };\n\n    return finalResponse;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/dtos/pagination-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                dto for the pagination query\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:12\n                        \n                    \n\n            \n                \n                    limit for the number of items in the get all requests\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:19\n                        \n                    \n\n            \n                \n                    page number for the get all requests\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from 'class-validator';\n\n/**\n * dto for the pagination query\n */\nexport class PaginationQueryDto {\n  /**\n   * limit for the number of items in the get all requests\n   */\n  @IsOptional()\n  limit?: number = 0;\n\n  /**\n   * page number for the get all requests\n   */\n  @IsOptional()\n  @IsPositive()\n  page?: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Product.html":{"url":"entities/Product.html","title":"entity - Product","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/product.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                cartItems\n                            \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                imageUrl\n                            \n                            \n                                    \n                                isDeleted\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                orders\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                purchaseCount\n                            \n                            \n                                    \n                                stock\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        cartItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CartItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, cartItem => cartItem.product)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 50, nullable: false, enum: ProductCategory})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()@Index()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 100, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, order => order.product)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        purchaseCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:45\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  Index,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n} from 'typeorm';\nimport { ProductCategory } from './enums/product-category.enum';\nimport { CartItem } from '../cart/cart-item.entity';\nimport { Order } from '../orders/order.entity';\nimport { OrderItem } from '../orders/order-item.entity';\n\n@Entity('products')\n@Index(['name'])\n@Index(['category'])\nexport class Product {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ length: 100, nullable: false, unique: true })\n  name: string;\n\n  @Column({ length: 50, nullable: false, enum: ProductCategory })\n  category: ProductCategory;\n\n  @Column({ type: 'text', nullable: false })\n  description: string;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2, nullable: false })\n  price: number;\n\n  @Column({ default: 0, nullable: false })\n  stock: number;\n\n  @Column({ length: 255, nullable: true })\n  imageUrl?: string;\n\n  @CreateDateColumn()\n  @Index()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @Column({\n    type: 'boolean',\n    default: false,\n  })\n  isDeleted: boolean;\n\n  @Column({\n    type: 'timestamp',\n    nullable: true,\n  })\n  deletedAt?: Date;\n\n  @Column({\n    default: 0,\n  })\n  purchaseCount: number;\n\n  @OneToMany(() => CartItem, (cartItem) => cartItem.product)\n  cartItems?: CartItem[];\n\n  @OneToMany(() => OrderItem, (order) => order.product)\n  orders: Order[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductsController.html":{"url":"controllers/ProductsController.html","title":"controller - ProductsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                products\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createProduct\n                            \n                            \n                                    \n                                    \n                                deleteProduct\n                            \n                            \n                                    \n                                    \n                                findAllProducts\n                            \n                            \n                                    \n                                    \n                                updateProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProduct(createProductDto: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('')@Roles(Role.ADMIN)\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        deleteProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProduct(productId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.ADMIN)@Delete(':productid')\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAllProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllProducts(productsQuery: GetProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth(AuthType.None)@Get('')\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productsQuery\n                                            \n                                                            GetProductsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updateProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProduct(productId: string, updateProductDto: UpdateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.ADMIN)@Patch(':productid')\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { ProductsService } from './providers/products.service';\nimport { CreateProductDto } from './dtos/create-product.dto';\nimport { Auth } from 'src/auth/decorator/auth.decorator';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { Roles } from 'src/auth/decorator/role.decorator';\nimport { Role } from 'src/auth/enums/role-type.enum';\nimport { Product } from './product.entity';\nimport { GetProductsDto } from './dtos/get-products.dto';\nimport { Paginated } from '../common/pagination/interfaces/paginated.interface';\nimport { UpdateProductDto } from './dtos/update-product.dto';\n\n@Controller('products')\nexport class ProductsController {\n  constructor(\n    /**\n     * injecting the productsService\n     */\n    private readonly productsService: ProductsService,\n  ) {}\n\n  @Post('')\n  @Roles(Role.ADMIN)\n  createProduct(@Body() createProductDto: CreateProductDto): Promise {\n    return this.productsService.createProduct(createProductDto);\n  }\n\n  @Auth(AuthType.None)\n  @Get('')\n  findAllProducts(\n    @Query() productsQuery: GetProductsDto,\n  ): Promise> {\n    return this.productsService.findAllProducts(productsQuery);\n  }\n\n  @Roles(Role.ADMIN)\n  @Patch(':productid')\n  updateProduct(\n    @Param('productid') productId: string,\n    @Body() updateProductDto: UpdateProductDto,\n  ) {\n    return this.productsService.updateProduct(updateProductDto, productId);\n  }\n\n  @Roles(Role.ADMIN)\n  @Delete(':productid')\n  // @HttpCode(204)\n  deleteProduct(@Param('productid') productId: string) {\n    return this.productsService.deleteProduct(productId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductsModule.html":{"url":"modules/ProductsModule.html","title":"module - ProductsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_imports\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_ProductsModule_exports\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nProductsModule\n\nProductsModule\n\nProductsModule -->\n\nPaginationModule->ProductsModule\n\n\n\n\n\nProductsService \n\nProductsService \n\nProductsService  -->\n\nProductsModule->ProductsService \n\n\n\n\n\nCreateProductProvider\n\nCreateProductProvider\n\nProductsModule -->\n\nCreateProductProvider->ProductsModule\n\n\n\n\n\nDeleteProductProvider\n\nDeleteProductProvider\n\nProductsModule -->\n\nDeleteProductProvider->ProductsModule\n\n\n\n\n\nFindAllProductsProvider\n\nFindAllProductsProvider\n\nProductsModule -->\n\nFindAllProductsProvider->ProductsModule\n\n\n\n\n\nFindProductByIdProvider\n\nFindProductByIdProvider\n\nProductsModule -->\n\nFindProductByIdProvider->ProductsModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\nUpdateProductProvider\n\nUpdateProductProvider\n\nProductsModule -->\n\nUpdateProductProvider->ProductsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/products/products.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateProductProvider\n                        \n                        \n                            DeleteProductProvider\n                        \n                        \n                            FindAllProductsProvider\n                        \n                        \n                            FindProductByIdProvider\n                        \n                        \n                            ProductsService\n                        \n                        \n                            UpdateProductProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProductsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductsController } from './products.controller';\nimport { ProductsService } from './providers/products.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Product } from './product.entity';\nimport { CreateProductProvider } from './providers/create-product.provider';\nimport { FindAllProductsProvider } from './providers/find-all-products.provider';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\nimport { UpdateProductProvider } from './providers/update-product.provider';\nimport { DeleteProductProvider } from './providers/delete-product.provider';\nimport { FindProductByIdProvider } from './providers/find-product-by-id.provider';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Product]), PaginationModule],\n  controllers: [ProductsController],\n  providers: [\n    ProductsService,\n    CreateProductProvider,\n    FindAllProductsProvider,\n    UpdateProductProvider,\n    DeleteProductProvider,\n    FindProductByIdProvider,\n  ],\n  exports: [ProductsService, TypeOrmModule],\n})\nexport class ProductsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsService.html":{"url":"injectables/ProductsService.html","title":"injectable - ProductsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/products.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProduct\n                            \n                            \n                                    Async\n                                deleteProduct\n                            \n                            \n                                    Async\n                                findAllProducts\n                            \n                            \n                                    Async\n                                findProductById\n                            \n                            \n                                    Async\n                                updateProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createProductProvider: CreateProductProvider, findAllProductsProvider: FindAllProductsProvider, updateProductProvider: UpdateProductProvider, deleteProductProvider: DeleteProductProvider, findProductByIdProvider: FindProductByIdProvider)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/products.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createProductProvider\n                                                  \n                                                        \n                                                                        CreateProductProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findAllProductsProvider\n                                                  \n                                                        \n                                                                        FindAllProductsProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateProductProvider\n                                                  \n                                                        \n                                                                        UpdateProductProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        deleteProductProvider\n                                                  \n                                                        \n                                                                        DeleteProductProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findProductByIdProvider\n                                                  \n                                                        \n                                                                        FindProductByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProduct(createProductDto: CreateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProduct(productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllProducts(productQuery: GetProductsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productQuery\n                                            \n                                                            GetProductsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findProductById(productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProduct(updateProductDto: UpdateProductDto, productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateProductProvider } from './create-product.provider';\nimport { CreateProductDto } from '../dtos/create-product.dto';\nimport { Product } from '../product.entity';\nimport { FindAllProductsProvider } from './find-all-products.provider';\nimport { GetProductsDto } from '../dtos/get-products.dto';\nimport { Paginated } from '../../common/pagination/interfaces/paginated.interface';\nimport { UpdateProductProvider } from './update-product.provider';\nimport { UpdateProductDto } from '../dtos/update-product.dto';\nimport { DeleteProductProvider } from './delete-product.provider';\nimport { FindProductByIdProvider } from './find-product-by-id.provider';\n\n@Injectable()\nexport class ProductsService {\n  constructor(\n    /**\n     * injecting the create product provider\n     */\n    private readonly createProductProvider: CreateProductProvider,\n\n    /**\n     * injecting the find all products provider\n     */\n    private readonly findAllProductsProvider: FindAllProductsProvider,\n\n    /**\n     * injecting the update product provider\n     */\n    private readonly updateProductProvider: UpdateProductProvider,\n\n    /**\n     * injecting the deleteProductProvider\n     */\n    private readonly deleteProductProvider: DeleteProductProvider,\n\n    /**\n     * injecting the findProductByIdProvider\n     */\n    private readonly findProductByIdProvider: FindProductByIdProvider,\n  ) {}\n\n  async createProduct(createProductDto: CreateProductDto): Promise {\n    return this.createProductProvider.createProduct(createProductDto);\n  }\n\n  async findAllProducts(\n    productQuery: GetProductsDto,\n  ): Promise> {\n    return this.findAllProductsProvider.findAllProducts(productQuery);\n  }\n\n  async updateProduct(\n    updateProductDto: UpdateProductDto,\n    productId: string,\n  ): Promise {\n    return await this.updateProductProvider.updateProduct(\n      updateProductDto,\n      productId,\n    );\n  }\n\n  async deleteProduct(productId: string): Promise {\n    return await this.deleteProductProvider.deleteProduct(productId);\n  }\n\n  async findProductById(productId: string): Promise {\n    return await this.findProductByIdProvider.findProductById(productId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles/roles.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    role guard\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles/roles.guard.ts:16\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles/roles.guard.ts:31\n                        \n                    \n\n\n            \n                \n                        function for validating role of user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true or false depending whether the users role meets the role requirements in the role decorator\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from 'src/auth/constants/role.constant';\nimport { Role } from 'src/auth/enums/role-type.enum';\n\n/**\n * role guard\n */\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  // using static means you can use the name of the property of the class without the \"this\" keyword\n  //   private static readonly defaultRoleType: Role = Role.ADMIN;\n\n  /**\n   * constructor\n   * @param reflector\n   */\n  constructor(private reflector: Reflector) {}\n\n  /**\n   * function for validating role of user\n   * @param context\n   * @returns true or false depending whether the users role meets the role requirements in the role decorator\n   */\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (!requiredRoles) {\n      return true; //  allow access.\n    }\n\n    const { user } = context.switchToHttp().getRequest();\n\n    if (!user) {\n      throw new ForbiddenException('User not found.');\n    }\n\n    const hasRole = requiredRoles.some((role) => user.role === role);\n\n    if (!hasRole) {\n      throw new ForbiddenException(\n        'You do not have permission to access this resource.',\n      );\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SeedProducts1759619432047.html":{"url":"classes/SeedProducts1759619432047.html","title":"class - SeedProducts1759619432047","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SeedProducts1759619432047\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations/1759619432047-SeedProducts.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/migrations/1759619432047-SeedProducts.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/migrations/1759619432047-SeedProducts.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { seedProducts } from '../seed-file';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class SeedProducts1759619432047 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    // Create table if not exists (TypeORM handles this via entity sync, but explicit for migration)\n    await queryRunner.query(`\n      CREATE TABLE IF NOT EXISTS products (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(100) NOT NULL UNIQUE,\n        category VARCHAR(50) NOT NULL,\n        description TEXT NOT NULL,\n        price DECIMAL(10,2) NOT NULL,\n        stock INTEGER NOT NULL DEFAULT 0,\n        \"imageUrl\" VARCHAR(255) NULL,\n        INDEX idx_name (name),\n        INDEX idx_category (category)\n      );\n    `);\n\n    // Insert seed data (ignore duplicates if re-run)\n    https: for (const product of seedProducts) {\n      await queryRunner.query(\n        `INSERT INTO products (name, category, description, price, stock, \"imageUrl\") \n         VALUES ($1, $2, $3, $4, $5, $6) \n         ON CONFLICT (name) DO NOTHING;`, // Assumes name is unique; adjust if needed\n        [\n          product.name,\n          product.category,\n          product.description,\n          product.price,\n          product.stock,\n          product.imageUrl,\n        ],\n      );\n    }\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    // Rollback: Truncate seed data (or drop table if preferred)\n    await queryRunner.query(\n      `TRUNCATE TABLE products RESTART IDENTITY CASCADE;`,\n    );\n    // Alternative full drop: await queryRunner.query(`DROP TABLE IF EXISTS products;`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/sign-in.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                sign in dto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the email of the user', example: 'Favour@gmail.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/sign-in.dto.ts:17\n                        \n                    \n\n            \n                \n                    email address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the password of the user', example: '@Favour233'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/sign-in.dto.ts:28\n                        \n                    \n\n            \n                \n                    password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * sign in dto\n */\nexport class SignInDto {\n  /**\n   * email address\n   */\n  @ApiProperty({\n    description: 'This is the email of the user',\n    example: 'Favour@gmail.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * password\n   */\n  @ApiProperty({\n    description: 'This is the password of the user',\n    example: '@Favour233',\n  })\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SignInProvider.html":{"url":"injectables/SignInProvider.html","title":"injectable - SignInProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SignInProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/sign-in.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for sigining in users\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, hashingProvider: HashingProvider, generateTokenProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/sign-in.provider.ts:17\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.provider.ts:47\n                        \n                    \n\n\n            \n                \n                        function for signing in users\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                access and refresh tokens\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { HashingProvider } from './hashing.provider';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\nimport { SignInDto } from '../dtos/sign-in.dto';\nimport { User } from 'src/users/user.entity';\n\n/**\n * provider for sigining in users\n */\n@Injectable()\nexport class SignInProvider {\n  /**\n   * constructor\n   * @param usersService\n   * @param hashingProvider\n   * @param generateTokenProvider\n   */\n  constructor(\n    /**\n     * injecting the user service\n     */\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n\n    /**\n     * Injecting the hashing provider\n     */\n    private readonly hashingProvider: HashingProvider,\n\n    /**\n     * injecting the generate token provider\n     */\n    private readonly generateTokenProvider: GenerateTokensProvider,\n  ) {}\n\n  /**\n   * function for signing in users\n   * @param signInDto\n   * @returns access and refresh tokens\n   */\n  public async signIn(signInDto: SignInDto): Promise;\n  }> {\n    const user: User = await this.usersService.findUserByEmail(signInDto.email);\n\n    let isPasswordEqual: boolean = false;\n\n    isPasswordEqual = await this.hashingProvider.comparePassword(\n      signInDto.password,\n      user.password,\n    );\n\n    if (!isPasswordEqual) {\n      throw new UnauthorizedException('Incorrect email or password');\n    }\n\n    // generate an access token\n    const { accessToken, refreshToken } =\n      await this.generateTokenProvider.generateTokens(user);\n\n    return {\n      accessToken,\n      refreshToken,\n      user: {\n        id: user.id,\n        firstname: user.firstname,\n        lastname: user.lastname,\n        role: user.role,\n        email: user.email,\n      },\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCartItemDto.html":{"url":"classes/UpdateCartItemDto.html","title":"class - UpdateCartItemDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCartItemDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/dtos/update-cart-item.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/dtos/update-cart-item.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, Min } from 'class-validator';\n\nexport class UpdateCartItemDto {\n  @IsInt()\n  @Min(1)\n  quantity: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UpdateCartItemProvider.html":{"url":"injectables/UpdateCartItemProvider.html","title":"injectable - UpdateCartItemProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UpdateCartItemProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/providers/update-cart-item.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clearCart\n                            \n                            \n                                    Async\n                                decrementQuantity\n                            \n                            \n                                    Async\n                                deductStock\n                            \n                            \n                                    Async\n                                removeFromCart\n                            \n                            \n                                    Async\n                                validateCartStock\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cartItemRepository: Repository, getCartProvider: GetCartProvider, productRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/cart/providers/update-cart-item.provider.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cartItemRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        getCartProvider\n                                                  \n                                                        \n                                                                        GetCartProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        productRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        clearCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearCart(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/update-cart-item.provider.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decrementQuantity\n                        \n                    \n                \n            \n            \n                \n                        \n                    decrementQuantity(userId: string, cartId: string, updateCartItemDto: UpdateCartItemDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/update-cart-item.provider.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCartItemDto\n                                            \n                                                            UpdateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deductStock\n                        \n                    \n                \n            \n            \n                \n                        \n                    deductStock(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/update-cart-item.provider.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeFromCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFromCart(userId: string, cartId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/update-cart-item.provider.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateCartStock\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateCartStock(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/update-cart-item.provider.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { CartItem } from '../cart-item.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Cart } from '../interfaces/cart.interface';\nimport { GetCartProvider } from './get-cart.provider';\nimport { Product } from 'src/products/product.entity';\nimport { UpdateCartItemDto } from '../dtos/update-cart-item.dto';\n\n@Injectable()\nexport class UpdateCartItemProvider {\n  constructor(\n    /**\n     * injecting the cartRepository\n     */\n    @InjectRepository(CartItem)\n    private readonly cartItemRepository: Repository,\n\n    /**\n     * injecting the get cart provider\n     */\n    private readonly getCartProvider: GetCartProvider,\n\n    @InjectRepository(Product)\n    private readonly productRepository: Repository,\n  ) {}\n\n  async decrementQuantity(\n    userId: string,\n    cartId: string,\n    updateCartItemDto: UpdateCartItemDto,\n  ): Promise {\n    const cartItem = await this.cartItemRepository.findOne({\n      where: { user: { id: userId }, id: cartId },\n    });\n\n    if (!cartItem) {\n      throw new NotFoundException('Item not in cart');\n    }\n\n    if (\n      cartItem.quantity  {\n    const cartItem = await this.cartItemRepository.findOne({\n      where: { user: { id: userId }, id: cartId },\n    });\n\n    if (!cartItem) {\n      throw new NotFoundException('Item not in cart');\n    }\n\n    await this.cartItemRepository.softDelete({ id: cartItem.id });\n    return this.getCartProvider.getCart(userId);\n  }\n\n  // For orders: Validate stock before checkout\n  async validateCartStock(userId: string): Promise {\n    const cartItems = await this.cartItemRepository.find({\n      where: { user: { id: userId }, deletedAt: null },\n      relations: ['product'],\n    });\n\n    for (const item of cartItems) {\n      if (item.product.stock  {\n    const cartItems = await this.cartItemRepository.find({\n      where: { user: { id: userId }, deletedAt: null },\n      relations: ['product'],\n    });\n\n    for (const item of cartItems) {\n      item.product.stock -= item.quantity;\n      await this.productRepository.save(item.product);\n    }\n  }\n\n  // Clear cart after order\n  async clearCart(userId: string): Promise {\n    try {\n      await this.cartItemRepository.softDelete({ user: { id: userId } });\n    } catch (error) {\n      console.log(error);\n    }\n\n    return {\n      message: 'Cart cleared successfully',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dtos/update-product.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateProductDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isDeleted\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/update-product.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/update-product.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateProductDto } from './create-product.dto';\nimport { IsBoolean, IsOptional } from 'class-validator';\n\nexport class UpdateProductDto extends PartialType(CreateProductDto) {\n  @IsOptional()\n  @IsBoolean()\n  isDeleted?: boolean;\n\n  @IsOptional()\n  deletedAt?: Date | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UpdateProductProvider.html":{"url":"injectables/UpdateProductProvider.html","title":"injectable - UpdateProductProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UpdateProductProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/update-product.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                filterObj\n                            \n                            \n                                    Public\n                                    Async\n                                updateProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/update-product.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        filterObj\n                        \n                    \n                \n            \n            \n                \n                        \n                    filterObj(obj: T, ...allowedFields: ()[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/update-product.provider.ts:42\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                allowedFields\n                                            \n                                                        ()[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Record\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProduct(updateProductDto: UpdateProductDto, productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/update-product.provider.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Product } from '../product.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UpdateProductDto } from '../dtos/update-product.dto';\n\n@Injectable()\nexport class UpdateProductProvider {\n  constructor(\n    /**\n     * injecting the products repository\n     */\n    @InjectRepository(Product)\n    private readonly productsRepository: Repository,\n  ) {}\n\n  public async updateProduct(\n    updateProductDto: UpdateProductDto,\n    productId: string,\n  ): Promise {\n    const product = await this.productsRepository.findOneBy({ id: productId });\n\n    console.log(product);\n\n    if (!product) throw new NotFoundException('Product not found');\n\n    const filteredPayload = this.filterObj(\n      updateProductDto,\n      'description',\n      'price',\n      'stock',\n      'isDeleted',\n      'deletedAt',\n    );\n\n    return await this.productsRepository.save({\n      ...product,\n      ...filteredPayload,\n    });\n  }\n\n  private filterObj>(\n    obj: T,\n    ...allowedFields: (keyof T)[]\n  ) {\n    const newObj = {} as Record;\n    Object.keys(obj).forEach((el) => {\n      if (allowedFields.includes(el)) {\n        newObj[el] = obj[el];\n      }\n    });\n    return newObj;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                cartItems\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    Optional\n                                firstname\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastname\n                            \n                            \n                                    \n                                orders\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        cartItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CartItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, cartItem => cartItem.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()@Index()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, order => order.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, select: false})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Role, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:63\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Role } from '../auth/enums/role-type.enum';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  Index,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { CartItem } from '../cart/cart-item.entity';\nimport { Order } from '../orders/order.entity';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstname?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  lastname: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n\n  @Column({\n    type: 'enum',\n    enum: Role,\n    nullable: false,\n  })\n  role: Role;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    select: false,\n  })\n  @Exclude()\n  password: string;\n\n  @CreateDateColumn()\n  @Index()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @OneToMany(() => CartItem, (cartItem) => cartItem.user)\n  cartItems?: CartItem[];\n\n  @OneToMany(() => Order, (order) => order.user)\n  orders: Order[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Controller handling user-related operations\nBase URL: /users\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new user account', description: 'Register a new user with personal details and credentials. Password will be securely hashed.'})@ApiBody({description: 'User registration details', required: true, type: CreateUserDto, examples: undefined})@ApiResponse({status: 201, description: 'User account created successfully. Returns user details without password.', schema: undefined})@ApiResponse({status: 400, description: user with {email} already exists})@Post('')@HttpCode(HttpStatus.CREATED)@Auth(AuthType.None)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:82\n                        \n                    \n\n\n            \n                \n                        Creates a new user account with the provided user details\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user registration data including firstName, lastName, email and password\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                Promise - The created user object (password excluded from response)\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { User } from './user.entity';\nimport { ApiBody, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { Auth } from 'src/auth/decorator/auth.decorator';\nimport { UsersService } from './providers/users.service';\nimport { Role } from 'src/auth/enums/role-type.enum';\nimport { CreateUserDto } from './dtos/create-user.dto';\n\n/**\n * Controller handling user-related operations\n * Base URL: /users\n */\n@ApiTags('Users')\n@Controller('users')\nexport class UsersController {\n  constructor(\n    /**\n     * Injecting the users service for user-related operations\n     */\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * Creates a new user account with the provided user details\n   *\n   * @param createUserDto - The user registration data including firstName, lastName, email and password\n   * @returns Promise - The created user object (password excluded from response)\n   */\n  @ApiOperation({\n    summary: 'Create a new user account',\n    description:\n      'Register a new user with personal details and credentials. Password will be securely hashed.',\n  })\n  @ApiBody({\n    description: 'User registration details',\n    required: true,\n    type: CreateUserDto,\n    examples: {\n      validUser: {\n        summary: 'Valid user registration',\n        value: {\n          firstname: 'Kelechi',\n          lastname: 'Agnes',\n          email: 'iloghaluagneskc@gmail.com',\n          password: '@Password1',\n        },\n      },\n      invalidUser: {\n        summary: 'Invalid registration - missing password',\n        value: {\n          firstname: 'Kelechi',\n          lastname: 'Agnes',\n          email: 'iloghaluagneskc@gmail.com',\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 201,\n    description:\n      'User account created successfully. Returns user details without password.',\n    schema: {\n      type: 'object',\n      properties: {\n        id: { type: 'string', example: 'uuid-string' },\n        firstName: { type: 'string', example: 'John' },\n        lastName: { type: 'string', example: 'Doe' },\n        email: { type: 'string', example: 'john.doe@example.com' },\n        role: { type: 'string', example: Role.USER },\n        createdAt: { type: 'string', format: 'date-time' },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 400,\n    description: `user with {email} already exists`,\n  })\n  @Post('')\n  @HttpCode(HttpStatus.CREATED)\n  @Auth(AuthType.None)\n  public createUser(\n    @Body() createUserDto: CreateUserDto,\n  ): Promise> {\n    return this.usersService.createUser(createUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindUserByEmailProvider\n\nFindUserByEmailProvider\n\nUsersModule -->\n\nFindUserByEmailProvider->UsersModule\n\n\n\n\n\nFindUserByIdProvider\n\nFindUserByIdProvider\n\nUsersModule -->\n\nFindUserByIdProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateUserProvider\n                        \n                        \n                            FindUserByEmailProvider\n                        \n                        \n                            FindUserByIdProvider\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { CreateUserProvider } from './providers/create-user.provider';\nimport { FindUserByEmailProvider } from './providers/find-user-by-email.provider';\nimport { FindUserByIdProvider } from './providers/find-user-by-id.provider';\n\n@Module({\n  imports: [forwardRef(() => AuthModule), TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [\n    UsersService,\n    CreateUserProvider,\n    FindUserByEmailProvider,\n    FindUserByIdProvider,\n  ],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findUserById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createUserProvider: CreateUserProvider, findUserByEmailProvider: FindUserByEmailProvider, findUserByIdProvider: FindUserByIdProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findUserByEmailProvider\n                                                  \n                                                        \n                                                                        FindUserByEmailProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findUserByIdProvider\n                                                  \n                                                        \n                                                                        FindUserByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:32\n                        \n                    \n\n\n            \n                \n                        service for creating a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                User\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserById(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateUserProvider } from './create-user.provider';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { User } from '../user.entity';\nimport { FindUserByEmailProvider } from './find-user-by-email.provider';\nimport { FindUserByIdProvider } from './find-user-by-id.provider';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    /**\n     * injecting the create user provider\n     */\n    private readonly createUserProvider: CreateUserProvider,\n\n    /**\n     * injecting the find user by email provider\n     */\n    private readonly findUserByEmailProvider: FindUserByEmailProvider,\n\n    /**\n     * injecting the find user by id provider\n     */\n    private readonly findUserByIdProvider: FindUserByIdProvider,\n  ) {}\n\n  /**\n   * service for creating a user\n   * @param createUserDto\n   * @returns User\n   */\n  public async createUser(\n    createUserDto: CreateUserDto,\n  ): Promise> {\n    return await this.createUserProvider.createUser(createUserDto);\n  }\n\n  public async findUserByEmail(email: string): Promise {\n    return await this.findUserByEmailProvider.findUserByEmail(email);\n  }\n\n  public async findUserById(userId: string): Promise {\n    return await this.findUserByIdProvider.findUserById(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationException.html":{"url":"classes/ValidationException.html","title":"class - ValidationException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/common-exceptions.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                validation exception\n\n            \n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(errors: string[])\n                    \n                \n                        \n                            \n                                Defined in src/common/filters/common-exceptions.filter.ts:28\n                            \n                        \n\n                \n                    \n                            constructor for the validation exception\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        errors\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\n/**\n * database connection exception\n */\nexport class DatabaseConnectionException extends HttpException {\n  /**\n   * constructor for the database connection exception\n   * @param operation\n   */\n  constructor(operation?: string) {\n    super(\n      {\n        message:\n          'Unable to process your request at the moment, please try later',\n        description: 'Error connecting to the database',\n        operation,\n        errorCode: 'ERR_DB_CONNECTION',\n      },\n      HttpStatus.REQUEST_TIMEOUT,\n    );\n  }\n}\n\n/**\n * validation exception\n */\nexport class ValidationException extends HttpException {\n  /**\n   * constructor for the validation exception\n   * @param errors\n   */\n  constructor(errors: string[]) {\n    super(\n      {\n        message: 'Validation failed',\n        errors,\n        errorCode: 'ERR_VALIDATION',\n      },\n      HttpStatus.BAD_REQUEST,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/app.module.ts\n            \n            variable\n            ENV\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/auth/constants/auth.constant.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/constants/auth.constant.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/constants/role.constant.ts\n            \n            variable\n            ROLES_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/decorator/active-user.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/decorator/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/decorator/role.decorator.ts\n            \n            variable\n            Roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/sign-in.dto.ts\n            \n            class\n            SignInDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/guards/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/interfaces/active-user-data.interface.ts\n            \n            interface\n            ActiveUserData\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-tokens.provider.ts\n            \n            injectable\n            GenerateTokensProvider\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/providers/sign-in.provider.ts\n            \n            injectable\n            SignInProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/cart/cart-item.entity.ts\n            \n            entity\n            CartItem\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/cart/cart.controller.ts\n            \n            controller\n            CartController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/cart/dtos/create-cart-item.dto.ts\n            \n            class\n            CreateCartItemDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/cart/dtos/update-cart-item.dto.ts\n            \n            class\n            UpdateCartItemDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/cart/interfaces/cart.interface.ts\n            \n            interface\n            Cart\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cart/providers/add-to-cart.provider.ts\n            \n            injectable\n            AddToCartProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/cart/providers/cart.service.ts\n            \n            injectable\n            CartService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/cart/providers/get-cart.provider.ts\n            \n            injectable\n            GetCartProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cart/providers/update-cart-item.provider.ts\n            \n            injectable\n            UpdateCartItemProvider\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/common/filters/common-exceptions.filter.ts\n            \n            class\n            DatabaseConnectionException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/filters/common-exceptions.filter.ts\n            \n            class\n            ValidationException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/filters/global-exception.filter.ts\n            \n            class\n            GlobalExceptionFilter\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/common/filters/global-exception.filter.ts\n            \n            interface\n            ErrorResponse\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/common/interceptors/data-response/data-response.interceptor.ts\n            \n            injectable\n            DataResponseInterceptor\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/error-handling/error-handling.interceptor.ts\n            \n            injectable\n            ErrorHandlingInterceptor\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/pagination/dtos/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/pagination/interfaces/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/pagination/providers/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/migrations/1759619432047-SeedProducts.ts\n            \n            class\n            SeedProducts1759619432047\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/orders/dtos/create-order.dto.ts\n            \n            class\n            CreateOrderDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/orders/order-item.entity.ts\n            \n            entity\n            OrderItem\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/orders/order.entity.ts\n            \n            entity\n            Order\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/orders/orders.controller.ts\n            \n            controller\n            OrdersController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/orders/providers/create-order.provider.ts\n            \n            injectable\n            CreateOrderProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/orders/providers/find-all-orders-for-user.provider.ts\n            \n            injectable\n            FindAllOrdersForUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/orders/providers/find-order-by-id.provider.ts\n            \n            injectable\n            FindOrderByIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/orders/providers/orders.service.ts\n            \n            injectable\n            OrdersService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/products/dtos/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/products/dtos/get-products.dto.ts\n            \n            class\n            GetProductsBaseDto\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/products/dtos/get-products.dto.ts\n            \n            class\n            GetProductsDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/products/dtos/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/product.entity.ts\n            \n            entity\n            Product\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/products/product.entity.ts\n            \n            class\n            Product\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/products/products.controller.ts\n            \n            controller\n            ProductsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/products/providers/create-product.provider.ts\n            \n            injectable\n            CreateProductProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/providers/delete-product.provider.ts\n            \n            injectable\n            DeleteProductProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/providers/find-all-products.provider.ts\n            \n            injectable\n            FindAllProductsProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/products/providers/find-product-by-id.provider.ts\n            \n            injectable\n            FindProductByIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/providers/products.service.ts\n            \n            injectable\n            ProductsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/products/providers/update-product.provider.ts\n            \n            injectable\n            UpdateProductProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/seed-file.ts\n            \n            variable\n            seedProducts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/users/providers/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-user-by-email.provider.ts\n            \n            injectable\n            FindUserByEmailProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-user-by-id.provider.ts\n            \n            injectable\n            FindUserByIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (2/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            bcrypt : ^6.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            dotenv : ^17.2.3\n        \n            joi : ^18.0.1\n        \n            pg : ^8.16.3\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.27\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth-type.enum.ts)\n                        \n                        \n                            OrderStatus   (src/.../order-status.enum.ts)\n                        \n                        \n                            ProductCategory   (src/.../product-category.enum.ts)\n                        \n                        \n                            Role   (src/.../role-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/auth-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n    src/orders/enums/order-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 CONFIRMED\n                            \n                        \n                        \n                            \n                                Value : confirmed\n                            \n                        \n                        \n                            \n                                 SHIPPED\n                            \n                        \n                        \n                            \n                                Value : shipped\n                            \n                        \n                        \n                            \n                                 DELIVERED\n                            \n                        \n                        \n                            \n                                Value : delivered\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n    src/products/enums/product-category.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ProductCategory\n                    \n                \n                        \n                            \n                                 UTENSILS\n                            \n                        \n                        \n                            \n                                Value : Utensils\n                            \n                        \n                        \n                            \n                                 STORAGE\n                            \n                        \n                        \n                            \n                                Value : Storage\n                            \n                        \n                        \n                            \n                                 DRINKWARE\n                            \n                        \n                        \n                            \n                                Value : Drinkware\n                            \n                        \n                        \n                            \n                                 CLEANING\n                            \n                        \n                        \n                            \n                                Value : Cleaning\n                            \n                        \n                        \n                            \n                                 BAKING\n                            \n                        \n                        \n                            \n                                Value : Baking\n                            \n                        \n                        \n                            \n                                 CUTTING\n                            \n                        \n                        \n                            \n                                Value : Cutting\n                            \n                        \n                        \n                            \n                                 SERVWARE\n                            \n                        \n                        \n                            \n                                Value : Serveware\n                            \n                        \n            \n        \n\n    src/auth/enums/role-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CartModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OrdersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CartModule\n\n\n\ncluster_CartModule_imports\n\n\n\ncluster_CartModule_exports\n\n\n\ncluster_CartModule_providers\n\n\n\ncluster_OrdersModule\n\n\n\ncluster_OrdersModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_exports\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nCartModule\n\nCartModule\n\n\n\nOrdersModule\n\nOrdersModule\n\nOrdersModule -->\n\nCartModule->OrdersModule\n\n\n\nAppModule -->\n\nCartModule->AppModule\n\n\n\n\n\nCartService \n\nCartService \n\nCartService  -->\n\nCartModule->CartService \n\n\n\nAppModule -->\n\nOrdersModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nCartModule -->\n\nProductsModule->CartModule\n\n\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nProductsService \n\nProductsService \n\nProductsService  -->\n\nProductsModule->ProductsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nCartModule -->\n\nUsersModule->CartModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\nProduct\n\nProduct\n\nCartModule -->\n\nProduct->CartModule\n\n\n\n\n\nAddToCartProvider\n\nAddToCartProvider\n\nCartModule -->\n\nAddToCartProvider->CartModule\n\n\n\n\n\nCartService\n\nCartService\n\nCartModule -->\n\nCartService->CartModule\n\n\n\n\n\nGetCartProvider\n\nGetCartProvider\n\nCartModule -->\n\nGetCartProvider->CartModule\n\n\n\n\n\nUpdateCartItemProvider\n\nUpdateCartItemProvider\n\nCartModule -->\n\nUpdateCartItemProvider->CartModule\n\n\n\n\n\nCreateOrderProvider\n\nCreateOrderProvider\n\nOrdersModule -->\n\nCreateOrderProvider->OrdersModule\n\n\n\n\n\nFindAllOrdersForUserProvider\n\nFindAllOrdersForUserProvider\n\nOrdersModule -->\n\nFindAllOrdersForUserProvider->OrdersModule\n\n\n\n\n\nFindOrderByIdProvider\n\nFindOrderByIdProvider\n\nOrdersModule -->\n\nFindOrderByIdProvider->OrdersModule\n\n\n\n\n\nOrdersService\n\nOrdersService\n\nOrdersModule -->\n\nOrdersService->OrdersModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nProductsModule -->\n\nPaginationModule->ProductsModule\n\n\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nCreateProductProvider\n\nCreateProductProvider\n\nProductsModule -->\n\nCreateProductProvider->ProductsModule\n\n\n\n\n\nDeleteProductProvider\n\nDeleteProductProvider\n\nProductsModule -->\n\nDeleteProductProvider->ProductsModule\n\n\n\n\n\nFindAllProductsProvider\n\nFindAllProductsProvider\n\nProductsModule -->\n\nFindAllProductsProvider->ProductsModule\n\n\n\n\n\nFindProductByIdProvider\n\nFindProductByIdProvider\n\nProductsModule -->\n\nFindProductByIdProvider->ProductsModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\nUpdateProductProvider\n\nUpdateProductProvider\n\nProductsModule -->\n\nUpdateProductProvider->ProductsModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindUserByEmailProvider\n\nFindUserByEmailProvider\n\nUsersModule -->\n\nFindUserByEmailProvider->UsersModule\n\n\n\n\n\nFindUserByIdProvider\n\nFindUserByIdProvider\n\nUsersModule -->\n\nFindUserByIdProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    27 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../active-user.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.constant.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constant.ts)\n                        \n                        \n                            Roles   (src/.../role.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../role.constant.ts)\n                        \n                        \n                            seedProducts   (src/.../seed-file.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorator/active-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof ActiveUserData | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user: ActiveUserData = request[REQUEST_USER_KEY];\n\n    return field ? user?.[field] : user;\n  },\n)\n                    \n                \n\n            \n                \n                    Custom param decorator for the active user\n\n                \n            \n\n        \n    \n\n    src/auth/decorator/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) =>\n  SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n            \n                \n                    decorator for guarding user authentication\n\n                \n            \n\n        \n    \n\n    src/auth/constants/auth.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n            \n                \n                    constant for auth type\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n            \n                \n                    constant for request user\n\n                \n            \n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n            \n                \n                    app environment\n\n                \n            \n\n        \n    \n\n    src/auth/decorator/role.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n            \n                \n                    decoraror for gaurding the user roles\n\n                \n            \n\n        \n    \n\n    src/auth/constants/role.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n            \n                \n                    constant for the roles\n\n                \n            \n\n        \n    \n\n    src/seed-file.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        seedProducts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  // Utensils (6 products)\n  {\n    name: 'Bamboo Cutlery Set',\n    category: 'Utensils',\n    description: 'Sustainable fork, knife, spoon set – zero plastic waste.',\n    price: 12.0,\n    stock: 50,\n    imageUrl:\n      'https://images.unsplash.com/photo-1610701596007-11502861dcfa?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Reusable Silicone Spatulas',\n    category: 'Utensils',\n    description:\n      'Durable, heat-resistant spatulas made from food-grade silicone.',\n    price: 8.0,\n    stock: 30,\n    imageUrl:\n      'https://images.unsplash.com/photo-1556909212-d5b604d0c90d?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Wooden Spoons Set',\n    category: 'Utensils',\n    description:\n      'Handcrafted from FSC-certified wood, perfect for non-stick cookware.',\n    price: 5.0,\n    stock: 75,\n    imageUrl:\n      'https://images.unsplash.com/photo-1599751449307-1fc0b1e4e841?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Bamboo Whisk',\n    category: 'Utensils',\n    description:\n      'Eco whisk for whipping eggs or sauces without synthetic bristles.',\n    price: 6.5,\n    stock: 40,\n    imageUrl:\n      'https://images.unsplash.com/photo-1578916171728-46686eac8d58?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Silicone Tongs',\n    category: 'Utensils',\n    description:\n      'BPA-free silicone-coated tongs for safe flipping and gripping.',\n    price: 7.5,\n    stock: 55,\n    imageUrl:\n      'https://images.unsplash.com/photo-1584990347449-39d4a3b91a7d?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Coconut Shell Ladle',\n    category: 'Utensils',\n    description: 'Hand-carved from natural coconut shell, fully biodegradable.',\n    price: 9.0,\n    stock: 35,\n    imageUrl:\n      'https://images.unsplash.com/photo-1606923829579-0cb981a83e2e?w=400&h=400&fit=crop',\n  },\n  // Storage (6 products)\n  {\n    name: 'Beeswax Wraps Pack',\n    category: 'Storage',\n    description:\n      'Natural beeswax-coated cotton wraps – reusable alternative to plastic.',\n    price: 10.0,\n    stock: 60,\n    imageUrl:\n      'https://images.unsplash.com/photo-1591361443450-a891a97c1d35?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Glass Jars with Lids',\n    category: 'Storage',\n    description:\n      'Borosilicate glass jars for dry goods storage, airtight bamboo lids.',\n    price: 15.0,\n    stock: 25,\n    imageUrl:\n      'https://images.unsplash.com/photo-1590736969955-71cc94901144?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Bamboo Food Containers',\n    category: 'Storage',\n    description:\n      'Leak-proof bamboo fiber containers, microwave-safe and compostable.',\n    price: 18.0,\n    stock: 35,\n    imageUrl:\n      'https://images.unsplash.com/photo-1584862728452-2750a74f824d?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Silicone Food Bags',\n    category: 'Storage',\n    description:\n      'Reusable zip-lock bags made from platinum silicone, freezer-safe.',\n    price: 9.5,\n    stock: 45,\n    imageUrl:\n      'https://images.unsplash.com/photo-1620799140408-edc6dcb6d633?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Stainless Steel Canisters',\n    category: 'Storage',\n    description: 'Rust-proof stainless steel canisters with eco cork seals.',\n    price: 22.0,\n    stock: 20,\n    imageUrl:\n      'https://images.unsplash.com/photo-1609840114035-3c981769e3ad?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Fabric Produce Bags',\n    category: 'Storage',\n    description:\n      'Organic cotton mesh bags for fresh produce – washable and breathable.',\n    price: 6.0,\n    stock: 80,\n    imageUrl:\n      'https://images.unsplash.com/photo-1591086509456-4e566b60f93f?w=400&h=400&fit=crop',\n  },\n  // Drinkware (6 products)\n  {\n    name: 'Stainless Steel Tumbler',\n    category: 'Drinkware',\n    description:\n      'Insulated 20oz tumbler keeps drinks hot/cold for 24 hours, BPA-free.',\n    price: 20.0,\n    stock: 20,\n    imageUrl:\n      'https://images.unsplash.com/photo-1602143407151-7111542de6e8?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Bamboo Straws Pack (10-pack)',\n    category: 'Drinkware',\n    description:\n      'Reusable bamboo straws with cleaning brush – naturally antibacterial.',\n    price: 4.0,\n    stock: 100,\n    imageUrl:\n      'https://images.unsplash.com/photo-1528821128474-27f963b062bf?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Reusable Coffee Filters',\n    category: 'Drinkware',\n    description:\n      'Gold-tone mesh filters for pour-over coffee, reduces paper waste.',\n    price: 7.0,\n    stock: 55,\n    imageUrl:\n      'https://images.unsplash.com/photo-1514432324607-a09d9b4aefdd?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Glass Water Bottle',\n    category: 'Drinkware',\n    description:\n      '32oz borosilicate glass bottle with silicone sleeve and bamboo cap.',\n    price: 16.0,\n    stock: 15,\n    imageUrl:\n      'https://images.unsplash.com/photo-1602143407151-7111542de6e8?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Ceramic Mug Set',\n    category: 'Drinkware',\n    description:\n      'Hand-thrown ceramic mugs from recycled clay – microwave safe.',\n    price: 14.0,\n    stock: 40,\n    imageUrl:\n      'https://images.unsplash.com/photo-1514228742587-6b1558fcca3d?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Collapsible Silicone Cup',\n    category: 'Drinkware',\n    description: 'Portable 12oz cup folds flat, made from food-safe silicone.',\n    price: 11.0,\n    stock: 65,\n    imageUrl:\n      'https://images.unsplash.com/photo-1517487881594-2787fef5ebf7?w=400&h=400&fit=crop',\n  },\n  // Cleaning (5 products)\n  {\n    name: 'Eco Sponge Set',\n    category: 'Cleaning',\n    description: 'Plant-based cellulose sponges – biodegradable and scrubby.',\n    price: 5.5,\n    stock: 90,\n    imageUrl:\n      'https://images.unsplash.com/photo-1563453392212-326f5e854473?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Bamboo Scrub Brush',\n    category: 'Cleaning',\n    description: 'Natural fiber bristles on bamboo handle – compostable.',\n    price: 4.5,\n    stock: 70,\n    imageUrl:\n      'https://images.unsplash.com/photo-1585421514738-01798e348b17?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Coconut Coir Dish Brush',\n    category: 'Cleaning',\n    description:\n      'Stiff coir fibers from coconut husks for tough grease removal.',\n    price: 6.0,\n    stock: 50,\n    imageUrl:\n      'https://images.unsplash.com/photo-1600334129128-685c5582fd35?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Reusable Microfiber Cloths',\n    category: 'Cleaning',\n    description: 'Washable cloths trap dust and spills without chemicals.',\n    price: 8.0,\n    stock: 85,\n    imageUrl:\n      'https://images.unsplash.com/photo-1583947215259-38e31be8751f?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Wooden Bottle Brush',\n    category: 'Cleaning',\n    description:\n      'FSC wood handle with natural bristles for deep cleaning bottles.',\n    price: 7.0,\n    stock: 60,\n    imageUrl:\n      'https://images.unsplash.com/photo-1600334089648-b0d9d3028eb2?w=400&h=400&fit=crop',\n  },\n  // Baking (5 products)\n  {\n    name: 'Silicone Baking Mat',\n    category: 'Baking',\n    description: 'Non-stick, reusable mat – replaces parchment paper.',\n    price: 13.0,\n    stock: 45,\n    imageUrl:\n      'https://images.unsplash.com/photo-1586444248902-2f64eddc13df?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Wooden Rolling Pin',\n    category: 'Baking',\n    description: 'Smooth FSC beechwood rolling pin for dough prep.',\n    price: 10.0,\n    stock: 55,\n    imageUrl:\n      'https://images.unsplash.com/photo-1586444248902-2f64eddc13df?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Bamboo Pastry Board',\n    category: 'Baking',\n    description: 'Portable bamboo board with measurements for precise baking.',\n    price: 16.0,\n    stock: 30,\n    imageUrl:\n      'https://images.unsplash.com/photo-1495474472287-4d71bcdd2085?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Silicone Muffin Cups',\n    category: 'Baking',\n    description: 'Food-grade silicone cups – oven-safe up to 450°F.',\n    price: 9.0,\n    stock: 75,\n    imageUrl:\n      'https://images.unsplash.com/photo-1486427944299-d1955d23e34d?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Eco Cooling Rack',\n    category: 'Baking',\n    description: 'Stainless steel rack with bamboo frame – rust-resistant.',\n    price: 12.5,\n    stock: 40,\n    imageUrl:\n      'https://images.unsplash.com/photo-1556910103-1c02745aae4d?w=400&h=400&fit=crop',\n  },\n  // Cutting (6 products)\n  {\n    name: 'Bamboo Cutting Board',\n    category: 'Cutting',\n    description: 'Antibacterial bamboo board – gentle on knives.',\n    price: 19.0,\n    stock: 25,\n    imageUrl:\n      'https://images.unsplash.com/photo-1594756202469-9ff9799b2e4e?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Eco Knife Set',\n    category: 'Cutting',\n    description: 'Recycled stainless steel knives with bamboo handles.',\n    price: 28.0,\n    stock: 15,\n    imageUrl:\n      'https://images.unsplash.com/photo-1593618998160-e34014e67546?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Silicone Gripping Mat',\n    category: 'Cutting',\n    description: 'Non-slip mat for stable chopping – rolls up for storage.',\n    price: 11.0,\n    stock: 65,\n    imageUrl:\n      'https://images.unsplash.com/photo-1556911220-bff31c812dba?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Wooden Salad Bowl',\n    category: 'Cutting',\n    description: 'Acacia wood bowl for prepping and serving salads.',\n    price: 14.5,\n    stock: 35,\n    imageUrl:\n      'https://images.unsplash.com/photo-1547928576-d6a59a2e2f3e?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Herb Scissors',\n    category: 'Cutting',\n    description: 'Stainless steel scissors for quick herb chopping.',\n    price: 8.5,\n    stock: 80,\n    imageUrl:\n      'https://images.unsplash.com/photo-1464226184884-fa280b87c399?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Peeler Set',\n    category: 'Cutting',\n    description: 'Ergonomic bamboo-handled peelers for veggies and fruits.',\n    price: 7.0,\n    stock: 70,\n    imageUrl:\n      'https://images.unsplash.com/photo-1556909212-d5b604d0c90d?w=400&h=400&fit=crop',\n  },\n  // Serveware (6 products)\n  {\n    name: 'Bamboo Serving Platter',\n    category: 'Serveware',\n    description: 'Elegant bamboo platter for appetizers and mains.',\n    price: 17.0,\n    stock: 40,\n    imageUrl:\n      'https://images.unsplash.com/photo-1606923829579-0cb981a83e2e?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Compostable Napkins Pack',\n    category: 'Serveware',\n    description: 'Unbleached bamboo fiber napkins – fully compostable.',\n    price: 5.0,\n    stock: 100,\n    imageUrl:\n      'https://images.unsplash.com/photo-1604335399105-a0c585fd81a1?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Ceramic Serving Bowl',\n    category: 'Serveware',\n    description: 'Glazed ceramic bowl from sustainable clay sources.',\n    price: 21.0,\n    stock: 20,\n    imageUrl:\n      'https://images.unsplash.com/photo-1578916171728-46686eac8d58?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Wooden Cheese Board',\n    category: 'Serveware',\n    description: 'Olive wood board with natural oils for cheese serving.',\n    price: 24.0,\n    stock: 18,\n    imageUrl:\n      'https://images.unsplash.com/photo-1452251889946-8ff5ea7f27f3?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Silicone Trivet Set',\n    category: 'Serveware',\n    description: 'Heat-resistant trivets protect tables from hot dishes.',\n    price: 10.5,\n    stock: 50,\n    imageUrl:\n      'https://images.unsplash.com/photo-1556911220-bff31c812dba?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Bamboo Coasters (Set of 6)',\n    category: 'Serveware',\n    description: 'Engraved bamboo coasters – absorbent and stylish.',\n    price: 9.0,\n    stock: 75,\n    imageUrl:\n      'https://images.unsplash.com/photo-1577705998148-6da4f3963bc8?w=400&h=400&fit=crop',\n  },\n]\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
