var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.353,1,2.668]],["body/guards/AccessTokenGuard.html",[0,2.853,1,3.235,2,2.418,3,0.114,4,0.101,5,0.101,6,5.393,7,4.465,8,2.921,9,0.781,10,4.258,11,5.154,12,0.195,13,0.838,14,1.468,15,4.862,16,1.322,17,4.836,18,1.294,19,2.921,20,6.279,21,5.393,22,5.393,23,0.48,24,3.358,25,0.982,26,0.014,27,0.773,28,0.353,29,0.709,30,3.792,31,3.884,32,3.358,33,2.617,34,4.207,35,1.391,36,2.853,37,1.034,38,1.345,39,3.002,40,2.699,41,4.207,42,3.235,43,4.207,44,4.836,45,4.103,46,3.358,47,4.836,48,4.836,49,0.605,50,2.853,51,0.286,52,3.55,53,0.322,54,3.791,55,0.384,56,2.104,57,2.247,58,2.247,59,2.418,60,3.358,61,2.633,62,2.921,63,0.114,64,0.037,65,1.779,66,1.854,67,0.973,68,2.418,69,2.418,70,2.921,71,1.664,72,2.921,73,3.358,74,2.041,75,1.676,76,1.981,77,3.792,78,0.934,79,3.358,80,3.358,81,2.921,82,4.207,83,4.207,84,3.029,85,4.207,86,3.792,87,4.207,88,4.207,89,4.207,90,2.104,91,4.207,92,0.838,93,3.358,94,0.008,95,0.008]],["title/interfaces/ActiveUserData.html",[96,2.011,97,2.668]],["body/interfaces/ActiveUserData.html",[3,0.181,4,0.161,5,0.161,9,1.237,12,0.309,26,0.014,28,0.446,35,1.797,49,1.011,63,0.181,77,4.169,94,0.011,95,0.011,96,3.319,97,4.403,98,3.557,99,4.625,100,4.625,101,4.625,102,1.898,103,3.763,104,3.597,105,6.498,106,2.041]],["title/injectables/AddToCartProvider.html",[53,0.266,107,2.498]],["body/injectables/AddToCartProvider.html",[3,0.141,4,0.125,5,0.125,12,0.24,13,0.969,14,1.642,16,1.366,18,1.168,23,0.474,25,0.969,26,0.014,27,0.763,28,0.349,29,0.7,35,0.928,37,0.69,38,1.557,49,0.793,51,0.322,53,0.373,54,2.768,55,0.473,63,0.141,64,0.045,67,1.366,71,1.111,78,1.151,94,0.009,95,0.009,107,3.505,108,1.034,109,5.514,110,3.245,111,4.97,112,4.138,113,4.313,114,4.172,115,4.97,116,2.873,117,4.172,118,4.138,119,3.245,120,4.682,121,4.138,122,2.463,123,4.138,124,1.903,125,3.262,126,2.98,127,3.245,128,1.151,129,2.086,130,2.192,131,1.822,132,1.434,133,2.98,134,3.599,135,1.889,136,1.673,137,3.122,138,2.441,139,2.768,140,3.245,141,1.746,142,3.599,143,4.138,144,4.138,145,3.599]],["title/controllers/AppController.html",[146,1.615,147,2.872]],["body/controllers/AppController.html",[3,0.193,4,0.171,5,0.171,12,0.329,13,1.185,23,0.48,26,0.014,37,0.944,49,0.856,51,0.286,55,0.648,63,0.193,64,0.062,67,1.139,92,0.981,94,0.012,95,0.012,146,2.771,147,4.926,148,2.493,149,4.926,150,6.64,151,1.89,152,5.663,153,4.604,154,4.926,155,4.926,156,5.663]],["title/modules/AppModule.html",[157,1.615,158,2.872]],["body/modules/AppModule.html",[1,3.287,3,0.117,4,0.104,5,0.104,7,2.472,26,0.014,28,0.214,39,2.603,40,2.742,51,0.336,52,2.151,55,0.393,56,2.151,57,2.297,59,2.472,63,0.117,64,0.038,71,0.922,92,0.595,94,0.008,95,0.008,132,1.19,147,4.132,148,2.163,153,4.319,154,2.987,157,2.324,158,5.681,159,1.731,160,1.731,161,1.916,162,1.916,163,1.731,164,3.202,165,1.916,166,2.987,167,2.987,168,2.987,169,4.319,170,4.319,171,4.612,172,4.319,173,4.068,174,2.742,175,1.819,176,1.819,177,2.692,178,3.594,179,3.433,180,4.274,181,5.448,182,4.913,183,3.433,184,4.913,185,3.433,186,4.913,187,3.433,188,2.297,189,3.433,190,3.433,191,5.738,192,4.913,193,2.297,194,3.538,195,3.433,196,2.692,197,3.433,198,3.538,199,3.433,200,3.538,201,3.433,202,3.433,203,2.987,204,3.433,205,2.987,206,3.433,207,3.433,208,3.433,209,2.987,210,2.987,211,4.499,212,4.274,213,3.433,214,3.433,215,3.433,216,3.433,217,3.433,218,3.433,219,3.433,220,3.433,221,3.433,222,3.433,223,3.433,224,3.433,225,3.433,226,3.433,227,3.433,228,3.433,229,3.433,230,1.652,231,3.433,232,2.692,233,3.433,234,2.151,235,3.433,236,3.433,237,2.987,238,3.433,239,3.433,240,2.987,241,2.987,242,4.991,243,4.991]],["title/injectables/AppService.html",[53,0.266,153,2.498]],["body/injectables/AppService.html",[3,0.199,4,0.177,5,0.177,12,0.34,13,1.208,23,0.495,26,0.014,37,0.975,49,0.873,51,0.244,53,0.465,55,0.669,63,0.199,64,0.064,92,1.013,94,0.012,95,0.012,108,1.461,150,6.711,153,4.367,244,5.085,245,5.846,246,5.846,247,5.846]],["title/controllers/AuthController.html",[146,1.615,248,2.872]],["body/controllers/AuthController.html",[3,0.099,4,0.088,5,0.088,9,1.703,10,3.974,11,4.507,12,0.169,13,0.753,16,0.584,18,0.606,23,0.246,25,0.503,26,0.014,27,0.396,28,0.462,29,0.363,35,1.698,37,1.083,39,2.303,43,3.781,49,0.724,50,1.713,51,0.282,55,0.332,63,0.099,64,0.032,66,0.868,67,0.584,68,3.13,92,0.503,94,0.007,95,0.007,102,1.254,103,3.47,104,1.999,135,0.808,137,1.621,146,2.508,148,1.279,151,0.969,175,2.303,230,3.522,248,3.13,249,2.526,250,1.943,251,3.263,252,3.408,253,4.534,254,3.781,255,3.781,256,4.347,257,4.988,258,4.347,259,4.347,260,4.347,261,3.781,262,4.347,263,4.347,264,4.347,265,2.198,266,3.408,267,2.277,268,4.339,269,4.347,270,2.904,271,5.783,272,4.851,273,2.904,274,5.653,275,3.781,276,2.904,277,4.347,278,3.13,279,5.03,280,2.904,281,3.751,282,3.781,283,4.347,284,2.904,285,3.781,286,3.781,287,4.347,288,3.751,289,4.347,290,4.347,291,3.13,292,4.347,293,3.781,294,1.943,295,2.526,296,1.819,297,1.943,298,3.263,299,2.526,300,4.347,301,3.781,302,2.904,303,3.781,304,3.781,305,2.526,306,1.621,307,2.904,308,1.819,309,2.904,310,2.564,311,2.277,312,2.277,313,2.904,314,2.904,315,2.904,316,2.277,317,2.904,318,2.526,319,2.904,320,1.943,321,2.526,322,4.507,323,2.526,324,1.464,325,2.277,326,2.904,327,2.526,328,4.347,329,2.277,330,2.904,331,2.091,332,1.713,333,2.526,334,1.713,335,2.526,336,2.277,337,2.277,338,2.277,339,1.176,340,2.091,341,1.621,342,2.904,343,2.904]],["title/modules/AuthModule.html",[157,1.615,169,2.498]],["body/modules/AuthModule.html",[3,0.149,4,0.133,5,0.133,26,0.014,51,0.332,55,0.503,56,2.752,57,2.939,59,3.163,63,0.149,64,0.048,68,3.163,69,3.163,94,0.01,95,0.01,148,2.564,157,2.931,159,2.215,160,2.215,161,2.451,162,2.451,163,2.215,164,3.646,165,3.646,169,4.973,173,3.436,174,3.25,175,2.327,176,2.327,178,2.752,180,3.821,205,3.821,240,3.821,241,3.821,242,3.821,243,3.821,248,4.704,298,4.659,299,3.821,344,3.821,345,3.821,346,3.821,347,4.3,348,4.659,349,4.659,350,4.393,351,4.193,352,4.393,353,3.821,354,3.821,355,4.393,356,4.193,357,4.393,358,4.393,359,3.821,360,4.393,361,3.821,362,4.393,363,4.393,364,4.393]],["title/injectables/AuthService.html",[53,0.266,298,2.498]],["body/injectables/AuthService.html",[3,0.165,4,0.146,5,0.146,10,3.66,12,0.281,13,1.075,14,1.773,16,0.974,18,1.295,23,0.525,25,1.075,26,0.014,27,0.846,28,0.387,29,0.776,33,2.618,35,1.392,37,1.034,51,0.286,53,0.414,55,0.554,63,0.165,64,0.053,66,1.447,67,0.974,78,1.346,92,0.838,94,0.01,95,0.01,108,1.209,135,1.346,141,2.042,257,4.467,265,2.889,266,4.864,267,4.864,268,4.784,272,4.467,288,4.467,298,3.886,311,3.795,312,3.795,349,4.784,359,4.21,365,4.21,366,4.84,367,4.84,368,4.84,369,5.396,370,2.855,371,4.84]],["title/guards/AuthenticationGuard.html",[0,2.353,198,2.872]],["body/guards/AuthenticationGuard.html",[0,3.306,1,4.803,2,4.894,3,0.112,4,0.099,5,0.099,7,2.371,9,0.766,10,3.306,11,2.202,12,0.191,13,0.826,14,1.451,15,5.737,16,1.368,18,1.282,23,0.404,25,0.826,26,0.014,27,0.764,28,0.349,29,0.597,30,3.738,31,3.848,33,2.012,35,1.378,36,3.306,37,0.934,38,1.326,39,3.254,40,2.66,42,3.189,51,0.284,53,0.318,54,3.189,55,0.377,62,2.864,63,0.112,64,0.075,65,1.744,66,1.676,67,1.368,71,1.649,74,2.012,75,1.141,76,1.942,78,0.916,90,2.062,92,0.57,94,0.008,95,0.008,101,4.146,102,0.949,135,1.326,193,2.202,198,3.433,203,2.864,251,3.848,253,3.738,308,2.062,310,1.942,372,2.864,373,4.767,374,4.874,375,4.767,376,2.864,377,6.463,378,3.292,379,3.292,380,4.767,381,3.738,382,2.581,383,2.371,384,2.371,385,2.581,386,2.371,387,2.864,388,2.986,389,2.864,390,2.371,391,2.864,392,2.525,393,4.767,394,2.864,395,4.394,396,2.864,397,3.292,398,3.292,399,3.292,400,3.292,401,2.062,402,2.864,403,4.767,404,2.864,405,1.942,406,2.864,407,3.292,408,2.864,409,2.864,410,3.292,411,1.744,412,3.292,413,3.292,414,3.127,415,2.864,416,3.292,417,3.292,418,3.292,419,3.292,420,4.767]],["title/injectables/BcryptProvider.html",[53,0.266,356,2.872]],["body/injectables/BcryptProvider.html",[3,0.141,4,0.125,5,0.125,9,0.964,12,0.241,13,0.971,14,1.895,23,0.475,25,0.971,26,0.014,27,0.764,28,0.349,29,0.701,33,2.868,35,1.257,37,1.133,38,1.891,42,3.748,49,0.965,51,0.265,53,0.374,55,0.474,63,0.141,64,0.046,65,2.197,66,1.897,71,1.113,78,1.559,92,0.971,94,0.009,95,0.009,108,1.036,141,2.364,230,3.659,265,3.087,324,3.579,347,3.127,356,4.035,421,3.607,422,5.912,423,5.52,424,4.873,425,3.607,426,6.363,427,6.175,428,4.146,429,4.873,430,3.51,431,5.603,432,5.603,433,4.873,434,4.146,435,4.035,436,4.873,437,3.607,438,3.251,439,6.345,440,4.146,441,4.146,442,4.146]],["title/interfaces/Cart.html",[96,2.011,125,1.834]],["body/interfaces/Cart.html",[3,0.188,4,0.167,5,0.167,12,0.321,26,0.014,28,0.484,49,0.691,51,0.231,63,0.188,94,0.011,95,0.011,96,2.785,98,3.694,102,1.943,106,1.712,125,3.098,136,2.174,339,3.237,443,4.804,444,4.465,445,5.935,446,5.45,447,5.86,448,4.33,449,3.258]],["title/controllers/CartController.html",[146,1.615,450,2.872]],["body/controllers/CartController.html",[3,0.126,4,0.112,5,0.112,12,0.215,13,0.898,16,0.745,18,0.772,23,0.578,25,1.181,26,0.014,27,0.93,28,0.425,29,0.853,37,1.137,49,1.016,51,0.285,55,0.423,63,0.126,64,0.041,66,1.107,67,0.745,92,1.181,94,0.009,95,0.009,111,4.063,119,2.902,120,4.057,122,3.391,124,1.702,125,2.749,126,3.731,135,1.03,146,1.499,148,1.629,151,2.276,250,2.476,294,3.999,297,3.999,450,3.731,451,3.219,452,5.181,453,4.688,454,5.181,455,5.2,456,4.333,457,3.701,458,3.701,459,5.181,460,3.701,461,2.902,462,5.804,463,4.637,464,5.181,465,3.701,466,3.701,467,3.701,468,3.219,469,5.181,470,3.701,471,2.665,472,3.219,473,3.821,474,3.219,475,2.665,476,2.665,477,3.219,478,2.318,479,3.701,480,3.701,481,3.219,482,3.219,483,3.701,484,3.701,485,3.701,486,3.701,487,4.507,488,5.181,489,3.701,490,3.701,491,3.701,492,3.701]],["title/entities/CartItem.html",[129,2.011,493,1.615]],["body/entities/CartItem.html",[3,0.137,4,0.122,5,0.122,12,0.235,23,0.629,26,0.014,28,0.463,29,0.689,35,1.756,49,0.689,51,0.262,63,0.137,64,0.044,94,0.009,95,0.009,102,1.587,106,1.941,125,2.878,128,1.123,129,2.775,136,2.292,139,2.701,151,2.479,339,2.229,381,3.166,392,2.139,444,2.382,448,3.166,449,3.693,471,2.907,493,2.229,494,2.529,495,5.928,496,4.315,497,3.493,498,3.693,499,4.507,500,4.282,501,4.507,502,4.037,503,6.259,504,4.037,505,3.681,506,4.037,507,4.315,508,5.502,509,5.271,510,4.84,511,4.037,512,3.512,513,3.246,514,4.037,515,4.507,516,4.037,517,5.502,518,4.037,519,4.037,520,4.037,521,4.037,522,3.166,523,3.512,524,2.701,525,3.246,526,4.908,527,4.037,528,4.037]],["title/modules/CartModule.html",[157,1.615,170,2.498]],["body/modules/CartModule.html",[3,0.143,4,0.127,5,0.127,26,0.014,51,0.329,55,0.481,63,0.143,64,0.046,94,0.01,95,0.01,107,4.602,117,4.1,125,2.602,129,2.122,130,2.229,132,1.458,133,4.075,136,2.197,148,2.491,157,2.589,159,2.122,160,2.122,161,2.348,162,2.348,163,2.122,164,3.568,165,3.568,170,5.126,172,4.602,173,4.335,174,3.158,175,2.229,176,2.229,178,3.544,188,2.815,354,3.66,450,4.604,473,4.684,474,3.66,529,3.66,530,3.66,531,3.66,532,3.66,533,4.602,534,4.207,535,4.207,536,4.207,537,4.207,538,3.66,539,3.66,540,3.299,541,4.207,542,4.207]],["title/injectables/CartService.html",[53,0.266,473,2.353]],["body/injectables/CartService.html",[3,0.113,4,0.1,5,0.1,12,0.193,13,0.832,14,2.054,16,1.134,18,1.002,23,0.596,25,1.218,26,0.014,27,0.959,28,0.438,29,0.88,35,0.746,37,1.137,49,1.013,51,0.285,53,0.32,55,0.38,63,0.113,64,0.036,67,1.134,78,1.897,92,1.182,94,0.008,95,0.008,107,4.405,108,0.831,111,3.765,117,4.017,119,3.765,120,4.509,122,3.229,124,1.529,125,2.838,126,3.457,133,3.457,135,1.568,370,4.024,453,4.419,461,2.607,462,5.645,463,4.509,473,2.833,478,2.083,481,2.892,533,4.405,539,2.892,543,2.892,544,4.176,545,4.176,546,4.801,547,4.176,548,3.325,549,3.325,550,3.325,551,4.176,552,3.325,553,3.325,554,4.176,555,3.325,556,4.801,557,3.325,558,4.176,559,3.325,560,3.325,561,4.176,562,3.325,563,2.892,564,3.325,565,3.325,566,3.325,567,3.325]],["title/classes/CreateCartItemDto.html",[64,0.044,120,2.498]],["body/classes/CreateCartItemDto.html",[3,0.188,4,0.167,5,0.167,12,0.321,23,0.571,26,0.014,28,0.42,49,0.843,51,0.231,63,0.188,64,0.074,94,0.011,95,0.011,102,1.943,120,4.22,125,3.343,151,2.249,339,2.729,449,4.289,568,2.237,569,6.323,570,4.33,571,4.289,572,4.289,573,5.522,574,4.804,575,5.522,576,5.282,577,3.977,578,2.657,579,4.33]],["title/classes/CreateOrderDto.html",[64,0.044,580,2.498]],["body/classes/CreateOrderDto.html",[3,0.178,4,0.158,5,0.158,12,0.304,23,0.601,26,0.014,28,0.443,29,0.888,49,0.975,51,0.219,63,0.178,64,0.072,94,0.011,95,0.011,102,1.879,151,2.369,405,3.087,568,2.119,572,4.382,578,2.517,580,4.082,581,6.461,582,4.552,583,6.174,584,6.174,585,6.174,586,6.517,587,5.233,588,5.233,589,5.233,590,5.233,591,5.111,592,4.36,593,4.552,594,4.552]],["title/injectables/CreateOrderProvider.html",[53,0.266,595,2.498]],["body/injectables/CreateOrderProvider.html",[3,0.102,4,0.091,5,0.091,9,1.035,12,0.174,13,0.771,14,1.374,16,0.895,18,0.928,23,0.377,25,0.771,26,0.014,27,0.607,28,0.277,29,0.557,35,1.318,37,0.499,38,1.238,49,0.664,51,0.299,53,0.297,55,0.343,63,0.102,64,0.033,67,0.895,71,1.951,74,2.478,75,2.035,76,3.13,78,2.099,90,3.324,92,0.519,94,0.007,95,0.007,106,1.945,108,0.749,122,2.894,124,1.378,128,0.833,129,2.243,130,2.356,136,1.33,139,2.976,388,1.877,414,2.961,445,2.349,446,3.203,449,2.624,473,4.015,482,2.606,493,1.213,495,2.349,540,2.349,571,1.767,580,4.379,595,2.787,596,4.615,597,2.606,598,4.16,599,2.996,600,6.805,601,2.996,602,2.349,603,2.996,604,2.996,605,2.606,606,1.767,607,2.648,608,2.004,609,2.349,610,2.996,611,2.349,612,2.996,613,2.606,614,2.996,615,2.996,616,2.996,617,2.606,618,4.448,619,2.606,620,2.996,621,2.996,622,2.996,623,1.767,624,2.996,625,2.996,626,2.996,627,2.996,628,2.996,629,2.996,630,2.996,631,2.996,632,2.996,633,2.004,634,2.996,635,2.996,636,2.996,637,2.996,638,2.349,639,2.606,640,3.55,641,2.996,642,2.996,643,2.996,644,2.996,645,3.13,646,2.996,647,2.356,648,2.996,649,2.996,650,2.996,651,2.356,652,2.996,653,2.996,654,2.996,655,2.996,656,4.448,657,4.604,658,2.996,659,2.996,660,2.996,661,2.996,662,2.606,663,2.996,664,4.448,665,2.996,666,2.996,667,2.996,668,3.869,669,2.996,670,2.996,671,2.606,672,2.996,673,2.996,674,2.996,675,2.349,676,2.996,677,2.996,678,2.996,679,2.996,680,2.996,681,2.996,682,4.448,683,2.996,684,2.996,685,2.996,686,2.157]],["title/classes/CreateProductDto.html",[64,0.044,687,2.353]],["body/classes/CreateProductDto.html",[3,0.156,4,0.139,5,0.139,9,1.553,12,0.267,23,0.638,26,0.014,27,0.911,28,0.47,49,0.943,51,0.251,63,0.156,64,0.066,94,0.01,95,0.01,102,1.73,151,2.514,339,2.867,568,1.861,572,4.177,576,5.236,577,3.309,578,2.21,579,3.603,591,5.525,645,3.94,647,3.538,687,3.539,688,6.673,689,3.603,690,4.183,691,4.809,692,4.467,693,4.595,694,4.595,695,4.595,696,4.595,697,4.595,698,4.595,699,4.595,700,4.595,701,4.595,702,4.595,703,4.595,704,4.595,705,4.595,706,3.997,707,3.997,708,3.309,709,3.309,710,5.998,711,4.595,712,4.595,713,4.595]],["title/injectables/CreateProductProvider.html",[53,0.266,714,2.498]],["body/injectables/CreateProductProvider.html",[3,0.166,4,0.147,5,0.147,12,0.283,13,1.08,14,1.779,16,0.981,18,1.301,23,0.528,25,1.08,26,0.014,27,0.85,28,0.389,29,0.78,37,0.813,38,1.734,51,0.313,53,0.416,55,0.558,63,0.166,64,0.054,67,0.981,71,1.309,78,1.356,92,0.845,94,0.01,95,0.01,108,1.218,116,3.03,124,2.242,128,1.356,131,2.146,132,1.689,135,1.356,136,1.863,687,4.514,714,3.904,715,5.975,716,3.511,717,4.887,718,3.261,719,4.241,720,4.169,721,4.887,722,4.241,723,2.721,724,3.261,725,3.054,726,4.875,727,4.875,728,4.875]],["title/classes/CreateUserDto.html",[64,0.044,729,2.498]],["body/classes/CreateUserDto.html",[3,0.135,4,0.12,5,0.12,9,1.552,12,0.23,23,0.565,26,0.014,28,0.416,35,1.805,49,0.942,51,0.227,63,0.135,64,0.06,94,0.009,95,0.009,102,1.567,103,3.556,151,2.227,230,3.556,306,2.213,322,5.036,332,4.361,333,3.449,334,4.361,335,3.449,336,3.109,339,2.201,341,3.033,568,1.606,572,3.936,578,1.908,591,5.033,706,3.449,707,3.449,729,3.405,730,6.08,731,3.449,732,5.803,733,3.965,734,3.965,735,3.965,736,3.965,737,3.965,738,3.965,739,3.965,740,5.435,741,5.435,742,5.435,743,5.435,744,5.435,745,5.435,746,4.728,747,5.435,748,5.435,749,5.435,750,3.965,751,6.08,752,4.728,753,3.965,754,5.435,755,6.671,756,3.965,757,3.965,758,3.965]],["title/injectables/CreateUserProvider.html",[53,0.266,759,2.498]],["body/injectables/CreateUserProvider.html",[3,0.137,4,0.122,5,0.122,12,0.234,13,0.952,14,1.619,16,1.106,18,1.147,23,0.465,25,0.952,26,0.014,27,0.749,28,0.343,29,0.688,35,1.403,37,0.672,38,1.529,51,0.316,52,2.524,53,0.366,55,0.461,63,0.137,64,0.044,67,1.106,71,1.081,74,1.7,75,1.904,78,1.74,92,0.698,94,0.009,95,0.009,103,2.643,104,2.875,106,1.249,108,1.007,116,2.847,124,1.853,128,1.121,131,1.774,132,1.396,135,1.529,138,2.377,141,1.7,230,1.938,265,2.639,310,2.377,332,2.377,334,2.377,337,3.159,347,4.217,351,2.901,411,2.134,435,2.901,497,2.249,729,4.65,759,3.442,760,5.439,761,3.159,762,4.903,763,3.159,764,4.029,765,4.309,766,3.159,767,4.029,768,2.524,769,4.029,770,3.159,771,3.676,772,2.696,773,3.505,774,2.696,775,3.159,776,3.505,777,5.495,778,3.159,779,5.495,780,3.505,781,3.159,782,5.495,783,4.029,784,4.029,785,4.029,786,4.029,787,4.029,788,4.029,789,4.029,790,4.029,791,4.029]],["title/injectables/DataResponseInterceptor.html",[53,0.266,194,2.872]],["body/injectables/DataResponseInterceptor.html",[3,0.144,4,0.128,5,0.128,9,0.983,12,0.246,13,0.983,16,0.85,18,1.429,23,0.481,25,0.983,26,0.014,27,0.774,28,0.354,29,0.71,31,4.29,33,2.395,36,3.348,37,0.946,51,0.268,53,0.378,55,0.483,56,2.647,63,0.144,64,0.046,65,2.238,66,1.916,67,0.85,69,3.043,84,4.29,92,0.732,94,0.01,95,0.01,108,1.056,135,1.176,137,2.358,141,2.395,181,6.537,194,4.086,196,5.024,321,5.573,323,4.936,324,3.852,382,5.024,383,3.043,394,3.675,402,4.936,405,3.348,638,4.449,792,5.573,793,3.675,794,4.921,795,4.936,796,4.936,797,4.225,798,4.225,799,4.936,800,5.957,801,4.225,802,5.674,803,4.936,804,4.225,805,3.675,806,3.675,807,4.225,808,4.225]],["title/classes/DatabaseConnectionException.html",[64,0.044,809,2.668]],["body/classes/DatabaseConnectionException.html",[3,0.159,4,0.141,5,0.141,9,1.412,18,1.488,23,0.397,25,0.811,26,0.014,27,0.638,28,0.292,29,0.586,45,2.612,49,0.892,51,0.196,55,0.536,63,0.207,64,0.067,66,1.815,76,2.762,94,0.01,95,0.01,234,4.628,291,4.852,296,2.932,341,3.388,414,2.612,568,1.896,686,5.134,771,3.131,772,4.061,809,4.061,810,3.67,811,5.451,812,4.508,813,5.134,814,5.281,815,4.681,816,5.861,817,3.67,818,5.281,819,4.072,820,4.072,821,4.072,822,3.371,823,3.67,824,4.072,825,4.372,826,4.072,827,4.072,828,4.061,829,4.072,830,3.371,831,3.371,832,3.371]],["title/injectables/DeleteProductProvider.html",[53,0.266,833,2.498]],["body/injectables/DeleteProductProvider.html",[3,0.159,4,0.141,5,0.141,12,0.271,13,1.05,14,1.743,16,0.94,18,1.265,23,0.514,25,1.05,26,0.014,27,0.827,28,0.378,29,0.759,37,0.779,38,1.686,39,2.474,49,0.842,51,0.298,53,0.404,55,0.534,63,0.159,64,0.051,67,0.94,71,1.253,74,1.971,75,2.101,78,1.686,92,0.809,94,0.01,95,0.01,106,1.448,108,1.167,116,2.99,128,1.299,131,2.056,132,1.618,135,1.299,136,2.207,265,2.84,278,3.363,341,2.606,498,2.755,500,2.755,571,3.576,716,3.363,718,3.124,720,4.055,723,2.606,725,2.925,833,3.797,834,5.855,835,4.753,836,4.67,837,4.753,838,4.67,839,2.755,840,2.606,841,4.062,842,3.662,843,2.606,844,4.062,845,3.124,846,4.67]],["title/injectables/ErrorHandlingInterceptor.html",[53,0.266,847,3.127]],["body/injectables/ErrorHandlingInterceptor.html",[3,0.124,4,0.11,5,0.11,9,0.848,12,0.212,13,0.888,16,1.193,23,0.434,25,0.888,26,0.014,27,0.699,28,0.32,29,0.642,31,4.031,33,2.716,34,4.46,36,3.025,37,1.073,42,4.305,45,2.035,51,0.283,53,0.342,55,0.417,63,0.124,64,0.04,65,1.932,66,1.773,71,1.376,74,1.539,75,1.777,76,2.151,84,4.031,92,1.175,94,0.009,95,0.009,108,0.911,128,1.015,234,2.284,252,4.021,382,4.651,383,2.626,404,3.172,414,4.326,430,4.031,605,4.46,619,3.172,686,4.883,772,2.44,773,3.172,795,4.46,796,5.597,799,4.46,800,5.597,803,4.46,806,3.172,809,3.43,822,2.626,823,2.859,828,2.44,847,4.021,848,5.159,849,5.159,850,3.172,851,5.128,852,3.647,853,5.128,854,5.317,855,3.647,856,6.435,857,5.128,858,3.647,859,6.435,860,3.647,861,3.647,862,3.172,863,3.647,864,3.647,865,2.626,866,4.021,867,3.647,868,3.647,869,3.172,870,3.647,871,3.172,872,2.859,873,2.859,874,3.647,875,3.647,876,3.647,877,3.647,878,3.647,879,3.647,880,3.647,881,3.647,882,3.647,883,3.647]],["title/interfaces/ErrorResponse.html",[96,2.011,884,2.872]],["body/interfaces/ErrorResponse.html",[3,0.113,4,0.062,5,0.062,9,0.476,12,0.119,16,1.131,26,0.014,27,0.891,28,0.425,29,0.414,33,2.372,36,1.208,37,0.876,45,3.728,49,0.973,50,1.208,51,0.174,55,0.234,58,1.369,63,0.113,64,0.022,65,1.084,66,1.953,67,0.412,71,1.793,75,1.147,90,2.61,92,1.025,94,0.006,95,0.006,96,2.101,98,1.369,102,0.954,128,0.569,146,3.013,232,2.595,234,2.073,281,1.474,292,1.369,296,1.282,320,4.255,324,1.032,331,4.811,338,4.119,339,1.938,340,1.474,341,3.863,370,1.952,388,1.282,395,1.605,401,1.282,405,3.633,414,4.323,493,0.829,513,1.208,522,2.595,525,1.208,623,1.208,651,1.084,675,1.605,794,3.76,811,4.811,813,2.383,825,4.811,828,1.369,830,1.474,831,1.474,832,2.383,843,1.142,854,3.267,865,1.474,866,4.407,872,1.605,873,1.605,884,3.783,885,1.605,886,1.605,887,5.811,888,6.185,889,5.356,890,4.638,891,5.146,892,2.879,893,2.879,894,3.624,895,3.624,896,2.879,897,1.474,898,1.78,899,1.78,900,1.605,901,1.78,902,1.78,903,1.78,904,2.879,905,1.78,906,1.78,907,1.78,908,1.78,909,1.78,910,1.474,911,1.78,912,1.78,913,1.78,914,1.78,915,1.78,916,1.78,917,1.78,918,1.78,919,1.78,920,1.78,921,1.605,922,1.78,923,2.879,924,1.78,925,1.78,926,2.879,927,2.879,928,1.78,929,1.78,930,1.78,931,1.78,932,1.78,933,1.78,934,1.78,935,1.605,936,1.78,937,1.605,938,1.78,939,1.78,940,1.78,941,1.78,942,2.879,943,1.78,944,3.267,945,2.879,946,1.78,947,2.879,948,1.78,949,1.78,950,2.879,951,1.78,952,2.879,953,1.78,954,1.78,955,1.78,956,1.78,957,1.78,958,1.78,959,1.78,960,1.78,961,1.78,962,2.879,963,1.78,964,1.78,965,1.78,966,1.78,967,1.78,968,1.78,969,1.78,970,1.78,971,1.78,972,1.78,973,1.78,974,1.78,975,1.78,976,1.78,977,1.78,978,1.78,979,1.78,980,1.78,981,1.78,982,1.78,983,1.78,984,1.78,985,1.78,986,1.78,987,1.78,988,1.78,989,2.879,990,1.78,991,1.78,992,1.78,993,1.78,994,1.474,995,1.78,996,1.78,997,1.78,998,1.78,999,1.78]],["title/injectables/FindAllOrdersForUserProvider.html",[53,0.266,1000,2.498]],["body/injectables/FindAllOrdersForUserProvider.html",[3,0.166,4,0.147,5,0.147,12,0.283,13,1.08,14,1.779,16,0.981,18,1.301,23,0.528,25,1.08,26,0.014,27,0.85,28,0.389,29,0.78,35,1.094,37,0.813,38,1.734,49,0.86,51,0.303,53,0.416,55,0.558,63,0.166,64,0.054,67,0.981,92,0.845,94,0.01,95,0.01,106,1.512,108,1.218,116,2.932,122,2.744,128,1.356,131,2.146,132,1.689,444,2.876,497,2.721,607,2.63,608,3.261,761,3.823,1000,3.904,1001,5.387,1002,3.834,1003,5.421,1004,4.241,1005,4.875,1006,5.421,1007,5.421,1008,4.875,1009,4.241,1010,4.875,1011,3.261,1012,4.241,1013,4.241]],["title/injectables/FindAllProductsProvider.html",[53,0.266,1014,2.498]],["body/injectables/FindAllProductsProvider.html",[3,0.105,4,0.093,5,0.093,12,0.179,13,0.787,14,1.398,16,1.277,18,0.948,23,0.457,25,0.935,26,0.014,27,0.736,28,0.337,29,0.675,37,0.758,38,1.264,40,1.721,50,2.681,51,0.295,53,0.303,55,0.353,63,0.105,64,0.034,67,0.914,71,1.964,78,0.858,82,2.682,83,2.682,84,1.932,85,2.682,86,2.418,87,2.682,88,2.682,89,2.682,91,2.682,92,0.787,94,0.008,95,0.008,108,0.77,116,2.572,128,0.858,131,1.357,132,1.069,135,1.264,136,0.922,141,1.301,291,2.22,388,1.932,392,2.407,497,1.721,513,1.819,577,2.22,607,2.278,623,1.819,651,2.407,718,2.063,720,3.04,723,1.721,725,1.932,840,1.721,845,2.063,1013,5.18,1014,2.847,1015,4.67,1016,2.682,1017,4.544,1018,4.232,1019,4.416,1020,3.084,1021,4.544,1022,4.317,1023,3.084,1024,2.682,1025,3.084,1026,3.953,1027,2.418,1028,2.418,1029,1.819,1030,3.084,1031,3.084,1032,4.544,1033,3.084,1034,2.681,1035,2.063,1036,2.22,1037,3.084,1038,2.418,1039,4.544,1040,3.084,1041,3.953,1042,3.953,1043,4.232,1044,4.544,1045,4.544,1046,2.063,1047,4.544,1048,4.544,1049,3.084,1050,3.084,1051,3.084,1052,4.544,1053,4.544,1054,3.084,1055,3.084,1056,3.084,1057,3.084,1058,3.084,1059,3.084,1060,3.084,1061,3.084,1062,3.084,1063,3.084,1064,2.682,1065,3.084,1066,3.084,1067,3.084,1068,3.084,1069,3.084,1070,3.084,1071,3.084,1072,3.563,1073,3.084,1074,5.397,1075,5.397,1076,5.397,1077,2.418,1078,3.084,1079,2.418,1080,3.084,1081,3.084,1082,3.084,1083,2.682,1084,3.953,1085,4.544,1086,3.084,1087,3.084,1088,3.084,1089,3.084,1090,3.084,1091,3.73]],["title/injectables/FindOrderByIdProvider.html",[53,0.266,1092,2.498]],["body/injectables/FindOrderByIdProvider.html",[3,0.16,4,0.142,5,0.142,12,0.273,13,1.053,14,1.747,16,0.944,18,1.269,23,0.515,25,1.053,26,0.014,27,0.829,28,0.379,29,0.761,35,1.053,37,0.782,38,1.692,49,0.948,51,0.298,53,0.405,55,0.537,63,0.16,64,0.051,67,0.944,71,1.259,74,1.98,75,1.626,78,1.305,92,0.813,94,0.01,95,0.01,106,1.885,108,1.172,116,2.89,122,2.677,128,1.305,131,2.066,132,1.626,444,2.768,607,3.254,608,3.139,839,2.768,843,2.618,1001,5.289,1004,4.081,1006,5.289,1009,4.081,1011,3.139,1012,4.081,1092,3.809,1093,3.379,1094,5.289,1095,3.679,1096,5.289,1097,5.596,1098,4.692,1099,4.692,1100,4.692]],["title/injectables/FindProductByIdProvider.html",[53,0.266,1101,2.498]],["body/injectables/FindProductByIdProvider.html",[3,0.162,4,0.144,5,0.144,12,0.277,13,1.065,14,1.761,16,0.96,18,1.283,23,0.521,25,1.065,26,0.014,27,0.838,28,0.383,29,0.769,37,0.795,38,1.71,49,0.851,51,0.3,53,0.41,55,0.546,63,0.162,64,0.052,67,0.96,71,1.28,74,2.013,75,1.653,78,1.327,92,0.826,94,0.01,95,0.01,106,1.479,108,1.192,116,3.01,128,1.327,131,2.1,132,1.653,135,1.327,136,2.314,265,2.869,571,3.626,718,3.191,720,4.111,723,2.662,725,2.988,839,2.814,840,2.662,842,3.741,843,2.662,1015,5.332,1093,3.435,1095,3.741,1101,3.85,1102,5.346,1103,5.346,1104,4.15,1105,4.77]],["title/injectables/FindUserByEmailProvider.html",[53,0.266,1106,2.498]],["body/injectables/FindUserByEmailProvider.html",[3,0.152,4,0.135,5,0.135,12,0.26,13,1.021,14,1.707,16,0.9,18,1.23,23,0.499,25,1.021,26,0.014,27,0.803,28,0.367,29,0.737,33,2.487,35,1.798,37,0.982,38,1.639,49,0.825,51,0.293,53,0.393,55,0.512,63,0.152,64,0.049,66,1.337,67,0.9,71,1.2,74,1.887,75,1.55,78,1.244,92,0.775,94,0.01,95,0.01,103,3.721,104,2.056,106,1.387,108,1.117,116,2.949,128,1.244,131,1.968,132,1.55,135,1.244,138,2.638,230,2.151,265,2.781,332,2.638,334,2.638,763,3.506,765,4.62,768,2.801,775,3.506,778,3.506,839,3.476,1106,3.691,1107,5.167,1108,3.889,1109,5.125,1110,4.471,1111,5.125,1112,4.471,1113,5.892,1114,3.506,1115,4.471]],["title/injectables/FindUserByIdProvider.html",[53,0.266,1116,2.498]],["body/injectables/FindUserByIdProvider.html",[3,0.163,4,0.145,5,0.145,12,0.279,13,1.07,14,1.767,16,0.967,18,1.289,23,0.523,25,1.07,26,0.014,27,0.842,28,0.385,29,0.773,35,1.74,37,0.801,38,1.718,49,0.854,51,0.301,53,0.412,55,0.55,63,0.163,64,0.053,67,0.967,71,1.29,74,2.028,75,1.665,78,1.337,92,0.832,94,0.01,95,0.01,106,1.49,108,1.201,116,3.017,122,2.718,128,1.337,131,2.115,132,1.665,135,1.337,138,2.835,763,3.768,765,4.841,768,3.01,775,3.768,778,3.768,839,2.835,843,2.681,1093,3.46,1095,3.768,1104,4.179,1107,5.35,1116,3.868,1117,5.371,1118,5.371,1119,4.805]],["title/injectables/GenerateTokensProvider.html",[53,0.266,348,2.498]],["body/injectables/GenerateTokensProvider.html",[3,0.193,4,0.102,5,0.102,9,0.784,10,3.35,11,3.243,12,0.196,13,0.84,14,1.774,16,1.324,18,1.296,19,2.931,20,6.141,21,5.401,22,5.401,23,0.481,25,1.076,26,0.014,27,0.774,28,0.387,29,0.711,33,2.621,35,1.697,37,1.035,49,0.711,51,0.286,52,2.111,53,0.323,55,0.386,56,2.111,57,2.254,59,2.427,63,0.115,64,0.037,66,2.049,67,0.975,68,4.472,69,2.427,70,2.931,71,0.904,77,5.536,78,1.349,92,0.84,94,0.008,95,0.008,97,2.254,103,1.621,104,1.55,105,2.931,108,0.842,122,2.5,135,1.349,137,1.881,141,2.046,142,2.931,257,3.491,265,2.396,272,4.089,285,4.217,288,4.934,292,3.243,293,4.217,325,3.801,329,3.801,339,2.3,348,3.037,353,2.931,370,2.86,386,3.491,438,3.801,609,2.642,817,2.642,1120,5.401,1121,2.931,1122,6.21,1123,4.848,1124,4.848,1125,3.37,1126,4.848,1127,3.37,1128,4.848,1129,6.579,1130,4.472,1131,3.37,1132,3.37,1133,3.37,1134,3.37,1135,2.931,1136,3.37,1137,2.931,1138,2.642,1139,3.37,1140,3.37,1141,3.37,1142,3.37,1143,3.37,1144,3.37,1145,3.37,1146,3.37,1147,3.37]],["title/injectables/GetCartProvider.html",[53,0.266,117,2.226]],["body/injectables/GetCartProvider.html",[3,0.14,4,0.124,5,0.124,12,0.238,13,0.964,14,1.889,16,1.362,18,1.161,23,0.535,25,1.094,26,0.014,27,0.861,28,0.394,29,0.79,35,0.921,37,0.928,38,1.883,49,0.79,51,0.296,53,0.371,55,0.47,63,0.14,64,0.045,67,0.826,71,1.816,78,1.548,92,0.964,94,0.009,95,0.009,106,1.725,108,1.025,110,3.218,115,4.363,116,2.865,117,3.105,122,2.449,125,3.253,127,3.218,128,1.142,129,2.069,130,2.174,131,1.807,132,1.422,135,1.142,136,1.664,139,3.722,140,3.218,444,3.993,445,5.546,446,2.955,449,2.421,498,2.421,545,4.84,554,4.84,633,2.745,640,2.745,651,2.174,657,4.363,662,3.57,1011,2.745,1148,5.887,1149,5.564,1150,3.57,1151,4.104,1152,5.564,1153,4.104,1154,4.104,1155,3.57,1156,4.104,1157,4.104,1158,4.104,1159,4.104,1160,4.104,1161,4.104]],["title/classes/GetProductsBaseDto.html",[64,0.044,1162,2.872]],["body/classes/GetProductsBaseDto.html",[3,0.147,4,0.13,5,0.13,12,0.251,23,0.585,26,0.014,27,0.981,28,0.431,29,0.961,49,0.865,51,0.289,63,0.196,64,0.071,94,0.01,95,0.01,102,1.66,136,2.213,151,2.306,306,2.409,456,2.888,568,1.748,572,4.245,578,2.077,592,4.814,647,3.812,690,4.508,692,4.332,708,3.108,709,3.108,812,2.888,1022,2.547,1034,3.396,1035,2.888,1036,3.108,1043,5.078,1072,4.514,1077,5.417,1079,5.417,1162,4.663,1163,5.642,1164,3.385,1165,6.476,1166,4.317,1167,4.317,1168,4.317,1169,4.317,1170,4.317,1171,3.755,1172,5.007,1173,3.755,1174,3.755]],["title/classes/GetProductsDto.html",[64,0.044,1022,2.353]],["body/classes/GetProductsDto.html",[3,0.168,4,0.149,5,0.149,9,1.151,26,0.014,27,0.858,49,0.787,51,0.304,63,0.214,64,0.076,94,0.011,95,0.011,136,2.068,306,2.761,456,4.209,568,2.004,572,4.434,578,2.38,592,5.028,647,3.333,690,3.941,692,4.209,708,3.563,709,3.563,812,4.209,1022,3.712,1034,4.081,1035,3.31,1036,3.563,1043,3.88,1072,3.88,1077,4.933,1079,4.933,1162,4.981,1163,3.88,1164,3.88,1171,4.304,1172,6.017,1173,4.304,1174,5.472]],["title/classes/GlobalExceptionFilter.html",[64,0.044,897,2.872]],["body/classes/GlobalExceptionFilter.html",[3,0.105,4,0.057,5,0.057,9,0.435,12,0.109,13,0.533,16,1.447,23,0.482,25,0.933,26,0.014,27,0.971,28,0.355,29,0.674,33,2.8,36,1.104,37,1.083,45,4.111,49,0.915,50,1.104,51,0.164,55,0.214,58,1.251,63,0.105,64,0.021,65,1.629,66,1.896,67,0.788,71,1.744,75,1.357,90,3.375,92,0.986,94,0.005,95,0.005,96,1.551,102,0.887,128,0.52,146,2.913,232,3.556,234,1.926,281,1.347,292,2.057,296,1.172,320,4.121,324,0.943,331,4.1,338,2.411,339,1.837,340,1.347,341,3.438,370,1.814,388,1.172,392,0.991,395,1.467,401,1.172,405,2.676,414,4.33,493,0.758,513,1.104,522,3.556,525,1.104,568,0.758,623,1.104,651,0.991,675,1.467,794,3.809,811,4.942,813,2.214,825,4.283,828,1.251,830,1.347,831,1.347,832,2.214,843,1.044,854,3.929,865,1.347,866,4.225,872,2.411,873,2.411,884,3.608,885,4.663,886,1.467,887,5.173,888,6.127,889,3.945,890,3.07,891,4.953,892,3.406,893,3.945,894,4.687,895,3.406,896,2.675,897,2.214,898,2.675,899,2.675,900,1.467,901,1.627,902,1.627,903,1.627,904,2.675,905,1.627,906,1.627,907,1.627,908,1.627,909,1.627,910,1.347,911,1.627,912,1.627,913,1.627,914,1.627,915,1.627,916,1.627,917,2.675,918,3.406,919,1.627,920,1.627,921,1.467,922,1.627,923,2.675,924,1.627,925,1.627,926,2.675,927,2.675,928,1.627,929,1.627,930,1.627,931,1.627,932,1.627,933,1.627,934,1.627,935,1.467,936,1.627,937,1.467,938,1.627,939,1.627,940,1.627,941,1.627,942,2.675,943,1.627,944,4.225,945,3.945,946,2.675,947,2.675,948,1.627,949,1.627,950,2.675,951,1.627,952,2.675,953,1.627,954,1.627,955,2.675,956,1.627,957,1.627,958,1.627,959,1.627,960,1.627,961,1.627,962,3.945,963,2.675,964,1.627,965,1.627,966,1.627,967,1.627,968,1.627,969,1.627,970,1.627,971,1.627,972,1.627,973,1.627,974,1.627,975,1.627,976,1.627,977,1.627,978,1.627,979,1.627,980,1.627,981,1.627,982,1.627,983,1.627,984,1.627,985,1.627,986,2.675,987,2.675,988,1.627,989,2.675,990,1.627,991,1.627,992,1.627,993,1.627,994,1.347,995,1.627,996,1.627,997,1.627,998,1.627,999,1.627,1091,1.172,1175,3.075,1176,3.075,1177,3.075,1178,3.075,1179,1.87,1180,1.87,1181,1.87,1182,1.87,1183,1.87,1184,1.87,1185,1.87,1186,1.87,1187,1.87]],["title/injectables/HashingProvider.html",[53,0.266,347,2.226]],["body/injectables/HashingProvider.html",[3,0.158,4,0.14,5,0.14,9,1.079,12,0.269,13,1.045,23,0.511,25,1.045,26,0.014,27,0.823,28,0.376,29,0.755,37,1.006,38,1.976,49,0.986,51,0.194,53,0.402,55,0.531,63,0.158,64,0.051,66,2.006,94,0.01,95,0.01,108,1.159,141,2.547,230,3.418,324,3.714,347,3.368,405,4.191,423,5.835,424,5.249,425,4.034,426,6.568,427,6.18,429,5.249,433,5.249,435,5.116,1188,4.034,1189,8.008,1190,4.637,1191,4.637]],["title/entities/Order.html",[493,1.615,607,1.683]],["body/entities/Order.html",[3,0.124,4,0.11,5,0.11,12,0.211,23,0.643,26,0.014,28,0.493,35,1.681,49,0.922,50,2.144,51,0.269,63,0.124,64,0.04,94,0.009,95,0.009,102,1.475,106,1.836,128,1.011,130,1.925,151,2.534,320,3.96,339,2.072,392,3.403,405,3.018,444,3.492,446,4.262,493,1.472,494,2.276,497,3.303,499,4.262,500,3.79,501,4.262,505,3.422,507,2.849,509,4.011,510,3.683,515,4.262,523,3.16,524,2.431,525,4.144,526,4.011,583,5.149,584,5.149,585,5.149,593,4.449,594,4.449,606,4.144,607,2.498,1046,3.422,1192,3.16,1193,4.876,1194,6.11,1195,3.633,1196,3.633,1197,3.633,1198,2.849,1199,5.115,1200,3.633,1201,4.011,1202,3.683,1203,3.633,1204,3.633,1205,5.89,1206,5.038,1207,3.633,1208,4.011,1209,4.011,1210,4.011,1211,3.683,1212,3.633,1213,3.633,1214,5.115,1215,3.633,1216,4.011,1217,3.633,1218,3.633,1219,3.633,1220,3.633]],["title/entities/OrderItem.html",[493,1.615,606,2.353]],["body/entities/OrderItem.html",[3,0.153,4,0.136,5,0.136,12,0.261,23,0.618,26,0.014,28,0.467,49,0.74,51,0.276,63,0.153,64,0.049,94,0.01,95,0.01,102,1.704,106,2.048,128,1.25,136,2.281,151,2.434,339,2.842,448,3.522,449,3.896,493,1.819,494,2.814,496,3.522,505,3.953,507,4.634,509,5.502,510,5.053,524,3.005,525,4.14,526,5.179,606,3.486,607,3.306,608,3.005,647,3.499,1046,3.953,1193,3.234,1208,4.634,1209,4.634,1210,4.634,1211,4.255,1221,6.511,1222,4.491,1223,5.909,1224,4.491,1225,4.491,1226,4.491,1227,4.491,1228,4.491]],["title/controllers/OrdersController.html",[146,1.615,1229,2.872]],["body/controllers/OrdersController.html",[3,0.145,4,0.128,5,0.128,12,0.247,13,0.987,14,2.007,16,0.856,18,0.887,23,0.544,25,1.114,26,0.014,27,0.876,28,0.401,29,0.804,37,1.072,49,0.995,51,0.287,55,0.487,63,0.145,64,0.047,66,1.272,67,0.856,92,1.114,94,0.01,95,0.01,122,3.244,124,1.955,135,1.183,137,2.373,146,1.722,148,1.872,151,2.145,250,2.845,294,3.812,297,4.3,370,3.792,475,3.062,476,3.062,477,3.699,487,4.957,580,4.792,598,5.04,602,3.334,611,3.334,1002,3.18,1097,5.384,1229,4.104,1230,3.699,1231,6.427,1232,5.699,1233,4.252,1234,4.252,1235,5.699,1236,4.252,1237,4.252,1238,4.252,1239,4.026,1240,3.699,1241,4.252,1242,4.252,1243,4.252,1244,4.252,1245,4.252,1246,4.252]],["title/modules/OrdersModule.html",[157,1.615,171,2.668]],["body/modules/OrdersModule.html",[3,0.153,4,0.136,5,0.136,26,0.014,51,0.331,55,0.516,63,0.153,64,0.05,94,0.01,95,0.01,130,2.39,132,1.564,148,2.609,157,2.681,159,2.275,160,2.275,161,2.518,162,2.518,163,2.275,164,3.694,165,2.518,170,4.694,171,5.423,174,3.308,175,2.39,176,2.39,178,3.713,188,3.018,595,4.694,606,3.497,607,2.793,608,3.018,1000,4.694,1002,2.518,1092,4.694,1229,4.766,1239,4.694,1240,3.925,1247,3.925,1248,3.925,1249,4.512,1250,4.512,1251,4.512,1252,3.538,1253,3.925,1254,4.512,1255,4.647,1256,3.249,1257,2.826,1258,4.512]],["title/injectables/OrdersService.html",[53,0.266,1239,2.498]],["body/injectables/OrdersService.html",[3,0.14,4,0.125,5,0.125,12,0.239,13,0.967,14,1.994,16,1.273,18,1.164,23,0.574,25,1.174,26,0.014,27,0.924,28,0.423,29,0.848,37,1.055,49,0.99,51,0.296,53,0.372,55,0.472,63,0.14,64,0.045,67,1.273,78,1.76,92,1.096,94,0.009,95,0.009,108,1.03,122,2.785,124,1.895,141,1.739,370,3.732,411,2.183,580,4.758,595,4.574,598,4.96,602,4.375,607,1.739,611,3.231,1000,4.677,1002,2.3,1003,4.853,1007,4.853,1092,4.677,1094,4.853,1096,4.853,1097,5.315,1239,3.495,1253,3.584,1256,2.967,1257,2.581,1259,3.584,1260,4.121,1261,4.121,1262,4.121,1263,4.121,1264,4.121,1265,4.018,1266,4.121,1267,4.121,1268,4.121]],["title/interfaces/Paginated.html",[96,2.011,1029,2.353]],["body/interfaces/Paginated.html",[3,0.169,4,0.15,5,0.15,9,1.157,12,0.289,26,0.014,28,0.487,49,0.942,63,0.169,84,3.115,94,0.011,95,0.011,96,3.182,98,3.326,102,1.82,324,4.056,339,2.954,401,3.953,447,6.343,794,3.326,1029,4.09,1130,4.993,1269,4.325,1270,4.325,1271,6.69,1272,6.343,1273,6.311,1274,6.311,1275,6.311,1276,4.325,1277,4.325,1278,4.325,1279,4.325,1280,4.325,1281,4.325,1282,4.325,1283,4.325]],["title/modules/PaginationModule.html",[157,1.615,1284,2.668]],["body/modules/PaginationModule.html",[3,0.186,4,0.165,5,0.165,26,0.014,51,0.28,55,0.627,63,0.186,64,0.06,94,0.011,95,0.011,157,2.934,159,2.762,160,2.762,161,3.057,162,3.057,163,2.762,164,4.042,165,4.042,174,3.741,175,2.901,176,2.901,1019,5.162,1284,5.337,1285,4.764,1286,4.764,1287,4.764,1288,5.477,1289,5.477]],["title/injectables/PaginationProvider.html",[53,0.266,1019,2.498]],["body/injectables/PaginationProvider.html",[3,0.11,4,0.098,5,0.098,9,0.751,12,0.188,13,0.814,14,1.435,16,0.649,18,1.27,23,0.398,25,0.96,26,0.014,27,0.641,28,0.346,29,0.588,33,1.983,37,0.784,38,1.307,45,4.183,51,0.282,52,2.944,53,0.313,55,0.369,58,2.16,63,0.11,64,0.035,66,1.82,67,0.649,71,1.917,75,1.119,78,1.307,84,2.022,92,0.559,94,0.01,95,0.008,108,0.807,116,2.892,128,0.898,135,0.898,141,2.339,193,2.16,265,2.339,324,2.794,401,2.944,411,1.71,513,3.816,607,1.362,623,3.591,746,5.294,817,2.531,1011,3.144,1019,2.944,1029,2.773,1034,3.591,1036,2.325,1038,3.685,1083,5.294,1084,5.872,1114,3.685,1130,2.325,1265,3.384,1270,5.294,1271,4.82,1272,2.808,1276,2.808,1277,4.82,1278,2.808,1279,5.294,1280,2.808,1281,2.808,1282,2.808,1283,2.808,1290,2.808,1291,3.228,1292,3.228,1293,3.228,1294,3.228,1295,4.699,1296,4.699,1297,3.228,1298,3.228,1299,3.228,1300,3.228,1301,3.228,1302,3.228,1303,6.087,1304,6.087,1305,7.28,1306,6.751,1307,6.087,1308,4.699,1309,4.699,1310,4.699,1311,3.228,1312,3.228,1313,4.699,1314,3.228,1315,3.228,1316,3.228,1317,3.228,1318,3.228,1319,3.228,1320,3.228,1321,3.228,1322,4.699,1323,3.228,1324,3.228,1325,3.228,1326,3.228,1327,3.228]],["title/classes/PaginationQueryDto.html",[64,0.044,1034,2.353]],["body/classes/PaginationQueryDto.html",[3,0.168,4,0.149,5,0.149,9,1.151,12,0.287,23,0.533,26,0.014,28,0.392,29,0.911,51,0.207,63,0.168,64,0.069,94,0.011,95,0.011,102,1.814,151,2.1,327,6.332,339,3.2,392,3.333,444,3.712,456,4.209,513,3.712,568,2.004,578,2.38,592,4.87,623,3.712,651,3.333,1034,3.712,1035,4.627,1038,4.933,1041,6.537,1042,6.537,1091,3.941,1328,4.304,1329,4.948,1330,4.948,1331,4.948,1332,6.291]],["title/entities/Product.html",[136,1.192,493,1.615]],["body/entities/Product.html",[3,0.105,4,0.093,5,0.093,9,1.256,12,0.314,23,0.648,26,0.014,27,0.737,28,0.49,29,0.832,39,3.521,40,4.192,49,0.883,51,0.266,63,0.105,64,0.034,94,0.008,95,0.008,102,1.312,106,1.675,128,0.859,129,3.351,130,2.41,136,1.36,151,2.555,339,2.692,392,3.157,430,3.733,493,1.251,494,1.935,497,3.015,498,3.187,499,3.89,500,3.921,501,3.276,505,3.044,512,3.957,515,3.89,524,2.066,525,4.319,606,2.684,607,2.681,640,3.614,645,3.187,647,2.861,651,3.157,668,4.699,690,3.384,691,3.89,692,4.25,708,2.224,709,2.224,845,3.614,890,3.567,1002,3.015,1046,3.044,1193,4.291,1198,3.567,1201,4.236,1202,3.276,1206,3.567,1208,3.567,1209,3.567,1210,3.567,1211,3.276,1216,4.236,1333,2.686,1334,4.55,1335,3.088,1336,5.401,1337,3.957,1338,6.658,1339,3.088,1340,2.686,1341,3.088,1342,3.088,1343,3.957,1344,3.088,1345,3.088,1346,4.55,1347,3.088,1348,3.088,1349,3.567,1350,3.088,1351,4.55,1352,3.088,1353,3.088,1354,3.088,1355,3.088,1356,3.088,1357,2.686,1358,2.686,1359,3.088,1360,3.088,1361,3.088,1362,3.088]],["title/controllers/ProductsController.html",[146,1.615,1363,2.872]],["body/controllers/ProductsController.html",[3,0.129,4,0.115,5,0.115,12,0.22,13,0.913,16,0.763,18,0.791,23,0.555,25,1.134,26,0.014,27,0.893,28,0.408,29,0.819,37,1.091,38,1.821,49,0.891,51,0.323,55,0.434,63,0.129,64,0.042,66,1.134,67,0.763,92,1.134,94,0.009,95,0.009,104,1.744,113,3.862,124,1.744,135,1.055,136,1.134,146,1.536,148,1.669,151,2.185,250,2.537,251,2.375,294,3.526,297,3.526,308,2.375,310,3.109,316,2.973,384,2.731,471,2.731,472,3.299,478,2.375,571,4.058,623,3.109,687,4.201,717,4.132,721,2.973,723,2.116,724,3.526,774,2.537,835,4.132,837,2.973,840,2.116,1018,4.749,1022,3.862,1027,2.973,1028,2.973,1029,2.237,1363,3.795,1364,3.299,1365,4.749,1366,3.792,1367,3.792,1368,3.792,1369,3.792,1370,3.792,1371,3.792,1372,3.792,1373,5.27,1374,3.792,1375,4.575,1376,3.792,1377,3.792,1378,3.299,1379,3.299,1380,2.973,1381,3.792,1382,3.299,1383,3.792,1384,6.057,1385,3.792,1386,3.792,1387,3.792,1388,3.792,1389,3.792,1390,3.792,1391,3.792,1392,3.792,1393,3.792,1394,3.792]],["title/modules/ProductsModule.html",[157,1.615,172,2.498]],["body/modules/ProductsModule.html",[3,0.143,4,0.127,5,0.127,26,0.014,51,0.329,55,0.481,63,0.143,64,0.046,94,0.01,95,0.01,113,4.684,132,1.458,136,1.692,148,2.491,157,2.589,159,2.122,160,2.122,161,2.348,162,2.348,163,2.122,164,3.568,165,3.568,172,5.126,174,3.158,175,2.229,176,2.229,178,3.544,188,3.785,538,3.66,714,4.602,723,2.348,833,4.602,1014,4.602,1101,4.602,1252,3.299,1255,4.437,1257,2.636,1284,4.915,1363,4.604,1378,3.66,1395,3.66,1396,4.207,1397,3.66,1398,3.66,1399,4.602,1400,4.207,1401,4.207,1402,5.561,1403,3.66,1404,4.207,1405,4.207,1406,4.207]],["title/injectables/ProductsService.html",[53,0.266,113,2.353]],["body/injectables/ProductsService.html",[3,0.111,4,0.098,5,0.098,12,0.189,13,0.819,14,2.014,16,1.306,18,0.987,23,0.574,25,1.173,26,0.014,27,0.923,28,0.422,29,0.847,37,1.082,38,2.062,49,0.913,51,0.314,53,0.315,55,0.372,63,0.111,64,0.036,67,1.306,78,1.549,92,1.124,94,0.008,95,0.008,108,0.813,113,2.789,124,1.496,135,1.805,136,1.827,141,2.349,411,2.504,471,2.344,478,2.039,561,4.112,571,3.994,687,3.829,714,4.241,717,3.707,721,3.707,723,1.816,724,3.162,833,4.483,835,3.707,837,3.707,840,1.816,1014,4.376,1018,4.365,1022,3.605,1024,2.831,1026,4.112,1027,2.552,1028,2.552,1029,1.92,1101,4.483,1102,4.112,1103,4.112,1257,2.039,1265,4.009,1365,4.365,1375,4.376,1382,2.831,1399,4.376,1402,4.843,1403,2.831,1407,2.831,1408,3.254,1409,3.254,1410,3.254,1411,3.254,1412,3.254,1413,3.254,1414,2.831,1415,3.254,1416,3.254,1417,3.254,1418,3.254,1419,3.254,1420,3.254]],["title/guards/RolesGuard.html",[0,2.353,200,2.872]],["body/guards/RolesGuard.html",[0,3.198,2,2.844,3,0.134,4,0.119,5,0.119,9,0.919,10,3.198,12,0.229,13,0.939,15,5.222,16,0.795,18,1.291,23,0.459,25,0.939,26,0.014,27,0.844,28,0.338,29,0.678,30,4.25,31,4.172,33,2.287,35,1.494,36,3.198,37,0.904,39,3.528,40,3.025,41,4.715,42,3.626,51,0.278,53,0.361,55,0.452,63,0.134,64,0.059,65,2.092,66,1.621,67,0.795,71,1.661,72,3.436,74,2.287,75,1.878,92,0.939,94,0.009,95,0.009,104,3.639,138,3.198,155,3.436,193,2.642,200,3.903,310,2.33,374,4.715,376,3.436,377,6.423,386,2.844,387,3.436,388,2.474,389,3.436,390,2.844,391,3.436,408,3.436,409,3.436,430,3.395,774,2.642,843,2.204,935,3.097,1138,3.097,1421,3.436,1422,3.949,1423,3.949,1424,5.42,1425,5.42,1426,5.42,1427,4.715,1428,5.42,1429,3.097,1430,3.949,1431,3.949,1432,3.949,1433,5.42,1434,3.949,1435,3.949,1436,3.949,1437,5.42,1438,3.949,1439,3.949]],["title/classes/SeedProducts1759619432047.html",[64,0.044,1440,3.127]],["body/classes/SeedProducts1759619432047.html",[3,0.131,4,0.116,5,0.161,9,1.237,12,0.354,13,0.922,14,1.852,23,0.451,25,0.922,26,0.014,27,0.999,28,0.332,29,0.666,37,0.887,38,1.832,51,0.222,63,0.131,64,0.042,65,2.818,71,1.032,78,1.832,94,0.009,95,0.009,106,1.192,128,1.48,136,1.149,145,3.343,265,3.017,324,2.682,392,2.036,411,2.818,493,1.557,510,2.767,513,2.267,568,1.557,613,6.598,633,4.783,645,3.138,647,2.818,651,2.036,690,3.821,691,3.83,781,4.783,840,3.674,869,3.343,910,2.767,994,4.977,1211,2.767,1343,3.343,1349,4.171,1440,4.171,1441,5.306,1442,3.343,1443,6.1,1444,5.319,1445,4.627,1446,5.319,1447,3.843,1448,5.319,1449,3.843,1450,4.171,1451,6.1,1452,3.343,1453,3.843,1454,3.843,1455,3.843,1456,3.843,1457,6.1,1458,3.843,1459,3.843,1460,3.843,1461,3.843,1462,3.843,1463,3.843,1464,3.843,1465,3.843,1466,3.843,1467,3.843,1468,5.319,1469,3.843,1470,3.843,1471,3.343,1472,3.843,1473,3.843,1474,3.343,1475,3.343,1476,3.014,1477,3.014,1478,3.843,1479,3.843,1480,3.843,1481,3.843,1482,3.843,1483,3.843,1484,3.843,1485,3.843,1486,3.843,1487,3.843,1488,3.843,1489,5.319,1490,5.319,1491,3.843,1492,3.843,1493,3.843,1494,3.343,1495,3.843]],["title/classes/SignInDto.html",[64,0.044,268,2.498]],["body/classes/SignInDto.html",[3,0.167,4,0.148,5,0.148,9,1.603,12,0.285,23,0.53,26,0.014,28,0.39,35,1.629,49,0.909,51,0.262,63,0.167,64,0.069,94,0.011,95,0.011,102,1.806,103,3.748,151,2.09,230,3.748,257,4.509,268,3.922,306,2.741,322,4.856,336,3.851,456,4.189,568,1.989,572,3.694,578,2.363,591,4.964,732,5.446,751,5.996,752,5.446,1496,5.996,1497,4.272,1498,4.911,1499,4.911,1500,6.261,1501,4.911,1502,4.911,1503,4.911]],["title/injectables/SignInProvider.html",[53,0.266,349,2.498]],["body/injectables/SignInProvider.html",[3,0.125,4,0.111,5,0.111,9,0.854,10,3.513,11,3.448,12,0.213,13,0.893,14,1.542,16,1.198,18,1.347,23,0.437,25,0.893,26,0.014,27,0.703,28,0.321,29,0.645,33,2.175,35,1.526,37,0.859,38,1.434,40,2.05,51,0.295,52,2.301,53,0.344,54,2.457,55,0.42,63,0.125,64,0.04,66,1.93,67,1.198,71,1.383,74,1.55,75,1.273,78,1.657,92,0.636,94,0.009,95,0.009,103,2.48,104,1.689,106,1.139,108,0.918,114,4.123,134,3.195,135,1.657,137,2.05,138,3.809,141,2.724,230,1.767,265,2.513,266,4.042,267,4.042,268,4.416,272,3.712,288,3.712,311,2.88,312,2.88,325,4.042,329,4.042,332,2.167,334,2.167,347,4.123,348,4.044,349,3.229,351,2.645,361,3.195,369,4.484,430,2.301,435,2.645,437,3.195,438,4.669,609,2.88,776,3.195,1135,3.195,1137,3.195,1138,2.88,1504,5.18,1505,3.195,1506,5.154,1507,3.673,1508,6.456,1509,3.673,1510,3.673,1511,3.673,1512,5.954,1513,3.673,1514,3.673,1515,3.673,1516,3.673,1517,3.673,1518,3.673,1519,3.673]],["title/classes/UpdateCartItemDto.html",[64,0.044,463,2.498]],["body/classes/UpdateCartItemDto.html",[3,0.197,4,0.175,5,0.175,12,0.336,23,0.489,26,0.014,28,0.36,51,0.242,63,0.197,64,0.076,94,0.012,95,0.012,102,1.997,125,3.184,151,1.929,339,2.804,449,4.374,463,4.337,568,2.34,570,4.531,574,5.026,576,5.429,577,4.161,578,2.78,579,4.531,1520,6.022,1521,5.778]],["title/injectables/UpdateCartItemProvider.html",[53,0.266,533,2.498]],["body/injectables/UpdateCartItemProvider.html",[3,0.098,4,0.087,5,0.087,12,0.167,13,0.748,14,1.938,16,1.043,18,0.901,23,0.549,25,1.122,26,0.014,27,0.883,28,0.404,29,0.811,35,1.384,37,1.028,38,1.922,49,0.973,51,0.289,53,0.288,54,1.926,55,0.329,63,0.098,64,0.032,67,1.043,71,1.739,74,1.822,75,1.497,76,1.699,78,1.869,90,1.804,92,0.748,94,0.007,95,0.007,106,2.142,108,0.719,115,3.386,116,2.721,117,3.749,122,3.217,125,3.504,126,2.073,127,2.258,128,0.801,129,3.111,130,1.525,131,1.267,132,0.998,133,2.073,135,1.201,136,1.549,139,2.889,140,2.258,141,1.215,278,2.073,341,1.607,414,1.607,453,4.063,455,3.756,461,2.258,462,5.267,463,4.208,468,2.504,478,1.804,498,2.548,533,2.705,540,2.258,544,3.756,547,3.756,551,3.756,558,3.756,563,2.504,607,1.215,617,2.504,633,2.889,640,3.852,645,1.699,657,2.258,725,1.804,805,2.504,839,1.699,1002,1.607,1011,2.889,1150,2.504,1155,3.756,1522,5.843,1523,2.504,1524,4.318,1525,5.182,1526,2.879,1527,2.879,1528,2.879,1529,2.879,1530,2.879,1531,2.879,1532,2.879,1533,2.879,1534,4.318,1535,4.318,1536,2.879,1537,4.318,1538,2.879,1539,2.879,1540,2.879,1541,4.318,1542,2.879,1543,2.879,1544,2.879,1545,2.879,1546,2.879]],["title/classes/UpdateProductDto.html",[64,0.044,1375,2.498]],["body/classes/UpdateProductDto.html",[3,0.178,4,0.159,5,0.159,12,0.305,23,0.553,26,0.014,28,0.407,29,0.931,51,0.297,63,0.178,64,0.072,94,0.011,95,0.011,102,1.883,151,2.179,306,2.928,411,2.779,430,4.089,498,4.192,500,3.851,568,2.125,578,2.524,592,4.974,633,4.367,687,3.095,689,4.114,724,3.51,812,4.367,845,4.754,1375,4.089,1547,6.181,1548,6.527,1549,5.247,1550,5.247,1551,5.247,1552,5.247,1553,6.527]],["title/injectables/UpdateProductProvider.html",[53,0.266,1399,2.498]],["body/injectables/UpdateProductProvider.html",[3,0.137,4,0.121,5,0.121,9,0.933,12,0.233,13,0.949,14,1.616,16,1.349,18,1.144,23,0.529,25,1.162,26,0.014,27,0.851,28,0.418,29,0.781,37,0.914,38,1.524,49,0.781,51,0.293,53,0.365,55,0.459,63,0.137,64,0.044,67,0.807,71,1.675,74,1.694,75,1.391,78,1.524,92,0.949,94,0.009,95,0.009,106,1.244,108,1.003,116,2.843,128,1.116,131,1.767,132,1.391,135,1.116,136,2.005,265,2.633,396,4.766,478,2.514,498,2.368,571,3.956,645,2.368,647,2.126,716,2.89,718,2.685,719,3.491,720,3.666,722,3.491,723,2.24,724,2.685,725,2.514,839,2.368,840,2.24,841,3.491,842,3.147,843,2.24,844,3.491,845,2.685,1130,5.054,1365,4.893,1375,4.645,1399,3.433,1414,3.491,1554,5.832,1555,6.24,1556,4.013,1557,6.24,1558,4.013,1559,5.48,1560,4.013,1561,5.48,1562,4.013,1563,3.491,1564,5.48,1565,4.013,1566,4.013,1567,4.013,1568,4.013]],["title/entities/User.html",[35,0.895,493,1.615]],["body/entities/User.html",[3,0.118,4,0.105,5,0.105,12,0.335,23,0.637,26,0.014,28,0.49,29,0.788,35,1.111,39,2.622,40,4.245,49,0.941,51,0.278,63,0.118,64,0.054,94,0.008,95,0.008,102,1.428,103,2.776,104,3.348,106,1.79,128,0.965,129,3.489,130,1.838,151,2.509,230,2.776,310,2.047,332,3.405,334,3.405,493,2.005,494,2.173,497,3.221,499,4.156,500,3.713,501,3.564,505,3.311,515,4.156,524,2.321,525,4.082,607,2.92,640,3.861,1002,3.221,1114,3.881,1193,4.792,1194,6.333,1198,3.881,1201,5.709,1206,4.934,1216,4.525,1338,6.538,1340,3.018,1349,3.881,1357,3.018,1358,3.018,1569,3.018,1570,4.95,1571,3.469,1572,3.469,1573,7.28,1574,3.469,1575,3.469,1576,3.469,1577,3.469,1578,4.95,1579,3.469,1580,3.469,1581,3.469,1582,3.469,1583,3.469,1584,4.95,1585,3.018,1586,3.469]],["title/controllers/UsersController.html",[146,1.615,1587,2.872]],["body/controllers/UsersController.html",[3,0.1,4,0.088,5,0.088,9,1.651,12,0.17,13,0.757,16,0.589,18,0.611,23,0.248,25,0.507,26,0.014,27,0.399,28,0.451,29,0.366,35,1.797,37,0.968,38,1.615,39,2.315,49,0.845,51,0.29,55,0.335,63,0.1,64,0.032,66,0.875,67,0.589,75,2.258,92,0.507,94,0.007,95,0.007,102,0.844,103,3.249,104,2.01,106,0.907,114,2.92,124,1.345,135,0.814,137,1.633,138,3.424,146,2.119,148,1.288,151,0.977,230,3.476,250,1.957,251,1.833,252,3.427,254,4.551,255,4.551,261,3.802,265,2.208,274,3.802,275,3.802,278,3.147,279,3.802,281,2.107,282,2.545,286,2.545,292,3.5,294,2.924,295,2.545,296,1.833,297,2.924,301,3.802,303,3.802,304,4.551,305,2.545,306,1.633,308,1.833,310,2.578,316,2.294,318,4.551,320,2.924,322,4.155,324,2.204,331,4.999,332,3.664,334,3.664,337,2.294,340,3.147,384,2.107,390,3.147,411,2.315,436,2.545,497,1.633,500,1.726,638,2.294,729,4.446,762,4.102,766,2.294,768,1.833,770,2.294,774,1.957,780,3.802,781,2.294,794,2.924,937,3.427,1091,2.738,1379,2.545,1587,3.147,1588,2.545,1589,4.37,1590,4.37,1591,2.925,1592,6.516,1593,4.37,1594,4.37,1595,4.37,1596,2.925,1597,6.516,1598,4.37,1599,4.37,1600,4.37,1601,5.804,1602,2.925,1603,2.925,1604,4.37,1605,4.37,1606,2.545,1607,2.925,1608,2.925,1609,2.925,1610,4.37,1611,4.37,1612,4.37,1613,2.925,1614,2.925,1615,2.925,1616,2.925,1617,2.925,1618,2.925,1619,2.545,1620,2.925,1621,2.925]],["title/modules/UsersModule.html",[157,1.615,173,2.353]],["body/modules/UsersModule.html",[3,0.154,4,0.137,5,0.137,26,0.014,35,1.488,51,0.328,55,0.519,63,0.154,64,0.05,94,0.01,95,0.01,114,4.481,132,1.571,148,2.617,157,2.687,159,2.285,160,2.285,161,2.529,162,2.529,163,2.285,164,3.702,165,3.702,169,3.724,173,4.763,174,3.318,175,2.401,176,2.401,178,2.839,188,3.032,351,4.281,759,4.7,768,2.839,1106,4.7,1116,4.7,1252,3.554,1255,4.661,1256,3.264,1257,2.839,1587,4.777,1606,3.942,1622,3.942,1623,3.942,1624,3.942,1625,4.532,1626,4.532,1627,4.532,1628,3.942,1629,4.532]],["title/injectables/UsersService.html",[53,0.266,114,2.226]],["body/injectables/UsersService.html",[3,0.13,4,0.115,5,0.115,12,0.222,13,0.917,14,1.961,16,1.222,18,1.104,23,0.556,25,1.137,26,0.014,27,0.895,28,0.409,29,0.821,35,1.72,37,1.094,38,1.984,49,0.893,51,0.298,53,0.353,55,0.436,63,0.13,64,0.042,66,1.14,67,1.222,78,1.69,92,1.053,94,0.009,95,0.009,103,2.545,106,1.183,108,0.953,114,2.953,122,1.679,124,1.754,135,1.69,137,2.953,141,2.564,265,3.196,411,2.803,729,4.582,759,4.468,762,4.764,766,2.991,768,2.389,770,2.991,1106,4.582,1109,4.602,1111,4.602,1116,4.582,1117,4.602,1118,4.602,1256,2.746,1257,2.389,1265,4.725,1628,3.317,1630,3.317,1631,3.814,1632,3.814,1633,3.814,1634,5.291,1635,3.814,1636,3.814,1637,3.814,1638,3.814,1639,3.814]],["title/classes/ValidationException.html",[64,0.044,771,2.668]],["body/classes/ValidationException.html",[3,0.16,4,0.142,5,0.142,9,1.419,18,1.492,23,0.399,25,0.817,26,0.014,27,0.643,28,0.294,29,0.59,45,2.631,49,0.895,51,0.197,55,0.539,63,0.207,64,0.067,66,1.824,76,2.781,94,0.01,95,0.01,234,4.235,291,5.332,296,2.953,341,3.404,414,2.631,568,1.909,686,4.392,771,4.08,772,4.08,809,3.154,810,3.696,811,5.461,812,4.523,813,5.148,814,4.101,816,5.305,818,5.305,819,4.101,820,4.101,821,4.101,822,3.395,823,3.696,824,4.101,825,4.392,826,4.101,827,4.101,828,4.523,829,5.305,830,3.395,831,3.395,832,3.395,1640,4.714]],["title/coverage.html",[1641,4.278]],["body/coverage.html",[0,2.843,1,1.711,5,0.077,6,2.225,7,1.842,8,2.225,26,0.014,28,0.16,33,1.08,35,1.216,53,0.529,61,2.006,64,0.082,75,0.887,94,0.007,95,0.007,96,2.732,97,1.711,99,2.225,100,2.225,107,1.603,109,2.225,110,3.095,113,1.509,114,1.428,117,1.428,120,1.603,125,2.491,129,1.29,136,1.441,146,2.506,147,1.842,149,2.225,153,1.603,163,1.29,177,2.006,194,1.842,196,2.006,198,1.842,200,1.842,211,2.006,244,2.225,248,1.842,249,2.225,251,1.603,268,1.603,298,1.603,347,1.428,348,1.603,349,1.603,356,1.842,365,2.225,372,2.225,385,2.006,421,2.225,443,2.225,450,1.842,451,2.225,463,1.603,473,1.509,475,1.842,476,1.842,493,2.371,495,2.006,496,3.095,533,1.603,543,2.225,569,2.225,570,3.095,580,1.603,581,2.225,582,2.225,595,1.603,596,2.225,597,2.225,606,1.509,607,1.666,651,4.292,687,1.509,688,2.225,689,3.095,714,1.603,715,2.225,716,3.47,729,1.603,730,2.225,731,2.225,759,1.603,760,2.225,761,3.095,771,1.711,772,2.641,792,2.225,793,2.225,809,1.711,810,3.095,833,1.603,834,2.225,847,2.006,848,2.225,849,2.225,850,2.225,884,1.842,885,3.095,886,3.095,897,1.842,994,1.842,1000,1.603,1001,3.095,1002,1.428,1014,1.603,1015,3.095,1016,2.225,1019,1.603,1022,1.509,1029,1.509,1034,1.509,1035,1.711,1092,1.603,1093,3.47,1101,1.603,1106,1.603,1107,3.095,1108,2.225,1116,1.603,1120,2.225,1121,2.225,1148,2.225,1162,1.842,1163,3.095,1164,3.095,1188,2.225,1192,2.225,1202,5.732,1221,2.225,1229,1.842,1230,2.225,1239,1.603,1259,2.225,1269,2.225,1290,2.225,1328,2.225,1333,3.433,1363,1.842,1364,2.225,1375,1.603,1380,2.006,1399,1.603,1407,2.225,1421,2.225,1429,2.006,1440,2.006,1441,2.225,1442,2.225,1450,2.006,1496,2.225,1497,2.225,1504,2.225,1505,2.225,1520,2.225,1522,2.225,1523,2.225,1547,2.225,1554,2.225,1569,2.225,1587,1.842,1588,2.225,1630,2.225,1641,2.006,1642,2.225,1643,2.558,1644,2.558,1645,4.819,1646,6.658,1647,6.658,1648,5.418,1649,3.433,1650,2.225,1651,2.225,1652,2.225,1653,2.225,1654,6.832,1655,5.418,1656,2.558,1657,3.947,1658,3.947,1659,6.447,1660,2.558,1661,7.208,1662,6.186,1663,2.558,1664,4.819,1665,2.558,1666,2.558,1667,2.225,1668,3.947,1669,2.225,1670,2.558,1671,2.558,1672,2.225,1673,2.225,1674,2.225,1675,2.558,1676,2.225,1677,2.558,1678,2.558]],["title/dependencies.html",[160,2.421,1679,2.891]],["body/dependencies.html",[26,0.014,55,0.63,56,3.45,57,3.684,58,3.684,64,0.074,94,0.011,95,0.011,128,1.532,132,1.908,160,2.777,193,3.684,306,3.073,383,3.966,401,3.45,422,4.79,578,2.649,1585,4.79,1680,5.507,1681,5.507,1682,7.261,1683,5.507,1684,6.725,1685,5.507,1686,5.507,1687,5.507,1688,5.507,1689,5.507,1690,5.507,1691,5.507,1692,5.507,1693,5.507,1694,5.507,1695,5.507,1696,5.507,1697,5.507,1698,5.507,1699,5.507]],["title/miscellaneous/enumerations.html",[1700,2.082,1701,4.175]],["body/miscellaneous/enumerations.html",[12,0.296,26,0.014,35,1.439,94,0.011,95,0.011,104,2.949,308,4.017,384,3.672,692,4.29,774,3.411,1091,5.154,1205,5.578,1700,3.194,1701,4.436,1702,5.099,1703,7.36,1704,5.099,1705,6.412,1706,5.099,1707,6.412,1708,5.099,1709,5.099,1710,5.099,1711,5.099,1712,6.412,1713,6.412,1714,6.412,1715,6.412,1716,6.412,1717,5.099,1718,5.578,1719,5.578,1720,5.578,1721,5.578,1722,5.578,1723,5.578,1724,5.099,1725,4.436,1726,6.412]],["title/miscellaneous/functions.html",[1700,2.082,1727,4.175]],["body/miscellaneous/functions.html",[12,0.369,26,0.012,94,0.012,95,0.012,163,3.887,1667,5.521,1700,3.976,1727,5.521,1728,6.347]],["title/index.html",[12,0.193,944,2.606,1729,3.324]],["body/index.html",[4,0.127,9,0.981,26,0.014,86,3.306,94,0.01,95,0.01,116,1.708,176,3.625,237,3.668,322,4.281,386,3.036,415,3.668,639,3.668,671,3.668,822,4.08,910,3.036,921,3.306,1064,3.668,1471,6.533,1619,5.567,1641,3.306,1642,3.668,1730,4.216,1731,4.216,1732,6.4,1733,4.216,1734,4.216,1735,4.216,1736,4.216,1737,4.216,1738,6.4,1739,4.216,1740,6.843,1741,4.216,1742,7.511,1743,4.216,1744,4.216,1745,4.216,1746,4.216,1747,5.666,1748,4.216,1749,4.216,1750,6.4,1751,4.216,1752,5.666,1753,4.216,1754,4.216,1755,4.216,1756,6.843,1757,4.216,1758,4.216,1759,4.216,1760,4.216,1761,4.216,1762,6.843,1763,5.666,1764,4.216,1765,6.4,1766,4.216,1767,5.952,1768,4.216,1769,4.216,1770,4.216,1771,4.216,1772,4.216,1773,4.216,1774,6.4,1775,4.216,1776,4.216,1777,4.216,1778,5.666,1779,4.216,1780,4.216,1781,4.216,1782,4.216,1783,4.216,1784,4.216,1785,4.216,1786,5.666,1787,4.216,1788,4.216,1789,4.216,1790,4.216,1791,5.666,1792,4.216,1793,4.216,1794,3.668,1795,5.666,1796,5.666,1797,4.216,1798,4.216,1799,4.216,1800,4.216,1801,4.216,1802,4.216,1803,4.216,1804,4.216,1805,4.216,1806,4.216,1807,3.668,1808,4.216,1809,4.216,1810,4.216,1811,4.216,1812,4.216,1813,4.216,1814,3.668]],["title/modules.html",[159,2.751]],["body/modules.html",[26,0.012,94,0.012,95,0.012,158,4.197,159,2.939,169,3.651,170,3.651,171,3.899,172,3.651,173,3.439,1284,3.899,1767,7.028,1815,8.08,1816,8.08,1817,8.08]],["title/overview.html",[1818,4.746]],["body/overview.html",[2,2.49,26,0.014,94,0.008,95,0.008,98,2.313,107,3.608,108,0.864,113,4.197,114,3.97,117,3.215,136,1.722,148,1.522,153,3.608,157,1.4,158,5.618,159,1.743,160,1.743,161,1.929,162,1.929,163,1.743,164,1.929,165,1.929,166,3.007,167,3.007,168,3.007,169,4.705,170,5.014,171,5.18,172,5.014,173,4.568,174,2.756,175,1.831,176,1.831,298,3.608,344,3.007,345,3.007,346,3.007,347,3.506,348,3.608,349,3.608,473,4.197,494,2.166,529,3.007,530,3.007,531,3.007,532,3.007,533,3.608,568,1.4,595,3.608,714,3.608,759,3.608,833,3.608,1000,3.608,1014,3.608,1019,4.456,1092,3.608,1101,3.608,1106,3.608,1116,3.608,1239,3.608,1247,3.007,1248,3.007,1284,4.623,1285,3.007,1286,3.007,1287,3.007,1395,3.007,1397,3.007,1398,3.007,1399,3.608,1474,3.007,1475,3.007,1476,2.711,1477,2.711,1622,3.007,1623,3.007,1624,3.007,1818,3.007,1819,3.457,1820,3.457,1821,3.007]],["title/properties.html",[102,1.384,1679,2.891]],["body/properties.html",[9,1.462,26,0.014,94,0.012,95,0.012,102,1.813,1807,5.469,1814,5.469,1822,6.287,1823,6.287,1824,6.287]],["title/miscellaneous/variables.html",[1700,2.082,1825,4.175]],["body/miscellaneous/variables.html",[9,1.773,12,0.079,26,0.014,27,1.039,28,0.261,31,0.856,35,1.101,45,1.317,49,0.39,50,0.807,61,1.851,66,0.409,71,0.634,81,1.189,92,0.237,94,0.004,95,0.004,97,1.579,104,0.629,177,1.072,209,1.189,210,1.189,211,1.851,212,1.189,251,1.951,253,1.072,308,1.479,381,1.072,385,1.851,390,1.7,392,2.748,406,2.053,475,1.7,476,0.985,645,4.497,647,4.038,690,4.775,691,5.489,840,2.739,862,2.053,865,1.7,871,1.189,900,1.072,1046,0.915,1091,3.25,1202,1.7,1337,2.71,1380,3.849,1427,2.053,1429,1.851,1445,2.053,1450,1.851,1452,1.189,1476,1.851,1477,3.59,1494,1.189,1563,1.189,1649,1.189,1650,1.189,1651,2.053,1652,1.189,1653,1.189,1669,2.053,1672,1.189,1673,2.053,1674,2.053,1676,2.71,1700,0.856,1718,4.269,1719,4.722,1720,4.269,1721,4.513,1722,4.513,1723,4.513,1725,4.269,1794,3.983,1821,2.053,1825,1.189,1826,1.367,1827,1.367,1828,2.361,1829,1.367,1830,1.367,1831,1.367,1832,1.367,1833,1.367,1834,2.361,1835,1.367,1836,1.367,1837,1.367,1838,1.367,1839,1.367,1840,1.367,1841,3.115,1842,1.367,1843,1.367,1844,1.367,1845,6.955,1846,1.367,1847,5.429,1848,2.361,1849,1.367,1850,2.361,1851,1.367,1852,1.367,1853,2.361,1854,2.361,1855,1.367,1856,7.622,1857,1.367,1858,1.367,1859,4.908,1860,6.259,1861,2.361,1862,1.367,1863,2.361,1864,3.115,1865,3.115,1866,4.185,1867,2.361,1868,2.361,1869,2.361,1870,2.361,1871,4.185,1872,1.367,1873,1.367,1874,3.115,1875,1.367,1876,3.708,1877,1.367,1878,3.115,1879,2.361,1880,1.367,1881,2.361,1882,3.115,1883,1.367,1884,1.367,1885,2.361,1886,4.185,1887,1.367,1888,1.367,1889,1.367,1890,1.367,1891,3.115,1892,1.367,1893,3.708,1894,2.361,1895,2.361,1896,2.361,1897,2.361,1898,2.361,1899,2.361,1900,4.579,1901,1.367,1902,2.361,1903,1.367,1904,3.115,1905,1.367,1906,1.367,1907,3.708,1908,2.361,1909,1.367,1910,2.361,1911,1.367,1912,4.185,1913,2.361,1914,2.361,1915,3.115,1916,3.115,1917,2.361,1918,2.361,1919,2.361,1920,2.361,1921,3.708,1922,2.361,1923,2.361,1924,1.367,1925,1.367,1926,3.708,1927,2.361,1928,2.361,1929,2.361,1930,1.367,1931,1.367,1932,1.367,1933,1.367,1934,2.361,1935,1.367,1936,1.367,1937,2.361,1938,1.367,1939,2.361,1940,3.115,1941,2.361,1942,3.708,1943,1.367,1944,1.367,1945,1.367,1946,3.708,1947,1.367,1948,1.367,1949,1.367,1950,1.367,1951,1.367,1952,2.361,1953,1.367,1954,1.367,1955,4.579,1956,4.579,1957,2.361,1958,2.361,1959,1.367,1960,1.367,1961,1.367,1962,1.367,1963,1.367,1964,1.367,1965,2.361,1966,1.367,1967,2.361,1968,1.367,1969,2.361,1970,1.367,1971,2.361,1972,1.367,1973,1.367,1974,2.361,1975,1.367,1976,1.367,1977,1.367,1978,1.367,1979,1.367,1980,1.367,1981,1.367,1982,1.367,1983,2.361,1984,2.361,1985,2.361,1986,3.708,1987,1.367,1988,2.361,1989,1.367,1990,1.367,1991,1.367,1992,2.361,1993,2.361,1994,1.367,1995,1.367,1996,1.367,1997,1.367,1998,1.367,1999,2.361,2000,3.115,2001,1.367,2002,1.367,2003,1.367,2004,3.115,2005,1.367,2006,1.367,2007,1.367,2008,2.361,2009,3.708,2010,1.367,2011,1.367,2012,1.367,2013,2.361,2014,2.361,2015,1.367,2016,1.367,2017,1.367,2018,1.367,2019,2.361,2020,2.361,2021,1.367,2022,1.367,2023,1.367,2024,2.361,2025,2.361,2026,1.367,2027,1.367,2028,1.367,2029,1.367,2030,1.367,2031,1.367,2032,1.367,2033,1.367,2034,1.367,2035,1.367,2036,1.367,2037,1.367,2038,1.367,2039,2.361,2040,1.367,2041,1.367,2042,2.361,2043,1.367,2044,1.367,2045,1.367,2046,1.367,2047,1.367,2048,1.367,2049,1.367,2050,1.367,2051,1.367,2052,1.367,2053,2.361,2054,1.367,2055,1.367,2056,1.367,2057,1.367,2058,1.367,2059,1.367,2060,1.367,2061,1.367,2062,1.367,2063,1.367,2064,1.367,2065,3.708,2066,1.367,2067,1.367,2068,1.367,2069,2.361,2070,2.361,2071,2.361,2072,2.361,2073,1.367,2074,1.367,2075,1.367,2076,1.367,2077,1.367,2078,1.367,2079,1.367,2080,1.367,2081,1.367,2082,1.367,2083,2.361,2084,1.367,2085,1.367,2086,1.367,2087,1.367,2088,1.367,2089,2.361,2090,1.367,2091,1.367,2092,1.367,2093,1.367,2094,1.367,2095,2.361,2096,1.367,2097,1.367,2098,1.367,2099,1.367,2100,1.367,2101,1.367,2102,1.367,2103,1.367,2104,2.361,2105,1.367,2106,2.361,2107,2.361,2108,1.367,2109,3.708,2110,1.367,2111,1.367,2112,3.708,2113,1.367,2114,1.367,2115,1.367,2116,1.367,2117,2.361,2118,2.361,2119,1.367,2120,1.367,2121,1.367,2122,1.367,2123,1.367,2124,1.367,2125,1.367,2126,1.367,2127,1.367,2128,2.361,2129,1.367,2130,1.367,2131,1.367,2132,1.367,2133,2.361,2134,1.367,2135,1.367,2136,1.367,2137,1.367,2138,1.367,2139,1.367,2140,2.361,2141,1.367,2142,1.367,2143,1.367,2144,1.367,2145,1.367,2146,1.367,2147,1.367,2148,1.367,2149,1.367,2150,1.367,2151,1.367,2152,1.367,2153,1.367,2154,2.361,2155,1.367,2156,1.367,2157,1.367,2158,1.367,2159,1.367]]],"invertedIndex":[["",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":651,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1823,"title":{},"body":{"properties.html":{}}}],["0.14.2",{"_index":1689,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1697,"title":{},"body":{"dependencies.html":{}}}],["0.3.27",{"_index":1699,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1688,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1659,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1671,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1645,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1661,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1662,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1668,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1660,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1664,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1663,"title":{},"body":{"coverage.html":{}}}],["01798e348b17?w=400&h=400&fit=crop",{"_index":2041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0cb981a83e2e?w=400&h=400&fit=crop",{"_index":1918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":513,"title":{},"body":{"entities/CartItem.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllProductsProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/SeedProducts1759619432047.html":{}}}],["1.0.0",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DataResponseInterceptor.html":{}}}],["1.1.26",{"_index":1681,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1647,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1658,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":1677,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1046,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"miscellaneous/variables.html":{}}}],["10.0",{"_index":1923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10.0.0",{"_index":1682,"title":{},"body":{"dependencies.html":{}}}],["10.5",{"_index":2153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["100",{"_index":1202,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["11.0",{"_index":2024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11.0.0",{"_index":1684,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":1686,"title":{},"body":{"dependencies.html":{}}}],["11/11",{"_index":1666,"title":{},"body":{"coverage.html":{}}}],["11502861dcfa?w=400&h=400&fit=crop",{"_index":1858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12.0",{"_index":1855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12.5",{"_index":2091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12oz",{"_index":2021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["13.0",{"_index":2068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["14.0",{"_index":2015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["14.5",{"_index":2114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1452251889946",{"_index":2145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1464226184884",{"_index":2121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1486427944299",{"_index":2086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1495474472287",{"_index":2080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["15",{"_index":1821,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["15.0",{"_index":1933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1514228742587",{"_index":2016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1514432324607",{"_index":2001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1517487881594",{"_index":2026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1528821128474",{"_index":1990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1547928576",{"_index":2115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1556909212",{"_index":1869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1556910103",{"_index":2092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1556911220",{"_index":2106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1563453392212",{"_index":2035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1577705998148",{"_index":2158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1578916171728",{"_index":1894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1583947215259",{"_index":2059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1584862728452",{"_index":1944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1584990347449",{"_index":1905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1585421514738",{"_index":2040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1586444248902",{"_index":2069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1590736969955",{"_index":1935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1591086509456",{"_index":1972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1591361443450",{"_index":1924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1593618998160",{"_index":2100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1594756202469",{"_index":2097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1599751449307",{"_index":1883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["16.0",{"_index":2008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1600334089648",{"_index":2063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1600334129128",{"_index":2050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1602143407151",{"_index":1983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1604335399105",{"_index":2135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1606923829579",{"_index":1917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1609840114035",{"_index":1962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1610701596007",{"_index":1857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1620799140408",{"_index":1953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["17.0",{"_index":2132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["17.2.3",{"_index":1691,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":2144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["18.0",{"_index":1943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["18.0.1",{"_index":1693,"title":{},"body":{"dependencies.html":{}}}],["19.0",{"_index":2096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1].charat(0).touppercase()}${pathsegments[pathsegments.length",{"_index":959,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["1].slice(1",{"_index":960,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["1c02745aae4d?w=400&h=400&fit=crop",{"_index":2093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1fc0b1e4e841?w=400&h=400&fit=crop",{"_index":1884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":1211,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{}}}],["2/2",{"_index":1648,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1676,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["20.0",{"_index":1982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["200",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{}}}],["201",{"_index":1600,"title":{},"body":{"controllers/UsersController.html":{}}}],["20oz",{"_index":1976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["21.0",{"_index":2139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["22.0",{"_index":1961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["24",{"_index":1980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["24.0",{"_index":2143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["25",{"_index":1934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["255",{"_index":1346,"title":{},"body":{"entities/Product.html":{}}}],["27",{"_index":1820,"title":{},"body":{"overview.html":{}}}],["2750a74f824d?w=400&h=400&fit=crop",{"_index":1945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2787fef5ebf7?w=400&h=400&fit=crop",{"_index":2027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["27f963b062bf?w=400&h=400&fit=crop",{"_index":1991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["28.0",{"_index":2099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2f64eddc13df?w=400&h=400&fit=crop",{"_index":2070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":1474,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"overview.html":{}}}],["3/3",{"_index":1654,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":1670,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":862,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["326f5e854473?w=400&h=400&fit=crop",{"_index":2036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["32oz",{"_index":2005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["33",{"_index":1657,"title":{},"body":{"coverage.html":{}}}],["35",{"_index":1916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["38e31be8751f?w=400&h=400&fit=crop",{"_index":2060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["39d4a3b91a7d?w=400&h=400&fit=crop",{"_index":1906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3c981769e3ad?w=400&h=400&fit=crop",{"_index":1963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":1475,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"overview.html":{}}}],["4.0",{"_index":1989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.2",{"_index":1683,"title":{},"body":{"dependencies.html":{}}}],["4.5",{"_index":2038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4/4",{"_index":1655,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":1675,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":1893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["400",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/UsersController.html":{}}}],["401",{"_index":966,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["403",{"_index":968,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["404",{"_index":970,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["409",{"_index":972,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["422",{"_index":974,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["429",{"_index":975,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["45",{"_index":1952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["450°f",{"_index":2085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["46686eac8d58?w=400&h=400&fit=crop",{"_index":1895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4d71bcdd2085?w=400&h=400&fit=crop",{"_index":2081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4e566b60f93f?w=400&h=400&fit=crop",{"_index":1973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":1476,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["5.0",{"_index":1881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5.5",{"_index":2033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5/5",{"_index":1656,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1337,"title":{},"body":{"entities/Product.html":{},"miscellaneous/variables.html":{}}}],["500",{"_index":977,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["502",{"_index":978,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["503",{"_index":980,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["504",{"_index":982,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["55",{"_index":1904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":1477,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["6.0",{"_index":1971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6.0.0",{"_index":1687,"title":{},"body":{"dependencies.html":{}}}],["6.5",{"_index":1892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["60",{"_index":1669,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["65",{"_index":2025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["685c5582fd35?w=400&h=400&fit=crop",{"_index":2051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6b1558fcca3d?w=400&h=400&fit=crop",{"_index":2017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6da4f3963bc8?w=400&h=400&fit=crop",{"_index":2159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7",{"_index":1819,"title":{},"body":{"overview.html":{}}}],["7.0",{"_index":2000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7.5",{"_index":1903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7.8.1",{"_index":1698,"title":{},"body":{"dependencies.html":{}}}],["70",{"_index":2039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7111542de6e8?w=400&h=400&fit=crop",{"_index":1984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["71cc94901144?w=400&h=400&fit=crop",{"_index":1936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["75",{"_index":1882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8.0",{"_index":1868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8.16.3",{"_index":1695,"title":{},"body":{"dependencies.html":{}}}],["8.5",{"_index":2120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8/8",{"_index":1665,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1674,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["85",{"_index":2058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8ff5ea7f27f3?w=400&h=400&fit=crop",{"_index":2146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9.0",{"_index":1915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9.5",{"_index":1951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["90",{"_index":2034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["96",{"_index":1573,"title":{},"body":{"entities/User.html":{}}}],["9ff9799b2e4e?w=400&h=400&fit=crop",{"_index":2098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_",{"_index":91,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["a09d9b4aefdd?w=400&h=400&fit=crop",{"_index":2002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["a0c585fd81a1?w=400&h=400&fit=crop",{"_index":2136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["a891a97c1d35?w=400&h=400&fit=crop",{"_index":1925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["absorbent",{"_index":2156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abstract",{"_index":1189,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["acacia",{"_index":2110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GenerateTokensProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{}}}],["accesstoken",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["account",{"_index":1592,"title":{},"body":{"controllers/UsersController.html":{}}}],["active",{"_index":1838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["activeuser",{"_index":475,"title":{},"body":{"controllers/CartController.html":{},"controllers/OrdersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["activeuser('sub",{"_index":487,"title":{},"body":{"controllers/CartController.html":{},"controllers/OrdersController.html":{}}}],["activeuserdata",{"_index":97,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["add",{"_index":560,"title":{},"body":{"injectables/CartService.html":{}}}],["address",{"_index":1500,"title":{},"body":{"classes/SignInDto.html":{}}}],["addtocart",{"_index":111,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{}}}],["addtocart(@activeuser('sub",{"_index":483,"title":{},"body":{"controllers/CartController.html":{}}}],["addtocart(userid",{"_index":119,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{}}}],["addtocartprovider",{"_index":107,"title":{"injectables/AddToCartProvider.html":{}},"body":{"injectables/AddToCartProvider.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"coverage.html":{},"overview.html":{}}}],["adjust",{"_index":1481,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["admin",{"_index":1726,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["again",{"_index":868,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["agnes",{"_index":1611,"title":{},"body":{"controllers/UsersController.html":{}}}],["airtight",{"_index":1932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allow",{"_index":1435,"title":{},"body":{"guards/RolesGuard.html":{}}}],["allowedfields",{"_index":1557,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["allowedfields.includes(el",{"_index":1566,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["already",{"_index":780,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{}}}],["alternative",{"_index":1494,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["amazing",{"_index":1801,"title":{},"body":{"index.html":{}}}],["andwhere('ci.deletedat",{"_index":632,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["antibacterial",{"_index":1988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["any).code",{"_index":991,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["any).column",{"_index":996,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["any).constraint",{"_index":993,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["any).table",{"_index":995,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["apibadrequestresponse",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibody",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apiconsumes",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiconsumes('application/json",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":1591,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiproperty",{"_index":751,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["apiproperty({description",{"_index":732,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["apiresponse",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":1607,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiversion",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DataResponseInterceptor.html":{}}}],["app",{"_index":209,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["app.controller",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":154,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":147,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appetizers",{"_index":2130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application",{"_index":1778,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1737,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":158,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":153,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":893,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["array",{"_index":403,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["asc",{"_index":1078,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["assumes",{"_index":1480,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["async",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"injectables/UsersService.html":{}}}],["asynchrousnously",{"_index":362,"title":{},"body":{"modules/AuthModule.html":{}}}],["atleast",{"_index":745,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["audience",{"_index":1142,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["auth",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.none",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["auth(authtype.none)@get",{"_index":1371,"title":{},"body":{"controllers/ProductsController.html":{}}}],["auth.controller",{"_index":352,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/config/jwt.config",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/enums/role",{"_index":1586,"title":{},"body":{"entities/User.html":{}}}],["auth/guards/access",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/authentication/authentication.guard",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/roles/roles.guard",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_type_key",{"_index":385,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":248,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticates",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticating",{"_index":380,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authentication",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authenticationguard",{"_index":198,"title":{"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":410,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authmodule",{"_index":169,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1807,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":298,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":393,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":398,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":373,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":406,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((type",{"_index":412,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["autoloadentities",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"injectables/UsersService.html":{}}}],["b0d9d3028eb2?w=400&h=400&fit=crop",{"_index":2064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backers",{"_index":1802,"title":{},"body":{"index.html":{}}}],["bags",{"_index":1946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["baking",{"_index":1722,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["bamboo",{"_index":1845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base",{"_index":1589,"title":{},"body":{"controllers/UsersController.html":{}}}],["based",{"_index":381,"title":{},"body":{"guards/AuthenticationGuard.html":{},"entities/CartItem.html":{},"miscellaneous/variables.html":{}}}],["baseurl",{"_index":1313,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["bcrypt",{"_index":422,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":442,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt",{"_index":440,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(data",{"_index":441,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":356,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":1709,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["beechwood",{"_index":2074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beeswax",{"_index":1919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["before",{"_index":805,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["between",{"_index":1031,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["between(min",{"_index":1060,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["bff31c812dba?w=400&h=400&fit=crop",{"_index":2107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["billingaddress",{"_index":583,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{}}}],["biodegradable",{"_index":1914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["board",{"_index":1794,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":430,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"entities/Product.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"classes/UpdateProductDto.html":{}}}],["bootstrap",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["borosilicate",{"_index":1929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bottle",{"_index":2004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bottles",{"_index":2062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bowl",{"_index":2109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bpa",{"_index":1897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["break",{"_index":1076,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["breathable",{"_index":1970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bristles",{"_index":1891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["browse",{"_index":1817,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1815,"title":{},"body":{"modules.html":{}}}],["brush",{"_index":1986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer",{"_index":426,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["build",{"_index":1070,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["builder",{"_index":624,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["builderrorresponse",{"_index":918,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["builderrorresponse(exception",{"_index":1180,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["building",{"_index":1733,"title":{},"body":{"index.html":{}}}],["builds",{"_index":917,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["calculatesubtotal",{"_index":1149,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["calculatesubtotal(items",{"_index":1152,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["callhandler",{"_index":800,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["canactivate",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["cancelled",{"_index":1716,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["canisters",{"_index":1957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cannotcreateentityidmaperror",{"_index":896,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["cap",{"_index":2007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cart",{"_index":125,"title":{"interfaces/Cart.html":{}},"body":{"injectables/AddToCartProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"injectables/GetCartProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"coverage.html":{}}}],["cart.controller",{"_index":535,"title":{},"body":{"modules/CartModule.html":{}}}],["cart.provider",{"_index":133,"title":{},"body":{"injectables/AddToCartProvider.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["cart.provider.ts",{"_index":110,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/GetCartProvider.html":{},"coverage.html":{}}}],["cart.provider.ts:12",{"_index":118,"title":{},"body":{"injectables/AddToCartProvider.html":{}}}],["cart.provider.ts:17",{"_index":1154,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["cart.provider.ts:36",{"_index":121,"title":{},"body":{"injectables/AddToCartProvider.html":{}}}],["cart.provider.ts:37",{"_index":1153,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["cart.provider.ts:8",{"_index":1151,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["cart/cart",{"_index":1357,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{}}}],["cart/cart.module",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["cart['items",{"_index":1159,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["cartcontroller",{"_index":450,"title":{"controllers/CartController.html":{}},"body":{"controllers/CartController.html":{},"modules/CartModule.html":{},"coverage.html":{}}}],["cartid",{"_index":462,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["cartitem",{"_index":129,"title":{"entities/CartItem.html":{}},"body":{"injectables/AddToCartProvider.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Product.html":{},"injectables/UpdateCartItemProvider.html":{},"entities/User.html":{},"coverage.html":{}}}],["cartitem.id",{"_index":1538,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["cartitem.product",{"_index":1334,"title":{},"body":{"entities/Product.html":{}}}],["cartitem.quantity",{"_index":1536,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["cartitem.user",{"_index":1570,"title":{},"body":{"entities/User.html":{}}}],["cartitemrepository",{"_index":115,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["cartitems",{"_index":640,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Product.html":{},"injectables/UpdateCartItemProvider.html":{},"entities/User.html":{}}}],["cartitems.length",{"_index":650,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["cartitems.map((item",{"_index":662,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{}}}],["cartitemsraw",{"_index":625,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["cartitemsraw.map((ci",{"_index":641,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["cartmodule",{"_index":170,"title":{"modules/CartModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules.html":{},"overview.html":{}}}],["cartrepository",{"_index":1533,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["cartservice",{"_index":473,"title":{"injectables/CartService.html":{}},"body":{"controllers/CartController.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"coverage.html":{},"overview.html":{}}}],["carved",{"_index":1911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cascade",{"_index":510,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/SeedProducts1759619432047.html":{}}}],["case",{"_index":1074,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["catch",{"_index":90,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateOrderProvider.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["catch(exception",{"_index":899,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["catcherror",{"_index":858,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["catcherror((error",{"_index":864,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["category",{"_index":690,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["category.enum",{"_index":709,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"entities/Product.html":{}}}],["category.enum.ts",{"_index":1707,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cellulose",{"_index":2030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ceramic",{"_index":2009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["certified",{"_index":1875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["channel",{"_index":1769,"title":{},"body":{"index.html":{}}}],["character",{"_index":749,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":744,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":1756,"title":{},"body":{"index.html":{}}}],["checking",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["checkout",{"_index":1540,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["cheese",{"_index":2140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chemicals",{"_index":2057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chopping",{"_index":2104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ci",{"_index":628,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["ci.id",{"_index":642,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["ci.product.id",{"_index":644,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["ci.product.price",{"_index":648,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["ci.product.stock",{"_index":646,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["ci.quantity",{"_index":643,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["class",{"_index":64,"title":{"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseConnectionException.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateProductDto.html":{},"classes/ValidationException.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":568,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseConnectionException.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateProductDto.html":{},"classes/ValidationException.html":{},"overview.html":{}}}],["clay",{"_index":2014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cleanedquery",{"_index":1039,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleanedquery.category",{"_index":1049,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleanedquery.name",{"_index":1061,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleanedquery.name.split",{"_index":1063,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleanedquery.price",{"_index":1052,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleaning",{"_index":1721,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["cleanquery",{"_index":1017,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleanquery(query",{"_index":1021,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["clear",{"_index":1543,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["clearcart",{"_index":544,"title":{},"body":{"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["clearcart(userid",{"_index":551,"title":{},"body":{"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["cleared",{"_index":1546,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["clearusercart",{"_index":452,"title":{},"body":{"controllers/CartController.html":{}}}],["clearusercart(@activeuser('sub",{"_index":480,"title":{},"body":{"controllers/CartController.html":{}}}],["clearusercart(userid",{"_index":458,"title":{},"body":{"controllers/CartController.html":{}}}],["cloths",{"_index":2053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":344,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":346,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":345,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_cartmodule",{"_index":529,"title":{},"body":{"modules/CartModule.html":{},"overview.html":{}}}],["cluster_cartmodule_exports",{"_index":532,"title":{},"body":{"modules/CartModule.html":{},"overview.html":{}}}],["cluster_cartmodule_imports",{"_index":530,"title":{},"body":{"modules/CartModule.html":{},"overview.html":{}}}],["cluster_cartmodule_providers",{"_index":531,"title":{},"body":{"modules/CartModule.html":{},"overview.html":{}}}],["cluster_ordersmodule",{"_index":1247,"title":{},"body":{"modules/OrdersModule.html":{},"overview.html":{}}}],["cluster_ordersmodule_imports",{"_index":1249,"title":{},"body":{"modules/OrdersModule.html":{}}}],["cluster_ordersmodule_providers",{"_index":1248,"title":{},"body":{"modules/OrdersModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":1285,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":1286,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":1287,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_productsmodule",{"_index":1395,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_exports",{"_index":1398,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_imports",{"_index":1396,"title":{},"body":{"modules/ProductsModule.html":{}}}],["cluster_productsmodule_providers",{"_index":1397,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1622,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1623,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1624,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["coasters",{"_index":2154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coated",{"_index":1899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coconut",{"_index":1907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["code",{"_index":891,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["coffee",{"_index":1992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coir",{"_index":2042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["collapsible",{"_index":2018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["column",{"_index":525,"title":{},"body":{"entities/CartItem.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["column({default",{"_index":512,"title":{},"body":{"entities/CartItem.html":{},"entities/Product.html":{}}}],["column({length",{"_index":1336,"title":{},"body":{"entities/Product.html":{}}}],["column({type",{"_index":1193,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["come",{"_index":1759,"title":{},"body":{"index.html":{}}}],["commit",{"_index":677,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["common/interceptors/data",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["common/pagination/interfaces/paginated.interface",{"_index":1382,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["comparepassword",{"_index":423,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepassword(data",{"_index":425,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparing",{"_index":429,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["complete",{"_index":680,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["compodoc/compodoc",{"_index":1680,"title":{},"body":{"dependencies.html":{}}}],["compostable",{"_index":1942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conditions",{"_index":1071,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["config",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthModule.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokensProvider.html":{}}}],["config/app.config",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["config/enviroment.validation",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":353,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{}}}],["configmodule",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":240,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{}}}],["configservice.get('database.autoloadentities",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["confirmed",{"_index":1713,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["conflict",{"_index":1478,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["conflictexception",{"_index":604,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["conflictexception('cart",{"_index":652,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["conflictexception('could",{"_index":679,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["connect",{"_index":619,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["connecting",{"_index":824,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["connection",{"_index":686,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"classes/ValidationException.html":{}}}],["connectionerrorcodes",{"_index":874,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["connectionerrorcodes.some((code",{"_index":882,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["console.log('1",{"_index":636,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["console.log('2",{"_index":649,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["console.log('4",{"_index":660,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["console.log('5",{"_index":666,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["console.log('6",{"_index":669,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["console.log('7",{"_index":673,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["console.log('before",{"_index":804,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["console.log('clearing",{"_index":481,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{}}}],["console.log('controller",{"_index":906,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["console.log('finish",{"_index":1545,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["console.log('going",{"_index":1544,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["console.log('qty",{"_index":490,"title":{},"body":{"controllers/CartController.html":{}}}],["console.log(error",{"_index":617,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["console.log(paginatedproducts",{"_index":1088,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["console.log(product",{"_index":1560,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["console.log(x",{"_index":672,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["const",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":1841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constraint",{"_index":992,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["constructor",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{}}}],["constructor(addtocartprovider",{"_index":548,"title":{},"body":{"injectables/CartService.html":{}}}],["constructor(cartitemrepository",{"_index":1150,"title":{},"body":{"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["constructor(configservice",{"_index":797,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["constructor(createorderprovider",{"_index":1260,"title":{},"body":{"injectables/OrdersService.html":{}}}],["constructor(createproductprovider",{"_index":1408,"title":{},"body":{"injectables/ProductsService.html":{}}}],["constructor(createuserprovider",{"_index":1631,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(datasource",{"_index":599,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["constructor(errors",{"_index":829,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["constructor(jwtservice",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["constructor(operation",{"_index":814,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["constructor(orderrepository",{"_index":1004,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{}}}],["constructor(private",{"_index":155,"title":{},"body":{"controllers/AppController.html":{},"guards/RolesGuard.html":{}}}],["constructor(productsrepository",{"_index":718,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["constructor(productsservice",{"_index":112,"title":{},"body":{"injectables/AddToCartProvider.html":{}}}],["constructor(reflector",{"_index":376,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["constructor(request",{"_index":1291,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(signinprovider",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(usersrepository",{"_index":763,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{}}}],["constructor(usersservice",{"_index":1507,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["containers",{"_index":1937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["containing",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{}}}],["context",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":409,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":408,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":146,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CartController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CartController.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('cart",{"_index":479,"title":{},"body":{"controllers/CartController.html":{}}}],["controller('orders",{"_index":1241,"title":{},"body":{"controllers/OrdersController.html":{}}}],["controller('products",{"_index":1383,"title":{},"body":{"controllers/ProductsController.html":{}}}],["controller('users",{"_index":1608,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":148,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CartController.html":{},"modules/CartModule.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["controller}::${handler",{"_index":913,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["cookware",{"_index":1880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cooling",{"_index":2088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cork",{"_index":1959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cotton",{"_index":1922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["courses",{"_index":1776,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1641,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":411,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"classes/SeedProducts1759619432047.html":{},"classes/UpdateProductDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createcartitemdto",{"_index":120,"title":{"classes/CreateCartItemDto.html":{}},"body":{"injectables/AddToCartProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"coverage.html":{}}}],["created",{"_index":1601,"title":{},"body":{"controllers/UsersController.html":{}}}],["createdat",{"_index":497,"title":{},"body":{"entities/CartItem.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["createdatecolumn",{"_index":501,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["createdatecolumn()@index",{"_index":1340,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{}}}],["createorder",{"_index":598,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["createorder(userid",{"_index":602,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["createorderdto",{"_index":580,"title":{"classes/CreateOrderDto.html":{}},"body":{"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"coverage.html":{}}}],["createorderprovider",{"_index":595,"title":{"injectables/CreateOrderProvider.html":{}},"body":{"injectables/CreateOrderProvider.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"overview.html":{}}}],["createparamdecorator",{"_index":1833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createproduct",{"_index":717,"title":{},"body":{"injectables/CreateProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["createproduct(@body",{"_index":1385,"title":{},"body":{"controllers/ProductsController.html":{}}}],["createproduct(createproductdto",{"_index":721,"title":{},"body":{"injectables/CreateProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["createproductdto",{"_index":687,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["createproductprovider",{"_index":714,"title":{"injectables/CreateProductProvider.html":{}},"body":{"injectables/CreateProductProvider.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["createquerybuilder(cartitem",{"_index":627,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["creates",{"_index":1604,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser",{"_index":762,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":766,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":729,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":779,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserprovider",{"_index":759,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["creating",{"_index":1634,"title":{},"body":{"injectables/UsersService.html":{}}}],["credentials",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["ctx",{"_index":900,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":903,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":902,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cup",{"_index":2019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cups",{"_index":2083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":1282,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpage",{"_index":1278,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["custom",{"_index":1837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cutlery",{"_index":1846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cutting",{"_index":1723,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["d1955d23e34d?w=400&h=400&fit=crop",{"_index":2087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["d5b604d0c90d?w=400&h=400&fit=crop",{"_index":1870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["d6a59a2e2f3e?w=400&h=400&fit=crop",{"_index":2116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dashes",{"_index":1066,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["data",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/SeedProducts1759619432047.html":{},"controllers/UsersController.html":{}}}],["data.interface",{"_index":1133,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["data.interface.ts",{"_index":100,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["database",{"_index":234,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["databaseconfig",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseconnectionexception",{"_index":809,"title":{"classes/DatabaseConnectionException.html":{}},"body":{"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"classes/ValidationException.html":{},"coverage.html":{}}}],["databaseerror",{"_index":930,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["dataresponseinterceptor",{"_index":194,"title":{"injectables/DataResponseInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["datasource",{"_index":600,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["date",{"_index":500,"title":{},"body":{"entities/CartItem.html":{},"injectables/DeleteProductProvider.html":{},"entities/Order.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["date().toisostring",{"_index":941,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["db",{"_index":522,"title":{},"body":{"entities/CartItem.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["decimal",{"_index":1208,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{}}}],["decimal(10,2",{"_index":1463,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["declarations",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decoraror",{"_index":1843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorator",{"_index":1427,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["decorator/auth.decorator",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators",{"_index":151,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/GetProductsBaseDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"classes/SignInDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["decrementquantity",{"_index":453,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["decrementquantity(userid",{"_index":461,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["deductstock",{"_index":1524,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["deductstock(userid",{"_index":1529,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["deep",{"_index":2061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deeper",{"_index":1771,"title":{},"body":{"index.html":{}}}],["default",{"_index":392,"title":{},"body":{"guards/AuthenticationGuard.html":{},"entities/CartItem.html":{},"injectables/FindAllProductsProvider.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":375,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defaultroletype",{"_index":1431,"title":{},"body":{"guards/RolesGuard.html":{}}}],["defined",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{}}}],["delete",{"_index":471,"title":{},"body":{"controllers/CartController.html":{},"entities/CartItem.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["delete(':cartid",{"_index":469,"title":{},"body":{"controllers/CartController.html":{}}}],["delete(':productid",{"_index":1391,"title":{},"body":{"controllers/ProductsController.html":{}}}],["delete('clear",{"_index":459,"title":{},"body":{"controllers/CartController.html":{}}}],["deleted",{"_index":846,"title":{},"body":{"injectables/DeleteProductProvider.html":{}}}],["deletedat",{"_index":498,"title":{},"body":{"entities/CartItem.html":{},"injectables/DeleteProductProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Product.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{}}}],["deletedatecolumn",{"_index":503,"title":{},"body":{"entities/CartItem.html":{}}}],["deleteproduct",{"_index":835,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["deleteproduct(@param('productid",{"_index":1393,"title":{},"body":{"controllers/ProductsController.html":{}}}],["deleteproduct(productid",{"_index":837,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["deleteproductprovider",{"_index":833,"title":{"injectables/DeleteProductProvider.html":{}},"body":{"injectables/DeleteProductProvider.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["delivered",{"_index":1715,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dependencies",{"_index":160,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["depending",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/RolesGuard.html":{}}}],["desc",{"_index":1013,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{}}}],["description",{"_index":9,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"classes/ValidationException.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["details",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/UsersController.html":{}}}],["development",{"_index":1744,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1782,"title":{},"body":{"index.html":{}}}],["diff",{"_index":400,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["different",{"_index":924,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["disable",{"_index":83,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["discord",{"_index":1768,"title":{},"body":{"index.html":{}}}],["dish",{"_index":2043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dishes",{"_index":2152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dive",{"_index":1770,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1642,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":1617,"title":{},"body":{"controllers/UsersController.html":{}}}],["don't",{"_index":675,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["dotenv",{"_index":1690,"title":{},"body":{"dependencies.html":{}}}],["dough",{"_index":2075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["down",{"_index":1444,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["down(queryrunner",{"_index":1446,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["drinks",{"_index":1978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["drinkware",{"_index":1720,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["drop",{"_index":1490,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["dry",{"_index":1930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto",{"_index":456,"title":{},"body":{"controllers/CartController.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SignInDto.html":{}}}],["dtos/create",{"_index":124,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":1027,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["dtos/pagination",{"_index":1297,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["dtos/sign",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["dtos/update",{"_index":478,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["duplicates",{"_index":1470,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["durable",{"_index":1862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dust",{"_index":2055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e2e",{"_index":1753,"title":{},"body":{"index.html":{}}}],["e34014e67546?w=400&h=400&fit=crop",{"_index":2101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eco",{"_index":1886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["econnrefused",{"_index":875,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["econnreset",{"_index":878,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["edc6dcb6d633?w=400&h=400&fit=crop",{"_index":1954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["efficient",{"_index":1734,"title":{},"body":{"index.html":{}}}],["eggs",{"_index":1888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eigt",{"_index":743,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ejim",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{}}}],["ejim'})@isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":737,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["elegant",{"_index":2129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email",{"_index":103,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["email.provider",{"_index":1628,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["email.provider.ts",{"_index":1108,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"coverage.html":{}}}],["email.provider.ts:21",{"_index":1112,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{}}}],["email.provider.ts:7",{"_index":1110,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{}}}],["empty",{"_index":653,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["encrypted",{"_index":427,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["endpoint",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["endpoints",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["engraved",{"_index":2155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enotfound",{"_index":876,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["enterprise",{"_index":1785,"title":{},"body":{"index.html":{}}}],["entities",{"_index":494,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":493,"title":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{}},"body":{"entities/CartItem.html":{},"injectables/CreateOrderProvider.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('cart_items",{"_index":527,"title":{},"body":{"entities/CartItem.html":{}}}],["entity('order_items",{"_index":1228,"title":{},"body":{"entities/OrderItem.html":{}}}],["entity('orders",{"_index":1219,"title":{},"body":{"entities/Order.html":{}}}],["entity('products",{"_index":1360,"title":{},"body":{"entities/Product.html":{}}}],["entitynotfounderror",{"_index":895,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["entityvalidationerror",{"_index":938,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["enum",{"_index":1206,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["enumerations",{"_index":1701,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/auth",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{}}}],["enums/order",{"_index":1217,"title":{},"body":{"entities/Order.html":{}}}],["enums/product",{"_index":708,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"entities/Product.html":{}}}],["enums/role",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{}}}],["env",{"_index":211,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["enviromentvalidation",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":210,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["ergonomic",{"_index":2124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err",{"_index":420,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["err_bad_gateway",{"_index":979,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_bad_request",{"_index":965,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_conflict",{"_index":973,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_db_connection",{"_index":826,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["err_db_query_failed",{"_index":931,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_entity_not_found",{"_index":936,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_entity_validation",{"_index":939,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_forbidden",{"_index":969,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_gateway_timeout",{"_index":983,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_internal",{"_index":923,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_not_found",{"_index":971,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_rate_limit",{"_index":976,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_service_unavailable",{"_index":981,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_unauthorized",{"_index":967,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_unknown",{"_index":940,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_unknown_http",{"_index":985,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_validation",{"_index":831,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["error",{"_index":414,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateOrderProvider.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/ValidationException.html":{}}}],["error.message.tolowercase",{"_index":881,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["errorcode",{"_index":825,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["errorhandlinginterceptor",{"_index":847,"title":{"injectables/ErrorHandlingInterceptor.html":{}},"body":{"injectables/ErrorHandlingInterceptor.html":{},"coverage.html":{}}}],["errormessage",{"_index":880,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["errormessage.includes(code.tolowercase",{"_index":883,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["errorresponse",{"_index":884,"title":{"interfaces/ErrorResponse.html":{}},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["errorresponse.errortype",{"_index":912,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["errors",{"_index":828,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["errortype",{"_index":887,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["eslint",{"_index":82,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["eslint/no",{"_index":87,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["etimedout",{"_index":877,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["events",{"_index":1174,"title":{},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["example",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["examples",{"_index":1598,"title":{},"body":{"controllers/UsersController.html":{}}}],["exception",{"_index":811,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["exception.constructor.name",{"_index":927,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":886,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:115",{"_index":1181,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:175",{"_index":1184,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:193",{"_index":1185,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:209",{"_index":1186,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:232",{"_index":1187,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:70",{"_index":1179,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:77",{"_index":1182,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.getresponse",{"_index":929,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exception.getstatus",{"_index":925,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exception.message",{"_index":926,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exception.stack",{"_index":915,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exceptionfilter",{"_index":892,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exceptions.filter",{"_index":773,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["exceptions.filter.ts",{"_index":810,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{},"coverage.html":{}}}],["exceptions.filter.ts:28",{"_index":1640,"title":{},"body":{"classes/ValidationException.html":{}}}],["exceptions.filter.ts:6",{"_index":815,"title":{},"body":{"classes/DatabaseConnectionException.html":{}}}],["exclude",{"_index":1584,"title":{},"body":{"entities/User.html":{}}}],["excluded",{"_index":1605,"title":{},"body":{"controllers/UsersController.html":{}}}],["execution",{"_index":402,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["executioncontext",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1115,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{}}}],["existinguser",{"_index":777,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["exists",{"_index":781,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/SeedProducts1759619432047.html":{},"controllers/UsersController.html":{}}}],["exists})@post('')@httpcode(httpstatus.created)@auth(authtype.none",{"_index":1602,"title":{},"body":{"controllers/UsersController.html":{}}}],["experience",{"_index":1773,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":1129,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["explicit",{"_index":1455,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["export",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{}}}],["exports",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["expose",{"_index":997,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["express",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["extends",{"_index":812,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/UpdateProductDto.html":{},"classes/ValidationException.html":{}}}],["extract",{"_index":904,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["extracting",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(request",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["fa280b87c399?w=400&h=400&fit=crop",{"_index":2122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fabric",{"_index":1964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["failed",{"_index":830,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["fallback",{"_index":1081,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["false",{"_index":40,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/FindAllProductsProvider.html":{},"entities/Product.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{}}}],["false})@exclude",{"_index":1580,"title":{},"body":{"entities/User.html":{}}}],["favour",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{}}}],["favour'})@isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":735,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["favour233",{"_index":1503,"title":{},"body":{"classes/SignInDto.html":{}}}],["favour233'})@isnotempty()@isstring",{"_index":1501,"title":{},"body":{"classes/SignInDto.html":{}}}],["favour@ejim1",{"_index":756,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["favour@ejim1'})@isstring()@isnotempty()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":739,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["favour@gmail.com",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["favour@gmail.com'})@isemail()@isnotempty",{"_index":1498,"title":{},"body":{"classes/SignInDto.html":{}}}],["favour@gmail.com'})@isemail()@isnotempty()@maxlength(96",{"_index":733,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["few",{"_index":1757,"title":{},"body":{"index.html":{}}}],["fiber",{"_index":1940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fibers",{"_index":2045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["field",{"_index":1834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fields",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"coverage.html":{}}}],["file.ts",{"_index":1673,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["filter",{"_index":873,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["filteredpayload",{"_index":1561,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["filterobj",{"_index":1555,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["filterobj(obj",{"_index":1556,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["filters",{"_index":1993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finally",{"_index":683,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["finalresponse",{"_index":1322,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["find",{"_index":1265,"title":{},"body":{"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":1296,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["findallorders",{"_index":1003,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/OrdersService.html":{}}}],["findallorders(userid",{"_index":1007,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/OrdersService.html":{}}}],["findallordersforuserprovider",{"_index":1000,"title":{"injectables/FindAllOrdersForUserProvider.html":{}},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"overview.html":{}}}],["findallproducts",{"_index":1018,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["findallproducts(productquery",{"_index":1024,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"injectables/ProductsService.html":{}}}],["findallproducts(productsquery",{"_index":1370,"title":{},"body":{"controllers/ProductsController.html":{}}}],["findallproductsprovider",{"_index":1014,"title":{"injectables/FindAllProductsProvider.html":{}},"body":{"injectables/FindAllProductsProvider.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["finding",{"_index":1113,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{}}}],["findoptionsorder",{"_index":1032,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["findorderbyid",{"_index":1094,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{},"injectables/OrdersService.html":{}}}],["findorderbyid(userid",{"_index":1096,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{},"injectables/OrdersService.html":{}}}],["findorderbyidprovider",{"_index":1092,"title":{"injectables/FindOrderByIdProvider.html":{}},"body":{"injectables/FindOrderByIdProvider.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"overview.html":{}}}],["findproductbyid",{"_index":1102,"title":{},"body":{"injectables/FindProductByIdProvider.html":{},"injectables/ProductsService.html":{}}}],["findproductbyid(productid",{"_index":1103,"title":{},"body":{"injectables/FindProductByIdProvider.html":{},"injectables/ProductsService.html":{}}}],["findproductbyidprovider",{"_index":1101,"title":{"injectables/FindProductByIdProvider.html":{}},"body":{"injectables/FindProductByIdProvider.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["finduserbyemail",{"_index":1109,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["finduserbyemail(email",{"_index":1111,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["finduserbyemailprovider",{"_index":1106,"title":{"injectables/FindUserByEmailProvider.html":{}},"body":{"injectables/FindUserByEmailProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["finduserbyid",{"_index":1117,"title":{},"body":{"injectables/FindUserByIdProvider.html":{},"injectables/UsersService.html":{}}}],["finduserbyid(userid",{"_index":1118,"title":{},"body":{"injectables/FindUserByIdProvider.html":{},"injectables/UsersService.html":{}}}],["finduserbyidprovider",{"_index":1116,"title":{"injectables/FindUserByIdProvider.html":{}},"body":{"injectables/FindUserByIdProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["fire",{"_index":417,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["first",{"_index":1280,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["firstname",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fixed",{"_index":622,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["flat",{"_index":2023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["flipping",{"_index":1901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["flows",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["folds",{"_index":2022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["follow",{"_index":1788,"title":{},"body":{"index.html":{}}}],["food",{"_index":1866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forbiddenexception",{"_index":1428,"title":{},"body":{"guards/RolesGuard.html":{}}}],["forbiddenexception('user",{"_index":1436,"title":{},"body":{"guards/RolesGuard.html":{}}}],["forget",{"_index":676,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["forgot",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{}}}],["fork",{"_index":1849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format",{"_index":638,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/UsersController.html":{}}}],["formatting",{"_index":802,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["forwardref",{"_index":351,"title":{},"body":{"modules/AuthModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":843,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByIdProvider.html":{},"classes/GlobalExceptionFilter.html":{},"guards/RolesGuard.html":{},"injectables/UpdateProductProvider.html":{}}}],["frame",{"_index":2090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["framework",{"_index":1732,"title":{},"body":{"index.html":{}}}],["free",{"_index":1898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["freezer",{"_index":1950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fresh",{"_index":1968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fruits",{"_index":2127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fsc",{"_index":1874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["full",{"_index":910,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/SeedProducts1759619432047.html":{},"index.html":{}}}],["fully",{"_index":1913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["functions",{"_index":1727,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gaurding",{"_index":1844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generate",{"_index":438,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["generatetokenprovider",{"_index":1508,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["generatetokens",{"_index":1123,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokens(user",{"_index":1126,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokensprovider",{"_index":348,"title":{"injectables/GenerateTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["generating",{"_index":1122,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["gentle",{"_index":2094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get(':id",{"_index":1235,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getcart",{"_index":545,"title":{},"body":{"injectables/CartService.html":{},"injectables/GetCartProvider.html":{}}}],["getcart(userid",{"_index":554,"title":{},"body":{"injectables/CartService.html":{},"injectables/GetCartProvider.html":{}}}],["getcartprovider",{"_index":117,"title":{"injectables/GetCartProvider.html":{}},"body":{"injectables/AddToCartProvider.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"coverage.html":{},"overview.html":{}}}],["getcontrollername",{"_index":1175,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["getcontrollername(request",{"_index":946,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["gethandlername",{"_index":1176,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["gethandlername(request",{"_index":955,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["gethello",{"_index":150,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gethttperrorcode",{"_index":1177,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["gethttperrorcode(status",{"_index":963,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["getmany",{"_index":635,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["getorder",{"_index":1231,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getorder(userid",{"_index":1234,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getorders",{"_index":1232,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getorders(@activeuser('sub",{"_index":1243,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getorders(userid",{"_index":1237,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getproductsbasedto",{"_index":1162,"title":{"classes/GetProductsBaseDto.html":{}},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"coverage.html":{}}}],["getproductsdto",{"_index":1022,"title":{"classes/GetProductsDto.html":{}},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["getting",{"_index":944,"title":{"index.html":{}},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["getusercart",{"_index":454,"title":{},"body":{"controllers/CartController.html":{}}}],["getusercart(@activeuser('sub",{"_index":485,"title":{},"body":{"controllers/CartController.html":{}}}],["getusercart(userid",{"_index":466,"title":{},"body":{"controllers/CartController.html":{}}}],["glass",{"_index":1926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["glazed",{"_index":2137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["global",{"_index":872,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["globalexceptionfilter",{"_index":897,"title":{"classes/GlobalExceptionFilter.html":{}},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["gold",{"_index":1994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["goods",{"_index":1931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grade",{"_index":1867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["graph",{"_index":1779,"title":{},"body":{"index.html":{}}}],["grease",{"_index":2048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gripping",{"_index":1902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grow",{"_index":1798,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["guarding",{"_index":1840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{},"overview.html":{}}}],["hand",{"_index":1910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handcrafted",{"_index":1873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handle",{"_index":865,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["handled",{"_index":871,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["handler",{"_index":888,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["handles",{"_index":1452,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["handling",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ErrorHandlingInterceptor.html":{},"controllers/UsersController.html":{}}}],["handling.interceptor.ts",{"_index":850,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"coverage.html":{}}}],["handling.interceptor.ts:24",{"_index":852,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["handling.interceptor.ts:55",{"_index":855,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["handling/error",{"_index":849,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"coverage.html":{}}}],["hands",{"_index":1772,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1760,"title":{},"body":{"index.html":{}}}],["hashed",{"_index":436,"title":{},"body":{"injectables/BcryptProvider.html":{},"controllers/UsersController.html":{}}}],["hashed.'})@apibody({description",{"_index":1596,"title":{},"body":{"controllers/UsersController.html":{}}}],["hashing",{"_index":435,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashing.provider",{"_index":437,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashingprovider",{"_index":347,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":424,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(data",{"_index":433,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hasrole",{"_index":1437,"title":{},"body":{"guards/RolesGuard.html":{}}}],["headers",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["heat",{"_index":1863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hello",{"_index":246,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1783,"title":{},"body":{"index.html":{}}}],["herb",{"_index":2117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["here",{"_index":1805,"title":{},"body":{"index.html":{}}}],["host",{"_index":232,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":901,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["hot",{"_index":2151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hot/cold",{"_index":1979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hours",{"_index":1981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":962,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["httpcode",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["httpcode(204",{"_index":1392,"title":{},"body":{"controllers/ProductsController.html":{}}}],["httpcode(httpstatus.created",{"_index":1620,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpcode(httpstatus.ok",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":813,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["https",{"_index":1472,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["https://images.unsplash.com/photo",{"_index":1856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":1811,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{},"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/UsersController.html":{},"classes/ValidationException.html":{}}}],["httpstatus.bad_request",{"_index":832,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["httpstatus.internal_server_error",{"_index":919,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["httpstatus.not_found",{"_index":933,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["httpstatus.request_timeout",{"_index":827,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["husks",{"_index":2046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["id",{"_index":106,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/Cart.html":{},"entities/CartItem.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id.provider",{"_index":1257,"title":{},"body":{"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["id.provider.ts",{"_index":1093,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByIdProvider.html":{},"coverage.html":{}}}],["id.provider.ts:12",{"_index":1098,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{}}}],["id.provider.ts:16",{"_index":1104,"title":{},"body":{"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByIdProvider.html":{}}}],["id.provider.ts:7",{"_index":1095,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByIdProvider.html":{}}}],["identifier",{"_index":1643,"title":{},"body":{"coverage.html":{}}}],["identity",{"_index":1493,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["idx_category",{"_index":1467,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["idx_name",{"_index":1466,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["ignore",{"_index":1469,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["ilike",{"_index":1033,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["ilike(`%${searchterm",{"_index":1069,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["iloghaluagneskc@gmail.com",{"_index":1612,"title":{},"body":{"controllers/UsersController.html":{}}}],["imageurl",{"_index":691,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["implements",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{}}}],["import",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{}}}],["imports",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["in')@auth(authtype.none)@httpcode(httpstatus.ok)@apioperation({summary",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{}}}],["in(cleanedquery.category.split",{"_index":1051,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["in.dto",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["in.dto.ts",{"_index":1497,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["in.dto.ts:17",{"_index":1499,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.dto.ts:28",{"_index":1502,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.provider",{"_index":359,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["in.provider.ts",{"_index":1505,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["in.provider.ts:17",{"_index":1509,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["in.provider.ts:47",{"_index":1510,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["including",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index(['category",{"_index":1362,"title":{},"body":{"entities/Product.html":{}}}],["index(['name",{"_index":1361,"title":{},"body":{"entities/Product.html":{}}}],["indicates",{"_index":431,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{}}}],["information",{"_index":990,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["inject",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(forwardref",{"_index":776,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(jwtconfig.key",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["inject(request",{"_index":1301,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["injectable",{"_index":53,"title":{"injectables/AddToCartProvider.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/HashingProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"injectables/UsersService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/HashingProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":108,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/HashingProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":135,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"controllers/OrdersController.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["injectrepository",{"_index":131,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["injectrepository(cartitem",{"_index":140,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["injectrepository(order",{"_index":1009,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{}}}],["injectrepository(product",{"_index":725,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["injectrepository(user",{"_index":775,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{}}}],["innerjoinandselect('ci.product",{"_index":629,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["inorder",{"_index":1299,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["insert",{"_index":1468,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["installcompile",{"_index":1743,"title":{},"body":{"index.html":{}}}],["instance",{"_index":418,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["instanceof",{"_index":866,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["insulated",{"_index":1975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["integer",{"_index":1464,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["interact",{"_index":1780,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":796,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["intercept(context",{"_index":799,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["interceptor",{"_index":795,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["interface",{"_index":96,"title":{"interfaces/ActiveUserData.html":{},"interfaces/Cart.html":{},"interfaces/ErrorResponse.html":{},"interfaces/Paginated.html":{}},"body":{"interfaces/ActiveUserData.html":{},"interfaces/Cart.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"interfaces/Paginated.html":{},"coverage.html":{}}}],["interfaces",{"_index":98,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/Cart.html":{},"interfaces/ErrorResponse.html":{},"interfaces/Paginated.html":{},"overview.html":{}}}],["interfaces/active",{"_index":1132,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["interfaces/cart.interface",{"_index":127,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["interfaces/paginated.interface",{"_index":1300,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["internal",{"_index":920,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["internalservererror",{"_index":922,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["intersectiontype",{"_index":1172,"title":{},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["invalid",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/UsersController.html":{}}}],["invaliduser",{"_index":1614,"title":{},"body":{"controllers/UsersController.html":{}}}],["isboolean",{"_index":1553,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["isconnectionerror",{"_index":851,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["isconnectionerror(error",{"_index":853,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["isdeleted",{"_index":845,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{}}}],["isemail",{"_index":752,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isenum",{"_index":705,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isenum(productcategory",{"_index":713,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isenum(productcategory)@isnotempty",{"_index":693,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isglobal",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":1171,"title":{},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["isin(['newest",{"_index":1173,"title":{},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["isint",{"_index":576,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateProductDto.html":{},"classes/UpdateCartItemDto.html":{}}}],["isint()@isnotempty",{"_index":701,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isint()@isnotempty()@min(1",{"_index":703,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isint()@min(1",{"_index":574,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/UpdateCartItemDto.html":{}}}],["isnan(max",{"_index":1058,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["isnan(min",{"_index":1057,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["isnotempty",{"_index":591,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isnotempty()@isstring",{"_index":586,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["isoptional",{"_index":592,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/PaginationQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["isoptional()@isboolean",{"_index":1550,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["isoptional()@ispositive",{"_index":1330,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isoptional()@isstring",{"_index":588,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["isoptional()@isstring()@isin(['newest",{"_index":1169,"title":{},"body":{"classes/GetProductsBaseDto.html":{}}}],["ispasswordequal",{"_index":1512,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["ispositive",{"_index":1332,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":572,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/SignInDto.html":{}}}],["isstring()@isnotempty",{"_index":697,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isstring()@isnotempty()@minlength(5)@maxlength(150",{"_index":699,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isstring()@isnotempty()@minlength(5)@maxlength(350",{"_index":695,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isstring()@isoptional",{"_index":1165,"title":{},"body":{"classes/GetProductsBaseDto.html":{}}}],["issuer",{"_index":1144,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["item",{"_index":139,"title":{},"body":{"injectables/AddToCartProvider.html":{},"entities/CartItem.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["item.dto",{"_index":126,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["item.dto.ts",{"_index":570,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/UpdateCartItemDto.html":{},"coverage.html":{}}}],["item.dto.ts:5",{"_index":573,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["item.dto.ts:6",{"_index":1521,"title":{},"body":{"classes/UpdateCartItemDto.html":{}}}],["item.dto.ts:9",{"_index":575,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["item.entity",{"_index":130,"title":{},"body":{"injectables/AddToCartProvider.html":{},"modules/CartModule.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Order.html":{},"modules/OrdersModule.html":{},"entities/Product.html":{},"injectables/UpdateCartItemProvider.html":{},"entities/User.html":{}}}],["item.entity.ts",{"_index":496,"title":{},"body":{"entities/CartItem.html":{},"entities/OrderItem.html":{},"coverage.html":{}}}],["item.entity.ts:11",{"_index":1227,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:14",{"_index":1225,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:17",{"_index":1224,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:18",{"_index":506,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:20",{"_index":1226,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:21",{"_index":514,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:24",{"_index":518,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:29",{"_index":511,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:32",{"_index":502,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:35",{"_index":516,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:38",{"_index":504,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:8",{"_index":1222,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.id",{"_index":1156,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["item.price",{"_index":656,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["item.product",{"_index":1157,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["item.product.price",{"_index":1160,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["item.product.stock",{"_index":1541,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.productid",{"_index":664,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["item.provider",{"_index":539,"title":{},"body":{"modules/CartModule.html":{},"injectables/CartService.html":{}}}],["item.provider.ts",{"_index":1523,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{},"coverage.html":{}}}],["item.provider.ts:101",{"_index":1527,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.provider.ts:15",{"_index":1526,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.provider.ts:32",{"_index":1528,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.provider.ts:58",{"_index":1531,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.provider.ts:72",{"_index":1532,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.provider.ts:88",{"_index":1530,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.quantity",{"_index":657,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["item.stock",{"_index":654,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["items",{"_index":444,"title":{},"body":{"interfaces/Cart.html":{},"entities/CartItem.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Order.html":{},"classes/PaginationQueryDto.html":{}}}],["items.product",{"_index":1012,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{}}}],["itemsperpage",{"_index":1276,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["jars",{"_index":1927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["job",{"_index":1791,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1793,"title":{},"body":{"index.html":{}}}],["john",{"_index":1616,"title":{},"body":{"controllers/UsersController.html":{}}}],["john.doe@example.com",{"_index":1618,"title":{},"body":{"controllers/UsersController.html":{}}}],["joi",{"_index":1692,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":1064,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"index.html":{}}}],["jsbfiwhvfquobdfj",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{}}}],["jwt",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{}}}],["jwtconfig",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{}}}],["jwtconfiguration",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["jwtmodule",{"_index":205,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":241,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtservice",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["kamil",{"_index":1808,"title":{},"body":{"index.html":{}}}],["keeps",{"_index":1977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kelechi",{"_index":1610,"title":{},"body":{"controllers/UsersController.html":{}}}],["key",{"_index":1460,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["keyof",{"_index":1563,"title":{},"body":{"injectables/UpdateProductProvider.html":{},"miscellaneous/variables.html":{}}}],["keyword",{"_index":391,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["knife",{"_index":1850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["knives",{"_index":2095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ladle",{"_index":1909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":1281,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["lastname",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["later",{"_index":823,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"classes/ValidationException.html":{}}}],["leak",{"_index":1938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["learn",{"_index":1764,"title":{},"body":{"index.html":{}}}],["legend",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":1201,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["letter",{"_index":747,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":1814,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1796,"title":{},"body":{"index.html":{}}}],["lids",{"_index":1928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["limit",{"_index":1041,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/PaginationQueryDto.html":{}}}],["line",{"_index":85,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["linkedin",{"_index":1789,"title":{},"body":{"index.html":{}}}],["links",{"_index":1271,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["literal",{"_index":447,"title":{},"body":{"interfaces/Cart.html":{},"interfaces/Paginated.html":{}}}],["load",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["lock",{"_index":1948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log",{"_index":909,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["logged",{"_index":101,"title":{},"body":{"interfaces/ActiveUserData.html":{},"guards/AuthenticationGuard.html":{}}}],["logger",{"_index":894,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["logger(globalexceptionfilter.name",{"_index":898,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["logging",{"_index":239,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["looking",{"_index":1790,"title":{},"body":{"index.html":{}}}],["loop",{"_index":415,"title":{},"body":{"guards/AuthenticationGuard.html":{},"index.html":{}}}],["made",{"_index":1865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mains",{"_index":2131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["makes",{"_index":399,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["manytoone",{"_index":526,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{}}}],["manytoone(undefined",{"_index":507,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{}}}],["map",{"_index":394,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["map((data",{"_index":807,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["map((p",{"_index":1055,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["mat",{"_index":2065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matches",{"_index":753,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":758,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":95,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(totalitems",{"_index":1319,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["max",{"_index":1053,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["maxlength",{"_index":706,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(150",{"_index":711,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["maxlength(350",{"_index":712,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["maxlength(96",{"_index":755,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["means",{"_index":387,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["measurements",{"_index":2078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meets",{"_index":1425,"title":{},"body":{"guards/RolesGuard.html":{}}}],["mesh",{"_index":1967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/ValidationException.html":{}}}],["meta",{"_index":1272,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["metadata",{"_index":401,"title":{},"body":{"guards/AuthenticationGuard.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["method",{"_index":405,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/CreateOrderDto.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{}}}],["methods",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["method}${pathsegments[pathsegments.length",{"_index":958,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["method}handler",{"_index":961,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["microfiber",{"_index":2052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["microwave",{"_index":1941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migration",{"_index":1456,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["migrationinterface",{"_index":1443,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["min",{"_index":577,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateProductDto.html":{},"injectables/FindAllProductsProvider.html":{},"classes/UpdateCartItemDto.html":{}}}],["min(1",{"_index":579,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateProductDto.html":{},"classes/UpdateCartItemDto.html":{}}}],["minimum",{"_index":742,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":707,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":754,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(5",{"_index":710,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["minlength(8",{"_index":757,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1700,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["misses",{"_index":1082,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["missing",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["mit",{"_index":1795,"title":{},"body":{"index.html":{}}}],["mocked",{"_index":594,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{}}}],["mode",{"_index":1747,"title":{},"body":{"index.html":{}}}],["module",{"_index":157,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":159,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":821,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["more",{"_index":1765,"title":{},"body":{"index.html":{}}}],["most_purchased",{"_index":1079,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["muffin",{"_index":2082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mug",{"_index":2010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mugs",{"_index":2012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["myśliwiec",{"_index":1809,"title":{},"body":{"index.html":{}}}],["name",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"miscellaneous/variables.html":{}}}],["napkins",{"_index":2133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["natural",{"_index":1912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["naturally",{"_index":1987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["need",{"_index":639,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"index.html":{}}}],["needed",{"_index":1482,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["nest",{"_index":1738,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1813,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":803,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["nestjs",{"_index":1762,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokensProvider.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/PaginationProvider.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1685,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/SignInDto.html":{},"classes/UpdateProductDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":132,"title":{},"body":{"injectables/AddToCartProvider.html":{},"modules/AppModule.html":{},"modules/CartModule.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GetCartProvider.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["new",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["newest",{"_index":1072,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["newobj",{"_index":1564,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["newobj[el",{"_index":1567,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["newproduct",{"_index":726,"title":{},"body":{"injectables/CreateProductProvider.html":{}}}],["newurl",{"_index":1316,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${nextpage",{"_index":1326,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${paginationquery.page",{"_index":1325,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${prevpage",{"_index":1327,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${totalpages",{"_index":1324,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=1",{"_index":1323,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":782,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.createdat",{"_index":791,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.email",{"_index":789,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.firstname",{"_index":787,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.id",{"_index":786,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.lastname",{"_index":788,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.role",{"_index":790,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["next",{"_index":84,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllProductsProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["next.handle().pipe",{"_index":806,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["nextpage",{"_index":1320,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":1731,"title":{},"body":{"index.html":{}}}],["non",{"_index":1878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["none",{"_index":1710,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notfoundexception",{"_index":839,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["notfoundexception('item",{"_index":1535,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["notfoundexception('order",{"_index":1100,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{}}}],["notfoundexception('product",{"_index":842,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["notfoundexception(`user",{"_index":1119,"title":{},"body":{"injectables/FindUserByIdProvider.html":{}}}],["nothing",{"_index":1479,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["npm",{"_index":1742,"title":{},"body":{"index.html":{}}}],["null",{"_index":633,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{}}}],["nullable",{"_index":1338,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{}}}],["number",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Cart.html":{},"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ErrorResponse.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"classes/UpdateCartItemDto.html":{}}}],["number(limit",{"_index":1045,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["number(page",{"_index":1048,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["number(subtotal.tofixed(2",{"_index":1161,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["obj",{"_index":1559,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["obj[el",{"_index":1568,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["object",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/UsersController.html":{}}}],["object.entries(query).filter",{"_index":1090,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["object.fromentries",{"_index":1089,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["object.keys(obj).foreach((el",{"_index":1565,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["objectliteral",{"_index":1298,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["observable",{"_index":382,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["offer",{"_index":1792,"title":{},"body":{"index.html":{}}}],["official",{"_index":1774,"title":{},"body":{"index.html":{}}}],["oils",{"_index":2142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oldest",{"_index":1077,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["olive",{"_index":2141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ondelete",{"_index":509,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{}}}],["one",{"_index":746,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/PaginationProvider.html":{}}}],["onetomany",{"_index":1216,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":1198,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["open",{"_index":1797,"title":{},"body":{"index.html":{}}}],["operation",{"_index":816,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["operations",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["optional",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"injectables/CartService.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{}}}],["options",{"_index":1083,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"injectables/PaginationProvider.html":{}}}],["options.order",{"_index":1311,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["options.relations",{"_index":1308,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["options.select",{"_index":1309,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["options.where",{"_index":1310,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["order",{"_index":607,"title":{"entities/Order.html":{}},"body":{"injectables/CreateOrderProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"entities/Product.html":{},"injectables/UpdateCartItemProvider.html":{},"entities/User.html":{},"coverage.html":{}}}],["order.createdat",{"_index":1075,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["order.dto",{"_index":611,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["order.dto.ts",{"_index":582,"title":{},"body":{"classes/CreateOrderDto.html":{},"coverage.html":{}}}],["order.dto.ts:10",{"_index":587,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.dto.ts:15",{"_index":589,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.dto.ts:6",{"_index":590,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.entity",{"_index":608,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"entities/OrderItem.html":{},"modules/OrdersModule.html":{}}}],["order.items",{"_index":1223,"title":{},"body":{"entities/OrderItem.html":{}}}],["order.product",{"_index":1351,"title":{},"body":{"entities/Product.html":{}}}],["order.provider",{"_index":1253,"title":{},"body":{"modules/OrdersModule.html":{},"injectables/OrdersService.html":{}}}],["order.provider.ts",{"_index":597,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"coverage.html":{}}}],["order.provider.ts:16",{"_index":601,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["order.provider.ts:21",{"_index":603,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["order.purchasecount",{"_index":1080,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["order.user",{"_index":1578,"title":{},"body":{"entities/User.html":{}}}],["orderid",{"_index":1097,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["orderitem",{"_index":606,"title":{"entities/OrderItem.html":{}},"body":{"injectables/CreateOrderProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"modules/OrdersModule.html":{},"entities/Product.html":{},"coverage.html":{}}}],["orderitem.order",{"_index":1199,"title":{},"body":{"entities/Order.html":{}}}],["orderitems",{"_index":661,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["orderrepository",{"_index":1006,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{}}}],["orders",{"_index":1002,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"entities/Product.html":{},"injectables/UpdateCartItemProvider.html":{},"entities/User.html":{},"coverage.html":{}}}],["orders.controller",{"_index":1251,"title":{},"body":{"modules/OrdersModule.html":{}}}],["orders/order",{"_index":1359,"title":{},"body":{"entities/Product.html":{}}}],["orders/order.entity",{"_index":1358,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{}}}],["orders/orders.module",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["orderscontroller",{"_index":1229,"title":{"controllers/OrdersController.html":{}},"body":{"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"coverage.html":{}}}],["ordersmodule",{"_index":171,"title":{"modules/OrdersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OrdersModule.html":{},"modules.html":{},"overview.html":{}}}],["ordersservice",{"_index":1239,"title":{"injectables/OrdersService.html":{}},"body":{"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"overview.html":{}}}],["orderstatus",{"_index":1205,"title":{},"body":{"entities/Order.html":{},"miscellaneous/enumerations.html":{}}}],["orderstatus.pending",{"_index":1220,"title":{},"body":{"entities/Order.html":{}}}],["organic",{"_index":1966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["original",{"_index":870,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["originated",{"_index":945,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["out",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["oven",{"_index":2084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["over",{"_index":1997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["overview",{"_index":1818,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":630,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["pack",{"_index":1921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["package",{"_index":1679,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1042,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/PaginationQueryDto.html":{}}}],["pages",{"_index":1275,"title":{},"body":{"interfaces/Paginated.html":{}}}],["paginated",{"_index":1029,"title":{"interfaces/Paginated.html":{}},"body":{"injectables/FindAllProductsProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["paginatedproducts",{"_index":1085,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["paginating",{"_index":1295,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pagination",{"_index":1038,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{}}}],["paginationmodule",{"_index":1284,"title":{"modules/PaginationModule.html":{}},"body":{"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":1019,"title":{"injectables/PaginationProvider.html":{}},"body":{"injectables/FindAllProductsProvider.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquery",{"_index":1084,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"injectables/PaginationProvider.html":{}}}],["paginationquery(paginationquery",{"_index":1293,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.limit",{"_index":1306,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.page",{"_index":1305,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto",{"_index":1034,"title":{"classes/PaginationQueryDto.html":{}},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["paper",{"_index":1999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["param",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"miscellaneous/variables.html":{}}}],["param('cartid",{"_index":488,"title":{},"body":{"controllers/CartController.html":{}}}],["param('id",{"_index":1245,"title":{},"body":{"controllers/OrdersController.html":{}}}],["param('productid",{"_index":1389,"title":{},"body":{"controllers/ProductsController.html":{}}}],["parameters",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{}}}],["parchment",{"_index":2067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parsefloat(p.trim",{"_index":1056,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["part",{"_index":1784,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":1552,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["partialtype(createproductdto",{"_index":1548,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["passing",{"_index":364,"title":{},"body":{"modules/AuthModule.html":{}}}],["password",{"_index":230,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["password1",{"_index":1613,"title":{},"body":{"controllers/UsersController.html":{}}}],["pastry",{"_index":2077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":472,"title":{},"body":{"controllers/CartController.html":{},"controllers/ProductsController.html":{}}}],["patch(':cartid",{"_index":464,"title":{},"body":{"controllers/CartController.html":{}}}],["patch(':productid",{"_index":1388,"title":{},"body":{"controllers/ProductsController.html":{}}}],["path",{"_index":889,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["pathsegments",{"_index":950,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["pathsegments.length",{"_index":952,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["pathsegments[2].charat(0).touppercase()}${pathsegments[2].slice(1)}controller",{"_index":953,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["payload",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{}}}],["payment",{"_index":593,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{}}}],["paymentmethod",{"_index":584,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{}}}],["peeler",{"_index":2123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["peelers",{"_index":2125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pending",{"_index":1712,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["per",{"_index":521,"title":{},"body":{"entities/CartItem.html":{}}}],["perfect",{"_index":1877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["permission",{"_index":1439,"title":{},"body":{"guards/RolesGuard.html":{}}}],["persists",{"_index":520,"title":{},"body":{"entities/CartItem.html":{}}}],["personal",{"_index":1594,"title":{},"body":{"controllers/UsersController.html":{}}}],["pg",{"_index":1694,"title":{},"body":{"dependencies.html":{}}}],["pin",{"_index":2072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plant",{"_index":2029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plastic",{"_index":1853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["platinum",{"_index":1949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["platter",{"_index":2128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":822,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"classes/ValidationException.html":{},"index.html":{}}}],["port",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["portable",{"_index":2020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["post('')@roles(role.admin",{"_index":1366,"title":{},"body":{"controllers/ProductsController.html":{}}}],["post('/sign",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["posts",{"_index":1303,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pour",{"_index":1996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["precise",{"_index":2079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["precision",{"_index":1209,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{}}}],["preferred",{"_index":1491,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["prefix",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["prep",{"_index":2076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prepping",{"_index":2111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["previous",{"_index":1283,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["prevpage",{"_index":1321,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["price",{"_index":647,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/UpdateProductProvider.html":{},"miscellaneous/variables.html":{}}}],["primary",{"_index":1459,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["primarygeneratedcolumn",{"_index":524,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":505,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["private",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":820,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["process.env.node_env",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["produce",{"_index":1965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["product",{"_index":136,"title":{"entities/Product.html":{}},"body":{"injectables/AddToCartProvider.html":{},"interfaces/Cart.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"coverage.html":{},"overview.html":{}}}],["product.cartitems",{"_index":508,"title":{},"body":{"entities/CartItem.html":{}}}],["product.category",{"_index":1484,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["product.description",{"_index":1485,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["product.dto",{"_index":724,"title":{},"body":{"injectables/CreateProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{}}}],["product.dto.ts",{"_index":689,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:11",{"_index":1549,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:17",{"_index":700,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:23",{"_index":696,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:27",{"_index":694,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:31",{"_index":702,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:36",{"_index":704,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:40",{"_index":698,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:8",{"_index":1551,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.entity",{"_index":723,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/UpdateProductProvider.html":{}}}],["product.imageurl",{"_index":1487,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["product.name",{"_index":1483,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["product.price",{"_index":1486,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["product.provider",{"_index":1402,"title":{},"body":{"modules/ProductsModule.html":{},"injectables/ProductsService.html":{}}}],["product.provider.ts",{"_index":716,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/UpdateProductProvider.html":{},"coverage.html":{}}}],["product.provider.ts:16",{"_index":838,"title":{},"body":{"injectables/DeleteProductProvider.html":{}}}],["product.provider.ts:17",{"_index":722,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["product.provider.ts:42",{"_index":1558,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["product.provider.ts:7",{"_index":836,"title":{},"body":{"injectables/DeleteProductProvider.html":{}}}],["product.provider.ts:8",{"_index":719,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["product.stock",{"_index":145,"title":{},"body":{"injectables/AddToCartProvider.html":{},"classes/SeedProducts1759619432047.html":{}}}],["productcategory",{"_index":692,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["productid",{"_index":571,"title":{},"body":{"classes/CreateCartItemDto.html":{},"injectables/CreateOrderProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindProductByIdProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/UpdateProductProvider.html":{}}}],["production",{"_index":237,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["productquery",{"_index":1026,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"injectables/ProductsService.html":{}}}],["productrepository",{"_index":1525,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["products",{"_index":840,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/UpdateProductProvider.html":{},"miscellaneous/variables.html":{}}}],["products.controller",{"_index":1401,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products.dto",{"_index":1028,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["products.dto.ts",{"_index":1164,"title":{},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"coverage.html":{}}}],["products.dto.ts:12",{"_index":1167,"title":{},"body":{"classes/GetProductsBaseDto.html":{}}}],["products.dto.ts:19",{"_index":1166,"title":{},"body":{"classes/GetProductsBaseDto.html":{}}}],["products.dto.ts:26",{"_index":1168,"title":{},"body":{"classes/GetProductsBaseDto.html":{}}}],["products.dto.ts:31",{"_index":1170,"title":{},"body":{"classes/GetProductsBaseDto.html":{}}}],["products.provider",{"_index":1403,"title":{},"body":{"modules/ProductsModule.html":{},"injectables/ProductsService.html":{}}}],["products.provider.ts",{"_index":1016,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"coverage.html":{}}}],["products.provider.ts:11",{"_index":1020,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["products.provider.ts:25",{"_index":1025,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["products.provider.ts:97",{"_index":1023,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["products/product.entity",{"_index":448,"title":{},"body":{"interfaces/Cart.html":{},"entities/CartItem.html":{},"entities/OrderItem.html":{}}}],["products/products.module",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["productscontroller",{"_index":1363,"title":{"controllers/ProductsController.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["productsmodule",{"_index":172,"title":{"modules/ProductsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CartModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["productsquery",{"_index":1373,"title":{},"body":{"controllers/ProductsController.html":{}}}],["productsrepository",{"_index":720,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["productsservice",{"_index":113,"title":{"injectables/ProductsService.html":{}},"body":{"injectables/AddToCartProvider.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["progressive",{"_index":1730,"title":{},"body":{"index.html":{}}}],["project",{"_index":1740,"title":{},"body":{"index.html":{}}}],["promise",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/HashingProvider.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":142,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/GenerateTokensProvider.html":{}}}],["promise.resolve(instance.canactivate(context",{"_index":419,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["proof",{"_index":1939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":102,"title":{"properties.html":{}},"body":{"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"interfaces/Cart.html":{},"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ErrorResponse.html":{},"classes/GetProductsBaseDto.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"classes/SignInDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"properties.html":{}}}],["property",{"_index":389,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["protect",{"_index":2149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provide",{"_index":242,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["provided",{"_index":937,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/UsersController.html":{}}}],["provider",{"_index":141,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/HashingProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UsersService.html":{}}}],["providers",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/add",{"_index":536,"title":{},"body":{"modules/CartModule.html":{}}}],["providers/auth.service",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/bcrypt.provider",{"_index":357,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/cart.service",{"_index":474,"title":{},"body":{"controllers/CartController.html":{},"modules/CartModule.html":{}}}],["providers/create",{"_index":1252,"title":{},"body":{"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["providers/delete",{"_index":1405,"title":{},"body":{"modules/ProductsModule.html":{}}}],["providers/find",{"_index":1255,"title":{},"body":{"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["providers/generate",{"_index":360,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/get",{"_index":537,"title":{},"body":{"modules/CartModule.html":{}}}],["providers/hashing.provider",{"_index":355,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/orders.service",{"_index":1240,"title":{},"body":{"controllers/OrdersController.html":{},"modules/OrdersModule.html":{}}}],["providers/pagination.provider",{"_index":1289,"title":{},"body":{"modules/PaginationModule.html":{}}}],["providers/products.service",{"_index":1378,"title":{},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{}}}],["providers/sign",{"_index":358,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/update",{"_index":538,"title":{},"body":{"modules/CartModule.html":{},"modules/ProductsModule.html":{}}}],["providers/users.service",{"_index":1606,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["public",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/PaginationProvider.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["purchasecount",{"_index":668,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"entities/Product.html":{}}}],["quantity",{"_index":449,"title":{},"body":{"interfaces/Cart.html":{},"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"entities/OrderItem.html":{},"classes/UpdateCartItemDto.html":{}}}],["queries",{"_index":1270,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["query",{"_index":623,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllProductsProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/ProductsController.html":{}}}],["query.dto",{"_index":1036,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"injectables/PaginationProvider.html":{}}}],["query.dto.ts",{"_index":1328,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:12",{"_index":1329,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:19",{"_index":1331,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryfailederror",{"_index":854,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["queryrunner",{"_index":613,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"classes/SeedProducts1759619432047.html":{}}}],["queryrunner.committransaction",{"_index":674,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.connect",{"_index":615,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager",{"_index":626,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.create(order",{"_index":658,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.getrepository(order).save(order",{"_index":659,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.getrepository(orderitem).create",{"_index":663,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.getrepository(orderitem).save(orderitems",{"_index":665,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.getrepository(product).update",{"_index":667,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.getrepository(user).findone",{"_index":621,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.softdelete(cartitem",{"_index":670,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.query",{"_index":1457,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["queryrunner.query(`drop",{"_index":1495,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["queryrunner.release",{"_index":684,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.rollbacktransaction",{"_index":678,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.starttransaction",{"_index":616,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["questions",{"_index":1766,"title":{},"body":{"index.html":{}}}],["quick",{"_index":2119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rack",{"_index":2089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["raw",{"_index":998,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["re",{"_index":869,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"classes/SeedProducts1759619432047.html":{}}}],["read",{"_index":1804,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["real",{"_index":1781,"title":{},"body":{"index.html":{}}}],["record",{"_index":396,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/UpdateProductProvider.html":{}}}],["recycled",{"_index":2013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reduces",{"_index":1998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":1696,"title":{},"body":{"dependencies.html":{}}}],["reflection",{"_index":948,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["reflector",{"_index":377,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["refreshtoken",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["refused",{"_index":879,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["register",{"_index":1593,"title":{},"body":{"controllers/UsersController.html":{}}}],["registering",{"_index":363,"title":{},"body":{"modules/AuthModule.html":{}}}],["registration",{"_index":1597,"title":{},"body":{"controllers/UsersController.html":{}}}],["rejectunauthorized",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["related",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["relations",{"_index":1011,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["release",{"_index":685,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["removal",{"_index":2049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remove",{"_index":988,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["removecartitem",{"_index":546,"title":{},"body":{"injectables/CartService.html":{}}}],["removecartitem(userid",{"_index":556,"title":{},"body":{"injectables/CartService.html":{}}}],["removefromcart",{"_index":455,"title":{},"body":{"controllers/CartController.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["removefromcart(userid",{"_index":468,"title":{},"body":{"controllers/CartController.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["renewal",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{}}}],["replace",{"_index":1065,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["replaces",{"_index":2066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["repository",{"_index":116,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"index.html":{}}}],["repository.count",{"_index":1318,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository.find",{"_index":1302,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["request",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"classes/ValidationException.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":93,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request.method",{"_index":943,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["request.method.tolowercase",{"_index":956,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["request.route?.path",{"_index":949,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["request.url",{"_index":942,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["request.url.split('/').filter(boolean",{"_index":957,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["request[request_user_key",{"_index":81,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requested",{"_index":934,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["requests",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{},"classes/PaginationQueryDto.html":{}}}],["requesttimeoutexception",{"_index":605,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["requesttimeoutexception('could",{"_index":618,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["required",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["requiredroles",{"_index":1433,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":1438,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requirements",{"_index":1426,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reset",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resistant",{"_index":1864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resource",{"_index":935,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"guards/RolesGuard.html":{}}}],["resources",{"_index":1758,"title":{},"body":{"index.html":{}}}],["response",{"_index":794,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"interfaces/Paginated.html":{},"controllers/UsersController.html":{}}}],["response.interceptor",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["response.interceptor.ts",{"_index":793,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:14",{"_index":798,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response.interceptor.ts:32",{"_index":801,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response.status(errorresponse.statuscode).json(errorresponse",{"_index":916,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["response/data",{"_index":196,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["restart",{"_index":1492,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["results",{"_index":94,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":92,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1273,"title":{},"body":{"interfaces/Paginated.html":{}}}],["returns",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reusable",{"_index":1859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["role",{"_index":104,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.admin",{"_index":1432,"title":{},"body":{"guards/RolesGuard.html":{}}}],["role.user",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{}}}],["roles",{"_index":1380,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":1384,"title":{},"body":{"controllers/ProductsController.html":{}}}],["roles(role.admin)@delete(':productid",{"_index":1368,"title":{},"body":{"controllers/ProductsController.html":{}}}],["roles(role.admin)@patch(':productid",{"_index":1376,"title":{},"body":{"controllers/ProductsController.html":{}}}],["roles_key",{"_index":1429,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":200,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rollback",{"_index":1488,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["rolling",{"_index":2071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rolls",{"_index":2105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["route",{"_index":947,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["route.split('/').filter(boolean",{"_index":951,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["run",{"_index":1471,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"index.html":{}}}],["rust",{"_index":1958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":383,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":860,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["safe",{"_index":1900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["safelimit",{"_index":1044,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["safepage",{"_index":1047,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["salad",{"_index":2108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["salads",{"_index":2113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["salt",{"_index":439,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["same",{"_index":432,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["sanitizedatabaseerror",{"_index":1178,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["sanitizedatabaseerror(error",{"_index":987,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["sanitizing",{"_index":986,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["sauces",{"_index":1889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scalable",{"_index":1735,"title":{},"body":{"index.html":{}}}],["scale",{"_index":1210,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{}}}],["schema",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["scissors",{"_index":2118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scrub",{"_index":2037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scrubby",{"_index":2032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seals",{"_index":1960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["searchterm",{"_index":1062,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["second",{"_index":863,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["secret",{"_index":1146,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["securely",{"_index":1595,"title":{},"body":{"controllers/UsersController.html":{}}}],["seed",{"_index":1451,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["seedproducts",{"_index":1450,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["seedproducts.ts",{"_index":1442,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"coverage.html":{}}}],["seedproducts.ts:39",{"_index":1447,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["seedproducts.ts:5",{"_index":1449,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["seedproducts1759619432047",{"_index":1440,"title":{"classes/SeedProducts1759619432047.html":{}},"body":{"classes/SeedProducts1759619432047.html":{},"coverage.html":{}}}],["select",{"_index":1114,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/PaginationProvider.html":{},"entities/User.html":{}}}],["sensitive",{"_index":989,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["serial",{"_index":1458,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["server",{"_index":921,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"index.html":{}}}],["serveware",{"_index":1725,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["service",{"_index":137,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/OrdersController.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["serving",{"_index":2112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["servware",{"_index":1724,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["set",{"_index":1847,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setlock('pessimistic_write",{"_index":634,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["setmetadata(auth_type_key",{"_index":1839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":1842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1741,"title":{},"body":{"index.html":{}}}],["shell",{"_index":1908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shipped",{"_index":1714,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["shippingaddress",{"_index":585,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{}}}],["side",{"_index":1736,"title":{},"body":{"index.html":{}}}],["sigining",{"_index":1506,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["sign",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"classes/SignInDto.html":{}}}],["signed",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{}}}],["signin",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signin(@body",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signindto",{"_index":268,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["signindto.password",{"_index":1514,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["signindto})@apiresponse({status",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{}}}],["signing",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signinprovider",{"_index":349,"title":{"injectables/SignInProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["signs",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{}}}],["signtoken",{"_index":1124,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signtoken(userid",{"_index":1128,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["silicone",{"_index":1860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skip",{"_index":1304,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["sleeve",{"_index":2006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["slip",{"_index":2102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["smooth",{"_index":2073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["soft",{"_index":528,"title":{},"body":{"entities/CartItem.html":{}}}],["sort",{"_index":1043,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"index.html":{}}}],["sources",{"_index":2138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["spaces",{"_index":1067,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["spatulas",{"_index":1861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["special",{"_index":748,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":404,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["spills",{"_index":2056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["split",{"_index":1054,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["sponge",{"_index":2028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sponges",{"_index":2031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sponsors",{"_index":1800,"title":{},"body":{"index.html":{}}}],["spoon",{"_index":1851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["spoons",{"_index":1872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sql",{"_index":999,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["src/.../active",{"_index":1826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.module.ts",{"_index":1829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth",{"_index":1702,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constant.ts",{"_index":1828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1827,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1728,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../order",{"_index":1704,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../product",{"_index":1706,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role",{"_index":1708,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role.constant.ts",{"_index":1831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.decorator.ts",{"_index":1830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../seed",{"_index":1832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":149,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":152,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":244,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":245,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:97",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1627,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":350,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/config/jwt.config",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["src/auth/constants/auth.constant",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["src/auth/constants/auth.constant.ts",{"_index":1649,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/constants/role.constant",{"_index":1430,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/constants/role.constant.ts",{"_index":1650,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorator/active",{"_index":476,"title":{},"body":{"controllers/CartController.html":{},"controllers/OrdersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorator/auth.decorator",{"_index":1379,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["src/auth/decorator/auth.decorator.ts",{"_index":1652,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorator/role.decorator",{"_index":1381,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/auth/decorator/role.decorator.ts",{"_index":1653,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/sign",{"_index":1496,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/enums/auth",{"_index":384,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["src/auth/enums/role",{"_index":774,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts",{"_index":372,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:33",{"_index":378,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:59",{"_index":379,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/roles/roles.guard.ts",{"_index":1421,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles/roles.guard.ts:16",{"_index":1422,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles/roles.guard.ts:31",{"_index":1423,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/interfaces/active",{"_index":99,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:19",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:6",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":421,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:15",{"_index":434,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:27",{"_index":428,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/generate",{"_index":1120,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider",{"_index":769,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":1188,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:12",{"_index":1191,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:19",{"_index":1190,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/sign",{"_index":1504,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["src/cart/cart",{"_index":495,"title":{},"body":{"entities/CartItem.html":{},"injectables/CreateOrderProvider.html":{},"coverage.html":{}}}],["src/cart/cart.controller.ts",{"_index":451,"title":{},"body":{"controllers/CartController.html":{},"coverage.html":{}}}],["src/cart/cart.controller.ts:25",{"_index":460,"title":{},"body":{"controllers/CartController.html":{}}}],["src/cart/cart.controller.ts:31",{"_index":457,"title":{},"body":{"controllers/CartController.html":{}}}],["src/cart/cart.controller.ts:36",{"_index":467,"title":{},"body":{"controllers/CartController.html":{}}}],["src/cart/cart.controller.ts:41",{"_index":470,"title":{},"body":{"controllers/CartController.html":{}}}],["src/cart/cart.controller.ts:49",{"_index":465,"title":{},"body":{"controllers/CartController.html":{}}}],["src/cart/cart.module",{"_index":1254,"title":{},"body":{"modules/OrdersModule.html":{}}}],["src/cart/cart.module.ts",{"_index":534,"title":{},"body":{"modules/CartModule.html":{}}}],["src/cart/dtos/create",{"_index":569,"title":{},"body":{"classes/CreateCartItemDto.html":{},"coverage.html":{}}}],["src/cart/dtos/update",{"_index":1520,"title":{},"body":{"classes/UpdateCartItemDto.html":{},"coverage.html":{}}}],["src/cart/entities/cart",{"_index":519,"title":{},"body":{"entities/CartItem.html":{}}}],["src/cart/interfaces/cart.interface.ts",{"_index":443,"title":{},"body":{"interfaces/Cart.html":{},"coverage.html":{}}}],["src/cart/providers/add",{"_index":109,"title":{},"body":{"injectables/AddToCartProvider.html":{},"coverage.html":{}}}],["src/cart/providers/cart.service",{"_index":610,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["src/cart/providers/cart.service.ts",{"_index":543,"title":{},"body":{"injectables/CartService.html":{},"coverage.html":{}}}],["src/cart/providers/cart.service.ts:27",{"_index":550,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/cart.service.ts:31",{"_index":555,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/cart.service.ts:35",{"_index":557,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/cart.service.ts:39",{"_index":553,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/cart.service.ts:51",{"_index":559,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/cart.service.ts:55",{"_index":552,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/cart.service.ts:9",{"_index":549,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/get",{"_index":1148,"title":{},"body":{"injectables/GetCartProvider.html":{},"coverage.html":{}}}],["src/cart/providers/update",{"_index":1522,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{},"coverage.html":{}}}],["src/common/filters/common",{"_index":772,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"classes/ValidationException.html":{},"coverage.html":{}}}],["src/common/filters/global",{"_index":885,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["src/common/interceptors/data",{"_index":792,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/error",{"_index":848,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"coverage.html":{}}}],["src/common/pagination/dtos/pagination",{"_index":1035,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/pagination/interfaces/paginated.interface",{"_index":1030,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["src/common/pagination/interfaces/paginated.interface.ts",{"_index":1269,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.module",{"_index":1404,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/common/pagination/pagination.module.ts",{"_index":1288,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/providers/pagination.provider",{"_index":1037,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts",{"_index":1290,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:14",{"_index":1292,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:34",{"_index":1294,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/main.ts",{"_index":1667,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/migrations/1759619432047",{"_index":1441,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"coverage.html":{}}}],["src/orders/dtos/create",{"_index":581,"title":{},"body":{"classes/CreateOrderDto.html":{},"coverage.html":{}}}],["src/orders/enums/order",{"_index":1711,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/orders/order",{"_index":1221,"title":{},"body":{"entities/OrderItem.html":{},"coverage.html":{}}}],["src/orders/order.entity.ts",{"_index":1192,"title":{},"body":{"entities/Order.html":{},"coverage.html":{}}}],["src/orders/order.entity.ts:17",{"_index":1197,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:20",{"_index":1212,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:23",{"_index":1207,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:28",{"_index":1204,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:33",{"_index":1195,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:40",{"_index":1203,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:43",{"_index":1196,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:46",{"_index":1213,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:49",{"_index":1215,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:52",{"_index":1200,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/orders.controller.ts",{"_index":1230,"title":{},"body":{"controllers/OrdersController.html":{},"coverage.html":{}}}],["src/orders/orders.controller.ts:16",{"_index":1233,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.controller.ts:24",{"_index":1238,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.controller.ts:29",{"_index":1236,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.module.ts",{"_index":1250,"title":{},"body":{"modules/OrdersModule.html":{}}}],["src/orders/providers/create",{"_index":596,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"coverage.html":{}}}],["src/orders/providers/find",{"_index":1001,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"coverage.html":{}}}],["src/orders/providers/orders.service.ts",{"_index":1259,"title":{},"body":{"injectables/OrdersService.html":{},"coverage.html":{}}}],["src/orders/providers/orders.service.ts:20",{"_index":1262,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/providers/orders.service.ts:24",{"_index":1263,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/providers/orders.service.ts:28",{"_index":1264,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/providers/orders.service.ts:8",{"_index":1261,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/products/dtos/create",{"_index":688,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/products/dtos/get",{"_index":1163,"title":{},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"coverage.html":{}}}],["src/products/dtos/update",{"_index":1547,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/products/enums/product",{"_index":1717,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/products/product.entity",{"_index":540,"title":{},"body":{"modules/CartModule.html":{},"injectables/CreateOrderProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["src/products/product.entity.ts",{"_index":1333,"title":{},"body":{"entities/Product.html":{},"coverage.html":{}}}],["src/products/product.entity.ts:20",{"_index":1345,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:23",{"_index":1350,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:26",{"_index":1339,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:29",{"_index":1344,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:32",{"_index":1353,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:35",{"_index":1355,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:38",{"_index":1347,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:42",{"_index":1341,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:45",{"_index":1356,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:51",{"_index":1348,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:57",{"_index":1342,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:62",{"_index":1354,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:65",{"_index":1335,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:68",{"_index":1352,"title":{},"body":{"entities/Product.html":{}}}],["src/products/products.controller.ts",{"_index":1364,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{}}}],["src/products/products.controller.ts:33",{"_index":1367,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:39",{"_index":1372,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:47",{"_index":1377,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:57",{"_index":1369,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.module",{"_index":541,"title":{},"body":{"modules/CartModule.html":{}}}],["src/products/products.module.ts",{"_index":1400,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/products/providers/create",{"_index":715,"title":{},"body":{"injectables/CreateProductProvider.html":{},"coverage.html":{}}}],["src/products/providers/delete",{"_index":834,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"coverage.html":{}}}],["src/products/providers/find",{"_index":1015,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"coverage.html":{}}}],["src/products/providers/products.service",{"_index":123,"title":{},"body":{"injectables/AddToCartProvider.html":{}}}],["src/products/providers/products.service.ts",{"_index":1407,"title":{},"body":{"injectables/ProductsService.html":{},"coverage.html":{}}}],["src/products/providers/products.service.ts:14",{"_index":1409,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:42",{"_index":1410,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:46",{"_index":1412,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:52",{"_index":1415,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:62",{"_index":1411,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:66",{"_index":1413,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/update",{"_index":1554,"title":{},"body":{"injectables/UpdateProductProvider.html":{},"coverage.html":{}}}],["src/seed",{"_index":1672,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/dtos/create",{"_index":730,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/providers/create",{"_index":760,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["src/users/providers/find",{"_index":1107,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":134,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/SignInProvider.html":{}}}],["src/users/providers/users.service.ts",{"_index":1630,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:32",{"_index":1633,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:38",{"_index":1635,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:42",{"_index":1636,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:9",{"_index":1632,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":609,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["src/users/user.entity.ts",{"_index":1569,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:18",{"_index":1576,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:25",{"_index":1575,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:32",{"_index":1577,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:40",{"_index":1574,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:47",{"_index":1582,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:56",{"_index":1581,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:60",{"_index":1572,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:63",{"_index":1583,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:66",{"_index":1571,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:69",{"_index":1579,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1588,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:82",{"_index":1603,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":354,"title":{},"body":{"modules/AuthModule.html":{},"modules/CartModule.html":{}}}],["src/users/users.module.ts",{"_index":1625,"title":{},"body":{"modules/UsersModule.html":{}}}],["ssl",{"_index":236,"title":{},"body":{"modules/AppModule.html":{}}}],["stable",{"_index":2103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stack",{"_index":914,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["stainless",{"_index":1955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start",{"_index":1745,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1748,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1749,"title":{},"body":{"index.html":{}}}],["started",{"_index":1729,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1739,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1644,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":374,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["status",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"controllers/UsersController.html":{}}}],["status.enum",{"_index":1218,"title":{},"body":{"entities/Order.html":{}}}],["status.enum.ts",{"_index":1705,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statuscode",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["statuscodes",{"_index":964,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["statuscodes[status",{"_index":984,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["stay",{"_index":1786,"title":{},"body":{"index.html":{}}}],["steel",{"_index":1956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stick",{"_index":1879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stiff",{"_index":2044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stock",{"_index":645,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"miscellaneous/variables.html":{}}}],["storage",{"_index":1719,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["straws",{"_index":1985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/SignInDto.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"miscellaneous/variables.html":{}}}],["string(error",{"_index":682,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["stylish",{"_index":2157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sub",{"_index":105,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{}}}],["subtotal",{"_index":445,"title":{},"body":{"interfaces/Cart.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{}}}],["successful",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["successfully",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DeleteProductProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"controllers/UsersController.html":{}}}],["such",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["sum",{"_index":655,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["summary",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":818,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["support",{"_index":1767,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sustainable",{"_index":1848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["svg",{"_index":1816,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":1073,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["sync",{"_index":1454,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["synchronize",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["synthetic",{"_index":1890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t",{"_index":1130,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["table",{"_index":994,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/SeedProducts1759619432047.html":{},"coverage.html":{}}}],["tables",{"_index":2150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1678,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1307,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["test",{"_index":1752,"title":{},"body":{"index.html":{}}}],["test:covresources",{"_index":1755,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1754,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1750,"title":{},"body":{"index.html":{}}}],["text",{"_index":1343,"title":{},"body":{"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{}}}],["thanks",{"_index":1799,"title":{},"body":{"index.html":{}}}],["this.accesstokenguard",{"_index":397,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.addtocartprovider.addtocart(userid",{"_index":562,"title":{},"body":{"injectables/CartService.html":{}}}],["this.appservice.gethello",{"_index":156,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.signin(signindto",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type]).flat",{"_index":413,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.builderrorresponse",{"_index":908,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["this.calculatesubtotal(items",{"_index":1158,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["this.cartitemrepository.find",{"_index":1155,"title":{},"body":{"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["this.cartitemrepository.findone",{"_index":1534,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["this.cartitemrepository.softdelete",{"_index":1537,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["this.cartservice.addtocart(userid",{"_index":484,"title":{},"body":{"controllers/CartController.html":{}}}],["this.cartservice.clearcart(userid",{"_index":482,"title":{},"body":{"controllers/CartController.html":{},"injectables/CreateOrderProvider.html":{}}}],["this.cartservice.decrementquantity",{"_index":492,"title":{},"body":{"controllers/CartController.html":{}}}],["this.cartservice.getcart(userid",{"_index":486,"title":{},"body":{"controllers/CartController.html":{}}}],["this.cartservice.removecartitem(userid",{"_index":489,"title":{},"body":{"controllers/CartController.html":{}}}],["this.cartservice.validatecartstock(userid",{"_index":620,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["this.cleanquery(productquery",{"_index":1040,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["this.configservice.get('appconfig.apiversion",{"_index":808,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["this.createorderprovider.createorder(userid",{"_index":1266,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.createproductprovider.createproduct(createproductdto",{"_index":1416,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.createuserprovider.createuser(createuserdto",{"_index":1637,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.datasource.createqueryrunner",{"_index":614,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["this.deleteproductprovider.deleteproduct(productid",{"_index":1419,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.extractrequestfromheader(request",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.filterobj",{"_index":1562,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["this.findallordersforuserprovider.findallorders(userid",{"_index":1267,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.findallproductsprovider.findallproducts(productquery",{"_index":1417,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.findorderbyidprovider.findorderbyid(userid",{"_index":1268,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.findproductbyidprovider.findproductbyid(productid",{"_index":1420,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.finduserbyemailprovider.finduserbyemail(email",{"_index":1638,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.finduserbyidprovider.finduserbyid(userid",{"_index":1639,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.generatetokenprovider.generatetokens(user",{"_index":1517,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.getcartprovider.getcart(userid",{"_index":563,"title":{},"body":{"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["this.getcontrollername(request",{"_index":905,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["this.gethandlername(request",{"_index":907,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["this.gethttperrorcode(status",{"_index":928,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["this.hashingprovider.comparepassword",{"_index":1513,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.hashingprovider.hashpassword(createuserdto.password",{"_index":784,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.isconnectionerror(error",{"_index":867,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["this.jwtconfiguration",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":1136,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.audience",{"_index":1143,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.issuer",{"_index":1145,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.refreshtokenttl",{"_index":1140,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":1147,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.signasync",{"_index":1141,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.verify",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.logger.error",{"_index":911,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["this.orderrepository.find",{"_index":1010,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{}}}],["this.orderrepository.findone",{"_index":1099,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{}}}],["this.ordersservice.createorder(userid",{"_index":1242,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.ordersservice.findallorders(userid",{"_index":1244,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.ordersservice.findorderbyid(userid",{"_index":1246,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.paginationprovider.paginationquery",{"_index":1086,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["this.productrepository.save(item.product",{"_index":1542,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["this.productsrepository",{"_index":1087,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["this.productsrepository.create",{"_index":727,"title":{},"body":{"injectables/CreateProductProvider.html":{}}}],["this.productsrepository.findone",{"_index":1105,"title":{},"body":{"injectables/FindProductByIdProvider.html":{}}}],["this.productsrepository.findoneby",{"_index":841,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["this.productsrepository.save",{"_index":844,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["this.productsrepository.save(newproduct",{"_index":728,"title":{},"body":{"injectables/CreateProductProvider.html":{}}}],["this.productsservice.createproduct(createproductdto",{"_index":1386,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.deleteproduct(productid",{"_index":1394,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.findallproducts(productsquery",{"_index":1387,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.findproductbyid(createcartitemdto.productid",{"_index":144,"title":{},"body":{"injectables/AddToCartProvider.html":{}}}],["this.productsservice.updateproduct(updateproductdto",{"_index":1390,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.reflector.getallandoverride(auth_type_key",{"_index":407,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":1434,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.request.headers.host",{"_index":1315,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol",{"_index":1314,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.sanitizedatabaseerror(exception",{"_index":932,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["this.signinprovider.signin(signindto",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signtoken",{"_index":1134,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.signtoken(user.id",{"_index":1139,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.updatecartitemprovider.clearcart(userid",{"_index":567,"title":{},"body":{"injectables/CartService.html":{}}}],["this.updatecartitemprovider.decrementquantity",{"_index":565,"title":{},"body":{"injectables/CartService.html":{}}}],["this.updatecartitemprovider.removefromcart(userid",{"_index":564,"title":{},"body":{"injectables/CartService.html":{}}}],["this.updatecartitemprovider.validatecartstock(userid",{"_index":566,"title":{},"body":{"injectables/CartService.html":{}}}],["this.updateproductprovider.updateproduct",{"_index":1418,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.usersrepository.create",{"_index":783,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersrepository.findone",{"_index":778,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{}}}],["this.usersrepository.save(newuser",{"_index":785,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":1621,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.finduserbyemail(signindto.email",{"_index":1511,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.usersservice.finduserbyid(userid",{"_index":143,"title":{},"body":{"injectables/AddToCartProvider.html":{}}}],["through",{"_index":416,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["throw",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["throwerror",{"_index":856,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["thrown",{"_index":2011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["time",{"_index":1619,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["timeout",{"_index":859,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["timeout(30000",{"_index":861,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["timeouterror",{"_index":857,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["timestamp",{"_index":890,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Product.html":{}}}],["token",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["token.guard",{"_index":203,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:18",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:42",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:72",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["tokens",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["tokens.'})@apiconsumes('application/json')@apibody({description",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens.provider",{"_index":361,"title":{},"body":{"modules/AuthModule.html":{},"injectables/SignInProvider.html":{}}}],["tokens.provider.ts",{"_index":1121,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"coverage.html":{}}}],["tokens.provider.ts:12",{"_index":1125,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:36",{"_index":1127,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:64",{"_index":1131,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tone",{"_index":1995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tongs",{"_index":1896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["total",{"_index":446,"title":{},"body":{"interfaces/Cart.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Order.html":{}}}],["totalitems",{"_index":1277,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpages",{"_index":1279,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["touch",{"_index":1806,"title":{},"body":{"index.html":{}}}],["tough",{"_index":2047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transaction",{"_index":681,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["transactions",{"_index":612,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["transform",{"_index":637,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["transformer",{"_index":1585,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["trap",{"_index":2054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trivet",{"_index":2147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trivets",{"_index":2148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"injectables/DeleteProductProvider.html":{},"entities/Product.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["truncate",{"_index":1489,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["try",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateOrderProvider.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/ValidationException.html":{}}}],["tumbler",{"_index":1974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["twitter",{"_index":1812,"title":{},"body":{"index.html":{}}}],["type",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["type.enum.ts",{"_index":1703,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeorm",{"_index":128,"title":{},"body":{"injectables/AddToCartProvider.html":{},"entities/CartItem.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"injectables/PaginationProvider.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":188,"title":{},"body":{"modules/AppModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([cartitem",{"_index":542,"title":{},"body":{"modules/CartModule.html":{}}}],["typeormmodule.forfeature([order",{"_index":1258,"title":{},"body":{"modules/OrdersModule.html":{}}}],["typeormmodule.forfeature([product",{"_index":1406,"title":{},"body":{"modules/ProductsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1629,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":395,"title":{},"body":{"guards/AuthenticationGuard.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["typescript",{"_index":86,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{},"index.html":{}}}],["unable",{"_index":819,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["unauthorizedexception",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"guards/AuthenticationGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["unauthorizedexception('incorrect",{"_index":1516,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["unbleached",{"_index":2134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllProductsProvider.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"miscellaneous/variables.html":{}}}],["undefined})@apibadrequestresponse({description",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@apiresponse({status",{"_index":1599,"title":{},"body":{"controllers/UsersController.html":{}}}],["unique",{"_index":1349,"title":{},"body":{"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"entities/User.html":{}}}],["unit",{"_index":1751,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CartService.html":{},"interfaces/ErrorResponse.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["unknowncontroller",{"_index":954,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["unlicensed",{"_index":1824,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":88,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["up",{"_index":1445,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["up(queryrunner",{"_index":1448,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["update",{"_index":561,"title":{},"body":{"injectables/CartService.html":{},"injectables/ProductsService.html":{}}}],["updatecartitemdto",{"_index":463,"title":{"classes/UpdateCartItemDto.html":{}},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"coverage.html":{}}}],["updatecartitemdto.quantity",{"_index":491,"title":{},"body":{"controllers/CartController.html":{}}}],["updatecartitemprovider",{"_index":533,"title":{"injectables/UpdateCartItemProvider.html":{}},"body":{"modules/CartModule.html":{},"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{},"coverage.html":{},"overview.html":{}}}],["updatedat",{"_index":499,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["updatedatecolumn",{"_index":515,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["updateproduct",{"_index":1365,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/UpdateProductProvider.html":{}}}],["updateproduct(productid",{"_index":1374,"title":{},"body":{"controllers/ProductsController.html":{}}}],["updateproduct(updateproductdto",{"_index":1414,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/UpdateProductProvider.html":{}}}],["updateproductdto",{"_index":1375,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"coverage.html":{}}}],["updateproductprovider",{"_index":1399,"title":{"injectables/UpdateProductProvider.html":{}},"body":{"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/UpdateProductProvider.html":{},"coverage.html":{},"overview.html":{}}}],["updates",{"_index":1787,"title":{},"body":{"index.html":{}}}],["upon",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["url",{"_index":1590,"title":{},"body":{"controllers/UsersController.html":{}}}],["url(this.request.url",{"_index":1317,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["urls",{"_index":1312,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["use",{"_index":388,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateOrderProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllProductsProvider.html":{},"classes/GlobalExceptionFilter.html":{},"guards/RolesGuard.html":{}}}],["useclass",{"_index":243,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["usefactory",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":35,"title":{"entities/User.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/CartItem.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Order.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user.cartitems",{"_index":517,"title":{},"body":{"entities/CartItem.html":{}}}],["user.decorator",{"_index":477,"title":{},"body":{"controllers/CartController.html":{},"controllers/OrdersController.html":{}}}],["user.decorator.ts",{"_index":1651,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":770,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":731,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:23",{"_index":736,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":738,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:48",{"_index":734,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:65",{"_index":750,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":1137,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["user.entity",{"_index":768,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.firstname",{"_index":1518,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.id",{"_index":1135,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["user.lastname",{"_index":1519,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.orders",{"_index":1214,"title":{},"body":{"entities/Order.html":{}}}],["user.password",{"_index":1515,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.provider",{"_index":1256,"title":{},"body":{"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.provider.ts",{"_index":761,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:11",{"_index":764,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:12",{"_index":1008,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{}}}],["user.provider.ts:26",{"_index":767,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:7",{"_index":1005,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{}}}],["user.role",{"_index":1138,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{}}}],["user?.[field",{"_index":1836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":122,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":138,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":1626,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/user.entity",{"_index":523,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{}}}],["users/users.module",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":1587,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":173,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":765,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{}}}],["usersservice",{"_index":114,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AddToCartProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":386,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/GenerateTokensProvider.html":{},"guards/RolesGuard.html":{},"index.html":{}}}],["utensils",{"_index":1718,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["uuid",{"_index":1615,"title":{},"body":{"controllers/UsersController.html":{}}}],["valid",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["validate",{"_index":1539,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["validatecartstock",{"_index":547,"title":{},"body":{"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["validatecartstock(userid",{"_index":558,"title":{},"body":{"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["validating",{"_index":1424,"title":{},"body":{"guards/RolesGuard.html":{}}}],["validation",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{},"classes/DatabaseConnectionException.html":{},"injectables/FindAllProductsProvider.html":{},"classes/ValidationException.html":{}}}],["validationexception",{"_index":771,"title":{"classes/ValidationException.html":{}},"body":{"injectables/CreateUserProvider.html":{},"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{},"coverage.html":{}}}],["validationschema",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":578,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SignInDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateProductDto.html":{},"dependencies.html":{}}}],["validuser",{"_index":1609,"title":{},"body":{"controllers/UsersController.html":{}}}],["value",{"_index":1091,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GlobalExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1473,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["varchar",{"_index":1194,"title":{},"body":{"entities/Order.html":{},"entities/User.html":{}}}],["varchar(100",{"_index":1461,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["varchar(255",{"_index":1465,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["varchar(50",{"_index":1462,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["variable",{"_index":1646,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1825,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":1274,"title":{},"body":{"interfaces/Paginated.html":{}}}],["vars",{"_index":89,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["veggies",{"_index":2126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{}}}],["version",{"_index":1822,"title":{},"body":{"properties.html":{}}}],["via",{"_index":1453,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["video",{"_index":1775,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1763,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1777,"title":{},"body":{"index.html":{}}}],["void",{"_index":1183,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["washable",{"_index":1969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["waste",{"_index":1854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":1746,"title":{},"body":{"index.html":{}}}],["water",{"_index":2003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["website",{"_index":1810,"title":{},"body":{"index.html":{}}}],["where('ci.user.id",{"_index":631,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["where.category",{"_index":1050,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["where.name",{"_index":1068,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["where.price",{"_index":1059,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["whether",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"guards/RolesGuard.html":{}}}],["whipping",{"_index":1887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whisk",{"_index":1885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["without",{"_index":390,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["wood",{"_index":1876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wooden",{"_index":1871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["working",{"_index":1761,"title":{},"body":{"index.html":{}}}],["world",{"_index":247,"title":{},"body":{"injectables/AppService.html":{}}}],["wraps",{"_index":1920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x",{"_index":671,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"index.html":{}}}],["yes",{"_index":817,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/PaginationProvider.html":{}}}],["you'd",{"_index":1803,"title":{},"body":{"index.html":{}}}],["z])(?=.*\\d)(?=.*[\\w_]).{8",{"_index":741,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":740,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zero",{"_index":1852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zip",{"_index":1947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token/access-token.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    guard for access token\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token/access-token.guard.ts:18\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:42\n                        \n                    \n\n\n            \n                \n                        function for checking if user has access token\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                true or false depending on whether user is signed in or not\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:72\n                        \n                    \n\n\n            \n                \n                        function for extracting the access token from the request headers\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                access token\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { REQUEST_USER_KEY } from 'src/auth/constants/auth.constant';\n\n/**\n * guard for access token\n */\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  /**\n   * constructor\n   * @param jwtService\n   * @param jwtConfiguration\n   */\n  constructor(\n    /**\n     * Inject jwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * inject jwt config\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  /**\n   * function for checking if user has access token\n   * @param context\n   * @returns true or false depending on whether user is signed in or not\n   */\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n\n    const token = this.extractRequestFromHeader(request);\n\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n\n    try {\n      const payload = await this.jwtService.verify(\n        token,\n        this.jwtConfiguration,\n      );\n\n      request[REQUEST_USER_KEY] = payload;\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    } catch (_) {\n      throw new UnauthorizedException();\n    }\n\n    return true;\n  }\n\n  /**\n   * function for extracting the access token from the request headers\n   * @param request\n   * @returns access token\n   */\n  private extractRequestFromHeader(request: Request): string | undefined {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, token] = request.headers.authorization?.split(' ') ?? [];\n    return token;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActiveUserData.html":{"url":"interfaces/ActiveUserData.html","title":"interface - ActiveUserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActiveUserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/active-user-data.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                interface for a user that has logged in (payload)\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    user email\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    user role\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    id for user\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ActiveUserData {\n  /**\n   * id for user\n   */\n  sub: string;\n\n  /**\n   * user email\n   */\n  email: string;\n\n  /**\n   * user role\n   */\n  role: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AddToCartProvider.html":{"url":"injectables/AddToCartProvider.html","title":"injectable - AddToCartProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AddToCartProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/providers/add-to-cart.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addToCart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsService: ProductsService, usersService: UsersService, cartItemRepository: Repository, getCartProvider: GetCartProvider)\n                    \n                \n                        \n                            \n                                Defined in src/cart/providers/add-to-cart.provider.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsService\n                                                  \n                                                        \n                                                                        ProductsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cartItemRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        getCartProvider\n                                                  \n                                                        \n                                                                        GetCartProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addToCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    addToCart(userId: string, createCartItemDto: CreateCartItemDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/add-to-cart.provider.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createCartItemDto\n                                            \n                                                            CreateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ProductsService } from 'src/products/providers/products.service';\nimport { CreateCartItemDto } from '../dtos/create-cart-item.dto';\nimport { Cart } from '../interfaces/cart.interface';\nimport { Repository } from 'typeorm';\nimport { CartItem } from '../cart-item.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { GetCartProvider } from './get-cart.provider';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AddToCartProvider {\n  constructor(\n    /**\n     * injecting the product service\n     */\n    private readonly productsService: ProductsService,\n\n    /**\n     * injecting the users service\n     */\n    private readonly usersService: UsersService,\n\n    /**\n     * injecting the cart item repository\n     */\n    @InjectRepository(CartItem)\n    private readonly cartItemRepository: Repository,\n\n    /**\n     * injecting the get cart provider\n     */\n    private readonly getCartProvider: GetCartProvider,\n  ) {}\n\n  async addToCart(\n    userId: string,\n    createCartItemDto: CreateCartItemDto,\n  ): Promise {\n    const [user, product] = await Promise.all([\n      this.usersService.findUserById(userId),\n      this.productsService.findProductById(createCartItemDto.productId),\n    ]);\n\n    if (product.stock \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCartModule\n\nCartModule\n\nAppModule -->\n\nCartModule->AppModule\n\n\n\n\n\nOrdersModule\n\nOrdersModule\n\nAppModule -->\n\nOrdersModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CartModule\n                        \n                        \n                            OrdersModule\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport enviromentValidation from './config/enviroment.validation';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { DataResponseInterceptor } from './common/interceptors/data-response/data-response.interceptor';\nimport { AuthenticationGuard } from './auth/guards/authentication/authentication.guard';\nimport { RolesGuard } from './auth/guards/roles/roles.guard';\nimport { AccessTokenGuard } from './auth/guards/access-token/access-token.guard';\nimport jwtConfig from './auth/config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ProductsModule } from './products/products.module';\nimport { CartModule } from './cart/cart.module';\nimport { OrdersModule } from './orders/orders.module';\n\n/**\n * app environment\n */\nconst ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n      validationSchema: enviromentValidation,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return {\n          type: 'postgres',\n          autoLoadEntities: configService.get('database.autoLoadEntities'),\n          synchronize: configService.get('database.synchronize'),\n          port: +configService.get('database.port'),\n          username: configService.get('database.user'),\n          password: configService.get('database.password'),\n          host: configService.get('database.host'),\n          database: configService.get('database.name'),\n          ssl:\n            process.env.NODE_ENV === 'production'\n              ? {\n                  rejectUnauthorized: false,\n                }\n              : false,\n          logging: true,\n        };\n      },\n    }),\n    UsersModule,\n    AuthModule,\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    ProductsModule,\n    CartModule,\n    OrdersModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: DataResponseInterceptor,\n    },\n\n    { provide: APP_GUARD, useClass: AuthenticationGuard },\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard,\n    },\n    AccessTokenGuard,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Controller handling authentication-related operations such as sign-in\nThis controller provides endpoints for user authentication flows, including login, forgot password, reset password, and email verification.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/sign-in')@Auth(AuthType.None)@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Sign in a user with email and password', description: 'Authenticates a user and returns access and refresh tokens.'})@ApiConsumes('application/json')@ApiBody({description: 'Sign-in credentials', required: true, type: SignInDto})@ApiResponse({status: 200, description: 'User signed in successfully', schema: undefined})@ApiBadRequestResponse({description: 'Invalid credentials or missing fields', schema: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:97\n                        \n                    \n\n\n            \n                \n                        Signs in a user with valid email and password.\nThis endpoint authenticates the user and returns access and refresh tokens upon successful validation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe sign-in credentials (email and password).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An object containing the access token and refresh token.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiConsumes,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { Auth } from './decorator/auth.decorator';\nimport { AuthType } from './enums/auth-type.enum';\nimport { SignInDto } from './dtos/sign-in.dto';\nimport { Role } from './enums/role-type.enum';\n\n/**\n * Controller handling authentication-related operations such as sign-in\n *\n * This controller provides endpoints for user authentication flows, including login, forgot password, reset password, and email verification.\n */\n@ApiTags('Auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    /**\n     * injecting the auth service\n     */\n    private readonly authService: AuthService,\n  ) {}\n\n  /**\n   * Signs in a user with valid email and password.\n   *\n   * This endpoint authenticates the user and returns access and refresh tokens upon successful validation.\n   *\n   * @param signInDto - The sign-in credentials (email and password).\n   * @returns An object containing the access token and refresh token.\n   */\n  @Post('/sign-in')\n  @Auth(AuthType.None)\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Sign in a user with email and password',\n    description: 'Authenticates a user and returns access and refresh tokens.',\n  })\n  @ApiConsumes('application/json')\n  @ApiBody({\n    description: 'Sign-in credentials',\n    required: true,\n    type: SignInDto,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'User signed in successfully',\n    schema: {\n      type: 'object',\n      properties: {\n        apiVersion: { type: 'string', example: '1.0.0' },\n        data: {\n          type: 'object',\n          example: {\n            accessToken: {\n              type: 'string',\n              description: 'JWT access token for authenticated requests',\n              example: 'jsbfiwhvfquobdfj',\n            },\n            refreshToken: {\n              type: 'string',\n              description: 'JWT refresh token for token renewal',\n              example: 'jsbfiwhvfquobdfj',\n            },\n            user: {\n              type: 'object',\n              description: 'user details',\n              example: {\n                firstname: 'favour',\n                lastname: 'ejim',\n                email: 'favour@gmail.com',\n                role: Role.USER,\n              },\n            },\n          },\n        },\n      },\n    },\n  })\n  @ApiBadRequestResponse({\n    description: 'Invalid credentials or missing fields',\n    schema: {\n      type: 'object',\n      properties: {\n        statusCode: { type: 'number', example: 400 },\n        message: { type: 'string', example: 'Invalid email or password' },\n      },\n    },\n  })\n  public signIn(@Body() signInDto: SignInDto) {\n    return this.authService.signIn(signInDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GenerateTokensProvider\n                        \n                        \n                            SignInProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { ConfigModule } from '@nestjs/config';\nimport jwtConfig from './config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { UsersModule } from 'src/users/users.module';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { BcryptProvider } from './providers/bcrypt.provider';\nimport { SignInProvider } from './providers/sign-in.provider';\nimport { GenerateTokensProvider } from './providers/generate-tokens.provider';\n\n@Module({\n  imports: [\n    forwardRef(() => UsersModule),\n    ConfigModule.forFeature(jwtConfig),\n    // for asynchrousnously registering the jwt module and passing the config to the module\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    { provide: HashingProvider, useClass: BcryptProvider },\n    SignInProvider,\n    GenerateTokensProvider,\n  ],\n  exports: [HashingProvider],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(signInProvider: SignInProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        signInProvider\n                                                  \n                                                        \n                                                                        SignInProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:19\n                        \n                    \n\n\n            \n                \n                        function for signing in a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                access and refresh tokens\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { SignInProvider } from './sign-in.provider';\nimport { SignInDto } from '../dtos/sign-in.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    /**\n     * injecting the sign in provider\n     */\n    private readonly signInProvider: SignInProvider,\n  ) {}\n\n  /**\n   * function for signing in a user\n   * @param signInDto\n   * @returns access and refresh tokens\n   */\n  public async signIn(signInDto: SignInDto) {\n    return await this.signInProvider.signIn(signInDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication/authentication.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    guard for authentication\n\n                \n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authentication/authentication.guard.ts:33\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/authentication/authentication.guard.ts:59\n                        \n                    \n\n\n            \n                \n                        function for authenticating a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                true or false based on whether user is logged in or not\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n// import { Observable } from 'rxjs';\nimport { AccessTokenGuard } from '../access-token/access-token.guard';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { AUTH_TYPE_KEY } from 'src/auth/constants/auth.constant';\n\n/**\n * guard for authentication\n */\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  // using static means you can use the name of the property of the class without the \"this\" keyword\n  /**\n   * default auth type\n   */\n  private static readonly defaultAuthType = AuthType.Bearer;\n\n  /**\n   * map for auth types and guards they use\n   */\n  private readonly authTypeGuardMap: Record = {\n    [AuthType.Bearer]: this.accessTokenGuard,\n    [AuthType.None]: { canActivate: () => true },\n  };\n\n  /**\n   * constructor\n   * @param reflector\n   * @param accessTokenGuard\n   */\n  constructor(\n    /**\n     * injecting the reflector class\n     * The reflector class makes you access diff metadata from the execution context\n     */\n    private readonly reflector: Reflector,\n\n    /**\n     * Injecting the access token guard\n     *\n     */\n    private readonly accessTokenGuard: AccessTokenGuard,\n  ) {}\n\n  /**\n   * function for authenticating a user\n   * @param context\n   * @returns true or false based on whether user is logged in or not\n   */\n  async canActivate(context: ExecutionContext): Promise {\n    // Get all the auth types from reflector\n    // This returns an array of the auth types for a specific class or method in a class\n    const authTypes = this.reflector.getAllAndOverride(AUTH_TYPE_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]) ?? [AuthenticationGuard.defaultAuthType];\n\n    // create an array of the guards\n    const guards = authTypes.map((type) => this.authTypeGuardMap[type]).flat();\n\n    // Default error\n    const error = new UnauthorizedException();\n\n    // loop through the guards and fire the canActivate\n    for (const instance of guards) {\n      let canActivate;\n\n      try {\n        canActivate = await Promise.resolve(instance.canActivate(context));\n      } catch (err) {\n        throw err;\n      }\n\n      if (canActivate) {\n        return true;\n      }\n    }\n\n    throw error;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                bcrypt provider\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                comparePassword\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:27\n                        \n                    \n\n\n            \n                \n                        function for comparing password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                a boolean that indicates whether it is same password or not\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:15\n                        \n                    \n\n\n            \n                \n                        function for hashing user password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                hashed password\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing.provider';\nimport * as bcrypt from 'bcrypt';\n\n/**\n * bcrypt provider\n */\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n  /**\n   * function for hashing user password\n   * @param data\n   * @returns hashed password\n   */\n  public async hashPassword(data: string | Buffer): Promise {\n    // generate salt\n    const salt = await bcrypt.genSalt();\n    return bcrypt.hash(data, salt);\n  }\n\n  /**\n   * function for comparing password\n   * @param data\n   * @param encrypted\n   * @returns a boolean that indicates whether it is same password or not\n   */\n  public async comparePassword(\n    data: string | Buffer,\n    encrypted: string,\n  ): Promise {\n    return await bcrypt.compare(data, encrypted);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Cart.html":{"url":"interfaces/Cart.html","title":"interface - Cart","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Cart\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/interfaces/cart.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            items\n                                        \n                                \n                                \n                                        \n                                            subtotal\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        items:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subtotal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subtotal:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Product } from '../../products/product.entity';\n\nexport interface Cart {\n  items: {\n    id: string;\n    product: Product;\n    quantity: number;\n  }[];\n  subtotal: number;\n  total: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CartController.html":{"url":"controllers/CartController.html","title":"controller - CartController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CartController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/cart.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                cart\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addToCart\n                            \n                            \n                                    \n                                clearUserCart\n                            \n                            \n                                    \n                                decrementQuantity\n                            \n                            \n                                    \n                                getUserCart\n                            \n                            \n                                    \n                                removeFromCart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addToCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    addToCart(userId: string, dto: CreateCartItemDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/cart/cart.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        clearUserCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearUserCart(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('clear')\n                \n            \n\n                    \n                        \n                            Defined in src/cart/cart.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        decrementQuantity\n                        \n                    \n                \n            \n            \n                \n                        \n                    decrementQuantity(userId: string, cartId: string, updateCartItemDto: UpdateCartItemDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':cartId')\n                \n            \n\n                    \n                        \n                            Defined in src/cart/cart.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCartItemDto\n                                            \n                                                            UpdateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getUserCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserCart(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('')\n                \n            \n\n                    \n                        \n                            Defined in src/cart/cart.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeFromCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFromCart(userId: string, cartId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':cartId')\n                \n            \n\n                    \n                        \n                            Defined in src/cart/cart.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport { CartService } from './providers/cart.service';\nimport { ActiveUser } from 'src/auth/decorator/active-user.decorator';\nimport { CreateCartItemDto } from './dtos/create-cart-item.dto';\nimport { UpdateCartItemDto } from './dtos/update-cart-item.dto';\n\n@Controller('cart')\nexport class CartController {\n  constructor(\n    /**\n     * injecting the cartService\n     */\n    private readonly cartService: CartService,\n  ) {}\n\n  @Delete('clear')\n  clearUserCart(@ActiveUser('sub') userId: string) {\n    console.log('clearing...');\n    return this.cartService.clearCart(userId);\n  }\n\n  @Post('')\n  addToCart(@ActiveUser('sub') userId: string, @Body() dto: CreateCartItemDto) {\n    return this.cartService.addToCart(userId, dto);\n  }\n\n  @Get('')\n  getUserCart(@ActiveUser('sub') userId: string) {\n    return this.cartService.getCart(userId);\n  }\n\n  @Delete(':cartId')\n  removeFromCart(\n    @ActiveUser('sub') userId: string,\n    @Param('cartId') cartId: string,\n  ) {\n    return this.cartService.removeCartItem(userId, cartId);\n  }\n\n  @Patch(':cartId')\n  decrementQuantity(\n    @ActiveUser('sub') userId: string,\n    @Param('cartId') cartId: string,\n    @Body() updateCartItemDto: UpdateCartItemDto,\n  ) {\n    console.log('qty', updateCartItemDto.quantity);\n    return this.cartService.decrementQuantity(\n      userId,\n      cartId,\n      updateCartItemDto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CartItem.html":{"url":"entities/CartItem.html","title":"entity - CartItem","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CartItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/cart-item.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                product\n                            \n                            \n                                    \n                                quantity\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, product => product.cartItems, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.cartItems, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // src/cart/entities/cart-item.entity.ts\n// User-based cart item entity: Persists cart per user in DB\nimport { Product } from '../products/product.entity';\nimport { User } from '../users/user.entity';\nimport {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  DeleteDateColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity('cart_items')\nexport class CartItem {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ default: 1 })\n  quantity: number;\n\n  @ManyToOne(() => User, (user) => user.cartItems, { onDelete: 'CASCADE' })\n  user: User;\n\n  @ManyToOne(() => Product, (product) => product.cartItems, {\n    onDelete: 'CASCADE',\n  })\n  product: Product;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @DeleteDateColumn()\n  deletedAt?: Date; // Soft delete for cart items\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CartModule.html":{"url":"modules/CartModule.html","title":"module - CartModule","body":"\n                   \n\n\n\n\n    Modules\n    CartModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CartModule\n\n\n\ncluster_CartModule_imports\n\n\n\ncluster_CartModule_providers\n\n\n\ncluster_CartModule_exports\n\n\n\n\nProduct\n\nProduct\n\n\n\nCartModule\n\nCartModule\n\nCartModule -->\n\nProduct->CartModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nCartModule -->\n\nProductsModule->CartModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nCartModule -->\n\nUsersModule->CartModule\n\n\n\n\n\nCartService \n\nCartService \n\nCartService  -->\n\nCartModule->CartService \n\n\n\n\n\nAddToCartProvider\n\nAddToCartProvider\n\nCartModule -->\n\nAddToCartProvider->CartModule\n\n\n\n\n\nCartService\n\nCartService\n\nCartModule -->\n\nCartService->CartModule\n\n\n\n\n\nGetCartProvider\n\nGetCartProvider\n\nCartModule -->\n\nGetCartProvider->CartModule\n\n\n\n\n\nUpdateCartItemProvider\n\nUpdateCartItemProvider\n\nCartModule -->\n\nUpdateCartItemProvider->CartModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cart/cart.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AddToCartProvider\n                        \n                        \n                            CartService\n                        \n                        \n                            GetCartProvider\n                        \n                        \n                            UpdateCartItemProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CartController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            Product\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CartService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CartController } from './cart.controller';\nimport { CartItem } from './cart-item.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CartService } from './providers/cart.service';\nimport { AddToCartProvider } from './providers/add-to-cart.provider';\nimport { GetCartProvider } from './providers/get-cart.provider';\nimport { UsersModule } from 'src/users/users.module';\nimport { UpdateCartItemProvider } from './providers/update-cart-item.provider';\nimport { Product } from 'src/products/product.entity';\nimport { ProductsModule } from 'src/products/products.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([CartItem]),\n    Product,\n    UsersModule,\n    ProductsModule,\n  ],\n  controllers: [CartController],\n  providers: [\n    CartService,\n    AddToCartProvider,\n    GetCartProvider,\n    UpdateCartItemProvider,\n  ],\n  exports: [CartService],\n})\nexport class CartModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CartService.html":{"url":"injectables/CartService.html","title":"injectable - CartService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CartService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/providers/cart.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addToCart\n                            \n                            \n                                    Async\n                                clearCart\n                            \n                            \n                                    Async\n                                decrementQuantity\n                            \n                            \n                                    Async\n                                getCart\n                            \n                            \n                                    Async\n                                removeCartItem\n                            \n                            \n                                    Async\n                                validateCartStock\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(addToCartProvider: AddToCartProvider, getCartProvider: GetCartProvider, updateCartItemProvider: UpdateCartItemProvider)\n                    \n                \n                        \n                            \n                                Defined in src/cart/providers/cart.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        addToCartProvider\n                                                  \n                                                        \n                                                                        AddToCartProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        getCartProvider\n                                                  \n                                                        \n                                                                        GetCartProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateCartItemProvider\n                                                  \n                                                        \n                                                                        UpdateCartItemProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addToCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    addToCart(userId: string, createCartItemDto: CreateCartItemDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/cart.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createCartItemDto\n                                            \n                                                            CreateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        clearCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearCart(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/cart.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decrementQuantity\n                        \n                    \n                \n            \n            \n                \n                        \n                    decrementQuantity(userId: string, cartId: string, updateCartItemDto: UpdateCartItemDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/cart.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCartItemDto\n                                            \n                                                            UpdateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCart(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/cart.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeCartItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeCartItem(userId: string, cartId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/cart.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateCartStock\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateCartStock(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/cart.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AddToCartProvider } from './add-to-cart.provider';\nimport { CreateCartItemDto } from '../dtos/create-cart-item.dto';\nimport { GetCartProvider } from './get-cart.provider';\nimport { UpdateCartItemProvider } from './update-cart-item.provider';\nimport { UpdateCartItemDto } from '../dtos/update-cart-item.dto';\n\n@Injectable()\nexport class CartService {\n  constructor(\n    /**\n     * injecting the addToCartProvider\n     */\n    private readonly addToCartProvider: AddToCartProvider,\n\n    /**\n     * injecting the getCartProvider\n     */\n    private readonly getCartProvider: GetCartProvider,\n\n    /**\n     * injecting the update\n     */\n    private readonly updateCartItemProvider: UpdateCartItemProvider,\n  ) {}\n\n  async addToCart(userId: string, createCartItemDto: CreateCartItemDto) {\n    return await this.addToCartProvider.addToCart(userId, createCartItemDto);\n  }\n\n  async getCart(userId: string) {\n    return await this.getCartProvider.getCart(userId);\n  }\n\n  async removeCartItem(userId: string, cartId: string) {\n    return await this.updateCartItemProvider.removeFromCart(userId, cartId);\n  }\n\n  async decrementQuantity(\n    userId: string,\n    cartId: string,\n    updateCartItemDto: UpdateCartItemDto,\n  ) {\n    return await this.updateCartItemProvider.decrementQuantity(\n      userId,\n      cartId,\n      updateCartItemDto,\n    );\n  }\n\n  async validateCartStock(userId: string) {\n    return await this.updateCartItemProvider.validateCartStock(userId);\n  }\n\n  async clearCart(userId: string) {\n    console.log('Clearing cart for user:', userId);\n    return await this.updateCartItemProvider.clearCart(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCartItemDto.html":{"url":"classes/CreateCartItemDto.html","title":"class - CreateCartItemDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCartItemDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/dtos/create-cart-item.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                productId\n                            \n                            \n                                    \n                                    \n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/dtos/create-cart-item.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/dtos/create-cart-item.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsString, Min } from 'class-validator';\n\nexport class CreateCartItemDto {\n  @IsString()\n  productId: string;\n\n  @IsInt()\n  @Min(1)\n  quantity: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateOrderDto.html":{"url":"classes/CreateOrderDto.html","title":"class - CreateOrderDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateOrderDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/dtos/create-order.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                billingAddress\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                paymentMethod\n                            \n                            \n                                    \n                                    \n                                shippingAddress\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        billingAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dtos/create-order.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        paymentMethod\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dtos/create-order.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        shippingAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dtos/create-order.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport class CreateOrderDto {\n  @IsNotEmpty()\n  @IsString()\n  shippingAddress: string;\n\n  @IsNotEmpty()\n  @IsString()\n  billingAddress: string;\n\n  // Optional: Payment method (mocked)\n  @IsOptional()\n  @IsString()\n  paymentMethod?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateOrderProvider.html":{"url":"injectables/CreateOrderProvider.html","title":"injectable - CreateOrderProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateOrderProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/providers/create-order.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource, cartService: CartService)\n                    \n                \n                        \n                            \n                                Defined in src/orders/providers/create-order.provider.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cartService\n                                                  \n                                                        \n                                                                        CartService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrder(userId: string, createOrderDto: CreateOrderDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/create-order.provider.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createOrderDto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { OrderItem } from '../order-item.entity';\nimport { Order } from '../order.entity';\nimport { User } from 'src/users/user.entity';\nimport { DataSource } from 'typeorm';\nimport { Product } from 'src/products/product.entity';\nimport { CartService } from 'src/cart/providers/cart.service';\nimport { CreateOrderDto } from '../dtos/create-order.dto';\nimport { CartItem } from 'src/cart/cart-item.entity';\n\n@Injectable()\nexport class CreateOrderProvider {\n  constructor(\n    private readonly dataSource: DataSource, // For transactions\n    private readonly cartService: CartService,\n  ) {}\n  async createOrder(\n    userId: string,\n    createOrderDto: CreateOrderDto,\n  ): Promise {\n    const queryRunner = this.dataSource.createQueryRunner();\n\n    try {\n      await queryRunner.connect();\n      await queryRunner.startTransaction();\n    } catch (error) {\n      console.log(error);\n      throw new RequestTimeoutException('Could not connect to datasource');\n    }\n\n    try {\n      await this.cartService.validateCartStock(userId);\n\n      const user = await queryRunner.manager.getRepository(User).findOne({\n        where: { id: userId },\n      });\n\n      // Fixed: Use CartItem entity and Query Builder\n      const cartItemsRaw = await queryRunner.manager\n        .createQueryBuilder(CartItem, 'ci')\n        .innerJoinAndSelect('ci.product', 'p')\n        .where('ci.user.id = :userId', { userId })\n        .andWhere('ci.deletedAt IS NULL')\n        .setLock('pessimistic_write')\n        .getMany();\n\n      console.log('1');\n\n      // Transform to the format you need\n      const cartItems = cartItemsRaw.map((ci) => ({\n        id: ci.id,\n        quantity: ci.quantity,\n        productId: ci.product.id,\n        stock: ci.product.stock,\n        price: ci.product.price,\n      }));\n      console.log('2');\n\n      if (cartItems.length === 0) {\n        throw new ConflictException('Cart is empty');\n      }\n\n      for (const item of cartItems) {\n        if (item.stock  sum + item.price * item.quantity,\n        0,\n      );\n      const total = subtotal;\n\n      const order = queryRunner.manager.create(Order, {\n        user,\n        total,\n        ...createOrderDto,\n      });\n      await queryRunner.manager.getRepository(Order).save(order);\n\n      console.log('4');\n\n      const orderItems = cartItems.map((item) =>\n        queryRunner.manager.getRepository(OrderItem).create({\n          order,\n          product: { id: item.productId },\n          quantity: item.quantity,\n          price: item.price,\n        }),\n      );\n      await queryRunner.manager.getRepository(OrderItem).save(orderItems);\n      console.log('5');\n\n      for (const item of cartItems) {\n        await queryRunner.manager.getRepository(Product).update(\n          { id: item.productId },\n          {\n            stock: () => `stock - ${item.quantity}`,\n            purchaseCount: () => `\"purchaseCount\" + ${item.quantity}`,\n          },\n        );\n      }\n\n      console.log('6');\n\n      await queryRunner.manager.softDelete(CartItem, { user: { id: userId } });\n\n      // const x = await this.cartService.clearCart(userId);\n\n      // console.log(x);\n\n      console.log('7');\n\n      await queryRunner.commitTransaction(); // Don't forget to commit!\n      return order;\n    } catch (error) {\n      await queryRunner.rollbackTransaction();\n      throw new ConflictException('Could not complete the transaction', {\n        description: String(error),\n      });\n    } finally {\n      try {\n        await queryRunner.release();\n      } catch (error) {\n        throw new RequestTimeoutException('Could not release the connection', {\n          description: String(error),\n        });\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dtos/create-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                imageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                stock\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ProductCategory)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(5)@MaxLength(350)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(5)@MaxLength(150)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEnum,\n  IsInt,\n  IsNotEmpty,\n  IsString,\n  MaxLength,\n  Min,\n  MinLength,\n} from 'class-validator';\nimport { ProductCategory } from '../enums/product-category.enum';\n\nexport class CreateProductDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(5)\n  @MaxLength(150)\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(5)\n  @MaxLength(350)\n  description: string;\n\n  @IsEnum(ProductCategory)\n  @IsNotEmpty()\n  category: ProductCategory;\n\n  @IsInt()\n  @IsNotEmpty()\n  price: number;\n\n  @IsInt()\n  @IsNotEmpty()\n  @Min(1)\n  stock: number;\n\n  @IsString()\n  @IsNotEmpty()\n  imageUrl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateProductProvider.html":{"url":"injectables/CreateProductProvider.html","title":"injectable - CreateProductProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateProductProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/create-product.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/create-product.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProduct(createProductDto: CreateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/create-product.provider.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Product } from '../product.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateProductDto } from '../dtos/create-product.dto';\n\n@Injectable()\nexport class CreateProductProvider {\n  constructor(\n    /**\n     * injecting the product repository\n     */\n    @InjectRepository(Product)\n    private readonly productsRepository: Repository,\n  ) {}\n\n  async createProduct(createProductDto: CreateProductDto): Promise {\n    const newProduct = this.productsRepository.create({\n      ...createProductDto,\n    });\n\n    return await this.productsRepository.save(newProduct);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                firstname\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                lastname\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'user email', example: 'favour@gmail.com'})@IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:48\n                        \n                    \n\n            \n                \n                    user email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'user firstname', example: 'favour'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:23\n                        \n                    \n\n            \n                \n                    user firstname\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'user lastname', example: 'ejim'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:36\n                        \n                    \n\n            \n                \n                    user lastname\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'user password', example: 'favour@Ejim1'})@IsString()@IsNotEmpty()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[\\W_]).{8,}$/, {message: 'Minimum eigt characters, atleast one letter, number and special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:65\n                        \n                    \n\n            \n                \n                    user password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  /**\n   * user firstname\n   */\n  @ApiProperty({\n    description: 'user firstname',\n    example: 'favour',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstname: string;\n\n  /**\n   * user lastname\n   */\n  @ApiProperty({\n    description: 'user lastname',\n    example: 'ejim',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  lastname: string;\n\n  /**\n   * user email\n   */\n  @ApiProperty({\n    description: 'user email',\n    example: 'favour@gmail.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  /**\n   * user password\n   */\n  @ApiProperty({\n    description: 'user password',\n    example: 'favour@Ejim1',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(/^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[\\W_]).{8,}$/, {\n    message:\n      'Minimum eigt characters, atleast one letter, number and special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, hashingProvider: HashingProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-user.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-user.provider.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { ValidationException } from 'src/common/filters/common-exceptions.filter';\nimport { Role } from 'src/auth/enums/role-type.enum';\n\n@Injectable()\nexport class CreateUserProvider {\n  constructor(\n    /**\n     * injecting the users repository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n\n    /**\n     * Injecting hashing provider\n     */\n    @Inject(forwardRef(() => HashingProvider))\n    private readonly hashingProvider: HashingProvider,\n  ) {}\n\n  public async createUser(\n    createUserDto: CreateUserDto,\n  ): Promise> {\n    const existingUser = await this.usersRepository.findOne({\n      where: { email: createUserDto.email },\n    });\n\n    if (existingUser) {\n      throw new ValidationException([\n        `user with ${createUserDto.email} already exists`,\n      ]);\n    }\n\n    // create a new user\n    let newUser = this.usersRepository.create({\n      ...createUserDto,\n      role: Role.USER,\n      password: await this.hashingProvider.hashPassword(createUserDto.password),\n    });\n\n    newUser = await this.usersRepository.save(newUser);\n\n    return {\n      id: newUser.id,\n      firstname: newUser.firstname,\n      lastname: newUser.lastname,\n      email: newUser.email,\n      role: newUser.role,\n      createdAt: newUser.createdAt,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataResponseInterceptor.html":{"url":"injectables/DataResponseInterceptor.html","title":"injectable - DataResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/data-response/data-response.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for the data response interceptor\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/data-response/data-response.interceptor.ts:14\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/data-response/data-response.interceptor.ts:32\n                        \n                    \n\n\n            \n                \n                        function for formatting the response data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                the response in {apiVersion: \"1.0.0\", data: ...} format\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { map, Observable } from 'rxjs';\n\n/**\n * provider for the data response interceptor\n */\n@Injectable()\nexport class DataResponseInterceptor implements NestInterceptor {\n  /**\n   * constructor\n   * @param configService\n   */\n  constructor(\n    /**\n     * injecting config service\n     */\n    private readonly configService: ConfigService,\n  ) {}\n\n  /**\n   * function for formatting the response data\n   * @param context\n   * @param next\n   * @returns the response in {apiVersion: \"1.0.0\", data: ...} format\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    // console.log('Before ...');\n    // before method execution\n    return next.handle().pipe(\n      map((data) => ({\n        apiVersion: this.configService.get('appConfig.apiVersion'),\n        data: data,\n      })),\n    );\n    // After method execution\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseConnectionException.html":{"url":"classes/DatabaseConnectionException.html","title":"class - DatabaseConnectionException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseConnectionException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/common-exceptions.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                database connection exception\n\n            \n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(operation?: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/filters/common-exceptions.filter.ts:6\n                            \n                        \n\n                \n                    \n                            constructor for the database connection exception\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        operation\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\n/**\n * database connection exception\n */\nexport class DatabaseConnectionException extends HttpException {\n  /**\n   * constructor for the database connection exception\n   * @param operation\n   */\n  constructor(operation?: string) {\n    super(\n      {\n        message:\n          'Unable to process your request at the moment, please try later',\n        description: 'Error connecting to the database',\n        operation,\n        errorCode: 'ERR_DB_CONNECTION',\n      },\n      HttpStatus.REQUEST_TIMEOUT,\n    );\n  }\n}\n\n/**\n * validation exception\n */\nexport class ValidationException extends HttpException {\n  /**\n   * constructor for the validation exception\n   * @param errors\n   */\n  constructor(errors: string[]) {\n    super(\n      {\n        message: 'Validation failed',\n        errors,\n        errorCode: 'ERR_VALIDATION',\n      },\n      HttpStatus.BAD_REQUEST,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DeleteProductProvider.html":{"url":"injectables/DeleteProductProvider.html","title":"injectable - DeleteProductProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DeleteProductProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/delete-product.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                deleteProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/delete-product.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProduct(productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/delete-product.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Product } from '../product.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class DeleteProductProvider {\n  constructor(\n    /**\n     * injecting the products repository\n     */\n    @InjectRepository(Product)\n    private readonly productsRepository: Repository,\n  ) {}\n\n  public async deleteProduct(productId: string): Promise {\n    const product = await this.productsRepository.findOneBy({ id: productId });\n\n    if (!product) throw new NotFoundException('Product not found');\n\n    await this.productsRepository.save({\n      ...product,\n      isDeleted: true,\n      deletedAt: new Date(),\n    });\n\n    return {\n      message: 'Product deleted successfully.',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ErrorHandlingInterceptor.html":{"url":"injectables/ErrorHandlingInterceptor.html","title":"injectable - ErrorHandlingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ErrorHandlingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/error-handling/error-handling.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                interceptor for handling error\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                isConnectionError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/error-handling/error-handling.interceptor.ts:24\n                        \n                    \n\n\n            \n                \n                        intercept function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isConnectionError\n                        \n                    \n                \n            \n            \n                \n                        \n                    isConnectionError(error: QueryFailedError)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/error-handling/error-handling.interceptor.ts:55\n                        \n                    \n\n\n            \n                \n                        function for checking whether it is a connection error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                        QueryFailedError\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                boolean for whether it is a connection error\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { Observable, throwError, TimeoutError } from 'rxjs';\nimport { catchError, timeout } from 'rxjs/operators';\nimport { DatabaseConnectionException } from 'src/common/filters/common-exceptions.filter';\nimport { QueryFailedError } from 'typeorm';\n\n/**\n * interceptor for handling error\n */\n@Injectable()\nexport class ErrorHandlingInterceptor implements NestInterceptor {\n  /**\n   * intercept function\n   * @param context\n   * @param next\n   * @returns\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      timeout(30000), // 30 second timeout\n      catchError((error) => {\n        // Handle specific database errors\n        if (error instanceof QueryFailedError) {\n          if (this.isConnectionError(error)) {\n            return throwError(() => new DatabaseConnectionException());\n          }\n        }\n\n        if (error instanceof TimeoutError) {\n          return throwError(\n            () =>\n              new RequestTimeoutException(\n                'Request timeout - please try again later',\n              ),\n          );\n        }\n\n        // Re-throw the original error to be handled by global filter\n        return throwError(() => error);\n      }),\n    );\n  }\n\n  /**\n   * function for checking whether it is a connection error\n   * @param error\n   * @returns boolean for whether it is a connection error\n   */\n  private isConnectionError(error: QueryFailedError): boolean {\n    const connectionErrorCodes = [\n      'ECONNREFUSED',\n      'ENOTFOUND',\n      'ETIMEDOUT',\n      'ECONNRESET',\n      'connection refused',\n      'connect timeout',\n    ];\n\n    const errorMessage = error.message.toLowerCase();\n    return connectionErrorCodes.some((code) =>\n      errorMessage.includes(code.toLowerCase()),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ErrorResponse.html":{"url":"interfaces/ErrorResponse.html","title":"interface - ErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/global-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                error response interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            controller\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            details\n                                        \n                                \n                                \n                                        \n                                            errorCode\n                                        \n                                \n                                \n                                        \n                                            errorType\n                                        \n                                \n                                \n                                        \n                                            handler\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            method\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        controller\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        controller:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    controller name\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        details\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        details:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    error details\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    error code\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    error type\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        handler:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    handler name\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    error message\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    controller method name\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    controller path\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    status code\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    timestamp\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport {\n  QueryFailedError,\n  EntityNotFoundError,\n  CannotCreateEntityIdMapError,\n} from 'typeorm';\n\n/**\n * error response interface\n */\nexport interface ErrorResponse {\n  /**\n   * status code\n   */\n  statusCode: number;\n  /**\n   * timestamp\n   */\n  timestamp: string;\n  /**\n   * controller path\n   */\n  path: string;\n  /**\n   * controller method name\n   */\n  method: string;\n  /**\n   * controller name\n   */\n  controller: string;\n  /**\n   * handler name\n   */\n  handler: string;\n  /**\n   * error type\n   */\n  errorType: string;\n  /**\n   * error code\n   */\n  errorCode: string;\n  /**\n   * error message\n   */\n  message: string;\n  /**\n   * error details\n   */\n  details?: any;\n}\n\n/**\n * global exception filter\n */\n@Catch()\nexport class GlobalExceptionFilter implements ExceptionFilter {\n  /**\n   * logger\n   */\n  private readonly logger = new Logger(GlobalExceptionFilter.name);\n\n  /**\n   * catch function\n   * @param exception\n   * @param host\n   */\n  catch(exception: unknown, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n\n    // Extract controller and handler info from request\n    const controller = this.getControllerName(request);\n\n    console.log('controller: ', controller);\n    const handler = this.getHandlerName(request);\n\n    const errorResponse = this.buildErrorResponse(\n      exception,\n      request,\n      controller,\n      handler,\n    );\n\n    // Log the error with full context\n    this.logger.error(\n      `${errorResponse.errorType} in ${controller}::${handler}`,\n      {\n        ...errorResponse,\n        stack: exception instanceof Error ? exception.stack : undefined,\n      },\n    );\n\n    response.status(errorResponse.statusCode).json(errorResponse);\n  }\n\n  /**\n   * builds the error response\n   * @param exception\n   * @param request\n   * @param controller\n   * @param handler\n   * @returns error response\n   */\n  private buildErrorResponse(\n    exception: unknown,\n    request: Request,\n    controller: string,\n    handler: string,\n  ): ErrorResponse {\n    let status = HttpStatus.INTERNAL_SERVER_ERROR;\n    let message = 'Internal server error';\n    let errorType = 'InternalServerError';\n    let errorCode = 'ERR_INTERNAL';\n    let details: any;\n\n    // Handle different error types\n    if (exception instanceof HttpException) {\n      status = exception.getStatus();\n      message = exception.message;\n      errorType = exception.constructor.name;\n      errorCode = this.getHttpErrorCode(status);\n      details = exception.getResponse();\n    } else if (exception instanceof QueryFailedError) {\n      status = HttpStatus.BAD_REQUEST;\n      message = 'Database query failed';\n      errorType = 'DatabaseError';\n      errorCode = 'ERR_DB_QUERY_FAILED';\n      details = this.sanitizeDatabaseError(exception);\n    } else if (exception instanceof EntityNotFoundError) {\n      status = HttpStatus.NOT_FOUND;\n      message = 'Requested resource not found';\n      errorType = 'EntityNotFoundError';\n      errorCode = 'ERR_ENTITY_NOT_FOUND';\n    } else if (exception instanceof CannotCreateEntityIdMapError) {\n      status = HttpStatus.BAD_REQUEST;\n      message = 'Invalid entity data provided';\n      errorType = 'EntityValidationError';\n      errorCode = 'ERR_ENTITY_VALIDATION';\n    } else if (exception instanceof Error) {\n      message = exception.message;\n      errorType = exception.constructor.name;\n      errorCode = 'ERR_UNKNOWN';\n    }\n\n    return {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      method: request.method,\n      controller,\n      handler,\n      errorType,\n      errorCode,\n      message,\n      details,\n    };\n  }\n\n  /**\n   * function for getting the controller name where the error originated from\n   * @param request\n   * @returns controller name\n   */\n  private getControllerName(request: Request): string {\n    // Extract controller from route path or use reflection metadata\n    const route = request.route?.path || request.url;\n\n    const pathSegments = route.split('/').filter(Boolean);\n\n    if (pathSegments.length > 0) {\n      return `${pathSegments[2].charAt(0).toUpperCase()}${pathSegments[2].slice(1)}Controller`;\n    }\n\n    return 'UnknownController';\n  }\n\n  /**\n   * function for getting the handler name of the handler function where the error originated from\n   * @param request\n   * @returns the handler name\n   */\n  private getHandlerName(request: Request): string {\n    const method = request.method.toLowerCase();\n    const pathSegments = request.url.split('/').filter(Boolean);\n\n    if (pathSegments.length > 1) {\n      return `${method}${pathSegments[pathSegments.length - 1].charAt(0).toUpperCase()}${pathSegments[pathSegments.length - 1].slice(1)}`;\n    }\n\n    return `${method}Handler`;\n  }\n\n  /**\n   * function for getting the http error code\n   * @param status\n   * @returns  http error code\n   */\n  private getHttpErrorCode(status: number): string {\n    const statusCodes = {\n      400: 'ERR_BAD_REQUEST',\n      401: 'ERR_UNAUTHORIZED',\n      403: 'ERR_FORBIDDEN',\n      404: 'ERR_NOT_FOUND',\n      409: 'ERR_CONFLICT',\n      422: 'ERR_VALIDATION',\n      429: 'ERR_RATE_LIMIT',\n      500: 'ERR_INTERNAL',\n      502: 'ERR_BAD_GATEWAY',\n      503: 'ERR_SERVICE_UNAVAILABLE',\n      504: 'ERR_GATEWAY_TIMEOUT',\n    };\n\n    return statusCodes[status] || 'ERR_UNKNOWN_HTTP';\n  }\n\n  /**\n   * function for sanitizing the db error\n   * @param error\n   * @returns db error object\n   */\n  private sanitizeDatabaseError(error: QueryFailedError): any {\n    // Remove sensitive information from database errors\n    return {\n      code: (error as any).code,\n      constraint: (error as any).constraint,\n      table: (error as any).table,\n      column: (error as any).column,\n      // Don't expose raw SQL or sensitive details\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindAllOrdersForUserProvider.html":{"url":"injectables/FindAllOrdersForUserProvider.html","title":"injectable - FindAllOrdersForUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindAllOrdersForUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/providers/find-all-orders-for-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllOrders\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(orderRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/orders/providers/find-all-orders-for-user.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        orderRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllOrders\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllOrders(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/find-all-orders-for-user.provider.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Order } from '../order.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class FindAllOrdersForUserProvider {\n  constructor(\n    @InjectRepository(Order)\n    private readonly orderRepository: Repository,\n  ) {}\n  async findAllOrders(userId: string): Promise {\n    return this.orderRepository.find({\n      where: { user: { id: userId } },\n      relations: ['items', 'items.product'],\n      order: { createdAt: 'DESC' },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindAllProductsProvider.html":{"url":"injectables/FindAllProductsProvider.html","title":"injectable - FindAllProductsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindAllProductsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/find-all-products.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cleanQuery\n                            \n                            \n                                    Async\n                                findAllProducts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository, paginationProvider: PaginationProvider)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/find-all-products.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cleanQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanQuery(query: GetProductsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/find-all-products.provider.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            GetProductsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         GetProductsDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllProducts(productQuery: GetProductsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/find-all-products.provider.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productQuery\n                                            \n                                                            GetProductsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { GetProductsDto } from '../dtos/get-products.dto';\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\nimport { Product } from '../product.entity';\nimport { Between, FindOptionsOrder, ILike, In, Repository } from 'typeorm';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\n\n@Injectable()\nexport class FindAllProductsProvider {\n  constructor(\n    /**\n     * injecting the products repository\n     */\n    @InjectRepository(Product)\n    private readonly productsRepository: Repository,\n\n    /**\n     * injecting the pagination provider\n     */\n    private readonly paginationProvider: PaginationProvider,\n  ) {}\n\n  async findAllProducts(\n    productQuery: GetProductsDto,\n  ): Promise> {\n    const cleanedQuery = this.cleanQuery(productQuery);\n\n    const { limit, page, sort } = cleanedQuery;\n\n    const safeLimit = Number(limit) > 0 ? Number(limit) : 10;\n    const safePage = Number(page) > 0 ? Number(page) : 1;\n\n    const where: any = {\n      isDeleted: false,\n    };\n\n    if (cleanedQuery.category) {\n      where.category = In(cleanedQuery.category.split(','));\n    }\n    if (cleanedQuery.price) {\n      const [min, max] = cleanedQuery.price\n        .split('-')\n        .map((p) => parseFloat(p.trim()));\n\n      if (!isNaN(min) && !isNaN(max)) {\n        where.price = Between(min, max);\n      }\n    }\n    if (cleanedQuery.name) {\n      const searchTerm = cleanedQuery.name.split('-').join(' '); // Replace dashes with spaces\n      where.name = ILike(`%${searchTerm}%`);\n    }\n\n    // Build order conditions (default to newest)\n    const order: FindOptionsOrder = { createdAt: 'DESC' };\n    if (sort) {\n      switch (sort) {\n        case 'newest':\n          order.createdAt = 'DESC';\n          break;\n        case 'oldest':\n          order.createdAt = 'ASC';\n          break;\n        case 'most_purchased':\n          order.purchaseCount = 'DESC';\n          break;\n\n        default:\n          // Fallback if validation misses\n          order.createdAt = 'DESC';\n      }\n    }\n\n    // Use PaginationProvider with options\n    const paginationQuery: PaginationQueryDto = {\n      limit: safeLimit,\n      page: safePage,\n    };\n\n    const paginatedProducts =\n      await this.paginationProvider.paginationQuery(\n        paginationQuery,\n        this.productsRepository,\n        {\n          where,\n          order,\n        },\n      );\n\n    // console.log(paginatedProducts);\n\n    return paginatedProducts;\n  }\n\n  private cleanQuery(query: GetProductsDto): GetProductsDto {\n    return Object.fromEntries(\n      Object.entries(query).filter(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        ([_, value]) =>\n          value !== 'undefined' && value !== undefined && value !== '',\n      ),\n    ) as GetProductsDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOrderByIdProvider.html":{"url":"injectables/FindOrderByIdProvider.html","title":"injectable - FindOrderByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOrderByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/providers/find-order-by-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findOrderById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(orderRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/orders/providers/find-order-by-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        orderRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOrderById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOrderById(userId: string, orderId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/find-order-by-id.provider.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Order } from '../order.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class FindOrderByIdProvider {\n  constructor(\n    @InjectRepository(Order)\n    private readonly orderRepository: Repository,\n  ) {}\n  async findOrderById(userId: string, orderId: string): Promise {\n    const order = await this.orderRepository.findOne({\n      where: { id: orderId, user: { id: userId } },\n      relations: ['items', 'items.product'],\n    });\n\n    if (!order) {\n      throw new NotFoundException('Order not found');\n    }\n\n    return order;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindProductByIdProvider.html":{"url":"injectables/FindProductByIdProvider.html","title":"injectable - FindProductByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindProductByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/find-product-by-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findProductById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/find-product-by-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findProductById(productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/find-product-by-id.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Product } from '../product.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindProductByIdProvider {\n  constructor(\n    /**\n     * injecting the products repository\n     */\n    @InjectRepository(Product)\n    private readonly productsRepository: Repository,\n  ) {}\n\n  public async findProductById(productId: string): Promise {\n    const product = await this.productsRepository.findOne({\n      where: {\n        id: productId,\n      },\n    });\n\n    if (!product) throw new NotFoundException('Product not found!');\n\n    return product;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindUserByEmailProvider.html":{"url":"injectables/FindUserByEmailProvider.html","title":"injectable - FindUserByEmailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindUserByEmailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-user-by-email.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findUserByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-user-by-email.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-user-by-email.provider.ts:21\n                        \n                    \n\n\n            \n                \n                        function for finding user by email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                User\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindUserByEmailProvider {\n  constructor(\n    /**\n     * injecting the users repository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  /**\n   * function for finding user by email\n   * @param email\n   * @returns User\n   */\n  public async findUserByEmail(email: string): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { email },\n      select: ['id', 'password', 'email', 'role', 'firstname', 'lastname'],\n    });\n\n    if (!user)\n      throw new NotFoundException(\n        `user with this email: ${email} does not exist.`,\n      );\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindUserByIdProvider.html":{"url":"injectables/FindUserByIdProvider.html","title":"injectable - FindUserByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindUserByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-user-by-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findUserById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-user-by-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserById(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-user-by-id.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindUserByIdProvider {\n  constructor(\n    /**\n     * injecting the users repository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  async findUserById(userId: string): Promise {\n    const user = await this.usersRepository.findOne({\n      where: {\n        id: userId,\n      },\n    });\n\n    if (!user) throw new NotFoundException(`user not found!`);\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokensProvider.html":{"url":"injectables/GenerateTokensProvider.html","title":"injectable - GenerateTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-tokens.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for generating tokens\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                            \n                                    Private\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-tokens.provider.ts:12\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:36\n                        \n                    \n\n\n            \n                \n                        function for generating tokens\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                access and refresh tokens\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(userId: string, expiresIn: number, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:64\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        function for using jwt to sign the user info\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                the object containing payload when a user signs in\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../config/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { User } from 'src/users/user.entity';\nimport { ActiveUserData } from '../interfaces/active-user-data.interface';\n\n/**\n * provider for generating tokens\n */\n@Injectable()\nexport class GenerateTokensProvider {\n  /**\n   * constructor\n   * @param jwtService\n   * @param jwtConfiguration\n   */\n  constructor(\n    /**\n     * Injecting the jwt service\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * Injecting the jwt config\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  /**\n   * function for generating tokens\n   * @param user\n   * @returns access and refresh tokens\n   */\n  public async generateTokens(user: User) {\n    const [accessToken, refreshToken] = await Promise.all([\n      // Generate the access token\n      this.signToken>(\n        user.id,\n        this.jwtConfiguration.accessTokenTtl,\n        {\n          email: user.email,\n          role: user.role,\n        },\n      ),\n      // Generate the refresh token\n      this.signToken(user.id, this.jwtConfiguration.refreshTokenTtl),\n    ]);\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  /**\n   * function for using jwt to sign the user info\n   * @param userId\n   * @param expiresIn\n   * @param payload\n   * @returns the object containing payload when a user signs in\n   */\n  private async signToken(userId: string, expiresIn: number, payload?: T) {\n    return await this.jwtService.signAsync(\n      {\n        sub: userId,\n        ...payload,\n      },\n      {\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n        secret: this.jwtConfiguration.secret,\n        expiresIn,\n      },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GetCartProvider.html":{"url":"injectables/GetCartProvider.html","title":"injectable - GetCartProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GetCartProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/providers/get-cart.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                calculateSubtotal\n                            \n                            \n                                    Async\n                                getCart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cartItemRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/cart/providers/get-cart.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cartItemRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        calculateSubtotal\n                        \n                    \n                \n            \n            \n                \n                        \n                    calculateSubtotal(items: Cart)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/get-cart.provider.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                items\n                                            \n                                                            Cart\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCart(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/get-cart.provider.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Cart } from '../interfaces/cart.interface';\nimport { Repository } from 'typeorm';\nimport { CartItem } from '../cart-item.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class GetCartProvider {\n  constructor(\n    /**\n     * injecting the cart item repository\n     */\n    @InjectRepository(CartItem)\n    private readonly cartItemRepository: Repository,\n  ) {}\n\n  async getCart(userId: string): Promise {\n    const cartItems = await this.cartItemRepository.find({\n      where: { user: { id: userId }, deletedAt: null },\n      relations: ['product'],\n    });\n\n    const items = cartItems.map((item) => ({\n      id: item.id,\n      product: item.product,\n      quantity: item.quantity,\n    }));\n\n    const subtotal = await this.calculateSubtotal(items);\n    return {\n      items,\n      subtotal,\n      total: subtotal,\n    };\n  }\n\n  private async calculateSubtotal(items: Cart['items']): Promise {\n    let subtotal = 0;\n    for (const item of items) {\n      subtotal += item.product.price * item.quantity;\n    }\n    return Number(subtotal.toFixed(2));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetProductsBaseDto.html":{"url":"classes/GetProductsBaseDto.html","title":"class - GetProductsBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetProductsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dtos/get-products.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                category\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                sort\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/get-products.dto.ts:19\n                        \n                    \n\n            \n                \n                    product category\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/get-products.dto.ts:12\n                        \n                    \n\n            \n                \n                    product name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/get-products.dto.ts:26\n                        \n                    \n\n            \n                \n                    product price\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"newest\" | \"oldest\" | \"most_purchased\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsIn(['newest', 'oldest', 'most_purchased'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/get-products.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsOptional, IsString } from 'class-validator';\nimport { ProductCategory } from '../enums/product-category.enum';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\nimport { IntersectionType } from '@nestjs/swagger';\n\nexport class GetProductsBaseDto {\n  /**\n   * product name\n   */\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  /**\n   * product category\n   */\n  @IsString()\n  @IsOptional()\n  category?: ProductCategory;\n\n  /**\n   * product price\n   */\n  @IsString()\n  @IsOptional()\n  price?: string;\n\n  @IsOptional()\n  @IsString()\n  @IsIn(['newest', 'oldest', 'most_purchased'])\n  sort?: 'newest' | 'oldest' | 'most_purchased';\n}\n\n/**\n * dto for get events\n */\nexport class GetProductsDto extends IntersectionType(\n  GetProductsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetProductsDto.html":{"url":"classes/GetProductsDto.html","title":"class - GetProductsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetProductsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dtos/get-products.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                dto for get events\n\n            \n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetProductsBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsOptional, IsString } from 'class-validator';\nimport { ProductCategory } from '../enums/product-category.enum';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\nimport { IntersectionType } from '@nestjs/swagger';\n\nexport class GetProductsBaseDto {\n  /**\n   * product name\n   */\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  /**\n   * product category\n   */\n  @IsString()\n  @IsOptional()\n  category?: ProductCategory;\n\n  /**\n   * product price\n   */\n  @IsString()\n  @IsOptional()\n  price?: string;\n\n  @IsOptional()\n  @IsString()\n  @IsIn(['newest', 'oldest', 'most_purchased'])\n  sort?: 'newest' | 'oldest' | 'most_purchased';\n}\n\n/**\n * dto for get events\n */\nexport class GetProductsDto extends IntersectionType(\n  GetProductsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GlobalExceptionFilter.html":{"url":"classes/GlobalExceptionFilter.html","title":"class - GlobalExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GlobalExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/global-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                global exception filter\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                buildErrorResponse\n                            \n                            \n                                catch\n                            \n                            \n                                    Private\n                                getControllerName\n                            \n                            \n                                    Private\n                                getHandlerName\n                            \n                            \n                                    Private\n                                getHttpErrorCode\n                            \n                            \n                                    Private\n                                sanitizeDatabaseError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(GlobalExceptionFilter.name)\n                    \n                \n                    \n                        \n                                Defined in src/common/filters/global-exception.filter.ts:70\n                        \n                    \n\n            \n                \n                    logger\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildErrorResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildErrorResponse(exception, request: Request, controller: string, handler: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/global-exception.filter.ts:115\n                        \n                    \n\n\n            \n                \n                        builds the error response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                controller\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                handler\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ErrorResponse\n\n                        \n                            \n                                error response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/global-exception.filter.ts:77\n                        \n                    \n\n\n            \n                \n                        catch function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getControllerName\n                        \n                    \n                \n            \n            \n                \n                        \n                    getControllerName(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/global-exception.filter.ts:175\n                        \n                    \n\n\n            \n                \n                        function for getting the controller name where the error originated from\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                controller name\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getHandlerName\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHandlerName(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/global-exception.filter.ts:193\n                        \n                    \n\n\n            \n                \n                        function for getting the handler name of the handler function where the error originated from\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                the handler name\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getHttpErrorCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHttpErrorCode(status: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/global-exception.filter.ts:209\n                        \n                    \n\n\n            \n                \n                        function for getting the http error code\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                http error code\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeDatabaseError\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeDatabaseError(error: QueryFailedError)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/global-exception.filter.ts:232\n                        \n                    \n\n\n            \n                \n                        function for sanitizing the db error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                        QueryFailedError\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                db error object\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport {\n  QueryFailedError,\n  EntityNotFoundError,\n  CannotCreateEntityIdMapError,\n} from 'typeorm';\n\n/**\n * error response interface\n */\nexport interface ErrorResponse {\n  /**\n   * status code\n   */\n  statusCode: number;\n  /**\n   * timestamp\n   */\n  timestamp: string;\n  /**\n   * controller path\n   */\n  path: string;\n  /**\n   * controller method name\n   */\n  method: string;\n  /**\n   * controller name\n   */\n  controller: string;\n  /**\n   * handler name\n   */\n  handler: string;\n  /**\n   * error type\n   */\n  errorType: string;\n  /**\n   * error code\n   */\n  errorCode: string;\n  /**\n   * error message\n   */\n  message: string;\n  /**\n   * error details\n   */\n  details?: any;\n}\n\n/**\n * global exception filter\n */\n@Catch()\nexport class GlobalExceptionFilter implements ExceptionFilter {\n  /**\n   * logger\n   */\n  private readonly logger = new Logger(GlobalExceptionFilter.name);\n\n  /**\n   * catch function\n   * @param exception\n   * @param host\n   */\n  catch(exception: unknown, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n\n    // Extract controller and handler info from request\n    const controller = this.getControllerName(request);\n\n    console.log('controller: ', controller);\n    const handler = this.getHandlerName(request);\n\n    const errorResponse = this.buildErrorResponse(\n      exception,\n      request,\n      controller,\n      handler,\n    );\n\n    // Log the error with full context\n    this.logger.error(\n      `${errorResponse.errorType} in ${controller}::${handler}`,\n      {\n        ...errorResponse,\n        stack: exception instanceof Error ? exception.stack : undefined,\n      },\n    );\n\n    response.status(errorResponse.statusCode).json(errorResponse);\n  }\n\n  /**\n   * builds the error response\n   * @param exception\n   * @param request\n   * @param controller\n   * @param handler\n   * @returns error response\n   */\n  private buildErrorResponse(\n    exception: unknown,\n    request: Request,\n    controller: string,\n    handler: string,\n  ): ErrorResponse {\n    let status = HttpStatus.INTERNAL_SERVER_ERROR;\n    let message = 'Internal server error';\n    let errorType = 'InternalServerError';\n    let errorCode = 'ERR_INTERNAL';\n    let details: any;\n\n    // Handle different error types\n    if (exception instanceof HttpException) {\n      status = exception.getStatus();\n      message = exception.message;\n      errorType = exception.constructor.name;\n      errorCode = this.getHttpErrorCode(status);\n      details = exception.getResponse();\n    } else if (exception instanceof QueryFailedError) {\n      status = HttpStatus.BAD_REQUEST;\n      message = 'Database query failed';\n      errorType = 'DatabaseError';\n      errorCode = 'ERR_DB_QUERY_FAILED';\n      details = this.sanitizeDatabaseError(exception);\n    } else if (exception instanceof EntityNotFoundError) {\n      status = HttpStatus.NOT_FOUND;\n      message = 'Requested resource not found';\n      errorType = 'EntityNotFoundError';\n      errorCode = 'ERR_ENTITY_NOT_FOUND';\n    } else if (exception instanceof CannotCreateEntityIdMapError) {\n      status = HttpStatus.BAD_REQUEST;\n      message = 'Invalid entity data provided';\n      errorType = 'EntityValidationError';\n      errorCode = 'ERR_ENTITY_VALIDATION';\n    } else if (exception instanceof Error) {\n      message = exception.message;\n      errorType = exception.constructor.name;\n      errorCode = 'ERR_UNKNOWN';\n    }\n\n    return {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      method: request.method,\n      controller,\n      handler,\n      errorType,\n      errorCode,\n      message,\n      details,\n    };\n  }\n\n  /**\n   * function for getting the controller name where the error originated from\n   * @param request\n   * @returns controller name\n   */\n  private getControllerName(request: Request): string {\n    // Extract controller from route path or use reflection metadata\n    const route = request.route?.path || request.url;\n\n    const pathSegments = route.split('/').filter(Boolean);\n\n    if (pathSegments.length > 0) {\n      return `${pathSegments[2].charAt(0).toUpperCase()}${pathSegments[2].slice(1)}Controller`;\n    }\n\n    return 'UnknownController';\n  }\n\n  /**\n   * function for getting the handler name of the handler function where the error originated from\n   * @param request\n   * @returns the handler name\n   */\n  private getHandlerName(request: Request): string {\n    const method = request.method.toLowerCase();\n    const pathSegments = request.url.split('/').filter(Boolean);\n\n    if (pathSegments.length > 1) {\n      return `${method}${pathSegments[pathSegments.length - 1].charAt(0).toUpperCase()}${pathSegments[pathSegments.length - 1].slice(1)}`;\n    }\n\n    return `${method}Handler`;\n  }\n\n  /**\n   * function for getting the http error code\n   * @param status\n   * @returns  http error code\n   */\n  private getHttpErrorCode(status: number): string {\n    const statusCodes = {\n      400: 'ERR_BAD_REQUEST',\n      401: 'ERR_UNAUTHORIZED',\n      403: 'ERR_FORBIDDEN',\n      404: 'ERR_NOT_FOUND',\n      409: 'ERR_CONFLICT',\n      422: 'ERR_VALIDATION',\n      429: 'ERR_RATE_LIMIT',\n      500: 'ERR_INTERNAL',\n      502: 'ERR_BAD_GATEWAY',\n      503: 'ERR_SERVICE_UNAVAILABLE',\n      504: 'ERR_GATEWAY_TIMEOUT',\n    };\n\n    return statusCodes[status] || 'ERR_UNKNOWN_HTTP';\n  }\n\n  /**\n   * function for sanitizing the db error\n   * @param error\n   * @returns db error object\n   */\n  private sanitizeDatabaseError(error: QueryFailedError): any {\n    // Remove sensitive information from database errors\n    return {\n      code: (error as any).code,\n      constraint: (error as any).constraint,\n      table: (error as any).table,\n      column: (error as any).column,\n      // Don't expose raw SQL or sensitive details\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                hashing provider\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePassword\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:19\n                        \n                    \n\n\n            \n                \n                        abstract method for comparing password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:12\n                        \n                    \n\n\n            \n                \n                        abstract method for hashing password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * hashing provider\n */\n@Injectable()\nexport abstract class HashingProvider {\n  /**\n   * abstract method for hashing password\n   * @param data\n   */\n  abstract hashPassword(data: string | Buffer): Promise;\n\n  /**\n   * abstract method for comparing password\n   * @param data\n   * @param encrypted\n   */\n  abstract comparePassword(\n    data: string | Buffer,\n    encrypted: string,\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Order.html":{"url":"entities/Order.html","title":"entity - Order","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Order\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/order.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                billingAddress\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                items\n                            \n                            \n                                    \n                                paymentMethod\n                            \n                            \n                                    \n                                shippingAddress\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                total\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        billingAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OrderItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, orderItem => orderItem.order)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        paymentMethod\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 100, default: 'Mocked Payment Method'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        shippingAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: OrderStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        total\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.orders, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:49\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from '../users/user.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { OrderItem } from './order-item.entity';\nimport { OrderStatus } from './enums/order-status.enum';\n\n@Entity('orders')\nexport class Order {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  total: number;\n\n  @Column({ type: 'enum', enum: OrderStatus, default: OrderStatus.PENDING })\n  status: OrderStatus;\n\n  @Column({\n    type: 'varchar',\n  })\n  shippingAddress: string;\n\n  @Column({\n    type: 'varchar',\n  })\n  billingAddress: string;\n\n  @Column({\n    type: 'varchar',\n    length: 100,\n    default: 'Mocked Payment Method',\n  })\n  paymentMethod: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @ManyToOne(() => User, (user) => user.orders, { onDelete: 'CASCADE' })\n  user: User;\n\n  @OneToMany(() => OrderItem, (orderItem) => orderItem.order)\n  items: OrderItem[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/OrderItem.html":{"url":"entities/OrderItem.html","title":"entity - OrderItem","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  OrderItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/order-item.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                order\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                product\n                            \n                            \n                                    \n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, order => order.items, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Order } from './order.entity';\nimport { Product } from '../products/product.entity';\n\n@Entity('order_items')\nexport class OrderItem {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  quantity: number;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  price: number;\n\n  @ManyToOne(() => Order, (order) => order.items, { onDelete: 'CASCADE' })\n  order: Order;\n\n  @ManyToOne(() => Product, { onDelete: 'CASCADE' })\n  product: Product;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OrdersController.html":{"url":"controllers/OrdersController.html","title":"controller - OrdersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OrdersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/orders.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                orders\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createOrder\n                            \n                            \n                                    \n                                    Async\n                                getOrder\n                            \n                            \n                                    \n                                    Async\n                                getOrders\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrder(userId: string, createOrderDto: CreateOrderDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/orders/orders.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createOrderDto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrder(userId: string, orderId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/orders/orders.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getOrders\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrders(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/orders/orders.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post } from '@nestjs/common';\nimport { OrdersService } from './providers/orders.service';\nimport { ActiveUser } from 'src/auth/decorator/active-user.decorator';\nimport { CreateOrderDto } from './dtos/create-order.dto';\n\n@Controller('orders')\nexport class OrdersController {\n  constructor(\n    /**\n     * injecting the orders service\n     */\n    private readonly ordersService: OrdersService,\n  ) {}\n\n  @Post()\n  async createOrder(\n    @ActiveUser('sub') userId: string,\n    @Body() createOrderDto: CreateOrderDto,\n  ) {\n    return this.ordersService.createOrder(userId, createOrderDto);\n  }\n\n  @Get()\n  async getOrders(@ActiveUser('sub') userId: string) {\n    return this.ordersService.findAllOrders(userId);\n  }\n\n  @Get(':id')\n  async getOrder(\n    @ActiveUser('sub') userId: string,\n    @Param('id') orderId: string,\n  ) {\n    return this.ordersService.findOrderById(userId, orderId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OrdersModule.html":{"url":"modules/OrdersModule.html","title":"module - OrdersModule","body":"\n                   \n\n\n\n\n    Modules\n    OrdersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OrdersModule\n\n\n\ncluster_OrdersModule_providers\n\n\n\ncluster_OrdersModule_imports\n\n\n\n\nCartModule\n\nCartModule\n\n\n\nOrdersModule\n\nOrdersModule\n\nOrdersModule -->\n\nCartModule->OrdersModule\n\n\n\n\n\nCreateOrderProvider\n\nCreateOrderProvider\n\nOrdersModule -->\n\nCreateOrderProvider->OrdersModule\n\n\n\n\n\nFindAllOrdersForUserProvider\n\nFindAllOrdersForUserProvider\n\nOrdersModule -->\n\nFindAllOrdersForUserProvider->OrdersModule\n\n\n\n\n\nFindOrderByIdProvider\n\nFindOrderByIdProvider\n\nOrdersModule -->\n\nFindOrderByIdProvider->OrdersModule\n\n\n\n\n\nOrdersService\n\nOrdersService\n\nOrdersModule -->\n\nOrdersService->OrdersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/orders/orders.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateOrderProvider\n                        \n                        \n                            FindAllOrdersForUserProvider\n                        \n                        \n                            FindOrderByIdProvider\n                        \n                        \n                            OrdersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OrdersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CartModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OrdersController } from './orders.controller';\nimport { OrdersService } from './providers/orders.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Order } from './order.entity';\nimport { OrderItem } from './order-item.entity';\nimport { CreateOrderProvider } from './providers/create-order.provider';\nimport { CartModule } from 'src/cart/cart.module';\nimport { FindAllOrdersForUserProvider } from './providers/find-all-orders-for-user.provider';\nimport { FindOrderByIdProvider } from './providers/find-order-by-id.provider';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Order, OrderItem]), CartModule],\n  controllers: [OrdersController],\n  providers: [\n    OrdersService,\n    CreateOrderProvider,\n    FindAllOrdersForUserProvider,\n    FindOrderByIdProvider,\n  ],\n})\nexport class OrdersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OrdersService.html":{"url":"injectables/OrdersService.html","title":"injectable - OrdersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OrdersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/providers/orders.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createOrder\n                            \n                            \n                                    Async\n                                findAllOrders\n                            \n                            \n                                    Async\n                                findOrderById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createOrderProvider: CreateOrderProvider, findAllOrdersForUserProvider: FindAllOrdersForUserProvider, findOrderByIdProvider: FindOrderByIdProvider)\n                    \n                \n                        \n                            \n                                Defined in src/orders/providers/orders.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createOrderProvider\n                                                  \n                                                        \n                                                                        CreateOrderProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findAllOrdersForUserProvider\n                                                  \n                                                        \n                                                                        FindAllOrdersForUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOrderByIdProvider\n                                                  \n                                                        \n                                                                        FindOrderByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrder(userId: string, createOrderDto: CreateOrderDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/orders.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createOrderDto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllOrders\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllOrders(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/orders.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOrderById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOrderById(userId: string, orderId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/orders.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateOrderProvider } from './create-order.provider';\nimport { CreateOrderDto } from '../dtos/create-order.dto';\nimport { FindAllOrdersForUserProvider } from './find-all-orders-for-user.provider';\nimport { FindOrderByIdProvider } from './find-order-by-id.provider';\n\n@Injectable()\nexport class OrdersService {\n  constructor(\n    /**\n     * createOrder provider\n     */\n    private readonly createOrderProvider: CreateOrderProvider,\n\n    private readonly findAllOrdersForUserProvider: FindAllOrdersForUserProvider,\n\n    private readonly findOrderByIdProvider: FindOrderByIdProvider,\n  ) {}\n\n  async createOrder(userId: string, createOrderDto: CreateOrderDto) {\n    return await this.createOrderProvider.createOrder(userId, createOrderDto);\n  }\n\n  async findAllOrders(userId: string) {\n    return await this.findAllOrdersForUserProvider.findAllOrders(userId);\n  }\n\n  async findOrderById(userId: string, orderId: string) {\n    return await this.findOrderByIdProvider.findOrderById(userId, orderId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/interfaces/paginated.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                interface for the response on paginated queries\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the data to be returned\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    various links for the pages of the data\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the metadata for the data\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n  /**\n   * the data to be returned\n   */\n  data: T[];\n\n  /**\n   * the metadata for the data\n   */\n  meta: {\n    itemsPerPage: number;\n    totalItems: number;\n    currentPage: number;\n    totalPages: number;\n  };\n\n  /**\n   * various links for the pages of the data\n   */\n  links: {\n    first: string;\n    last: string;\n    current: string;\n    next: string;\n    previous: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationProvider } from './providers/pagination.provider';\n\n@Module({\n  providers: [PaginationProvider],\n  exports: [PaginationProvider],\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/providers/pagination.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for pagination\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginationQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/providers/pagination.provider.ts:14\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginationQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginationQuery(paginationQuery: PaginationQueryDto, repository: Repository, options?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/providers/pagination.provider.ts:34\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        function for paginating find all queries\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                data, metadata and links for the findAll queries\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { PaginationQueryDto } from '../dtos/pagination-query.dto';\nimport { ObjectLiteral, Repository } from 'typeorm';\n\n// inorder to inject a request to a provider\nimport { Request } from 'express';\nimport { REQUEST } from '@nestjs/core';\nimport { Paginated } from '../interfaces/paginated.interface';\n\n/**\n * provider for pagination\n */\n@Injectable()\nexport class PaginationProvider {\n  /**\n   * constructor\n   * @param request\n   */\n  constructor(\n    /**\n     * Injecting request\n     */\n    @Inject(REQUEST)\n    private readonly request: Request,\n  ) {}\n\n  /**\n   * function for paginating find all queries\n   * @param paginationQuery\n   * @param repository\n   * @param options\n   * @returns data, metadata and links for the findAll queries\n   */\n  public async paginationQuery(\n    paginationQuery: PaginationQueryDto,\n    repository: Repository,\n    options?: any,\n  ): Promise> {\n    const results = await repository.find({\n      // no of posts to skip in one query\n      skip: (paginationQuery.page - 1) * paginationQuery.limit,\n      // the no of posts to take in one query\n      take: paginationQuery.limit,\n      relations: options.relations,\n      select: options.select,\n      where: options.where,\n      order: options.order,\n    });\n\n    /**\n     * Create the request URLS\n     */\n    const baseURL =\n      this.request.protocol + '://' + this.request.headers.host + '/';\n\n    const newUrl = new URL(this.request.url, baseURL);\n\n    const totalItems = await repository.count({\n      // no of posts to skip in one query\n      skip: (paginationQuery.page - 1) * paginationQuery.limit,\n      // the no of posts to take in one query\n      take: paginationQuery.limit,\n      relations: options.relations,\n      select: options.select,\n      where: options.where,\n    });\n    const totalPages = Math.ceil(totalItems / paginationQuery.limit);\n    const nextPage =\n      paginationQuery.page === totalPages\n        ? paginationQuery.page\n        : paginationQuery.page + 1;\n    const prevPage =\n      paginationQuery.page === 1\n        ? paginationQuery.page\n        : paginationQuery.page - 1;\n\n    const finalResponse: Paginated = {\n      data: results,\n      meta: {\n        itemsPerPage: paginationQuery.limit,\n        totalItems: totalItems,\n        currentPage: paginationQuery.page,\n        totalPages: totalPages,\n      },\n      links: {\n        first: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=1`,\n        last: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${totalPages}`,\n        current: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${paginationQuery.page}`,\n        next: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${nextPage}`,\n        previous: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${prevPage}`,\n      },\n    };\n\n    return finalResponse;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/dtos/pagination-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                dto for the pagination query\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:12\n                        \n                    \n\n            \n                \n                    limit for the number of items in the get all requests\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:19\n                        \n                    \n\n            \n                \n                    page number for the get all requests\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from 'class-validator';\n\n/**\n * dto for the pagination query\n */\nexport class PaginationQueryDto {\n  /**\n   * limit for the number of items in the get all requests\n   */\n  @IsOptional()\n  limit?: number = 0;\n\n  /**\n   * page number for the get all requests\n   */\n  @IsOptional()\n  @IsPositive()\n  page?: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Product.html":{"url":"entities/Product.html","title":"entity - Product","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/product.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                cartItems\n                            \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                imageUrl\n                            \n                            \n                                    \n                                isDeleted\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                orders\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                purchaseCount\n                            \n                            \n                                    \n                                stock\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        cartItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CartItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, cartItem => cartItem.product)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 50, nullable: false, enum: ProductCategory})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()@Index()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 255, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 100, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, order => order.product)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        purchaseCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:45\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  Index,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n} from 'typeorm';\nimport { ProductCategory } from './enums/product-category.enum';\nimport { CartItem } from '../cart/cart-item.entity';\nimport { Order } from '../orders/order.entity';\nimport { OrderItem } from '../orders/order-item.entity';\n\n@Entity('products')\n@Index(['name'])\n@Index(['category'])\nexport class Product {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ length: 100, nullable: false, unique: true })\n  name: string;\n\n  @Column({ length: 50, nullable: false, enum: ProductCategory })\n  category: ProductCategory;\n\n  @Column({ type: 'text', nullable: false })\n  description: string;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2, nullable: false })\n  price: number;\n\n  @Column({ default: 0, nullable: false })\n  stock: number;\n\n  @Column({ length: 255, nullable: true })\n  imageUrl?: string;\n\n  @CreateDateColumn()\n  @Index()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @Column({\n    type: 'boolean',\n    default: false,\n  })\n  isDeleted: boolean;\n\n  @Column({\n    type: 'timestamp',\n    nullable: true,\n  })\n  deletedAt?: Date;\n\n  @Column({\n    default: 0,\n  })\n  purchaseCount: number;\n\n  @OneToMany(() => CartItem, (cartItem) => cartItem.product)\n  cartItems?: CartItem[];\n\n  @OneToMany(() => OrderItem, (order) => order.product)\n  orders: Order[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductsController.html":{"url":"controllers/ProductsController.html","title":"controller - ProductsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                products\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createProduct\n                            \n                            \n                                    \n                                    \n                                deleteProduct\n                            \n                            \n                                    \n                                    \n                                findAllProducts\n                            \n                            \n                                    \n                                    \n                                updateProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProduct(createProductDto: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('')@Roles(Role.ADMIN)\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        deleteProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProduct(productId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.ADMIN)@Delete(':productid')\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAllProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllProducts(productsQuery: GetProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth(AuthType.None)@Get('')\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productsQuery\n                                            \n                                                            GetProductsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updateProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProduct(productId: string, updateProductDto: UpdateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.ADMIN)@Patch(':productid')\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { ProductsService } from './providers/products.service';\nimport { CreateProductDto } from './dtos/create-product.dto';\nimport { Auth } from 'src/auth/decorator/auth.decorator';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { Roles } from 'src/auth/decorator/role.decorator';\nimport { Role } from 'src/auth/enums/role-type.enum';\nimport { Product } from './product.entity';\nimport { GetProductsDto } from './dtos/get-products.dto';\nimport { Paginated } from '../common/pagination/interfaces/paginated.interface';\nimport { UpdateProductDto } from './dtos/update-product.dto';\n\n@Controller('products')\nexport class ProductsController {\n  constructor(\n    /**\n     * injecting the productsService\n     */\n    private readonly productsService: ProductsService,\n  ) {}\n\n  @Post('')\n  @Roles(Role.ADMIN)\n  createProduct(@Body() createProductDto: CreateProductDto): Promise {\n    return this.productsService.createProduct(createProductDto);\n  }\n\n  @Auth(AuthType.None)\n  @Get('')\n  findAllProducts(\n    @Query() productsQuery: GetProductsDto,\n  ): Promise> {\n    return this.productsService.findAllProducts(productsQuery);\n  }\n\n  @Roles(Role.ADMIN)\n  @Patch(':productid')\n  updateProduct(\n    @Param('productid') productId: string,\n    @Body() updateProductDto: UpdateProductDto,\n  ) {\n    return this.productsService.updateProduct(updateProductDto, productId);\n  }\n\n  @Roles(Role.ADMIN)\n  @Delete(':productid')\n  // @HttpCode(204)\n  deleteProduct(@Param('productid') productId: string) {\n    return this.productsService.deleteProduct(productId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductsModule.html":{"url":"modules/ProductsModule.html","title":"module - ProductsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_imports\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_ProductsModule_exports\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nProductsModule\n\nProductsModule\n\nProductsModule -->\n\nPaginationModule->ProductsModule\n\n\n\n\n\nProductsService \n\nProductsService \n\nProductsService  -->\n\nProductsModule->ProductsService \n\n\n\n\n\nCreateProductProvider\n\nCreateProductProvider\n\nProductsModule -->\n\nCreateProductProvider->ProductsModule\n\n\n\n\n\nDeleteProductProvider\n\nDeleteProductProvider\n\nProductsModule -->\n\nDeleteProductProvider->ProductsModule\n\n\n\n\n\nFindAllProductsProvider\n\nFindAllProductsProvider\n\nProductsModule -->\n\nFindAllProductsProvider->ProductsModule\n\n\n\n\n\nFindProductByIdProvider\n\nFindProductByIdProvider\n\nProductsModule -->\n\nFindProductByIdProvider->ProductsModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\nUpdateProductProvider\n\nUpdateProductProvider\n\nProductsModule -->\n\nUpdateProductProvider->ProductsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/products/products.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateProductProvider\n                        \n                        \n                            DeleteProductProvider\n                        \n                        \n                            FindAllProductsProvider\n                        \n                        \n                            FindProductByIdProvider\n                        \n                        \n                            ProductsService\n                        \n                        \n                            UpdateProductProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProductsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductsController } from './products.controller';\nimport { ProductsService } from './providers/products.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Product } from './product.entity';\nimport { CreateProductProvider } from './providers/create-product.provider';\nimport { FindAllProductsProvider } from './providers/find-all-products.provider';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\nimport { UpdateProductProvider } from './providers/update-product.provider';\nimport { DeleteProductProvider } from './providers/delete-product.provider';\nimport { FindProductByIdProvider } from './providers/find-product-by-id.provider';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Product]), PaginationModule],\n  controllers: [ProductsController],\n  providers: [\n    ProductsService,\n    CreateProductProvider,\n    FindAllProductsProvider,\n    UpdateProductProvider,\n    DeleteProductProvider,\n    FindProductByIdProvider,\n  ],\n  exports: [ProductsService, TypeOrmModule],\n})\nexport class ProductsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsService.html":{"url":"injectables/ProductsService.html","title":"injectable - ProductsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/products.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProduct\n                            \n                            \n                                    Async\n                                deleteProduct\n                            \n                            \n                                    Async\n                                findAllProducts\n                            \n                            \n                                    Async\n                                findProductById\n                            \n                            \n                                    Async\n                                updateProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createProductProvider: CreateProductProvider, findAllProductsProvider: FindAllProductsProvider, updateProductProvider: UpdateProductProvider, deleteProductProvider: DeleteProductProvider, findProductByIdProvider: FindProductByIdProvider)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/products.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createProductProvider\n                                                  \n                                                        \n                                                                        CreateProductProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findAllProductsProvider\n                                                  \n                                                        \n                                                                        FindAllProductsProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateProductProvider\n                                                  \n                                                        \n                                                                        UpdateProductProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        deleteProductProvider\n                                                  \n                                                        \n                                                                        DeleteProductProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findProductByIdProvider\n                                                  \n                                                        \n                                                                        FindProductByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProduct(createProductDto: CreateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProduct(productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllProducts(productQuery: GetProductsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productQuery\n                                            \n                                                            GetProductsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findProductById(productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProduct(updateProductDto: UpdateProductDto, productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateProductProvider } from './create-product.provider';\nimport { CreateProductDto } from '../dtos/create-product.dto';\nimport { Product } from '../product.entity';\nimport { FindAllProductsProvider } from './find-all-products.provider';\nimport { GetProductsDto } from '../dtos/get-products.dto';\nimport { Paginated } from '../../common/pagination/interfaces/paginated.interface';\nimport { UpdateProductProvider } from './update-product.provider';\nimport { UpdateProductDto } from '../dtos/update-product.dto';\nimport { DeleteProductProvider } from './delete-product.provider';\nimport { FindProductByIdProvider } from './find-product-by-id.provider';\n\n@Injectable()\nexport class ProductsService {\n  constructor(\n    /**\n     * injecting the create product provider\n     */\n    private readonly createProductProvider: CreateProductProvider,\n\n    /**\n     * injecting the find all products provider\n     */\n    private readonly findAllProductsProvider: FindAllProductsProvider,\n\n    /**\n     * injecting the update product provider\n     */\n    private readonly updateProductProvider: UpdateProductProvider,\n\n    /**\n     * injecting the deleteProductProvider\n     */\n    private readonly deleteProductProvider: DeleteProductProvider,\n\n    /**\n     * injecting the findProductByIdProvider\n     */\n    private readonly findProductByIdProvider: FindProductByIdProvider,\n  ) {}\n\n  async createProduct(createProductDto: CreateProductDto): Promise {\n    return this.createProductProvider.createProduct(createProductDto);\n  }\n\n  async findAllProducts(\n    productQuery: GetProductsDto,\n  ): Promise> {\n    return this.findAllProductsProvider.findAllProducts(productQuery);\n  }\n\n  async updateProduct(\n    updateProductDto: UpdateProductDto,\n    productId: string,\n  ): Promise {\n    return await this.updateProductProvider.updateProduct(\n      updateProductDto,\n      productId,\n    );\n  }\n\n  async deleteProduct(productId: string): Promise {\n    return await this.deleteProductProvider.deleteProduct(productId);\n  }\n\n  async findProductById(productId: string): Promise {\n    return await this.findProductByIdProvider.findProductById(productId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles/roles.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    role guard\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles/roles.guard.ts:16\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles/roles.guard.ts:31\n                        \n                    \n\n\n            \n                \n                        function for validating role of user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true or false depending whether the users role meets the role requirements in the role decorator\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from 'src/auth/constants/role.constant';\nimport { Role } from 'src/auth/enums/role-type.enum';\n\n/**\n * role guard\n */\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  // using static means you can use the name of the property of the class without the \"this\" keyword\n  //   private static readonly defaultRoleType: Role = Role.ADMIN;\n\n  /**\n   * constructor\n   * @param reflector\n   */\n  constructor(private reflector: Reflector) {}\n\n  /**\n   * function for validating role of user\n   * @param context\n   * @returns true or false depending whether the users role meets the role requirements in the role decorator\n   */\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (!requiredRoles) {\n      return true; //  allow access.\n    }\n\n    const { user } = context.switchToHttp().getRequest();\n\n    if (!user) {\n      throw new ForbiddenException('User not found.');\n    }\n\n    const hasRole = requiredRoles.some((role) => user.role === role);\n\n    if (!hasRole) {\n      throw new ForbiddenException(\n        'You do not have permission to access this resource.',\n      );\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SeedProducts1759619432047.html":{"url":"classes/SeedProducts1759619432047.html","title":"class - SeedProducts1759619432047","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SeedProducts1759619432047\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations/1759619432047-SeedProducts.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/migrations/1759619432047-SeedProducts.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/migrations/1759619432047-SeedProducts.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { seedProducts } from '../seed-file';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class SeedProducts1759619432047 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    // Create table if not exists (TypeORM handles this via entity sync, but explicit for migration)\n    await queryRunner.query(`\n      CREATE TABLE IF NOT EXISTS products (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(100) NOT NULL UNIQUE,\n        category VARCHAR(50) NOT NULL,\n        description TEXT NOT NULL,\n        price DECIMAL(10,2) NOT NULL,\n        stock INTEGER NOT NULL DEFAULT 0,\n        \"imageUrl\" VARCHAR(255) NULL,\n        INDEX idx_name (name),\n        INDEX idx_category (category)\n      );\n    `);\n\n    // Insert seed data (ignore duplicates if re-run)\n    https: for (const product of seedProducts) {\n      await queryRunner.query(\n        `INSERT INTO products (name, category, description, price, stock, \"imageUrl\") \n         VALUES ($1, $2, $3, $4, $5, $6) \n         ON CONFLICT (name) DO NOTHING;`, // Assumes name is unique; adjust if needed\n        [\n          product.name,\n          product.category,\n          product.description,\n          product.price,\n          product.stock,\n          product.imageUrl,\n        ],\n      );\n    }\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    // Rollback: Truncate seed data (or drop table if preferred)\n    await queryRunner.query(\n      `TRUNCATE TABLE products RESTART IDENTITY CASCADE;`,\n    );\n    // Alternative full drop: await queryRunner.query(`DROP TABLE IF EXISTS products;`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/sign-in.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                sign in dto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the email of the user', example: 'Favour@gmail.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/sign-in.dto.ts:17\n                        \n                    \n\n            \n                \n                    email address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the password of the user', example: '@Favour233'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/sign-in.dto.ts:28\n                        \n                    \n\n            \n                \n                    password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * sign in dto\n */\nexport class SignInDto {\n  /**\n   * email address\n   */\n  @ApiProperty({\n    description: 'This is the email of the user',\n    example: 'Favour@gmail.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * password\n   */\n  @ApiProperty({\n    description: 'This is the password of the user',\n    example: '@Favour233',\n  })\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SignInProvider.html":{"url":"injectables/SignInProvider.html","title":"injectable - SignInProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SignInProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/sign-in.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for sigining in users\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, hashingProvider: HashingProvider, generateTokenProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/sign-in.provider.ts:17\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.provider.ts:47\n                        \n                    \n\n\n            \n                \n                        function for signing in users\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                access and refresh tokens\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { HashingProvider } from './hashing.provider';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\nimport { SignInDto } from '../dtos/sign-in.dto';\nimport { User } from 'src/users/user.entity';\n\n/**\n * provider for sigining in users\n */\n@Injectable()\nexport class SignInProvider {\n  /**\n   * constructor\n   * @param usersService\n   * @param hashingProvider\n   * @param generateTokenProvider\n   */\n  constructor(\n    /**\n     * injecting the user service\n     */\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n\n    /**\n     * Injecting the hashing provider\n     */\n    private readonly hashingProvider: HashingProvider,\n\n    /**\n     * injecting the generate token provider\n     */\n    private readonly generateTokenProvider: GenerateTokensProvider,\n  ) {}\n\n  /**\n   * function for signing in users\n   * @param signInDto\n   * @returns access and refresh tokens\n   */\n  public async signIn(signInDto: SignInDto): Promise;\n  }> {\n    const user: User = await this.usersService.findUserByEmail(signInDto.email);\n\n    let isPasswordEqual: boolean = false;\n\n    isPasswordEqual = await this.hashingProvider.comparePassword(\n      signInDto.password,\n      user.password,\n    );\n\n    if (!isPasswordEqual) {\n      throw new UnauthorizedException('Incorrect email or password');\n    }\n\n    // generate an access token\n    const { accessToken, refreshToken } =\n      await this.generateTokenProvider.generateTokens(user);\n\n    return {\n      accessToken,\n      refreshToken,\n      user: {\n        id: user.id,\n        firstname: user.firstname,\n        lastname: user.lastname,\n        role: user.role,\n        email: user.email,\n      },\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCartItemDto.html":{"url":"classes/UpdateCartItemDto.html","title":"class - UpdateCartItemDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCartItemDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/dtos/update-cart-item.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/dtos/update-cart-item.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, Min } from 'class-validator';\n\nexport class UpdateCartItemDto {\n  @IsInt()\n  @Min(1)\n  quantity: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UpdateCartItemProvider.html":{"url":"injectables/UpdateCartItemProvider.html","title":"injectable - UpdateCartItemProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UpdateCartItemProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/providers/update-cart-item.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clearCart\n                            \n                            \n                                    Async\n                                decrementQuantity\n                            \n                            \n                                    Async\n                                deductStock\n                            \n                            \n                                    Async\n                                removeFromCart\n                            \n                            \n                                    Async\n                                validateCartStock\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cartItemRepository: Repository, getCartProvider: GetCartProvider, productRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/cart/providers/update-cart-item.provider.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cartItemRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        getCartProvider\n                                                  \n                                                        \n                                                                        GetCartProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        productRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        clearCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearCart(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/update-cart-item.provider.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decrementQuantity\n                        \n                    \n                \n            \n            \n                \n                        \n                    decrementQuantity(userId: string, cartId: string, updateCartItemDto: UpdateCartItemDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/update-cart-item.provider.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCartItemDto\n                                            \n                                                            UpdateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deductStock\n                        \n                    \n                \n            \n            \n                \n                        \n                    deductStock(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/update-cart-item.provider.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeFromCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFromCart(userId: string, cartId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/update-cart-item.provider.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateCartStock\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateCartStock(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/update-cart-item.provider.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { CartItem } from '../cart-item.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Cart } from '../interfaces/cart.interface';\nimport { GetCartProvider } from './get-cart.provider';\nimport { Product } from 'src/products/product.entity';\nimport { UpdateCartItemDto } from '../dtos/update-cart-item.dto';\n\n@Injectable()\nexport class UpdateCartItemProvider {\n  constructor(\n    /**\n     * injecting the cartRepository\n     */\n    @InjectRepository(CartItem)\n    private readonly cartItemRepository: Repository,\n\n    /**\n     * injecting the get cart provider\n     */\n    private readonly getCartProvider: GetCartProvider,\n\n    @InjectRepository(Product)\n    private readonly productRepository: Repository,\n  ) {}\n\n  async decrementQuantity(\n    userId: string,\n    cartId: string,\n    updateCartItemDto: UpdateCartItemDto,\n  ): Promise {\n    const cartItem = await this.cartItemRepository.findOne({\n      where: { user: { id: userId }, id: cartId },\n    });\n\n    if (!cartItem) {\n      throw new NotFoundException('Item not in cart');\n    }\n\n    if (\n      cartItem.quantity  {\n    const cartItem = await this.cartItemRepository.findOne({\n      where: { user: { id: userId }, id: cartId },\n    });\n\n    if (!cartItem) {\n      throw new NotFoundException('Item not in cart');\n    }\n\n    await this.cartItemRepository.softDelete({ id: cartItem.id });\n    return this.getCartProvider.getCart(userId);\n  }\n\n  // For orders: Validate stock before checkout\n  async validateCartStock(userId: string): Promise {\n    const cartItems = await this.cartItemRepository.find({\n      where: { user: { id: userId }, deletedAt: null },\n      relations: ['product'],\n    });\n\n    for (const item of cartItems) {\n      if (item.product.stock  {\n    const cartItems = await this.cartItemRepository.find({\n      where: { user: { id: userId }, deletedAt: null },\n      relations: ['product'],\n    });\n\n    for (const item of cartItems) {\n      item.product.stock -= item.quantity;\n      await this.productRepository.save(item.product);\n    }\n  }\n\n  // Clear cart after order\n  async clearCart(userId: string): Promise {\n    console.log('going..');\n    try {\n      await this.cartItemRepository.softDelete({ user: { id: userId } });\n      console.log('finish');\n    } catch (error) {\n      console.log(error);\n    }\n\n    return {\n      message: 'Cart cleared successfully',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dtos/update-product.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateProductDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isDeleted\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/update-product.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/update-product.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateProductDto } from './create-product.dto';\nimport { IsBoolean, IsOptional } from 'class-validator';\n\nexport class UpdateProductDto extends PartialType(CreateProductDto) {\n  @IsOptional()\n  @IsBoolean()\n  isDeleted?: boolean;\n\n  @IsOptional()\n  deletedAt?: Date | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UpdateProductProvider.html":{"url":"injectables/UpdateProductProvider.html","title":"injectable - UpdateProductProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UpdateProductProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/update-product.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                filterObj\n                            \n                            \n                                    Public\n                                    Async\n                                updateProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/update-product.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        filterObj\n                        \n                    \n                \n            \n            \n                \n                        \n                    filterObj(obj: T, ...allowedFields: ()[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/update-product.provider.ts:42\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                allowedFields\n                                            \n                                                        ()[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Record\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProduct(updateProductDto: UpdateProductDto, productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/update-product.provider.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Product } from '../product.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UpdateProductDto } from '../dtos/update-product.dto';\n\n@Injectable()\nexport class UpdateProductProvider {\n  constructor(\n    /**\n     * injecting the products repository\n     */\n    @InjectRepository(Product)\n    private readonly productsRepository: Repository,\n  ) {}\n\n  public async updateProduct(\n    updateProductDto: UpdateProductDto,\n    productId: string,\n  ): Promise {\n    const product = await this.productsRepository.findOneBy({ id: productId });\n\n    console.log(product);\n\n    if (!product) throw new NotFoundException('Product not found');\n\n    const filteredPayload = this.filterObj(\n      updateProductDto,\n      'description',\n      'price',\n      'stock',\n      'isDeleted',\n      'deletedAt',\n    );\n\n    return await this.productsRepository.save({\n      ...product,\n      ...filteredPayload,\n    });\n  }\n\n  private filterObj>(\n    obj: T,\n    ...allowedFields: (keyof T)[]\n  ) {\n    const newObj = {} as Record;\n    Object.keys(obj).forEach((el) => {\n      if (allowedFields.includes(el)) {\n        newObj[el] = obj[el];\n      }\n    });\n    return newObj;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                cartItems\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    Optional\n                                firstname\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastname\n                            \n                            \n                                    \n                                orders\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        cartItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CartItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, cartItem => cartItem.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()@Index()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, order => order.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, select: false})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Role, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:63\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Role } from '../auth/enums/role-type.enum';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  Index,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { CartItem } from '../cart/cart-item.entity';\nimport { Order } from '../orders/order.entity';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstname?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  lastname: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n\n  @Column({\n    type: 'enum',\n    enum: Role,\n    nullable: false,\n  })\n  role: Role;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    select: false,\n  })\n  @Exclude()\n  password: string;\n\n  @CreateDateColumn()\n  @Index()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @OneToMany(() => CartItem, (cartItem) => cartItem.user)\n  cartItems?: CartItem[];\n\n  @OneToMany(() => Order, (order) => order.user)\n  orders: Order[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Controller handling user-related operations\nBase URL: /users\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new user account', description: 'Register a new user with personal details and credentials. Password will be securely hashed.'})@ApiBody({description: 'User registration details', required: true, type: CreateUserDto, examples: undefined})@ApiResponse({status: 201, description: 'User account created successfully. Returns user details without password.', schema: undefined})@ApiResponse({status: 400, description: user with {email} already exists})@Post('')@HttpCode(HttpStatus.CREATED)@Auth(AuthType.None)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:82\n                        \n                    \n\n\n            \n                \n                        Creates a new user account with the provided user details\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user registration data including firstName, lastName, email and password\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                Promise - The created user object (password excluded from response)\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { User } from './user.entity';\nimport { ApiBody, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { Auth } from 'src/auth/decorator/auth.decorator';\nimport { UsersService } from './providers/users.service';\nimport { Role } from 'src/auth/enums/role-type.enum';\nimport { CreateUserDto } from './dtos/create-user.dto';\n\n/**\n * Controller handling user-related operations\n * Base URL: /users\n */\n@ApiTags('Users')\n@Controller('users')\nexport class UsersController {\n  constructor(\n    /**\n     * Injecting the users service for user-related operations\n     */\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * Creates a new user account with the provided user details\n   *\n   * @param createUserDto - The user registration data including firstName, lastName, email and password\n   * @returns Promise - The created user object (password excluded from response)\n   */\n  @ApiOperation({\n    summary: 'Create a new user account',\n    description:\n      'Register a new user with personal details and credentials. Password will be securely hashed.',\n  })\n  @ApiBody({\n    description: 'User registration details',\n    required: true,\n    type: CreateUserDto,\n    examples: {\n      validUser: {\n        summary: 'Valid user registration',\n        value: {\n          firstname: 'Kelechi',\n          lastname: 'Agnes',\n          email: 'iloghaluagneskc@gmail.com',\n          password: '@Password1',\n        },\n      },\n      invalidUser: {\n        summary: 'Invalid registration - missing password',\n        value: {\n          firstname: 'Kelechi',\n          lastname: 'Agnes',\n          email: 'iloghaluagneskc@gmail.com',\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 201,\n    description:\n      'User account created successfully. Returns user details without password.',\n    schema: {\n      type: 'object',\n      properties: {\n        id: { type: 'string', example: 'uuid-string' },\n        firstName: { type: 'string', example: 'John' },\n        lastName: { type: 'string', example: 'Doe' },\n        email: { type: 'string', example: 'john.doe@example.com' },\n        role: { type: 'string', example: Role.USER },\n        createdAt: { type: 'string', format: 'date-time' },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 400,\n    description: `user with {email} already exists`,\n  })\n  @Post('')\n  @HttpCode(HttpStatus.CREATED)\n  @Auth(AuthType.None)\n  public createUser(\n    @Body() createUserDto: CreateUserDto,\n  ): Promise> {\n    return this.usersService.createUser(createUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindUserByEmailProvider\n\nFindUserByEmailProvider\n\nUsersModule -->\n\nFindUserByEmailProvider->UsersModule\n\n\n\n\n\nFindUserByIdProvider\n\nFindUserByIdProvider\n\nUsersModule -->\n\nFindUserByIdProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateUserProvider\n                        \n                        \n                            FindUserByEmailProvider\n                        \n                        \n                            FindUserByIdProvider\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { CreateUserProvider } from './providers/create-user.provider';\nimport { FindUserByEmailProvider } from './providers/find-user-by-email.provider';\nimport { FindUserByIdProvider } from './providers/find-user-by-id.provider';\n\n@Module({\n  imports: [forwardRef(() => AuthModule), TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [\n    UsersService,\n    CreateUserProvider,\n    FindUserByEmailProvider,\n    FindUserByIdProvider,\n  ],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findUserById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createUserProvider: CreateUserProvider, findUserByEmailProvider: FindUserByEmailProvider, findUserByIdProvider: FindUserByIdProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findUserByEmailProvider\n                                                  \n                                                        \n                                                                        FindUserByEmailProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findUserByIdProvider\n                                                  \n                                                        \n                                                                        FindUserByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:32\n                        \n                    \n\n\n            \n                \n                        service for creating a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                User\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserById(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateUserProvider } from './create-user.provider';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { User } from '../user.entity';\nimport { FindUserByEmailProvider } from './find-user-by-email.provider';\nimport { FindUserByIdProvider } from './find-user-by-id.provider';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    /**\n     * injecting the create user provider\n     */\n    private readonly createUserProvider: CreateUserProvider,\n\n    /**\n     * injecting the find user by email provider\n     */\n    private readonly findUserByEmailProvider: FindUserByEmailProvider,\n\n    /**\n     * injecting the find user by id provider\n     */\n    private readonly findUserByIdProvider: FindUserByIdProvider,\n  ) {}\n\n  /**\n   * service for creating a user\n   * @param createUserDto\n   * @returns User\n   */\n  public async createUser(\n    createUserDto: CreateUserDto,\n  ): Promise> {\n    return await this.createUserProvider.createUser(createUserDto);\n  }\n\n  public async findUserByEmail(email: string): Promise {\n    return await this.findUserByEmailProvider.findUserByEmail(email);\n  }\n\n  public async findUserById(userId: string): Promise {\n    return await this.findUserByIdProvider.findUserById(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationException.html":{"url":"classes/ValidationException.html","title":"class - ValidationException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/common-exceptions.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                validation exception\n\n            \n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(errors: string[])\n                    \n                \n                        \n                            \n                                Defined in src/common/filters/common-exceptions.filter.ts:28\n                            \n                        \n\n                \n                    \n                            constructor for the validation exception\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        errors\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\n/**\n * database connection exception\n */\nexport class DatabaseConnectionException extends HttpException {\n  /**\n   * constructor for the database connection exception\n   * @param operation\n   */\n  constructor(operation?: string) {\n    super(\n      {\n        message:\n          'Unable to process your request at the moment, please try later',\n        description: 'Error connecting to the database',\n        operation,\n        errorCode: 'ERR_DB_CONNECTION',\n      },\n      HttpStatus.REQUEST_TIMEOUT,\n    );\n  }\n}\n\n/**\n * validation exception\n */\nexport class ValidationException extends HttpException {\n  /**\n   * constructor for the validation exception\n   * @param errors\n   */\n  constructor(errors: string[]) {\n    super(\n      {\n        message: 'Validation failed',\n        errors,\n        errorCode: 'ERR_VALIDATION',\n      },\n      HttpStatus.BAD_REQUEST,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/app.module.ts\n            \n            variable\n            ENV\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/auth/constants/auth.constant.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/constants/auth.constant.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/constants/role.constant.ts\n            \n            variable\n            ROLES_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/decorator/active-user.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/decorator/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/decorator/role.decorator.ts\n            \n            variable\n            Roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/sign-in.dto.ts\n            \n            class\n            SignInDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/guards/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/interfaces/active-user-data.interface.ts\n            \n            interface\n            ActiveUserData\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-tokens.provider.ts\n            \n            injectable\n            GenerateTokensProvider\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/providers/sign-in.provider.ts\n            \n            injectable\n            SignInProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/cart/cart-item.entity.ts\n            \n            entity\n            CartItem\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/cart/cart.controller.ts\n            \n            controller\n            CartController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/cart/dtos/create-cart-item.dto.ts\n            \n            class\n            CreateCartItemDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/cart/dtos/update-cart-item.dto.ts\n            \n            class\n            UpdateCartItemDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/cart/interfaces/cart.interface.ts\n            \n            interface\n            Cart\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cart/providers/add-to-cart.provider.ts\n            \n            injectable\n            AddToCartProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/cart/providers/cart.service.ts\n            \n            injectable\n            CartService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/cart/providers/get-cart.provider.ts\n            \n            injectable\n            GetCartProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cart/providers/update-cart-item.provider.ts\n            \n            injectable\n            UpdateCartItemProvider\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/common/filters/common-exceptions.filter.ts\n            \n            class\n            DatabaseConnectionException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/filters/common-exceptions.filter.ts\n            \n            class\n            ValidationException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/filters/global-exception.filter.ts\n            \n            class\n            GlobalExceptionFilter\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/common/filters/global-exception.filter.ts\n            \n            interface\n            ErrorResponse\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/common/interceptors/data-response/data-response.interceptor.ts\n            \n            injectable\n            DataResponseInterceptor\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/error-handling/error-handling.interceptor.ts\n            \n            injectable\n            ErrorHandlingInterceptor\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/pagination/dtos/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/pagination/interfaces/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/pagination/providers/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/migrations/1759619432047-SeedProducts.ts\n            \n            class\n            SeedProducts1759619432047\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/orders/dtos/create-order.dto.ts\n            \n            class\n            CreateOrderDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/orders/order-item.entity.ts\n            \n            entity\n            OrderItem\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/orders/order.entity.ts\n            \n            entity\n            Order\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/orders/orders.controller.ts\n            \n            controller\n            OrdersController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/orders/providers/create-order.provider.ts\n            \n            injectable\n            CreateOrderProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/orders/providers/find-all-orders-for-user.provider.ts\n            \n            injectable\n            FindAllOrdersForUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/orders/providers/find-order-by-id.provider.ts\n            \n            injectable\n            FindOrderByIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/orders/providers/orders.service.ts\n            \n            injectable\n            OrdersService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/products/dtos/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/products/dtos/get-products.dto.ts\n            \n            class\n            GetProductsBaseDto\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/products/dtos/get-products.dto.ts\n            \n            class\n            GetProductsDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/products/dtos/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/product.entity.ts\n            \n            entity\n            Product\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/products/product.entity.ts\n            \n            class\n            Product\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/products/products.controller.ts\n            \n            controller\n            ProductsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/products/providers/create-product.provider.ts\n            \n            injectable\n            CreateProductProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/providers/delete-product.provider.ts\n            \n            injectable\n            DeleteProductProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/providers/find-all-products.provider.ts\n            \n            injectable\n            FindAllProductsProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/products/providers/find-product-by-id.provider.ts\n            \n            injectable\n            FindProductByIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/providers/products.service.ts\n            \n            injectable\n            ProductsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/products/providers/update-product.provider.ts\n            \n            injectable\n            UpdateProductProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/seed-file.ts\n            \n            variable\n            seedProducts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/users/providers/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-user-by-email.provider.ts\n            \n            injectable\n            FindUserByEmailProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-user-by-id.provider.ts\n            \n            injectable\n            FindUserByIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (2/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            bcrypt : ^6.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            dotenv : ^17.2.3\n        \n            joi : ^18.0.1\n        \n            pg : ^8.16.3\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.27\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth-type.enum.ts)\n                        \n                        \n                            OrderStatus   (src/.../order-status.enum.ts)\n                        \n                        \n                            ProductCategory   (src/.../product-category.enum.ts)\n                        \n                        \n                            Role   (src/.../role-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/auth-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n    src/orders/enums/order-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 CONFIRMED\n                            \n                        \n                        \n                            \n                                Value : confirmed\n                            \n                        \n                        \n                            \n                                 SHIPPED\n                            \n                        \n                        \n                            \n                                Value : shipped\n                            \n                        \n                        \n                            \n                                 DELIVERED\n                            \n                        \n                        \n                            \n                                Value : delivered\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n    src/products/enums/product-category.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ProductCategory\n                    \n                \n                        \n                            \n                                 UTENSILS\n                            \n                        \n                        \n                            \n                                Value : Utensils\n                            \n                        \n                        \n                            \n                                 STORAGE\n                            \n                        \n                        \n                            \n                                Value : Storage\n                            \n                        \n                        \n                            \n                                 DRINKWARE\n                            \n                        \n                        \n                            \n                                Value : Drinkware\n                            \n                        \n                        \n                            \n                                 CLEANING\n                            \n                        \n                        \n                            \n                                Value : Cleaning\n                            \n                        \n                        \n                            \n                                 BAKING\n                            \n                        \n                        \n                            \n                                Value : Baking\n                            \n                        \n                        \n                            \n                                 CUTTING\n                            \n                        \n                        \n                            \n                                Value : Cutting\n                            \n                        \n                        \n                            \n                                 SERVWARE\n                            \n                        \n                        \n                            \n                                Value : Serveware\n                            \n                        \n            \n        \n\n    src/auth/enums/role-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CartModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OrdersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CartModule\n\n\n\ncluster_CartModule_imports\n\n\n\ncluster_CartModule_exports\n\n\n\ncluster_CartModule_providers\n\n\n\ncluster_OrdersModule\n\n\n\ncluster_OrdersModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_exports\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nCartModule\n\nCartModule\n\n\n\nOrdersModule\n\nOrdersModule\n\nOrdersModule -->\n\nCartModule->OrdersModule\n\n\n\nAppModule -->\n\nCartModule->AppModule\n\n\n\n\n\nCartService \n\nCartService \n\nCartService  -->\n\nCartModule->CartService \n\n\n\nAppModule -->\n\nOrdersModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nCartModule -->\n\nProductsModule->CartModule\n\n\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nProductsService \n\nProductsService \n\nProductsService  -->\n\nProductsModule->ProductsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nCartModule -->\n\nUsersModule->CartModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\nProduct\n\nProduct\n\nCartModule -->\n\nProduct->CartModule\n\n\n\n\n\nAddToCartProvider\n\nAddToCartProvider\n\nCartModule -->\n\nAddToCartProvider->CartModule\n\n\n\n\n\nCartService\n\nCartService\n\nCartModule -->\n\nCartService->CartModule\n\n\n\n\n\nGetCartProvider\n\nGetCartProvider\n\nCartModule -->\n\nGetCartProvider->CartModule\n\n\n\n\n\nUpdateCartItemProvider\n\nUpdateCartItemProvider\n\nCartModule -->\n\nUpdateCartItemProvider->CartModule\n\n\n\n\n\nCreateOrderProvider\n\nCreateOrderProvider\n\nOrdersModule -->\n\nCreateOrderProvider->OrdersModule\n\n\n\n\n\nFindAllOrdersForUserProvider\n\nFindAllOrdersForUserProvider\n\nOrdersModule -->\n\nFindAllOrdersForUserProvider->OrdersModule\n\n\n\n\n\nFindOrderByIdProvider\n\nFindOrderByIdProvider\n\nOrdersModule -->\n\nFindOrderByIdProvider->OrdersModule\n\n\n\n\n\nOrdersService\n\nOrdersService\n\nOrdersModule -->\n\nOrdersService->OrdersModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nProductsModule -->\n\nPaginationModule->ProductsModule\n\n\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nCreateProductProvider\n\nCreateProductProvider\n\nProductsModule -->\n\nCreateProductProvider->ProductsModule\n\n\n\n\n\nDeleteProductProvider\n\nDeleteProductProvider\n\nProductsModule -->\n\nDeleteProductProvider->ProductsModule\n\n\n\n\n\nFindAllProductsProvider\n\nFindAllProductsProvider\n\nProductsModule -->\n\nFindAllProductsProvider->ProductsModule\n\n\n\n\n\nFindProductByIdProvider\n\nFindProductByIdProvider\n\nProductsModule -->\n\nFindProductByIdProvider->ProductsModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\nUpdateProductProvider\n\nUpdateProductProvider\n\nProductsModule -->\n\nUpdateProductProvider->ProductsModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindUserByEmailProvider\n\nFindUserByEmailProvider\n\nUsersModule -->\n\nFindUserByEmailProvider->UsersModule\n\n\n\n\n\nFindUserByIdProvider\n\nFindUserByIdProvider\n\nUsersModule -->\n\nFindUserByIdProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    27 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../active-user.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.constant.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constant.ts)\n                        \n                        \n                            Roles   (src/.../role.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../role.constant.ts)\n                        \n                        \n                            seedProducts   (src/.../seed-file.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorator/active-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof ActiveUserData | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user: ActiveUserData = request[REQUEST_USER_KEY];\n\n    return field ? user?.[field] : user;\n  },\n)\n                    \n                \n\n            \n                \n                    Custom param decorator for the active user\n\n                \n            \n\n        \n    \n\n    src/auth/decorator/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) =>\n  SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n            \n                \n                    decorator for guarding user authentication\n\n                \n            \n\n        \n    \n\n    src/auth/constants/auth.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n            \n                \n                    constant for auth type\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n            \n                \n                    constant for request user\n\n                \n            \n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n            \n                \n                    app environment\n\n                \n            \n\n        \n    \n\n    src/auth/decorator/role.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n            \n                \n                    decoraror for gaurding the user roles\n\n                \n            \n\n        \n    \n\n    src/auth/constants/role.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n            \n                \n                    constant for the roles\n\n                \n            \n\n        \n    \n\n    src/seed-file.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        seedProducts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  // Utensils (6 products)\n  {\n    name: 'Bamboo Cutlery Set',\n    category: 'Utensils',\n    description: 'Sustainable fork, knife, spoon set – zero plastic waste.',\n    price: 12.0,\n    stock: 50,\n    imageUrl:\n      'https://images.unsplash.com/photo-1610701596007-11502861dcfa?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Reusable Silicone Spatulas',\n    category: 'Utensils',\n    description:\n      'Durable, heat-resistant spatulas made from food-grade silicone.',\n    price: 8.0,\n    stock: 30,\n    imageUrl:\n      'https://images.unsplash.com/photo-1556909212-d5b604d0c90d?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Wooden Spoons Set',\n    category: 'Utensils',\n    description:\n      'Handcrafted from FSC-certified wood, perfect for non-stick cookware.',\n    price: 5.0,\n    stock: 75,\n    imageUrl:\n      'https://images.unsplash.com/photo-1599751449307-1fc0b1e4e841?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Bamboo Whisk',\n    category: 'Utensils',\n    description:\n      'Eco whisk for whipping eggs or sauces without synthetic bristles.',\n    price: 6.5,\n    stock: 40,\n    imageUrl:\n      'https://images.unsplash.com/photo-1578916171728-46686eac8d58?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Silicone Tongs',\n    category: 'Utensils',\n    description:\n      'BPA-free silicone-coated tongs for safe flipping and gripping.',\n    price: 7.5,\n    stock: 55,\n    imageUrl:\n      'https://images.unsplash.com/photo-1584990347449-39d4a3b91a7d?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Coconut Shell Ladle',\n    category: 'Utensils',\n    description: 'Hand-carved from natural coconut shell, fully biodegradable.',\n    price: 9.0,\n    stock: 35,\n    imageUrl:\n      'https://images.unsplash.com/photo-1606923829579-0cb981a83e2e?w=400&h=400&fit=crop',\n  },\n  // Storage (6 products)\n  {\n    name: 'Beeswax Wraps Pack',\n    category: 'Storage',\n    description:\n      'Natural beeswax-coated cotton wraps – reusable alternative to plastic.',\n    price: 10.0,\n    stock: 60,\n    imageUrl:\n      'https://images.unsplash.com/photo-1591361443450-a891a97c1d35?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Glass Jars with Lids',\n    category: 'Storage',\n    description:\n      'Borosilicate glass jars for dry goods storage, airtight bamboo lids.',\n    price: 15.0,\n    stock: 25,\n    imageUrl:\n      'https://images.unsplash.com/photo-1590736969955-71cc94901144?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Bamboo Food Containers',\n    category: 'Storage',\n    description:\n      'Leak-proof bamboo fiber containers, microwave-safe and compostable.',\n    price: 18.0,\n    stock: 35,\n    imageUrl:\n      'https://images.unsplash.com/photo-1584862728452-2750a74f824d?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Silicone Food Bags',\n    category: 'Storage',\n    description:\n      'Reusable zip-lock bags made from platinum silicone, freezer-safe.',\n    price: 9.5,\n    stock: 45,\n    imageUrl:\n      'https://images.unsplash.com/photo-1620799140408-edc6dcb6d633?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Stainless Steel Canisters',\n    category: 'Storage',\n    description: 'Rust-proof stainless steel canisters with eco cork seals.',\n    price: 22.0,\n    stock: 20,\n    imageUrl:\n      'https://images.unsplash.com/photo-1609840114035-3c981769e3ad?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Fabric Produce Bags',\n    category: 'Storage',\n    description:\n      'Organic cotton mesh bags for fresh produce – washable and breathable.',\n    price: 6.0,\n    stock: 80,\n    imageUrl:\n      'https://images.unsplash.com/photo-1591086509456-4e566b60f93f?w=400&h=400&fit=crop',\n  },\n  // Drinkware (6 products)\n  {\n    name: 'Stainless Steel Tumbler',\n    category: 'Drinkware',\n    description:\n      'Insulated 20oz tumbler keeps drinks hot/cold for 24 hours, BPA-free.',\n    price: 20.0,\n    stock: 20,\n    imageUrl:\n      'https://images.unsplash.com/photo-1602143407151-7111542de6e8?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Bamboo Straws Pack (10-pack)',\n    category: 'Drinkware',\n    description:\n      'Reusable bamboo straws with cleaning brush – naturally antibacterial.',\n    price: 4.0,\n    stock: 100,\n    imageUrl:\n      'https://images.unsplash.com/photo-1528821128474-27f963b062bf?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Reusable Coffee Filters',\n    category: 'Drinkware',\n    description:\n      'Gold-tone mesh filters for pour-over coffee, reduces paper waste.',\n    price: 7.0,\n    stock: 55,\n    imageUrl:\n      'https://images.unsplash.com/photo-1514432324607-a09d9b4aefdd?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Glass Water Bottle',\n    category: 'Drinkware',\n    description:\n      '32oz borosilicate glass bottle with silicone sleeve and bamboo cap.',\n    price: 16.0,\n    stock: 15,\n    imageUrl:\n      'https://images.unsplash.com/photo-1602143407151-7111542de6e8?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Ceramic Mug Set',\n    category: 'Drinkware',\n    description:\n      'Hand-thrown ceramic mugs from recycled clay – microwave safe.',\n    price: 14.0,\n    stock: 40,\n    imageUrl:\n      'https://images.unsplash.com/photo-1514228742587-6b1558fcca3d?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Collapsible Silicone Cup',\n    category: 'Drinkware',\n    description: 'Portable 12oz cup folds flat, made from food-safe silicone.',\n    price: 11.0,\n    stock: 65,\n    imageUrl:\n      'https://images.unsplash.com/photo-1517487881594-2787fef5ebf7?w=400&h=400&fit=crop',\n  },\n  // Cleaning (5 products)\n  {\n    name: 'Eco Sponge Set',\n    category: 'Cleaning',\n    description: 'Plant-based cellulose sponges – biodegradable and scrubby.',\n    price: 5.5,\n    stock: 90,\n    imageUrl:\n      'https://images.unsplash.com/photo-1563453392212-326f5e854473?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Bamboo Scrub Brush',\n    category: 'Cleaning',\n    description: 'Natural fiber bristles on bamboo handle – compostable.',\n    price: 4.5,\n    stock: 70,\n    imageUrl:\n      'https://images.unsplash.com/photo-1585421514738-01798e348b17?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Coconut Coir Dish Brush',\n    category: 'Cleaning',\n    description:\n      'Stiff coir fibers from coconut husks for tough grease removal.',\n    price: 6.0,\n    stock: 50,\n    imageUrl:\n      'https://images.unsplash.com/photo-1600334129128-685c5582fd35?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Reusable Microfiber Cloths',\n    category: 'Cleaning',\n    description: 'Washable cloths trap dust and spills without chemicals.',\n    price: 8.0,\n    stock: 85,\n    imageUrl:\n      'https://images.unsplash.com/photo-1583947215259-38e31be8751f?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Wooden Bottle Brush',\n    category: 'Cleaning',\n    description:\n      'FSC wood handle with natural bristles for deep cleaning bottles.',\n    price: 7.0,\n    stock: 60,\n    imageUrl:\n      'https://images.unsplash.com/photo-1600334089648-b0d9d3028eb2?w=400&h=400&fit=crop',\n  },\n  // Baking (5 products)\n  {\n    name: 'Silicone Baking Mat',\n    category: 'Baking',\n    description: 'Non-stick, reusable mat – replaces parchment paper.',\n    price: 13.0,\n    stock: 45,\n    imageUrl:\n      'https://images.unsplash.com/photo-1586444248902-2f64eddc13df?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Wooden Rolling Pin',\n    category: 'Baking',\n    description: 'Smooth FSC beechwood rolling pin for dough prep.',\n    price: 10.0,\n    stock: 55,\n    imageUrl:\n      'https://images.unsplash.com/photo-1586444248902-2f64eddc13df?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Bamboo Pastry Board',\n    category: 'Baking',\n    description: 'Portable bamboo board with measurements for precise baking.',\n    price: 16.0,\n    stock: 30,\n    imageUrl:\n      'https://images.unsplash.com/photo-1495474472287-4d71bcdd2085?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Silicone Muffin Cups',\n    category: 'Baking',\n    description: 'Food-grade silicone cups – oven-safe up to 450°F.',\n    price: 9.0,\n    stock: 75,\n    imageUrl:\n      'https://images.unsplash.com/photo-1486427944299-d1955d23e34d?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Eco Cooling Rack',\n    category: 'Baking',\n    description: 'Stainless steel rack with bamboo frame – rust-resistant.',\n    price: 12.5,\n    stock: 40,\n    imageUrl:\n      'https://images.unsplash.com/photo-1556910103-1c02745aae4d?w=400&h=400&fit=crop',\n  },\n  // Cutting (6 products)\n  {\n    name: 'Bamboo Cutting Board',\n    category: 'Cutting',\n    description: 'Antibacterial bamboo board – gentle on knives.',\n    price: 19.0,\n    stock: 25,\n    imageUrl:\n      'https://images.unsplash.com/photo-1594756202469-9ff9799b2e4e?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Eco Knife Set',\n    category: 'Cutting',\n    description: 'Recycled stainless steel knives with bamboo handles.',\n    price: 28.0,\n    stock: 15,\n    imageUrl:\n      'https://images.unsplash.com/photo-1593618998160-e34014e67546?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Silicone Gripping Mat',\n    category: 'Cutting',\n    description: 'Non-slip mat for stable chopping – rolls up for storage.',\n    price: 11.0,\n    stock: 65,\n    imageUrl:\n      'https://images.unsplash.com/photo-1556911220-bff31c812dba?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Wooden Salad Bowl',\n    category: 'Cutting',\n    description: 'Acacia wood bowl for prepping and serving salads.',\n    price: 14.5,\n    stock: 35,\n    imageUrl:\n      'https://images.unsplash.com/photo-1547928576-d6a59a2e2f3e?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Herb Scissors',\n    category: 'Cutting',\n    description: 'Stainless steel scissors for quick herb chopping.',\n    price: 8.5,\n    stock: 80,\n    imageUrl:\n      'https://images.unsplash.com/photo-1464226184884-fa280b87c399?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Peeler Set',\n    category: 'Cutting',\n    description: 'Ergonomic bamboo-handled peelers for veggies and fruits.',\n    price: 7.0,\n    stock: 70,\n    imageUrl:\n      'https://images.unsplash.com/photo-1556909212-d5b604d0c90d?w=400&h=400&fit=crop',\n  },\n  // Serveware (6 products)\n  {\n    name: 'Bamboo Serving Platter',\n    category: 'Serveware',\n    description: 'Elegant bamboo platter for appetizers and mains.',\n    price: 17.0,\n    stock: 40,\n    imageUrl:\n      'https://images.unsplash.com/photo-1606923829579-0cb981a83e2e?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Compostable Napkins Pack',\n    category: 'Serveware',\n    description: 'Unbleached bamboo fiber napkins – fully compostable.',\n    price: 5.0,\n    stock: 100,\n    imageUrl:\n      'https://images.unsplash.com/photo-1604335399105-a0c585fd81a1?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Ceramic Serving Bowl',\n    category: 'Serveware',\n    description: 'Glazed ceramic bowl from sustainable clay sources.',\n    price: 21.0,\n    stock: 20,\n    imageUrl:\n      'https://images.unsplash.com/photo-1578916171728-46686eac8d58?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Wooden Cheese Board',\n    category: 'Serveware',\n    description: 'Olive wood board with natural oils for cheese serving.',\n    price: 24.0,\n    stock: 18,\n    imageUrl:\n      'https://images.unsplash.com/photo-1452251889946-8ff5ea7f27f3?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Silicone Trivet Set',\n    category: 'Serveware',\n    description: 'Heat-resistant trivets protect tables from hot dishes.',\n    price: 10.5,\n    stock: 50,\n    imageUrl:\n      'https://images.unsplash.com/photo-1556911220-bff31c812dba?w=400&h=400&fit=crop',\n  },\n  {\n    name: 'Bamboo Coasters (Set of 6)',\n    category: 'Serveware',\n    description: 'Engraved bamboo coasters – absorbent and stylish.',\n    price: 9.0,\n    stock: 75,\n    imageUrl:\n      'https://images.unsplash.com/photo-1577705998148-6da4f3963bc8?w=400&h=400&fit=crop',\n  },\n]\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
