var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.353,1,2.668]],["body/guards/AccessTokenGuard.html",[0,2.96,1,3.356,2,2.546,3,0.12,4,0.107,5,0.107,6,5.521,7,4.57,8,3.075,9,0.822,10,4.316,11,5.2,12,0.205,13,0.836,14,1.51,15,4.977,16,1.348,17,5.017,18,1.324,19,3.075,20,6.364,21,5.521,22,5.521,23,0.494,24,3.535,25,1.01,26,0.014,27,0.795,28,0.364,29,0.73,30,3.934,31,3.976,32,3.535,33,2.678,34,4.364,35,1.424,36,2.96,37,1.058,38,1.396,39,3.089,40,2.8,41,4.364,42,3.356,43,4.364,44,5.017,45,4.154,46,3.535,47,5.017,48,5.017,49,0.628,50,2.96,51,0.291,52,3.653,53,0.334,54,3.901,55,0.405,56,2.215,57,2.365,58,2.365,59,2.546,60,3.535,61,2.772,62,3.075,63,0.12,64,0.039,65,1.873,66,1.898,67,1.009,68,2.546,69,2.546,70,3.075,71,1.586,72,3.075,73,3.535,74,2.117,75,1.739,76,2.086,77,3.934,78,0.949,79,3.535,80,3.535,81,3.075,82,4.364,83,4.364,84,3.143,85,4.364,86,3.934,87,4.364,88,4.364,89,4.364,90,2.086,91,4.364,92,0.869,93,3.535,94,0.008,95,0.008]],["title/interfaces/ActiveUserData.html",[96,2.011,97,2.668]],["body/interfaces/ActiveUserData.html",[3,0.185,4,0.164,5,0.164,9,1.262,12,0.315,26,0.014,28,0.45,35,1.804,49,1.014,63,0.185,77,4.255,94,0.011,95,0.011,96,3.361,97,4.459,98,3.63,99,4.72,100,4.72,101,4.72,102,1.854,103,3.782,104,3.615,105,6.544,106,2.067]],["title/injectables/AddToCartProvider.html",[53,0.266,107,2.498]],["body/injectables/AddToCartProvider.html",[3,0.146,4,0.13,5,0.13,12,0.25,13,0.957,14,1.674,16,1.388,18,1.199,23,0.487,25,0.995,26,0.014,27,0.783,28,0.358,29,0.719,35,0.965,37,0.717,38,1.598,49,0.809,51,0.325,53,0.383,54,2.878,55,0.492,63,0.146,64,0.047,67,1.388,71,1.075,78,1.155,94,0.01,95,0.01,107,3.598,108,1.075,109,5.623,110,3.373,111,5.069,112,4.302,113,4.362,114,4.213,115,5.069,116,2.911,117,4.213,118,4.302,119,3.373,120,4.729,121,4.302,122,2.528,123,4.302,124,1.978,125,3.305,126,3.098,127,3.373,128,1.197,129,2.169,130,2.279,131,1.894,132,1.491,133,3.098,134,3.742,135,1.919,136,1.717,137,3.042,138,2.538,139,2.878,140,3.373,141,1.816,142,3.742,143,4.302,144,4.302,145,3.742]],["title/controllers/AppController.html",[146,1.615,147,2.872]],["body/controllers/AppController.html",[3,0.196,4,0.174,5,0.174,12,0.334,13,1.151,23,0.487,26,0.014,37,0.958,49,0.864,51,0.289,55,0.658,63,0.196,64,0.063,67,1.157,92,0.996,94,0.012,95,0.012,146,2.796,147,4.971,148,2.531,149,5.001,150,6.674,151,1.919,152,5.749,153,4.634,154,5.001,155,5.001,156,5.749]],["title/modules/AppModule.html",[157,1.615,158,2.872]],["body/modules/AppModule.html",[1,3.406,3,0.123,4,0.109,5,0.109,7,2.6,26,0.014,28,0.225,39,2.697,40,2.841,51,0.337,52,2.261,55,0.413,56,2.261,57,2.415,59,2.6,63,0.123,64,0.04,71,0.902,92,0.625,94,0.009,95,0.009,132,1.251,147,4.247,148,2.241,153,4.391,154,3.14,157,2.389,158,5.721,159,1.82,160,1.82,161,2.015,162,2.015,163,1.82,164,3.292,165,2.015,166,3.14,167,3.14,168,3.14,169,4.391,170,4.391,171,4.689,172,4.391,173,4.135,174,2.841,175,1.912,176,1.82,177,2.831,178,3.695,179,3.61,180,4.429,181,5.572,182,5.091,183,3.61,184,5.091,185,3.61,186,5.091,187,3.61,188,2.415,189,3.61,190,3.61,191,5.898,192,5.091,193,2.415,194,3.666,195,3.61,196,2.831,197,3.61,198,3.666,199,3.61,200,3.666,201,3.61,202,3.61,203,3.14,204,3.61,205,3.14,206,3.61,207,3.61,208,3.61,209,3.14,210,3.14,211,4.625,212,4.429,213,3.61,214,3.61,215,3.61,216,3.61,217,3.61,218,3.61,219,3.61,220,3.61,221,3.61,222,3.61,223,3.61,224,3.61,225,3.61,226,3.61,227,3.61,228,3.61,229,3.61,230,1.737,231,3.61,232,2.831,233,3.61,234,2.261,235,3.61,236,3.61,237,3.14,238,3.61,239,3.61,240,3.14,241,3.14,242,4.625,243,5.131]],["title/injectables/AppService.html",[53,0.266,153,2.498]],["body/injectables/AppService.html",[3,0.201,4,0.179,5,0.179,12,0.344,13,1.171,23,0.501,26,0.014,37,0.987,49,0.879,51,0.247,53,0.468,55,0.677,63,0.201,64,0.065,92,1.025,94,0.012,95,0.012,108,1.479,150,6.738,153,4.399,244,5.147,245,5.917,246,5.917,247,5.917]],["title/controllers/AuthController.html",[146,1.615,248,2.872]],["body/controllers/AuthController.html",[3,0.105,4,0.093,5,0.093,9,1.726,10,4.051,11,4.593,12,0.179,13,0.757,16,0.62,18,0.643,23,0.261,25,0.534,26,0.014,27,0.42,28,0.468,29,0.385,35,1.716,37,1.107,39,2.405,43,3.949,49,0.745,50,1.817,51,0.287,55,0.352,63,0.105,64,0.034,66,0.921,67,0.62,68,3.269,92,0.534,94,0.008,95,0.008,102,1.263,103,3.519,104,2.088,135,0.857,137,1.631,146,2.57,148,1.356,151,1.028,175,2.405,230,3.569,248,3.269,249,2.679,250,2.06,251,3.378,252,3.269,253,4.667,254,3.949,255,3.949,256,4.54,257,5.074,258,3.949,259,4.54,260,4.54,261,3.56,262,4.54,263,4.54,264,4.54,265,2.276,266,3.56,267,2.415,268,4.414,269,4.54,270,3.079,271,5.951,272,4.944,273,3.079,274,5.775,275,3.949,276,3.079,277,4.54,278,3.269,279,5.177,280,3.079,281,3.883,282,3.949,283,4.54,284,3.079,285,3.949,286,3.949,287,4.54,288,3.883,289,4.54,290,4.54,291,3.269,292,4.442,293,3.949,294,2.06,295,2.679,296,1.929,297,2.06,298,3.378,299,2.679,300,4.54,301,3.949,302,3.079,303,3.949,304,3.949,305,2.679,306,1.719,307,3.079,308,1.929,309,3.079,310,2.679,311,2.415,312,2.415,313,3.079,314,3.079,315,3.079,316,2.415,317,3.079,318,2.679,319,3.079,320,2.06,321,2.679,322,4.593,323,2.679,324,1.553,325,2.415,326,3.079,327,2.679,328,4.54,329,2.415,330,3.079,331,2.218,332,1.817,333,2.679,334,1.817,335,2.679,336,2.415,337,2.415,338,2.218,339,1.247,340,2.218,341,1.719,342,3.079,343,3.079]],["title/modules/AuthModule.html",[157,1.615,169,2.498]],["body/modules/AuthModule.html",[3,0.155,4,0.137,5,0.137,26,0.014,51,0.334,55,0.52,56,2.849,57,3.043,59,3.275,63,0.155,64,0.05,68,3.275,69,3.275,94,0.01,95,0.01,148,2.623,157,2.965,159,2.294,160,2.294,161,2.538,162,2.538,163,2.294,164,3.709,165,3.709,169,5.001,173,3.515,174,3.325,175,2.41,176,2.294,178,2.849,180,3.957,205,3.957,240,3.957,241,3.957,242,3.567,243,3.957,248,4.785,298,4.705,299,3.957,344,3.957,345,3.957,346,3.957,347,4.333,348,4.705,349,4.705,350,4.548,351,4.291,352,4.548,353,3.957,354,3.957,355,4.548,356,4.291,357,4.548,358,4.548,359,3.957,360,4.548,361,3.957,362,4.548,363,4.548,364,3.957]],["title/injectables/AuthService.html",[53,0.266,298,2.498]],["body/injectables/AuthService.html",[3,0.169,4,0.15,5,0.15,10,3.725,12,0.289,13,1.053,14,1.796,16,1.001,18,1.318,23,0.535,25,1.094,26,0.014,27,0.861,28,0.394,29,0.79,33,2.665,35,1.417,37,1.053,51,0.29,53,0.421,55,0.569,63,0.169,64,0.055,66,1.488,67,1.001,78,1.336,92,0.862,94,0.011,95,0.011,108,1.243,135,1.384,141,2.1,257,4.547,265,2.927,266,4.951,267,4.951,268,4.819,272,4.547,288,4.547,298,3.955,311,3.902,312,3.902,349,4.819,359,4.329,365,4.329,366,4.976,367,4.976,368,4.976,369,5.492,370,2.936,371,4.976]],["title/guards/AuthenticationGuard.html",[0,2.353,198,2.872]],["body/guards/AuthenticationGuard.html",[0,3.405,1,4.87,2,4.982,3,0.118,4,0.105,5,0.105,7,2.498,9,0.807,10,3.405,11,2.321,12,0.202,13,0.825,14,1.494,15,5.81,16,1.392,18,1.313,23,0.419,25,0.858,26,0.014,27,0.787,28,0.36,29,0.619,30,3.881,31,3.942,33,2.089,35,1.412,36,3.405,37,0.962,38,1.377,39,3.334,40,2.762,42,3.311,51,0.289,53,0.33,54,3.311,55,0.397,62,3.018,63,0.118,64,0.076,65,1.838,66,1.726,67,1.392,71,1.572,74,2.089,75,1.202,76,2.047,78,0.931,90,2.047,92,0.601,94,0.008,95,0.008,101,4.305,102,0.965,135,1.377,193,2.321,198,3.564,203,3.018,251,3.942,253,3.881,308,2.173,310,2.047,372,3.018,373,4.95,374,5.02,375,4.95,376,3.018,377,6.538,378,3.469,379,3.469,380,4.95,381,3.881,382,2.72,383,2.498,384,2.498,385,2.72,386,2.498,387,3.018,388,2.92,389,3.018,390,2.498,391,3.018,392,2.622,393,4.95,394,3.018,395,4.525,396,3.018,397,3.469,398,3.469,399,3.018,400,3.469,401,2.173,402,3.018,403,4.95,404,3.018,405,2.047,406,3.018,407,3.469,408,3.018,409,3.018,410,3.469,411,1.749,412,3.469,413,3.469,414,3.221,415,3.018,416,3.018,417,3.469,418,3.469,419,3.469,420,4.95]],["title/injectables/BcryptProvider.html",[53,0.266,356,2.872]],["body/injectables/BcryptProvider.html",[3,0.147,4,0.13,5,0.13,9,1.003,12,0.25,13,0.959,14,1.916,23,0.487,25,0.996,26,0.014,27,0.784,28,0.359,29,0.72,33,2.914,35,1.29,37,1.151,38,1.921,42,3.847,49,0.972,51,0.27,53,0.383,55,0.493,63,0.147,64,0.047,65,2.283,66,1.935,71,1.077,78,1.543,92,0.996,94,0.01,95,0.01,108,1.077,141,2.427,230,3.691,265,3.122,324,3.627,347,3.209,356,4.141,421,3.749,422,6.005,423,5.629,424,5.002,425,3.749,426,6.435,427,6.256,428,4.31,429,5.002,430,3.602,431,5.75,432,5.75,433,5.002,434,4.31,435,4.141,436,5.002,437,3.749,438,3.38,439,6.471,440,4.31,441,4.31,442,4.31]],["title/interfaces/Cart.html",[96,2.011,125,1.834]],["body/interfaces/Cart.html",[3,0.191,4,0.17,5,0.17,12,0.326,26,0.014,28,0.486,49,0.703,51,0.235,63,0.191,94,0.011,95,0.011,96,2.833,98,3.758,102,1.894,106,1.742,125,3.13,136,2.19,339,3.249,443,4.887,444,4.249,445,5.97,446,5.482,447,5.922,448,4.405,449,3.315]],["title/controllers/CartController.html",[146,1.615,450,2.872]],["body/controllers/CartController.html",[3,0.132,4,0.117,5,0.117,12,0.225,13,0.892,16,0.78,18,0.809,23,0.587,25,1.201,26,0.014,27,0.945,28,0.432,29,0.868,37,1.156,49,1.021,51,0.29,55,0.443,63,0.132,64,0.043,66,1.158,67,0.78,92,1.201,94,0.009,95,0.009,111,4.194,119,3.038,120,4.138,122,3.42,124,1.782,125,2.817,126,3.852,135,1.078,146,1.569,148,1.706,151,2.314,250,2.592,294,4.098,297,4.098,450,3.852,451,3.37,452,5.349,453,4.804,454,5.349,455,5.329,456,4.419,457,3.874,458,3.874,459,5.349,460,3.874,461,3.038,462,5.87,463,4.689,464,5.349,465,3.874,466,3.874,467,3.874,468,3.37,469,5.349,470,3.874,471,2.79,472,3.37,473,3.897,474,3.37,475,2.79,476,2.79,477,3.37,478,2.427,479,3.874,480,3.874,481,3.37,482,3.874,483,3.874,484,3.874,485,3.874,486,3.874,487,4.653,488,5.349,489,3.874,490,3.874,491,3.874,492,3.874]],["title/entities/CartItem.html",[129,2.011,493,1.615]],["body/entities/CartItem.html",[3,0.143,4,0.127,5,0.127,12,0.244,23,0.636,26,0.014,28,0.468,29,0.708,35,1.768,49,0.708,51,0.267,63,0.143,64,0.046,94,0.01,95,0.01,102,1.573,106,1.982,125,2.939,128,1.17,129,2.852,136,2.311,139,2.813,151,2.505,339,2.291,381,3.297,392,2.227,444,2.346,448,3.297,449,3.77,471,3.027,493,2.291,494,2.634,495,5.983,496,4.434,497,3.566,498,3.77,499,4.602,500,4.334,501,4.602,502,4.204,503,6.39,504,4.204,505,3.783,506,4.204,507,4.434,508,5.655,509,5.359,510,4.922,511,4.204,512,3.657,513,3.336,514,4.204,515,4.602,516,4.204,517,5.655,518,4.204,519,4.204,520,4.204,521,4.204,522,3.297,523,3.657,524,2.813,525,3.336,526,5.011,527,4.204,528,3.657]],["title/modules/CartModule.html",[157,1.615,170,2.498]],["body/modules/CartModule.html",[3,0.149,4,0.132,5,0.132,26,0.014,51,0.332,55,0.5,63,0.149,64,0.048,94,0.01,95,0.01,107,4.653,117,4.145,125,2.668,129,2.203,130,2.315,132,1.514,133,4.179,136,2.221,148,2.555,157,2.639,159,2.203,160,2.203,161,2.439,162,2.439,163,2.203,164,3.636,165,3.636,170,5.145,172,4.653,173,4.382,174,3.239,175,2.315,176,2.203,178,3.635,188,2.923,354,3.801,450,4.692,473,4.711,474,3.801,529,3.801,530,3.801,531,3.801,532,3.801,533,4.653,534,4.37,535,4.37,536,4.37,537,4.37,538,3.801,539,3.801,540,3.426,541,4.37,542,4.37]],["title/injectables/CartService.html",[53,0.266,473,2.353]],["body/injectables/CartService.html",[3,0.119,4,0.106,5,0.106,12,0.203,13,0.831,14,2.068,16,1.167,18,1.04,23,0.605,25,1.237,26,0.014,27,0.974,28,0.445,29,0.894,35,0.786,37,1.157,49,1.019,51,0.29,53,0.332,55,0.401,63,0.119,64,0.038,67,1.167,78,1.863,92,1.202,94,0.008,95,0.008,107,4.473,108,0.875,111,3.907,117,4.073,119,3.907,120,4.572,122,3.269,124,1.61,125,2.906,126,3.588,133,3.588,135,1.614,370,4.094,453,4.549,461,2.746,462,5.723,463,4.572,473,2.94,478,2.194,481,3.046,533,4.473,539,3.046,543,3.046,544,4.334,545,4.334,546,4.983,547,4.334,548,3.502,549,3.502,550,3.502,551,4.334,552,3.502,553,3.502,554,4.334,555,3.502,556,4.983,557,3.502,558,4.334,559,3.502,560,3.046,561,4.334,562,3.502,563,3.046,564,3.502,565,3.502,566,3.502,567,3.502]],["title/classes/CreateCartItemDto.html",[64,0.044,120,2.498]],["body/classes/CreateCartItemDto.html",[3,0.191,4,0.17,5,0.17,12,0.326,23,0.577,26,0.014,28,0.424,49,0.852,51,0.235,63,0.191,64,0.075,94,0.011,95,0.011,102,1.894,120,4.264,125,3.368,151,2.272,339,2.757,449,4.321,568,2.276,569,6.371,570,4.405,571,4.321,572,4.321,573,5.618,574,4.887,575,5.618,576,5.338,577,4.046,578,2.703,579,4.405]],["title/classes/CreateOrderDto.html",[64,0.044,580,2.498]],["body/classes/CreateOrderDto.html",[3,0.182,4,0.162,5,0.162,12,0.311,23,0.607,26,0.014,28,0.447,29,0.897,49,0.98,51,0.224,63,0.182,64,0.072,94,0.011,95,0.011,102,1.838,151,2.392,405,3.155,568,2.166,572,4.416,578,2.573,580,4.138,581,6.511,582,4.652,583,6.234,584,6.234,585,6.234,586,6.605,587,5.348,588,5.348,589,5.348,590,5.348,591,5.161,592,4.419,593,4.652,594,4.652]],["title/injectables/CreateOrderProvider.html",[53,0.266,595,2.498]],["body/injectables/CreateOrderProvider.html",[3,0.11,4,0.098,5,0.098,9,1.095,12,0.188,13,0.785,14,1.437,16,0.947,18,0.983,23,0.399,25,0.816,26,0.014,27,0.642,28,0.294,29,0.589,35,1.367,37,0.54,38,1.31,49,0.695,51,0.305,53,0.314,55,0.37,63,0.11,64,0.036,67,0.947,71,1.82,74,2.572,75,2.112,76,3.274,78,2.035,90,3.274,92,0.561,94,0.008,95,0.008,106,2.008,108,0.809,122,2.975,124,1.488,128,0.9,129,2.374,130,2.494,136,1.408,139,3.15,388,1.909,414,3.097,445,2.538,446,3.391,449,2.778,473,4.114,493,1.311,495,2.538,540,2.538,571,1.909,580,4.476,595,2.949,596,4.827,597,2.815,598,4.352,599,3.236,600,6.974,601,3.236,602,2.538,603,3.236,604,3.236,605,2.815,606,1.909,607,2.733,608,2.165,609,2.538,610,3.236,611,2.538,612,3.236,613,2.815,614,3.236,615,3.236,616,3.236,617,2.815,618,4.708,619,2.815,620,3.236,621,3.236,622,3.236,623,1.909,624,3.236,625,3.236,626,3.236,627,3.236,628,3.236,629,3.236,630,3.236,631,3.236,632,3.236,633,2.165,634,3.236,635,3.236,636,3.236,637,2.538,638,2.538,639,3.713,640,3.236,641,3.236,642,3.236,643,3.236,644,3.274,645,3.236,646,2.494,647,3.236,648,3.236,649,2.494,650,3.236,651,2.815,652,3.236,653,3.236,654,4.708,655,4.779,656,3.236,657,3.236,658,3.236,659,2.815,660,3.236,661,4.708,662,3.236,663,3.236,664,4.096,665,3.236,666,3.236,667,2.538,668,3.236,669,3.236,670,3.236,671,3.236,672,3.236,673,3.236,674,4.708,675,3.236,676,3.236,677,2.815,678,2.331]],["title/classes/CreateProductDto.html",[64,0.044,679,2.353]],["body/classes/CreateProductDto.html",[3,0.161,4,0.143,5,0.143,9,1.577,12,0.276,23,0.644,26,0.014,27,0.925,28,0.474,49,0.951,51,0.256,63,0.161,64,0.067,94,0.01,95,0.01,102,1.703,151,2.536,339,2.902,568,1.921,572,4.227,576,5.317,577,3.415,578,2.282,579,3.719,591,5.566,644,4,646,3.592,679,3.612,680,6.723,681,3.719,682,4.247,683,4.883,684,4.536,685,4.743,686,4.743,687,4.743,688,4.743,689,4.743,690,4.743,691,4.743,692,4.743,693,4.743,694,4.743,695,4.743,696,4.743,697,4.743,698,4.125,699,4.125,700,3.415,701,3.415,702,6.123,703,4.743,704,4.743,705,4.743]],["title/injectables/CreateProductProvider.html",[53,0.266,706,2.498]],["body/injectables/CreateProductProvider.html",[3,0.17,4,0.151,5,0.151,12,0.291,13,1.057,14,1.802,16,1.008,18,1.323,23,0.537,25,1.099,26,0.014,27,0.865,28,0.395,29,0.794,37,0.835,38,1.764,51,0.315,53,0.423,55,0.573,63,0.17,64,0.055,67,1.008,71,1.252,78,1.345,92,0.868,94,0.011,95,0.011,108,1.252,116,3.056,124,2.304,128,1.394,131,2.206,132,1.736,135,1.394,136,1.896,679,4.546,706,3.972,707,6.052,708,3.608,709,4.972,710,3.352,711,4.358,712,4.242,713,4.972,714,4.358,715,2.796,716,3.352,717,3.138,718,5.01,719,5.01,720,5.01]],["title/classes/CreateUserDto.html",[64,0.044,721,2.498]],["body/classes/CreateUserDto.html",[3,0.141,4,0.125,5,0.125,9,1.579,12,0.24,23,0.575,26,0.014,28,0.423,35,1.814,49,0.951,51,0.234,63,0.141,64,0.061,94,0.009,95,0.009,102,1.556,103,3.595,151,2.266,230,3.595,306,2.307,322,5.085,332,4.409,333,3.596,334,4.409,335,3.596,336,3.241,339,2.265,341,3.12,568,1.674,572,4.005,578,1.989,591,5.106,698,3.596,699,3.596,721,3.502,722,6.168,723,3.596,724,5.904,725,4.134,726,4.134,727,4.134,728,4.134,729,4.134,730,4.134,731,4.134,732,5.591,733,5.591,734,5.591,735,5.591,736,5.591,737,5.591,738,4.384,739,5.591,740,5.591,741,4.863,742,4.134,743,6.168,744,4.863,745,4.134,746,5.591,747,6.788,748,4.134,749,4.134,750,4.134]],["title/injectables/CreateUserProvider.html",[53,0.266,751,2.498]],["body/injectables/CreateUserProvider.html",[3,0.143,4,0.127,5,0.127,12,0.244,13,0.942,14,1.653,16,1.136,18,1.179,23,0.478,25,0.979,26,0.014,27,0.77,28,0.352,29,0.707,35,1.432,37,0.7,38,1.571,51,0.319,52,2.629,53,0.377,55,0.48,63,0.143,64,0.046,67,1.136,71,1.049,74,1.771,75,1.957,78,1.714,92,0.727,94,0.009,95,0.009,103,2.717,104,2.936,106,1.301,108,1.049,116,2.887,124,1.93,128,1.167,131,1.847,132,1.454,135,1.571,138,2.476,141,1.771,230,2.019,265,2.694,310,2.476,332,2.476,334,2.476,337,3.29,347,4.257,351,3.022,411,2.116,435,3.022,497,2.342,721,4.699,751,3.538,752,5.553,753,3.29,754,5.006,755,3.29,756,4.196,757,4.429,758,3.29,759,4.196,760,2.629,761,4.196,762,3.29,763,3.778,764,2.807,765,3.65,766,2.807,767,3.29,768,3.65,769,5.648,770,3.29,771,5.648,772,3.65,773,3.29,774,5.648,775,4.196,776,4.196,777,4.196,778,4.196,779,4.196,780,4.196,781,4.196,782,4.196,783,4.196]],["title/injectables/DataResponseInterceptor.html",[53,0.266,194,2.872]],["body/injectables/DataResponseInterceptor.html",[3,0.147,4,0.131,5,0.131,9,1.008,12,0.252,13,0.962,16,0.872,18,1.444,23,0.489,25,1,26,0.014,27,0.787,28,0.36,29,0.723,31,4.335,33,2.436,36,3.406,37,0.962,51,0.271,53,0.385,55,0.496,56,2.716,63,0.147,64,0.048,65,2.297,66,1.941,67,0.872,69,3.122,71,1.083,84,4.335,92,0.751,94,0.01,95,0.01,108,1.083,135,1.206,137,2.297,141,2.436,181,6.579,194,4.157,196,5.089,321,5.645,323,5.021,324,3.874,338,3.122,382,5.089,383,3.122,394,3.771,402,5.021,405,3.406,637,4.527,784,5.645,785,3.771,786,5.06,787,5.021,788,5.021,789,4.335,790,4.335,791,5.021,792,6.019,793,4.335,794,5.773,795,5.021,796,4.335,797,3.771,798,4.335,799,3.771,800,4.335,801,4.335,802,4.335]],["title/classes/DatabaseConnectionException.html",[64,0.044,803,2.668]],["body/classes/DatabaseConnectionException.html",[3,0.164,4,0.146,5,0.146,9,1.44,18,1.505,23,0.409,25,0.836,26,0.014,27,0.658,28,0.301,29,0.604,45,2.693,49,0.903,51,0.202,55,0.552,63,0.211,64,0.068,66,1.851,76,2.847,94,0.01,95,0.01,234,4.672,291,4.923,296,3.023,341,3.455,414,2.693,568,1.954,678,5.193,763,3.228,764,4.142,803,4.142,804,3.784,805,5.495,806,4.573,807,5.193,808,5.385,809,4.825,810,5.946,811,3.784,812,5.385,813,4.197,814,4.197,815,4.197,816,3.475,817,3.784,818,4.197,819,4.458,820,4.197,821,4.197,822,4.142,823,4.197,824,3.475,825,3.475,826,3.475]],["title/injectables/DeleteProductProvider.html",[53,0.266,827,2.498]],["body/injectables/DeleteProductProvider.html",[3,0.164,4,0.145,5,0.145,12,0.28,13,1.031,14,1.769,16,0.969,18,1.29,23,0.524,25,1.071,26,0.014,27,0.843,28,0.385,29,0.774,37,0.803,38,1.72,39,2.551,49,0.855,51,0.301,53,0.412,55,0.551,63,0.164,64,0.053,67,0.969,71,1.203,74,2.032,75,2.143,78,1.659,92,0.834,94,0.01,95,0.01,106,1.493,108,1.203,116,3.019,128,1.339,131,2.12,132,1.669,135,1.339,136,2.228,265,2.882,278,3.467,341,2.687,498,2.841,500,2.841,571,3.647,708,3.467,710,3.221,712,4.136,715,2.687,717,3.016,827,3.873,828,5.94,829,4.848,830,4.815,831,4.848,832,4.815,833,2.841,834,2.687,835,4.188,836,3.775,837,2.687,838,4.188,839,3.221,840,4.815]],["title/injectables/ErrorHandlingInterceptor.html",[53,0.266,841,3.127]],["body/injectables/ErrorHandlingInterceptor.html",[3,0.13,4,0.115,5,0.115,9,0.889,12,0.222,13,0.883,16,1.224,23,0.449,25,0.918,26,0.014,27,0.722,28,0.33,29,0.663,31,4.114,33,2.771,34,4.608,36,3.126,37,1.095,42,4.393,45,2.132,51,0.288,53,0.353,55,0.437,63,0.13,64,0.042,65,2.024,66,1.818,71,1.324,74,1.613,75,1.836,76,2.254,84,4.114,92,1.195,94,0.009,95,0.009,108,0.955,128,1.063,234,2.394,252,3.815,382,4.769,383,2.752,404,3.324,414,4.361,430,4.114,605,4.608,619,3.324,678,4.967,764,2.556,765,3.324,787,4.608,788,5.712,791,4.608,792,5.712,795,4.608,799,3.324,803,3.544,816,2.752,817,2.996,822,2.556,841,4.154,842,5.29,843,5.29,844,3.324,845,5.298,846,3.821,847,5.298,848,5.409,849,3.821,850,6.567,851,5.298,852,3.821,853,6.567,854,3.821,855,3.821,856,3.324,857,3.821,858,3.821,859,2.752,860,4.154,861,3.821,862,3.821,863,3.324,864,3.821,865,3.324,866,2.996,867,2.996,868,3.821,869,3.821,870,3.821,871,3.821,872,3.821,873,3.821,874,3.821,875,3.821,876,3.821,877,3.821]],["title/interfaces/ErrorResponse.html",[96,2.011,878,2.872]],["body/interfaces/ErrorResponse.html",[3,0.119,4,0.067,5,0.067,9,0.512,12,0.128,16,1.168,26,0.014,27,0.911,28,0.433,29,0.439,33,2.45,36,1.298,37,0.909,45,3.807,49,0.982,50,1.298,51,0.183,55,0.252,58,1.472,63,0.119,64,0.024,65,1.166,66,1.998,67,0.443,71,1.705,75,1.216,90,2.58,92,1.055,94,0.006,95,0.006,96,2.205,98,1.472,102,0.976,128,0.612,146,3.052,232,2.751,234,2.197,281,1.585,292,1.472,296,1.379,320,4.361,324,1.11,331,4.913,338,3.924,339,2.021,340,1.585,341,3.935,370,2.07,388,1.298,395,1.726,401,1.379,405,3.731,414,4.364,493,0.891,513,1.298,522,2.751,525,1.298,623,1.298,649,1.166,667,1.726,786,3.884,805,4.913,807,2.526,819,4.913,822,1.472,824,1.585,825,1.585,826,2.526,837,1.228,848,3.429,859,1.585,860,4.553,866,1.726,867,1.726,878,3.924,879,1.726,880,1.726,881,5.934,882,6.286,883,5.501,884,4.777,885,5.299,886,3.051,887,3.051,888,3.804,889,3.804,890,3.051,891,1.585,892,1.914,893,1.914,894,1.726,895,1.914,896,1.914,897,1.914,898,3.051,899,1.914,900,1.914,901,1.914,902,1.914,903,1.914,904,1.585,905,1.914,906,1.914,907,1.914,908,1.914,909,1.914,910,1.914,911,1.914,912,1.914,913,1.914,914,1.914,915,1.726,916,1.914,917,3.051,918,1.726,919,1.914,920,3.051,921,3.051,922,1.914,923,1.914,924,1.914,925,1.914,926,1.914,927,1.914,928,1.914,929,1.585,930,1.914,931,1.726,932,1.914,933,1.914,934,1.914,935,1.914,936,3.051,937,1.914,938,3.429,939,3.051,940,1.914,941,3.051,942,1.914,943,1.914,944,3.051,945,1.914,946,3.051,947,1.914,948,1.914,949,1.914,950,1.914,951,1.914,952,1.914,953,1.914,954,1.914,955,1.914,956,3.051,957,1.914,958,1.914,959,1.914,960,1.914,961,1.914,962,1.914,963,1.914,964,1.914,965,1.914,966,1.914,967,1.914,968,1.914,969,1.914,970,1.914,971,1.914,972,1.914,973,1.914,974,1.914,975,1.914,976,1.914,977,1.914,978,1.914,979,1.914,980,1.914,981,1.914,982,1.914,983,2.751,984,1.914,985,1.914,986,1.914,987,1.914,988,1.472,989,1.914,990,1.914,991,1.914,992,1.914,993,1.914]],["title/injectables/FindAllOrdersForUserProvider.html",[53,0.266,994,2.498]],["body/injectables/FindAllOrdersForUserProvider.html",[3,0.169,4,0.15,5,0.15,12,0.288,13,1.05,14,1.792,16,0.997,18,1.314,23,0.533,25,1.091,26,0.014,27,0.859,28,0.393,29,0.788,35,1.112,37,0.826,38,1.752,49,0.866,51,0.304,53,0.42,55,0.567,63,0.169,64,0.054,67,0.997,71,1.238,78,1.33,92,0.858,94,0.011,95,0.011,106,1.536,108,1.238,116,2.95,122,2.772,128,1.378,131,2.181,132,1.717,444,2.765,497,2.765,607,2.657,608,3.314,753,3.885,994,3.944,995,5.427,996,4.196,997,5.477,998,4.309,999,4.954,1000,5.477,1001,5.477,1002,4.954,1003,4.309,1004,4.954,1005,3.314,1006,4.309,1007,4.309]],["title/injectables/FindAllProductsProvider.html",[53,0.266,1008,2.498]],["body/injectables/FindAllProductsProvider.html",[3,0.111,4,0.099,5,0.099,12,0.19,13,0.791,14,1.446,16,1.308,18,0.99,23,0.473,25,0.967,26,0.014,27,0.761,28,0.348,29,0.699,37,0.791,38,1.32,40,1.825,50,2.799,51,0.3,53,0.316,55,0.374,63,0.111,64,0.036,67,0.954,71,1.854,78,0.878,82,2.844,83,2.844,84,2.048,85,2.844,86,2.564,87,2.844,88,2.844,89,2.844,91,2.844,92,0.822,94,0.008,95,0.008,108,0.817,116,2.633,128,0.91,131,1.44,132,1.133,135,1.32,136,0.978,141,1.38,291,2.355,388,1.929,392,2.513,497,1.825,513,1.929,577,2.355,607,2.356,623,1.929,649,2.513,710,2.188,712,3.173,715,1.825,717,2.048,834,1.825,839,2.188,1007,5.327,1008,2.972,1009,4.802,1010,2.844,1011,4.744,1012,4.377,1013,4.489,1014,3.27,1015,4.744,1016,4.377,1017,3.27,1018,2.844,1019,3.27,1020,4.126,1021,2.564,1022,2.564,1023,1.929,1024,3.27,1025,2.844,1026,4.744,1027,3.27,1028,2.799,1029,2.188,1030,2.355,1031,3.27,1032,2.564,1033,4.744,1034,3.27,1035,4.126,1036,4.126,1037,4.377,1038,4.744,1039,4.744,1040,2.188,1041,4.744,1042,4.744,1043,3.27,1044,3.27,1045,3.27,1046,4.744,1047,4.744,1048,2.844,1049,3.27,1050,3.27,1051,3.27,1052,3.27,1053,3.27,1054,3.27,1055,3.27,1056,3.27,1057,3.27,1058,2.844,1059,2.844,1060,3.27,1061,3.27,1062,3.27,1063,3.27,1064,3.27,1065,3.27,1066,3.72,1067,3.27,1068,5.582,1069,5.582,1070,4.856,1071,2.564,1072,3.27,1073,2.564,1074,3.27,1075,3.27,1076,3.27,1077,2.844,1078,4.126,1079,4.744,1080,3.27,1081,3.27,1082,3.27,1083,3.27,1084,3.836]],["title/injectables/FindOrderByIdProvider.html",[53,0.266,1085,2.498]],["body/injectables/FindOrderByIdProvider.html",[3,0.164,4,0.146,5,0.146,12,0.281,13,1.034,14,1.772,16,0.973,18,1.294,23,0.525,25,1.074,26,0.014,27,0.845,28,0.387,29,0.776,35,1.085,37,0.806,38,1.725,49,0.956,51,0.302,53,0.413,55,0.553,63,0.164,64,0.053,67,0.973,71,1.208,74,2.041,75,1.676,78,1.298,92,0.838,94,0.01,95,0.01,106,1.922,108,1.208,116,2.923,122,2.729,128,1.345,131,2.129,132,1.676,444,2.699,607,3.277,608,3.235,833,2.853,837,2.699,995,5.366,998,4.206,1000,5.393,1003,4.206,1005,3.235,1006,4.206,1085,3.884,1086,3.482,1087,5.393,1088,3.792,1089,5.393,1090,5.66,1091,4.836,1092,4.836,1093,4.836]],["title/injectables/FindProductByIdProvider.html",[53,0.266,1094,2.498]],["body/injectables/FindProductByIdProvider.html",[3,0.167,4,0.148,5,0.148,12,0.285,13,1.044,14,1.785,16,0.988,18,1.307,23,0.53,25,1.085,26,0.014,27,0.854,28,0.39,29,0.784,37,0.819,38,1.742,49,0.863,51,0.303,53,0.417,55,0.562,63,0.167,64,0.054,67,0.988,71,1.227,74,2.072,75,1.702,78,1.318,92,0.851,94,0.011,95,0.011,106,1.523,108,1.227,116,3.037,128,1.366,131,2.162,132,1.702,135,1.366,136,2.33,265,2.909,571,3.694,710,3.285,712,4.188,715,2.74,717,3.076,833,2.897,834,2.74,836,3.85,837,2.74,1009,5.405,1086,3.536,1088,3.85,1094,3.922,1095,5.446,1096,5.446,1097,4.271,1098,4.91]],["title/injectables/FindUserByEmailProvider.html",[53,0.266,1099,2.498]],["body/injectables/FindUserByEmailProvider.html",[3,0.157,4,0.14,5,0.14,12,0.269,13,1.004,14,1.735,16,0.93,18,1.257,23,0.51,25,1.044,26,0.014,27,0.821,28,0.376,29,0.754,33,2.542,35,1.807,37,1.004,38,1.676,49,0.838,51,0.297,53,0.402,55,0.529,63,0.157,64,0.051,66,1.383,67,0.93,71,1.155,74,1.952,75,1.603,78,1.241,92,0.801,94,0.01,95,0.01,103,3.748,104,2.126,106,1.434,108,1.155,116,2.981,128,1.286,131,2.036,132,1.603,135,1.286,138,2.728,230,2.225,265,2.827,332,2.728,334,2.728,755,3.626,757,4.723,760,2.897,767,3.626,770,3.626,833,3.554,1099,3.773,1100,5.253,1101,4.022,1102,5.239,1103,4.624,1104,5.239,1105,4.624,1106,6.023,1107,3.626,1108,4.624]],["title/injectables/FindUserByIdProvider.html",[53,0.266,1109,2.498]],["body/injectables/FindUserByIdProvider.html",[3,0.168,4,0.149,5,0.149,12,0.287,13,1.048,14,1.791,16,0.995,18,1.312,23,0.533,25,1.089,26,0.014,27,0.857,28,0.392,29,0.787,35,1.751,37,0.824,38,1.749,49,0.865,51,0.304,53,0.419,55,0.566,63,0.168,64,0.054,67,0.995,71,1.235,74,2.086,75,1.713,78,1.327,92,0.856,94,0.011,95,0.011,106,1.533,108,1.235,116,3.043,122,2.768,128,1.375,131,2.176,132,1.713,135,1.375,138,2.916,755,3.876,757,4.93,760,3.097,767,3.876,770,3.876,833,2.916,837,2.759,1086,3.56,1088,3.876,1097,4.3,1100,5.422,1109,3.939,1110,5.469,1111,5.469,1112,4.943]],["title/injectables/GenerateTokensProvider.html",[53,0.266,348,2.498]],["body/injectables/GenerateTokensProvider.html",[3,0.199,4,0.107,5,0.107,9,0.825,10,3.446,11,3.364,12,0.206,13,0.838,14,1.805,16,1.35,18,1.326,19,3.085,20,6.234,21,5.528,22,5.528,23,0.495,25,1.101,26,0.014,27,0.797,28,0.396,29,0.731,33,2.682,35,1.714,37,1.06,49,0.731,51,0.291,52,2.222,53,0.335,55,0.406,56,2.222,57,2.373,59,2.554,63,0.121,64,0.039,66,2.084,67,1.012,68,4.577,69,2.554,70,3.085,71,0.886,77,5.62,78,1.35,92,0.871,94,0.008,95,0.008,97,2.373,103,1.706,104,1.631,105,3.085,108,0.886,122,2.572,135,1.399,137,1.879,141,2.122,142,3.085,257,3.621,265,2.465,272,4.207,285,4.374,288,5.018,292,3.364,293,4.374,325,3.943,329,3.943,339,2.366,348,3.15,353,3.085,370,2.966,386,3.621,438,3.943,609,2.781,811,2.781,1113,5.528,1114,3.085,1115,6.356,1116,5.028,1117,5.028,1118,3.546,1119,5.028,1120,3.546,1121,5.028,1122,6.71,1123,4.577,1124,3.546,1125,3.546,1126,3.546,1127,3.546,1128,3.085,1129,3.546,1130,3.085,1131,2.781,1132,3.546,1133,3.546,1134,3.546,1135,3.546,1136,3.546,1137,3.546,1138,3.546,1139,3.546,1140,3.546]],["title/injectables/GetCartProvider.html",[53,0.266,117,2.226]],["body/injectables/GetCartProvider.html",[3,0.145,4,0.129,5,0.129,12,0.248,13,0.953,14,1.911,16,1.384,18,1.192,23,0.546,25,1.116,26,0.014,27,0.878,28,0.402,29,0.806,35,0.958,37,0.953,38,1.913,49,0.806,51,0.3,53,0.381,55,0.488,63,0.145,64,0.047,67,0.859,71,1.718,78,1.534,92,0.99,94,0.01,95,0.01,106,1.772,108,1.067,110,3.347,115,4.48,116,2.904,117,3.189,122,2.515,125,3.297,127,3.347,128,1.188,129,2.153,130,2.261,131,1.879,132,1.479,135,1.188,136,1.708,139,3.822,140,3.347,444,3.838,445,5.621,446,3.074,449,2.518,498,2.518,545,4.97,554,4.97,633,2.856,639,2.856,649,2.261,655,4.48,659,3.713,1005,2.856,1141,5.982,1142,5.713,1143,3.713,1144,4.269,1145,5.713,1146,4.269,1147,4.269,1148,3.713,1149,4.269,1150,4.269,1151,4.269,1152,4.269,1153,4.269,1154,4.269]],["title/classes/GetProductsBaseDto.html",[64,0.044,1155,2.872]],["body/classes/GetProductsBaseDto.html",[3,0.152,4,0.135,5,0.135,12,0.26,23,0.594,26,0.014,27,0.993,28,0.437,29,0.968,49,0.877,51,0.293,63,0.201,64,0.072,94,0.01,95,0.01,102,1.64,136,2.236,151,2.339,306,2.498,456,2.994,568,1.813,572,4.296,578,2.153,592,4.871,646,3.858,682,4.562,684,4.41,700,3.223,701,3.223,806,2.994,1016,2.64,1028,3.478,1029,2.994,1030,3.223,1037,5.17,1066,4.623,1071,5.495,1073,5.495,1155,4.747,1156,5.71,1157,3.509,1158,6.593,1159,4.475,1160,4.475,1161,4.475,1162,4.475,1163,4.475,1164,3.893,1165,5.128,1166,3.893,1167,3.893]],["title/classes/GetProductsDto.html",[64,0.044,1016,2.353]],["body/classes/GetProductsDto.html",[3,0.173,4,0.153,5,0.153,9,1.181,26,0.014,27,0.872,49,0.801,51,0.307,63,0.218,64,0.077,94,0.011,95,0.011,136,2.093,306,2.834,456,4.279,568,2.057,572,4.469,578,2.443,592,5.067,646,3.388,682,4.007,684,4.279,700,3.657,701,3.657,806,4.279,1016,3.773,1028,4.131,1029,3.398,1030,3.657,1037,3.982,1066,3.982,1071,5.015,1073,5.015,1155,5.042,1156,3.982,1157,3.982,1164,4.418,1165,6.09,1166,4.418,1167,5.564]],["title/classes/GlobalExceptionFilter.html",[64,0.044,891,2.872]],["body/classes/GlobalExceptionFilter.html",[3,0.111,4,0.061,5,0.061,9,0.469,12,0.117,13,0.545,16,1.47,23,0.498,25,0.967,26,0.014,27,0.987,28,0.367,29,0.699,33,2.862,36,1.19,37,1.109,45,4.168,49,0.928,50,1.19,51,0.172,55,0.231,58,1.349,63,0.111,64,0.022,65,1.732,66,1.944,67,0.83,71,1.662,75,1.429,90,3.294,92,1.019,94,0.005,95,0.005,96,1.649,102,0.91,128,0.561,146,2.958,232,3.72,234,2.049,281,1.453,292,2.188,296,1.264,320,4.234,324,1.017,331,4.234,338,2.355,339,1.922,340,1.453,341,3.532,370,1.929,388,1.19,392,1.069,395,1.582,401,1.264,405,2.799,414,4.371,493,0.817,513,1.19,522,3.72,525,1.19,568,0.817,623,1.19,649,1.069,667,1.582,786,3.933,805,5.038,807,2.355,819,4.41,822,1.349,824,1.453,825,1.453,826,2.355,837,1.126,848,4.088,859,1.453,860,4.378,866,2.564,867,2.564,878,3.755,879,4.802,880,1.582,881,5.327,882,6.233,883,4.127,884,3.234,885,5.114,886,3.588,887,4.127,888,4.856,889,3.588,890,2.845,891,2.355,892,2.845,893,2.845,894,1.582,895,1.755,896,1.755,897,1.755,898,2.845,899,1.755,900,1.755,901,1.755,902,1.755,903,1.755,904,1.453,905,1.755,906,1.755,907,1.755,908,1.755,909,1.755,910,1.755,911,2.845,912,3.588,913,1.755,914,1.755,915,1.582,916,1.755,917,2.845,918,1.582,919,1.755,920,2.845,921,2.845,922,1.755,923,1.755,924,1.755,925,1.755,926,1.755,927,1.755,928,1.755,929,1.453,930,1.755,931,1.582,932,1.755,933,1.755,934,1.755,935,1.755,936,2.845,937,1.755,938,4.378,939,4.127,940,2.845,941,2.845,942,1.755,943,1.755,944,2.845,945,1.755,946,2.845,947,1.755,948,1.755,949,2.845,950,1.755,951,1.755,952,1.755,953,1.755,954,1.755,955,1.755,956,4.127,957,2.845,958,1.755,959,1.755,960,1.755,961,1.755,962,1.755,963,1.755,964,1.755,965,1.755,966,1.755,967,1.755,968,1.755,969,1.755,970,1.755,971,1.755,972,1.755,973,1.755,974,1.755,975,1.755,976,1.755,977,1.755,978,1.755,979,1.755,980,2.845,981,2.845,982,1.755,983,2.564,984,1.755,985,1.755,986,1.755,987,1.755,988,1.349,989,1.755,990,1.755,991,1.755,992,1.755,993,1.755,1084,1.264,1168,3.27,1169,3.27,1170,3.27,1171,3.27,1172,2.017,1173,2.017,1174,2.017,1175,2.017,1176,2.017,1177,2.017,1178,2.017,1179,2.017,1180,2.017]],["title/injectables/HashingProvider.html",[53,0.266,347,2.226]],["body/injectables/HashingProvider.html",[3,0.163,4,0.145,5,0.145,9,1.113,12,0.278,13,1.026,23,0.522,25,1.067,26,0.014,27,0.84,28,0.384,29,0.771,37,1.026,38,2,49,0.992,51,0.2,53,0.41,55,0.547,63,0.163,64,0.053,66,2.036,94,0.01,95,0.01,108,1.195,141,2.598,230,3.458,324,3.751,347,3.436,405,4.241,423,5.922,424,5.355,425,4.161,426,6.623,427,6.253,429,5.355,433,5.355,435,5.176,1181,4.161,1182,8.047,1183,4.783,1184,4.783]],["title/entities/Order.html",[493,1.615,607,1.683]],["body/entities/Order.html",[3,0.13,4,0.115,5,0.115,12,0.221,23,0.649,26,0.014,28,0.496,35,1.698,49,0.933,50,2.247,51,0.274,63,0.13,64,0.042,94,0.009,95,0.009,102,1.47,106,1.882,128,1.059,130,2.017,151,2.558,320,4.061,339,2.141,392,3.474,405,3.118,444,3.388,446,4.371,493,1.542,494,2.385,497,3.388,499,4.371,500,3.869,501,4.371,505,3.536,507,2.986,509,4.144,510,3.806,515,4.371,523,3.312,524,2.547,525,4.206,526,4.144,583,5.28,584,5.28,585,5.28,593,4.597,594,4.597,606,4.206,607,2.562,1040,3.536,1185,3.312,1186,4.961,1187,6.201,1188,3.808,1189,3.808,1190,3.808,1191,2.986,1192,5.285,1193,3.808,1194,4.144,1195,3.806,1196,3.808,1197,3.808,1198,5.992,1199,5.142,1200,3.808,1201,4.144,1202,4.144,1203,4.144,1204,3.536,1205,3.808,1206,3.808,1207,5.285,1208,3.808,1209,4.144,1210,3.808,1211,3.808,1212,3.808,1213,3.808]],["title/entities/OrderItem.html",[493,1.615,606,2.353]],["body/entities/OrderItem.html",[3,0.158,4,0.14,5,0.14,12,0.27,23,0.624,26,0.014,28,0.471,49,0.756,51,0.281,63,0.158,64,0.051,94,0.01,95,0.01,102,1.68,106,2.081,128,1.292,136,2.3,151,2.46,339,2.879,448,3.641,449,3.96,493,1.881,494,2.909,496,3.641,505,4.04,507,4.736,509,5.574,510,5.119,524,3.106,525,4.194,526,5.263,606,3.563,607,3.327,608,3.106,646,3.556,1040,4.04,1186,3.344,1201,4.736,1202,4.736,1203,4.736,1204,4.04,1214,6.57,1215,4.644,1216,6.039,1217,4.644,1218,4.644,1219,4.644,1220,4.644,1221,4.644]],["title/controllers/OrdersController.html",[146,1.615,1222,2.872]],["body/controllers/OrdersController.html",[3,0.15,4,0.133,5,0.133,12,0.256,13,0.974,14,2.021,16,0.888,18,0.921,23,0.555,25,1.134,26,0.014,27,0.893,28,0.408,29,0.819,37,1.092,49,1.001,51,0.291,55,0.505,63,0.15,64,0.048,66,1.32,67,0.888,92,1.134,94,0.01,95,0.01,122,3.279,124,2.029,135,1.228,137,2.338,146,1.787,148,1.943,151,2.186,250,2.952,294,3.908,297,4.38,370,3.863,475,3.178,476,3.178,477,3.839,487,5.081,580,4.832,598,5.134,602,3.46,611,3.46,996,3.26,1090,5.464,1222,4.206,1223,3.839,1224,6.547,1225,5.841,1226,4.413,1227,4.413,1228,5.841,1229,4.413,1230,4.413,1231,4.413,1232,4.101,1233,3.839,1234,4.413,1235,4.413,1236,4.413,1237,4.413,1238,4.413,1239,4.413]],["title/modules/OrdersModule.html",[157,1.615,171,2.668]],["body/modules/OrdersModule.html",[3,0.159,4,0.141,5,0.141,26,0.014,51,0.333,55,0.534,63,0.159,64,0.051,94,0.01,95,0.01,130,2.47,132,1.616,148,2.666,157,2.724,159,2.351,160,2.351,161,2.602,162,2.602,163,2.351,164,3.754,165,2.602,170,4.737,171,5.446,174,3.38,175,2.47,176,2.351,178,3.794,188,3.12,595,4.737,606,3.573,607,2.838,608,3.12,994,4.737,996,2.602,1085,4.737,1222,4.843,1232,4.737,1233,4.056,1240,4.056,1241,4.056,1242,4.663,1243,4.663,1244,4.663,1245,3.656,1246,4.056,1247,4.663,1248,4.749,1249,3.358,1250,2.921,1251,4.663]],["title/injectables/OrdersService.html",[53,0.266,1232,2.498]],["body/injectables/OrdersService.html",[3,0.146,4,0.129,5,0.129,12,0.249,13,0.955,14,2.01,16,1.298,18,1.195,23,0.583,25,1.193,26,0.014,27,0.939,28,0.429,29,0.862,37,1.076,49,0.997,51,0.3,53,0.382,55,0.49,63,0.146,64,0.047,67,1.298,78,1.732,92,1.118,94,0.01,95,0.01,108,1.071,122,2.84,124,1.971,141,1.809,370,3.807,411,2.161,580,4.8,595,4.627,598,5.059,602,4.492,607,1.809,611,3.36,994,4.724,996,2.392,997,4.983,1001,4.983,1085,4.724,1087,4.983,1089,4.983,1090,5.401,1232,3.588,1246,3.728,1249,3.086,1250,2.684,1252,3.728,1253,4.285,1254,4.285,1255,4.285,1256,4.285,1257,4.285,1258,4.125,1259,4.285,1260,4.285,1261,4.285]],["title/interfaces/Paginated.html",[96,2.011,1023,2.353]],["body/interfaces/Paginated.html",[3,0.174,4,0.154,5,0.154,9,1.187,12,0.296,26,0.014,28,0.49,49,0.949,63,0.174,84,3.196,94,0.011,95,0.011,96,3.235,98,3.413,102,1.785,324,4.073,339,2.982,401,4.018,447,6.403,786,3.413,1023,4.139,1123,5.052,1262,4.438,1263,4.438,1264,6.734,1265,6.403,1266,6.414,1267,5.58,1268,6.414,1269,4.438,1270,4.438,1271,4.438,1272,4.438,1273,4.438,1274,4.001,1275,4.438,1276,4.438]],["title/modules/PaginationModule.html",[157,1.615,1277,2.668]],["body/modules/PaginationModule.html",[3,0.19,4,0.168,5,0.168,26,0.014,51,0.283,55,0.638,63,0.19,64,0.061,94,0.011,95,0.011,157,2.957,159,2.812,160,2.812,161,3.112,162,3.112,163,2.812,164,4.074,165,4.074,174,3.782,175,2.954,176,2.812,1013,5.173,1277,5.357,1278,4.85,1279,4.85,1280,4.85,1281,5.576,1282,5.576]],["title/injectables/PaginationProvider.html",[53,0.266,1013,2.498]],["body/injectables/PaginationProvider.html",[3,0.116,4,0.103,5,0.103,9,0.792,12,0.198,13,0.814,14,1.479,16,0.685,18,1.302,23,0.414,25,0.99,26,0.014,27,0.666,28,0.356,29,0.611,33,2.061,37,0.814,38,1.359,45,4.229,51,0.287,52,3.06,53,0.326,55,0.39,58,2.278,63,0.116,64,0.037,66,1.866,67,0.685,71,1.81,75,1.18,78,1.311,84,2.133,92,0.59,94,0.01,95,0.008,108,0.851,116,2.934,128,0.947,135,0.947,141,2.41,193,2.278,265,2.41,324,2.88,401,3.06,411,1.717,513,3.897,607,1.437,623,3.681,738,4.893,811,2.67,1005,3.268,1013,3.06,1023,2.882,1028,3.681,1030,2.452,1032,3.83,1077,5.428,1078,5.981,1107,3.83,1123,2.452,1258,3.517,1263,5.428,1264,4.968,1265,2.962,1269,2.962,1270,4.968,1271,2.962,1272,5.428,1273,2.962,1274,2.67,1275,2.962,1276,2.962,1283,2.962,1284,3.405,1285,3.405,1286,3.405,1287,3.405,1288,4.884,1289,4.884,1290,3.405,1291,3.405,1292,3.405,1293,3.405,1294,3.405,1295,3.405,1296,6.24,1297,6.24,1298,7.377,1299,6.875,1300,6.24,1301,4.884,1302,4.884,1303,4.884,1304,3.405,1305,3.405,1306,4.884,1307,3.405,1308,3.405,1309,3.405,1310,3.405,1311,3.405,1312,3.405,1313,3.405,1314,3.405,1315,4.884,1316,3.405,1317,3.405,1318,3.405,1319,3.405,1320,3.405]],["title/classes/PaginationQueryDto.html",[64,0.044,1028,2.353]],["body/classes/PaginationQueryDto.html",[3,0.173,4,0.153,5,0.153,9,1.181,12,0.295,23,0.542,26,0.014,28,0.399,29,0.92,51,0.212,63,0.173,64,0.07,94,0.011,95,0.011,102,1.779,151,2.135,327,6.393,339,3.216,392,3.388,444,3.57,456,4.279,513,3.773,568,2.057,578,2.443,592,4.916,623,3.773,649,3.388,1028,3.773,1029,4.684,1032,5.015,1035,6.589,1036,6.589,1084,4.007,1321,4.418,1322,5.079,1323,5.079,1324,5.079,1325,6.396]],["title/entities/Product.html",[136,1.192,493,1.615]],["body/entities/Product.html",[3,0.112,4,0.099,5,0.099,9,1.302,12,0.325,23,0.655,26,0.014,27,0.763,28,0.494,29,0.85,39,3.598,40,4.243,49,0.898,51,0.272,63,0.112,64,0.036,94,0.008,95,0.008,102,1.324,106,1.735,128,0.914,129,3.425,130,2.521,136,1.423,151,2.582,339,2.751,392,3.251,430,3.844,493,1.33,494,2.057,497,3.123,498,3.302,499,4.03,500,4.007,501,3.427,505,3.184,512,4.139,515,4.03,524,2.197,525,4.381,606,2.808,607,2.749,639,3.744,644,3.302,646,2.965,649,3.251,664,4.868,682,3.506,683,4.03,684,4.357,700,2.365,701,2.365,839,3.744,884,3.732,996,3.123,1040,3.184,1186,4.419,1191,3.732,1194,3.732,1195,3.427,1199,3.732,1201,3.732,1202,3.732,1203,3.732,1204,3.184,1209,4.388,1326,2.857,1327,4.759,1328,3.284,1329,4.759,1330,4.139,1331,6.675,1332,3.284,1333,2.857,1334,3.284,1335,3.284,1336,4.139,1337,3.284,1338,3.284,1339,3.284,1340,3.284,1341,3.284,1342,3.427,1343,3.284,1344,4.759,1345,3.284,1346,3.284,1347,3.284,1348,3.284,1349,3.284,1350,2.857,1351,2.857,1352,3.284,1353,3.284,1354,3.284,1355,3.284]],["title/controllers/ProductsController.html",[146,1.615,1356,2.872]],["body/controllers/ProductsController.html",[3,0.135,4,0.12,5,0.12,12,0.23,13,0.906,16,0.798,18,0.827,23,0.565,25,1.156,26,0.014,27,0.91,28,0.416,29,0.835,37,1.112,38,1.856,49,0.903,51,0.326,55,0.454,63,0.135,64,0.044,66,1.185,67,0.798,92,1.156,94,0.009,95,0.009,104,1.823,113,3.935,124,1.823,135,1.103,136,1.185,146,1.606,148,1.745,151,2.227,250,2.652,251,2.483,294,3.635,297,3.635,308,2.483,310,3.206,316,3.108,384,2.855,471,2.855,472,3.448,478,2.483,571,4.123,623,3.206,679,4.258,709,4.261,713,3.108,715,2.212,716,3.635,766,2.652,829,4.261,831,3.108,834,2.212,1012,4.862,1016,3.935,1021,3.108,1022,3.108,1023,2.339,1356,3.913,1357,3.448,1358,4.862,1359,3.964,1360,3.964,1361,3.964,1362,3.964,1363,3.964,1364,3.964,1365,3.964,1366,5.434,1367,3.964,1368,4.63,1369,3.964,1370,3.964,1371,3.448,1372,3.448,1373,3.108,1374,3.964,1375,3.448,1376,3.964,1377,6.2,1378,3.964,1379,3.964,1380,3.964,1381,3.964,1382,3.964,1383,3.964,1384,3.964,1385,3.964,1386,3.964,1387,3.964]],["title/modules/ProductsModule.html",[157,1.615,172,2.498]],["body/modules/ProductsModule.html",[3,0.149,4,0.132,5,0.132,26,0.014,51,0.332,55,0.5,63,0.149,64,0.048,94,0.01,95,0.01,113,4.711,132,1.514,136,1.735,148,2.555,157,2.639,159,2.203,160,2.203,161,2.439,162,2.439,163,2.203,164,3.636,165,3.636,172,5.145,174,3.239,175,2.315,176,2.203,178,3.635,188,3.882,538,3.801,706,4.653,715,2.439,827,4.653,1008,4.653,1094,4.653,1245,3.426,1248,4.55,1250,2.737,1277,4.969,1356,4.692,1371,3.801,1388,3.801,1389,3.801,1390,3.801,1391,4.37,1392,4.653,1393,4.37,1394,4.37,1395,5.667,1396,3.801,1397,4.37,1398,4.37,1399,4.37]],["title/injectables/ProductsService.html",[53,0.266,113,2.353]],["body/injectables/ProductsService.html",[3,0.117,4,0.104,5,0.104,12,0.199,13,0.819,14,2.031,16,1.333,18,1.025,23,0.584,25,1.194,26,0.014,27,0.94,28,0.43,29,0.863,37,1.105,38,2.086,49,0.925,51,0.317,53,0.327,55,0.393,63,0.117,64,0.038,67,1.333,78,1.54,92,1.148,94,0.008,95,0.008,108,0.857,113,2.898,124,1.578,135,1.843,136,1.872,141,2.421,411,2.477,471,2.471,478,2.15,561,4.272,571,4.067,679,3.909,706,4.318,709,3.851,713,3.851,715,1.915,716,3.286,827,4.548,829,3.851,831,3.851,834,1.915,1008,4.446,1012,4.498,1016,3.694,1018,2.985,1020,4.272,1021,2.691,1022,2.691,1023,2.024,1094,4.548,1095,4.272,1096,4.272,1250,2.15,1258,4.131,1358,4.498,1368,4.446,1375,2.985,1392,4.446,1395,4.989,1396,2.985,1400,2.985,1401,3.431,1402,3.431,1403,3.431,1404,3.431,1405,3.431,1406,3.431,1407,2.985,1408,3.431,1409,3.431,1410,3.431,1411,3.431,1412,3.431,1413,3.431]],["title/guards/RolesGuard.html",[0,2.353,200,2.872]],["body/guards/RolesGuard.html",[0,3.29,2,2.966,3,0.14,4,0.124,5,0.124,9,0.958,10,3.29,12,0.239,13,0.93,15,5.314,16,0.829,18,1.32,23,0.472,25,0.966,26,0.014,27,0.862,28,0.348,29,0.698,30,4.373,31,4.246,33,2.354,35,1.521,36,3.29,37,0.93,39,3.59,40,3.113,41,4.851,42,3.731,51,0.283,53,0.372,55,0.471,63,0.14,64,0.061,65,2.182,66,1.668,67,0.829,71,1.58,72,3.582,74,2.354,75,1.933,92,0.966,94,0.009,95,0.009,104,3.662,138,3.29,155,3.582,193,2.755,200,4.016,310,2.43,374,4.851,376,3.582,377,6.494,386,2.966,387,3.582,388,2.43,389,3.582,390,2.966,391,3.582,408,3.582,409,3.582,430,3.494,766,2.755,837,2.298,929,2.966,1131,3.229,1414,3.582,1415,4.118,1416,4.118,1417,5.577,1418,5.577,1419,5.577,1420,4.851,1421,5.577,1422,3.229,1423,4.118,1424,4.118,1425,4.118,1426,5.577,1427,4.118,1428,4.118,1429,4.118,1430,5.577,1431,4.118,1432,4.118]],["title/classes/SeedProducts1759619432047.html",[64,0.044,1433,3.127]],["body/classes/SeedProducts1759619432047.html",[3,0.137,4,0.121,5,0.166,9,1.275,12,0.363,13,0.914,14,1.876,23,0.464,25,0.95,26,0.014,27,1.011,28,0.342,29,0.686,37,0.914,38,1.866,51,0.229,63,0.137,64,0.044,65,2.903,71,1.003,78,1.8,94,0.009,95,0.009,106,1.245,128,1.525,136,1.2,145,3.492,265,3.058,324,2.764,392,2.127,411,2.764,493,1.626,510,2.891,513,2.368,568,1.626,613,6.66,633,4.847,644,3.234,646,2.903,649,2.127,682,3.909,683,3.947,773,4.894,834,3.742,863,3.492,904,2.891,988,4.696,1204,2.686,1336,3.492,1342,3.947,1433,4.298,1434,5.429,1435,3.492,1436,6.241,1437,4.768,1438,4.768,1439,5.481,1440,4.014,1441,5.481,1442,4.014,1443,4.298,1444,6.241,1445,3.492,1446,4.014,1447,4.014,1448,4.014,1449,4.014,1450,6.241,1451,4.014,1452,4.014,1453,4.014,1454,4.014,1455,4.014,1456,4.014,1457,4.014,1458,4.014,1459,4.014,1460,4.014,1461,5.481,1462,4.014,1463,4.014,1464,3.492,1465,4.014,1466,4.014,1467,3.148,1468,3.492,1469,3.148,1470,3.148,1471,4.014,1472,4.014,1473,4.014,1474,3.492,1475,3.492,1476,4.014,1477,4.014,1478,4.014,1479,4.014,1480,4.014,1481,4.014,1482,5.481,1483,5.481,1484,4.014,1485,4.014,1486,4.014,1487,3.492,1488,4.014]],["title/classes/SignInDto.html",[64,0.044,268,2.498]],["body/classes/SignInDto.html",[3,0.172,4,0.152,5,0.152,9,1.623,12,0.293,23,0.54,26,0.014,28,0.397,35,1.645,49,0.918,51,0.266,63,0.172,64,0.07,94,0.011,95,0.011,102,1.772,103,3.771,151,2.126,230,3.771,257,4.586,268,3.989,306,2.815,322,4.904,336,3.955,456,4.26,568,2.043,572,3.757,578,2.427,591,5.026,724,5.54,743,6.071,744,5.54,1489,6.071,1490,4.388,1491,5.044,1492,5.044,1493,6.368,1494,5.044,1495,5.044,1496,5.044]],["title/injectables/SignInProvider.html",[53,0.266,349,2.498]],["body/injectables/SignInProvider.html",[3,0.131,4,0.116,5,0.116,9,0.895,10,3.601,11,3.561,12,0.224,13,0.887,14,1.581,16,1.228,18,1.375,23,0.451,25,0.922,26,0.014,27,0.726,28,0.332,29,0.666,33,2.247,35,1.551,37,0.887,38,1.481,40,2.147,51,0.299,52,2.41,53,0.355,54,2.574,55,0.44,63,0.131,64,0.042,66,1.969,67,1.228,71,1.33,74,1.624,75,1.333,78,1.638,92,0.667,94,0.009,95,0.009,103,2.561,104,1.769,106,1.193,108,0.961,114,4.171,134,3.347,135,1.698,137,2.038,138,3.886,141,2.78,230,1.851,265,2.576,266,4.174,267,4.174,268,4.48,272,3.833,288,3.833,311,3.017,312,3.017,325,4.174,329,4.174,332,2.27,334,2.27,347,4.171,348,4.126,349,3.335,351,2.771,361,3.347,369,4.63,430,2.41,435,2.771,437,3.347,438,4.786,609,3.017,768,3.347,1128,3.347,1130,3.347,1131,3.017,1497,5.309,1498,3.347,1499,5.323,1500,3.847,1501,6.586,1502,3.847,1503,3.847,1504,3.847,1505,6.104,1506,3.847,1507,3.847,1508,3.847,1509,3.847,1510,3.847,1511,3.847,1512,3.847]],["title/classes/UpdateCartItemDto.html",[64,0.044,463,2.498]],["body/classes/UpdateCartItemDto.html",[3,0.199,4,0.177,5,0.177,12,0.34,23,0.496,26,0.014,28,0.365,51,0.245,63,0.199,64,0.077,94,0.012,95,0.012,102,1.942,125,3.209,151,1.954,339,2.827,449,4.399,463,4.372,568,2.372,570,4.591,574,5.093,576,5.472,577,4.216,578,2.817,579,4.591,1513,6.07,1514,5.855]],["title/injectables/UpdateCartItemProvider.html",[53,0.266,533,2.498]],["body/injectables/UpdateCartItemProvider.html",[3,0.104,4,0.093,5,0.093,12,0.178,13,0.754,14,1.962,16,1.081,18,0.944,23,0.561,25,1.148,26,0.014,27,0.904,28,0.413,29,0.829,35,1.421,37,1.056,38,1.957,49,0.982,51,0.294,53,0.301,54,2.049,55,0.35,63,0.104,64,0.034,67,1.081,71,1.656,74,1.908,75,1.567,76,1.807,78,1.84,90,1.807,92,0.783,94,0.008,95,0.008,106,2.182,108,0.765,115,3.546,116,2.776,117,3.825,122,3.262,125,3.541,126,2.205,127,2.401,128,0.852,129,3.193,130,1.622,131,1.348,132,1.061,133,2.205,135,1.258,136,1.607,139,3.025,140,2.401,141,1.292,278,2.205,341,1.709,414,1.709,453,4.215,455,3.933,461,2.401,462,5.374,463,4.293,468,2.664,478,1.918,498,2.668,533,2.832,540,2.401,544,3.933,547,3.933,551,3.933,558,3.933,563,2.664,607,1.292,617,2.664,633,3.025,639,3.971,644,1.807,655,2.401,717,1.918,797,2.664,833,1.807,996,1.709,1005,3.025,1143,2.664,1148,3.933,1515,5.962,1516,2.664,1517,4.522,1518,5.375,1519,3.063,1520,3.063,1521,3.063,1522,3.063,1523,3.063,1524,3.063,1525,3.063,1526,3.063,1527,4.522,1528,4.522,1529,3.063,1530,4.522,1531,3.063,1532,3.063,1533,3.063,1534,4.522,1535,3.063,1536,2.664,1537,3.063]],["title/classes/UpdateProductDto.html",[64,0.044,1368,2.498]],["body/classes/UpdateProductDto.html",[3,0.182,4,0.162,5,0.162,12,0.311,23,0.56,26,0.014,28,0.412,29,0.938,51,0.3,63,0.182,64,0.073,94,0.011,95,0.011,102,1.84,151,2.208,306,2.992,411,2.703,430,4.144,498,4.233,500,3.903,568,2.171,578,2.579,592,5.012,633,4.425,679,3.163,681,4.203,716,3.586,806,4.425,839,4.8,1368,4.144,1538,6.241,1539,6.615,1540,5.361,1541,5.361,1542,5.361,1543,5.361,1544,6.615]],["title/injectables/UpdateProductProvider.html",[53,0.266,1392,2.498]],["body/injectables/UpdateProductProvider.html",[3,0.142,4,0.126,5,0.126,9,0.972,12,0.243,13,0.939,14,1.65,16,1.372,18,1.176,23,0.54,25,1.181,26,0.014,27,0.869,28,0.425,29,0.798,37,0.939,38,1.567,49,0.798,51,0.298,53,0.376,55,0.478,63,0.142,64,0.046,67,0.841,71,1.592,74,1.764,75,1.449,78,1.512,92,0.976,94,0.009,95,0.009,106,1.296,108,1.045,116,2.883,128,1.163,131,1.84,132,1.449,135,1.163,136,2.039,265,2.689,396,4.9,478,2.619,498,2.466,571,4.023,644,2.466,646,2.215,708,3.01,710,2.797,711,3.636,712,3.769,714,3.636,715,2.333,716,2.797,717,2.619,833,2.466,834,2.333,835,3.636,836,3.278,837,2.333,838,3.636,839,2.797,1123,5.126,1358,4.997,1368,4.695,1392,3.529,1407,3.636,1545,5.931,1546,6.372,1547,4.18,1548,6.372,1549,4.18,1550,5.634,1551,4.18,1552,5.634,1553,4.18,1554,3.636,1555,5.634,1556,4.18,1557,4.18,1558,4.18,1559,4.18]],["title/entities/User.html",[35,0.895,493,1.615]],["body/entities/User.html",[3,0.124,4,0.11,5,0.11,12,0.345,23,0.643,26,0.014,28,0.493,29,0.805,35,1.15,39,2.716,40,4.286,49,0.951,51,0.283,63,0.124,64,0.056,94,0.009,95,0.009,102,1.426,103,2.853,104,3.391,106,1.839,128,1.014,129,3.546,130,1.931,151,2.536,230,2.853,310,2.151,332,3.498,334,3.498,493,2.077,494,2.284,497,3.309,499,4.27,500,3.796,501,3.692,505,3.43,515,4.27,524,2.439,525,4.148,607,2.967,639,3.967,996,3.309,1107,4.02,1186,4.882,1187,6.414,1191,4.02,1194,5.782,1199,5.045,1209,4.65,1331,6.607,1333,3.171,1342,3.692,1350,3.171,1351,3.171,1560,3.171,1561,5.127,1562,3.645,1563,3.645,1564,7.374,1565,3.645,1566,3.645,1567,3.645,1568,3.645,1569,5.127,1570,3.645,1571,3.645,1572,3.645,1573,3.645,1574,3.645,1575,5.127,1576,3.171,1577,3.645]],["title/controllers/UsersController.html",[146,1.615,1578,2.872]],["body/controllers/UsersController.html",[3,0.105,4,0.094,5,0.094,9,1.676,12,0.18,13,0.761,16,0.624,18,0.647,23,0.263,25,0.537,26,0.014,27,0.423,28,0.457,29,0.388,35,1.809,37,0.996,38,1.661,39,2.417,49,0.861,51,0.295,55,0.355,63,0.105,64,0.034,66,0.927,67,0.624,75,2.307,92,0.537,94,0.008,95,0.008,102,0.863,103,3.31,104,2.098,106,0.962,114,3.022,124,1.426,135,0.863,137,1.643,138,3.523,146,2.193,148,1.365,151,1.035,230,3.525,250,2.075,251,1.943,252,3.286,254,4.71,255,4.71,261,3.578,265,2.285,274,3.969,275,3.969,278,3.286,279,3.969,281,2.233,282,2.697,286,2.697,292,3.622,294,3.053,295,2.697,296,1.943,297,3.053,301,3.969,303,3.969,304,4.71,305,2.697,306,1.731,308,1.943,310,2.692,316,2.432,318,4.71,320,3.053,322,4.257,324,2.301,331,5.084,332,3.755,334,3.755,337,2.432,340,3.286,384,2.233,390,3.286,411,2.301,436,2.697,497,1.731,500,1.83,637,2.432,721,4.514,754,4.246,758,2.432,760,1.943,762,2.432,766,2.075,772,3.969,773,2.432,786,3.053,931,3.578,1084,2.859,1372,2.697,1578,3.286,1579,2.697,1580,4.563,1581,4.563,1582,3.101,1583,6.656,1584,4.563,1585,4.563,1586,3.969,1587,3.101,1588,6.656,1589,4.563,1590,4.563,1591,4.563,1592,5.971,1593,3.101,1594,3.101,1595,3.969,1596,4.563,1597,2.697,1598,3.101,1599,3.101,1600,3.101,1601,4.563,1602,4.563,1603,4.563,1604,3.101,1605,3.101,1606,3.101,1607,3.101,1608,3.101,1609,3.101,1610,2.432,1611,3.101,1612,3.101]],["title/modules/UsersModule.html",[157,1.615,173,2.353]],["body/modules/UsersModule.html",[3,0.159,4,0.141,5,0.141,26,0.014,35,1.512,51,0.33,55,0.536,63,0.159,64,0.051,94,0.01,95,0.01,114,4.503,132,1.623,148,2.673,157,2.73,159,2.361,160,2.361,161,2.613,162,2.613,163,2.361,164,3.761,165,3.761,169,3.804,173,4.784,174,3.389,175,2.481,176,2.361,178,2.933,188,3.133,351,4.373,751,4.742,760,2.933,1099,4.742,1109,4.742,1245,3.672,1248,4.762,1249,3.372,1250,2.933,1578,4.853,1597,4.073,1613,4.073,1614,4.073,1615,4.073,1616,4.683,1617,4.683,1618,4.683,1619,4.073,1620,4.683]],["title/injectables/UsersService.html",[53,0.266,114,2.226]],["body/injectables/UsersService.html",[3,0.136,4,0.12,5,0.12,12,0.232,13,0.909,14,1.98,16,1.251,18,1.138,23,0.566,25,1.158,26,0.014,27,0.912,28,0.417,29,0.837,35,1.735,37,1.115,38,2.011,49,0.905,51,0.302,53,0.364,55,0.456,63,0.136,64,0.044,66,1.192,67,1.251,78,1.669,92,1.077,94,0.009,95,0.009,103,2.624,106,1.236,108,0.996,114,3.044,122,1.755,124,1.833,135,1.73,137,2.889,141,2.624,265,3.226,411,2.75,721,4.637,751,4.529,754,4.875,758,3.125,760,2.497,762,3.125,1099,4.637,1102,4.744,1104,4.744,1109,4.637,1110,4.744,1111,4.744,1249,2.87,1250,2.497,1258,4.814,1619,3.467,1621,3.467,1622,3.985,1623,3.985,1624,3.985,1625,4.744,1626,3.985,1627,3.985,1628,3.985,1629,3.985,1630,3.985]],["title/classes/ValidationException.html",[64,0.044,763,2.668]],["body/classes/ValidationException.html",[3,0.165,4,0.147,5,0.147,9,1.446,18,1.509,23,0.411,25,0.841,26,0.014,27,0.662,28,0.303,29,0.608,45,2.71,49,0.905,51,0.203,55,0.556,63,0.211,64,0.068,66,1.859,76,2.865,94,0.01,95,0.01,234,4.296,291,5.381,296,3.042,341,3.47,414,2.71,568,1.967,678,4.477,763,4.159,764,4.159,803,3.249,804,3.808,805,5.505,806,4.587,807,5.206,808,4.225,810,5.408,812,5.408,813,4.225,814,4.225,815,4.225,816,3.497,817,3.808,818,4.225,819,4.477,820,4.225,821,4.225,822,4.587,823,5.408,824,3.497,825,3.497,826,3.497,1631,4.857]],["title/coverage.html",[1632,4.278]],["body/coverage.html",[0,2.959,1,1.825,5,0.082,6,2.373,7,1.964,8,2.373,26,0.014,28,0.17,33,1.151,35,1.257,53,0.533,61,2.139,64,0.083,75,0.945,94,0.007,95,0.007,96,2.825,97,1.825,99,2.373,100,2.373,107,1.709,109,2.373,110,3.251,113,1.609,114,1.522,117,1.522,120,1.709,125,2.576,129,1.376,136,1.5,146,2.57,147,1.964,149,2.373,153,1.709,163,1.376,177,2.139,194,1.964,196,2.139,198,1.964,200,1.964,211,2.139,244,2.373,248,1.964,249,2.373,251,1.709,268,1.709,298,1.709,347,1.522,348,1.709,349,1.709,356,1.964,365,2.373,372,2.373,385,2.139,421,2.373,443,2.373,450,1.964,451,2.373,463,1.709,473,1.609,475,1.964,476,1.964,493,2.441,495,2.139,496,3.251,533,1.709,543,2.373,569,2.373,570,3.251,580,1.709,581,2.373,582,2.373,595,1.709,596,2.373,597,2.373,606,1.609,607,1.75,649,4.315,679,1.609,680,2.373,681,3.251,706,1.709,707,2.373,708,3.611,721,1.709,722,2.373,723,2.373,751,1.709,752,2.373,753,3.251,763,1.825,764,2.774,784,2.373,785,2.373,803,1.825,804,3.251,827,1.709,828,2.373,841,2.139,842,2.373,843,2.373,844,2.373,878,1.964,879,3.251,880,3.251,891,1.964,988,1.825,994,1.709,995,3.251,996,1.522,1008,1.709,1009,3.251,1010,2.373,1013,1.709,1016,1.609,1023,1.609,1028,1.609,1029,1.825,1085,1.709,1086,3.611,1094,1.709,1099,1.709,1100,3.251,1101,2.373,1109,1.709,1113,2.373,1114,2.373,1141,2.373,1155,1.964,1156,3.251,1157,3.251,1181,2.373,1185,2.373,1195,5.772,1214,2.373,1222,1.964,1223,2.373,1232,1.709,1252,2.373,1262,2.373,1283,2.373,1321,2.373,1326,3.606,1356,1.964,1357,2.373,1368,1.709,1373,2.139,1392,1.709,1400,2.373,1414,2.373,1422,2.139,1433,2.139,1434,2.373,1435,2.373,1443,2.139,1489,2.373,1490,2.373,1497,2.373,1498,2.373,1513,2.373,1515,2.373,1516,2.373,1538,2.373,1545,2.373,1560,2.373,1578,1.964,1579,2.373,1621,2.373,1632,2.139,1633,2.373,1634,2.728,1635,2.728,1636,5.015,1637,6.796,1638,6.796,1639,5.602,1640,3.606,1641,2.373,1642,2.373,1643,2.373,1644,2.373,1645,6.961,1646,5.602,1647,2.728,1648,4.146,1649,4.146,1650,6.595,1651,2.728,1652,7.315,1653,6.345,1654,2.728,1655,5.015,1656,2.728,1657,2.728,1658,2.373,1659,4.146,1660,2.373,1661,2.728,1662,2.728,1663,2.373,1664,2.373,1665,2.373,1666,2.728,1667,2.373,1668,2.728,1669,2.728]],["title/dependencies.html",[160,2.421,1670,2.891]],["body/dependencies.html",[26,0.014,55,0.641,56,3.511,57,3.749,58,3.749,64,0.075,94,0.011,95,0.011,128,1.559,132,1.942,160,2.826,193,3.749,306,3.128,383,4.035,401,3.511,422,4.875,578,2.696,1576,4.875,1671,5.604,1672,5.604,1673,7.316,1674,5.604,1675,6.797,1676,5.604,1677,5.604,1678,5.604,1679,5.604,1680,5.604,1681,5.604,1682,5.604,1683,5.604,1684,5.604,1685,5.604,1686,5.604,1687,5.604,1688,5.604,1689,5.604,1690,5.604]],["title/miscellaneous/enumerations.html",[1691,2.082,1692,4.175]],["body/miscellaneous/enumerations.html",[12,0.303,26,0.014,35,1.46,94,0.011,95,0.011,104,2.993,308,4.077,384,3.76,684,4.354,766,3.493,1084,5.168,1198,5.661,1691,3.271,1692,4.542,1693,5.222,1694,7.423,1695,5.222,1696,6.508,1697,5.222,1698,6.508,1699,5.222,1700,5.222,1701,5.222,1702,5.222,1703,6.508,1704,6.508,1705,6.508,1706,6.508,1707,6.508,1708,5.222,1709,5.661,1710,5.661,1711,5.661,1712,5.661,1713,5.661,1714,5.661,1715,5.222,1716,4.542,1717,6.508]],["title/miscellaneous/functions.html",[1691,2.082,1718,4.175]],["body/miscellaneous/functions.html",[12,0.37,26,0.012,94,0.012,95,0.012,163,3.894,1658,5.546,1691,3.994,1718,5.546,1719,6.376]],["title/index.html",[12,0.193,938,2.606,1720,3.324]],["body/index.html",[4,0.132,9,1.018,26,0.014,86,3.433,94,0.01,95,0.01,116,1.773,176,3.503,237,3.808,322,4.363,386,3.153,415,3.808,638,3.433,816,4.184,904,3.153,915,3.433,1058,3.808,1464,6.596,1610,5.114,1632,3.433,1633,3.808,1721,4.378,1722,4.378,1723,6.522,1724,4.378,1725,3.808,1726,4.378,1727,3.808,1728,4.378,1729,6.522,1730,4.378,1731,6.947,1732,4.378,1733,7.582,1734,4.378,1735,4.378,1736,4.378,1737,4.378,1738,5.81,1739,4.378,1740,4.378,1741,6.522,1742,4.378,1743,5.81,1744,4.378,1745,4.378,1746,4.378,1747,6.947,1748,4.378,1749,4.378,1750,4.378,1751,4.378,1752,3.808,1753,6.947,1754,5.81,1755,4.378,1756,5.673,1757,4.378,1758,6.043,1759,4.378,1760,4.378,1761,4.378,1762,4.378,1763,3.808,1764,4.378,1765,6.522,1766,4.378,1767,3.808,1768,4.378,1769,5.81,1770,4.378,1771,4.378,1772,4.378,1773,4.378,1774,3.808,1775,4.378,1776,4.378,1777,5.054,1778,4.378,1779,4.378,1780,4.378,1781,4.378,1782,4.378,1783,5.81,1784,4.378,1785,4.378,1786,3.808,1787,5.81,1788,5.81,1789,4.378,1790,4.378,1791,4.378,1792,4.378,1793,4.378,1794,4.378,1795,4.378,1796,4.378,1797,4.378,1798,3.808,1799,3.808,1800,4.378,1801,4.378,1802,4.378,1803,4.378,1804,4.378,1805,4.378,1806,3.808]],["title/modules.html",[159,2.751]],["body/modules.html",[26,0.012,94,0.012,95,0.012,158,4.25,159,2.976,169,3.697,170,3.697,171,3.948,172,3.697,173,3.482,1277,3.948,1758,7.046,1807,8.1,1808,8.1,1809,8.1]],["title/overview.html",[1810,4.746]],["body/overview.html",[2,2.617,26,0.014,94,0.009,95,0.009,98,2.431,107,3.708,108,0.908,113,4.258,114,4.027,117,3.304,136,1.77,148,1.6,153,3.708,157,1.472,158,5.662,159,1.832,160,1.832,161,2.028,162,2.028,163,1.832,164,2.028,165,2.028,166,3.161,167,3.161,168,3.161,169,4.755,170,5.044,171,5.224,172,5.044,173,4.607,174,2.855,175,1.925,176,1.832,298,3.708,344,3.161,345,3.161,346,3.161,347,3.585,348,3.708,349,3.708,473,4.258,494,2.276,529,3.161,530,3.161,531,3.161,532,3.161,533,3.708,568,1.472,595,3.708,706,3.708,751,3.708,827,3.708,994,3.708,1008,3.708,1013,4.521,1085,3.708,1094,3.708,1099,3.708,1109,3.708,1232,3.708,1240,3.161,1241,3.161,1277,4.699,1278,3.161,1279,3.161,1280,3.161,1388,3.161,1389,3.161,1390,3.161,1392,3.708,1467,2.849,1468,3.161,1469,2.849,1470,2.849,1613,3.161,1614,3.161,1615,3.161,1810,3.161,1811,3.633,1812,3.633,1813,3.161]],["title/properties.html",[102,1.335,1670,2.891]],["body/properties.html",[9,1.47,26,0.014,94,0.012,95,0.012,102,1.759,1799,5.499,1806,5.499,1814,6.321,1815,6.321,1816,6.321]],["title/miscellaneous/variables.html",[1691,2.082,1817,4.175]],["body/miscellaneous/variables.html",[9,1.555,12,0.04,13,0.114,26,0.013,27,0.911,28,0.161,31,0.427,35,0.726,45,0.705,49,0.221,50,0.402,61,0.99,66,0.204,71,0.315,81,0.592,90,0.402,92,0.219,94,0.004,95,0.002,97,0.845,102,0.491,104,0.313,137,0.361,176,0.637,177,0.534,209,0.592,210,1.916,211,0.99,212,0.592,242,2.537,251,1.105,252,0.909,253,0.534,258,3.807,261,0.534,308,0.791,364,0.592,381,0.99,385,0.99,388,2.35,390,2.868,392,1.86,399,1.535,406,1.098,411,1.111,416,1.916,444,1.229,475,0.909,476,0.49,528,1.098,560,1.535,638,2.03,644,3.943,646,3.541,651,0.592,677,0.592,682,4.187,683,4.813,738,1.384,741,0.592,834,1.806,856,1.098,859,2.868,865,0.592,894,0.534,918,0.534,929,0.49,983,0.534,988,1.181,1025,1.098,1040,0.845,1048,0.592,1059,0.592,1070,1.098,1084,2.199,1195,0.909,1204,0.456,1267,0.592,1274,1.727,1330,1.535,1342,1.864,1373,2.537,1420,1.098,1422,0.99,1437,1.098,1438,2.815,1443,0.99,1445,2.252,1467,0.534,1469,0.99,1470,2.537,1474,0.592,1475,0.592,1487,1.916,1536,0.592,1554,0.592,1586,1.098,1595,1.098,1610,1.384,1625,0.592,1640,0.592,1641,0.592,1642,1.098,1643,0.592,1644,0.592,1660,1.098,1663,0.592,1664,1.098,1665,1.098,1667,1.535,1691,0.427,1709,3.269,1710,4.556,1711,2.815,1712,4.342,1713,3.643,1714,4.095,1716,2.815,1725,1.535,1727,0.592,1752,1.098,1756,1.098,1763,1.098,1767,0.592,1774,1.098,1777,0.592,1786,3.269,1798,1.098,1813,1.098,1817,0.592,1818,0.681,1819,0.681,1820,1.262,1821,0.681,1822,0.681,1823,0.681,1824,0.681,1825,0.681,1826,1.262,1827,0.681,1828,0.681,1829,0.681,1830,0.681,1831,0.681,1832,0.681,1833,1.765,1834,0.681,1835,0.681,1836,0.681,1837,6.645,1838,1.262,1839,4.708,1840,3.758,1841,0.681,1842,3.236,1843,1.765,1844,3.51,1845,2.588,1846,3.983,1847,2.588,1848,1.262,1849,1.765,1850,3.758,1851,2.203,1852,1.262,1853,2.203,1854,5.237,1855,2.203,1856,1.262,1857,1.262,1858,0.681,1859,3.758,1860,2.588,1861,4.708,1862,2.203,1863,2.93,1864,4.549,1865,2.588,1866,1.765,1867,2.93,1868,1.262,1869,1.765,1870,0.681,1871,0.681,1872,1.262,1873,0.681,1874,1.262,1875,1.262,1876,1.262,1877,3.236,1878,0.681,1879,6.216,1880,0.681,1881,3.51,1882,5.727,1883,2.203,1884,3.236,1885,3.983,1886,3.983,1887,2.93,1888,5.237,1889,2.203,1890,1.262,1891,1.765,1892,2.203,1893,2.203,1894,1.262,1895,1.262,1896,2.588,1897,3.51,1898,1.765,1899,2.93,1900,2.203,1901,3.758,1902,2.203,1903,1.765,1904,3.236,1905,3.758,1906,3.758,1907,1.262,1908,1.765,1909,0.681,1910,4.376,1911,2.203,1912,4.376,1913,5.641,1914,2.588,1915,2.203,1916,1.262,1917,4.855,1918,1.262,1919,0.681,1920,3.236,1921,1.262,1922,0.681,1923,1.765,1924,1.765,1925,4.376,1926,2.203,1927,2.588,1928,0.681,1929,0.681,1930,1.262,1931,5.886,1932,2.203,1933,0.681,1934,4.855,1935,1.262,1936,1.262,1937,1.262,1938,2.203,1939,0.681,1940,1.262,1941,1.765,1942,1.262,1943,1.262,1944,1.765,1945,0.681,1946,1.262,1947,0.681,1948,0.681,1949,0.681,1950,1.262,1951,0.681,1952,1.262,1953,2.93,1954,0.681,1955,1.262,1956,0.681,1957,0.681,1958,1.262,1959,2.588,1960,1.262,1961,1.765,1962,2.588,1963,1.262,1964,2.203,1965,0.681,1966,1.262,1967,1.262,1968,1.765,1969,1.765,1970,1.765,1971,2.588,1972,0.681,1973,2.203,1974,0.681,1975,0.681,1976,1.765,1977,1.262,1978,3.758,1979,1.765,1980,2.93,1981,0.681,1982,1.262,1983,3.236,1984,1.262,1985,1.262,1986,0.681,1987,2.203,1988,2.588,1989,0.681,1990,0.681,1991,0.681,1992,0.681,1993,2.588,1994,0.681,1995,0.681,1996,0.681,1997,2.203,1998,2.93,1999,1.262,2000,0.681,2001,0.681,2002,1.765,2003,3.236,2004,3.236,2005,3.236,2006,0.681,2007,2.203,2008,1.262,2009,1.765,2010,2.203,2011,0.681,2012,1.765,2013,1.765,2014,0.681,2015,0.681,2016,1.262,2017,1.262,2018,1.262,2019,2.203,2020,1.765,2021,0.681,2022,1.765,2023,0.681,2024,0.681,2025,0.681,2026,2.203,2027,0.681,2028,1.765,2029,0.681,2030,0.681,2031,0.681,2032,0.681,2033,0.681,2034,1.262,2035,1.765,2036,1.765,2037,0.681,2038,1.262,2039,2.203,2040,2.93,2041,1.765,2042,1.262,2043,0.681,2044,1.262,2045,0.681,2046,0.681,2047,0.681,2048,1.262,2049,1.262,2050,1.765,2051,2.93,2052,1.262,2053,2.588,2054,1.262,2055,1.262,2056,0.681,2057,1.765,2058,0.681,2059,0.681,2060,1.765,2061,2.93,2062,1.262,2063,1.262,2064,3.51,2065,0.681,2066,1.262,2067,1.262,2068,1.262,2069,0.681,2070,0.681,2071,3.758,2072,1.765,2073,2.588,2074,1.765,2075,1.765,2076,2.588,2077,2.203,2078,1.765,2079,0.681,2080,0.681,2081,2.203,2082,0.681,2083,1.765,2084,1.765,2085,1.262,2086,0.681,2087,1.765,2088,0.681,2089,1.262,2090,1.262,2091,3.51,2092,1.262,2093,0.681,2094,1.262,2095,0.681,2096,1.262,2097,1.262,2098,2.203,2099,0.681,2100,1.262,2101,0.681,2102,1.262,2103,0.681,2104,0.681,2105,1.262,2106,1.765,2107,2.588,2108,2.203,2109,2.203,2110,1.262,2111,0.681,2112,1.262,2113,3.236,2114,2.203,2115,1.262,2116,0.681,2117,0.681,2118,1.262,2119,1.765,2120,0.681,2121,0.681,2122,0.681,2123,2.203,2124,1.262,2125,1.765,2126,0.681,2127,0.681,2128,0.681,2129,3.51,2130,0.681,2131,0.681,2132,1.262,2133,1.765,2134,2.588,2135,1.262,2136,1.765,2137,0.681,2138,1.262,2139,3.236,2140,0.681,2141,0.681,2142,0.681,2143,0.681,2144,1.262,2145,0.681,2146,0.681,2147,1.262,2148,1.262,2149,1.262,2150,1.262,2151,1.262,2152,0.681,2153,1.262,2154,0.681,2155,0.681,2156,0.681,2157,0.681,2158,0.681,2159,0.681,2160,4.188,2161,4.549,2162,1.765,2163,1.262,2164,1.765,2165,1.765,2166,1.765,2167,0.681,2168,1.262,2169,1.262,2170,0.681,2171,0.681,2172,2.203,2173,2.203,2174,1.262,2175,1.262,2176,0.681,2177,0.681,2178,0.681,2179,0.681,2180,0.681,2181,0.681,2182,0.681,2183,1.262,2184,2.203,2185,1.262,2186,0.681,2187,2.203,2188,1.765,2189,0.681,2190,0.681,2191,0.681,2192,0.681,2193,0.681,2194,1.262,2195,0.681,2196,1.765,2197,1.765,2198,1.262,2199,1.765,2200,0.681,2201,0.681,2202,1.262,2203,0.681,2204,0.681,2205,1.262,2206,0.681,2207,0.681,2208,1.262,2209,0.681,2210,0.681,2211,1.262,2212,0.681,2213,0.681,2214,0.681,2215,1.262,2216,3.236,2217,1.262,2218,2.203,2219,0.681,2220,1.262,2221,1.765,2222,2.93,2223,0.681,2224,1.262,2225,1.262,2226,0.681,2227,1.765,2228,0.681,2229,1.262,2230,0.681,2231,0.681,2232,0.681,2233,1.262,2234,0.681,2235,2.203,2236,1.262,2237,0.681,2238,0.681,2239,0.681,2240,2.203,2241,0.681,2242,3.758,2243,0.681,2244,0.681,2245,2.203,2246,2.588,2247,0.681,2248,1.262,2249,0.681,2250,1.262,2251,0.681,2252,1.765,2253,1.262,2254,0.681,2255,0.681,2256,0.681,2257,3.51,2258,1.262,2259,0.681,2260,0.681,2261,2.203,2262,0.681,2263,0.681,2264,1.262,2265,0.681,2266,1.262,2267,3.236,2268,0.681,2269,0.681,2270,0.681,2271,0.681,2272,0.681,2273,2.203,2274,1.262,2275,0.681,2276,0.681,2277,0.681,2278,0.681,2279,0.681,2280,0.681,2281,0.681,2282,0.681,2283,3.236,2284,0.681,2285,0.681,2286,0.681,2287,0.681,2288,0.681,2289,0.681,2290,1.765,2291,0.681,2292,2.588,2293,0.681,2294,1.262,2295,1.262,2296,0.681,2297,0.681,2298,0.681,2299,0.681,2300,0.681,2301,2.203,2302,2.203,2303,0.681,2304,0.681,2305,0.681,2306,0.681,2307,0.681,2308,0.681,2309,0.681,2310,0.681,2311,1.262,2312,0.681,2313,0.681,2314,2.588,2315,1.262,2316,0.681,2317,0.681,2318,1.262,2319,1.765,2320,0.681,2321,0.681,2322,0.681,2323,0.681,2324,0.681,2325,0.681,2326,1.262,2327,0.681,2328,0.681,2329,1.262,2330,1.262,2331,0.681,2332,1.262,2333,0.681,2334,0.681,2335,0.681,2336,0.681,2337,0.681,2338,0.681,2339,0.681,2340,0.681,2341,0.681,2342,0.681,2343,1.765,2344,1.262,2345,0.681,2346,1.262,2347,0.681,2348,0.681,2349,0.681,2350,0.681,2351,0.681,2352,0.681,2353,0.681,2354,0.681,2355,0.681,2356,0.681,2357,0.681,2358,0.681,2359,0.681,2360,0.681,2361,0.681,2362,0.681,2363,2.203,2364,1.262,2365,1.262,2366,0.681,2367,0.681,2368,1.262,2369,0.681,2370,1.765,2371,1.765,2372,0.681,2373,0.681,2374,0.681,2375,1.765,2376,0.681,2377,1.765,2378,0.681,2379,2.203,2380,0.681,2381,1.262,2382,1.765,2383,0.681,2384,1.262,2385,0.681,2386,1.765,2387,0.681,2388,1.262,2389,3.236,2390,2.588,2391,1.262,2392,1.262,2393,1.262,2394,0.681,2395,1.765,2396,2.203,2397,2.588,2398,0.681,2399,0.681,2400,0.681,2401,0.681,2402,0.681,2403,1.765,2404,0.681,2405,1.262,2406,0.681,2407,1.262,2408,0.681,2409,0.681,2410,2.588,2411,1.262,2412,1.262,2413,2.203,2414,0.681,2415,0.681,2416,0.681,2417,0.681,2418,0.681,2419,0.681,2420,1.262,2421,0.681,2422,1.262,2423,1.262,2424,0.681,2425,2.203,2426,0.681,2427,0.681,2428,0.681,2429,0.681,2430,2.203,2431,0.681,2432,0.681,2433,0.681,2434,1.765,2435,2.203,2436,0.681,2437,0.681,2438,1.262,2439,0.681,2440,0.681,2441,0.681,2442,0.681,2443,1.262,2444,1.765,2445,0.681,2446,0.681,2447,0.681,2448,0.681,2449,0.681,2450,0.681,2451,0.681,2452,0.681,2453,0.681,2454,0.681,2455,0.681,2456,0.681,2457,1.765,2458,0.681,2459,0.681,2460,0.681,2461,0.681,2462,0.681,2463,0.681,2464,0.681,2465,0.681,2466,0.681,2467,0.681,2468,0.681,2469,0.681,2470,0.681,2471,0.681,2472,0.681,2473,1.765,2474,0.681,2475,1.765,2476,1.765,2477,0.681,2478,0.681,2479,3.236,2480,1.262,2481,1.262,2482,0.681,2483,0.681,2484,0.681,2485,0.681,2486,1.262,2487,0.681,2488,1.765,2489,0.681,2490,1.262,2491,0.681,2492,0.681,2493,0.681,2494,0.681,2495,0.681,2496,0.681,2497,0.681,2498,2.203,2499,1.262,2500,0.681,2501,0.681,2502,2.588,2503,0.681,2504,1.765,2505,0.681,2506,0.681,2507,0.681,2508,0.681,2509,1.262,2510,1.262,2511,0.681,2512,0.681,2513,0.681,2514,0.681,2515,1.262,2516,1.262,2517,0.681,2518,0.681,2519,1.262,2520,1.262,2521,0.681,2522,0.681,2523,0.681,2524,0.681,2525,0.681,2526,0.681,2527,1.262,2528,0.681,2529,0.681,2530,0.681,2531,0.681,2532,0.681,2533,0.681,2534,1.765,2535,2.588,2536,1.262,2537,2.203,2538,0.681,2539,0.681,2540,2.203,2541,0.681,2542,0.681,2543,0.681,2544,0.681,2545,1.765,2546,0.681,2547,0.681,2548,0.681,2549,0.681,2550,0.681,2551,0.681,2552,1.262,2553,0.681,2554,0.681,2555,1.765,2556,0.681,2557,0.681,2558,0.681,2559,0.681,2560,0.681,2561,1.765,2562,1.765,2563,1.262,2564,0.681,2565,0.681,2566,1.262,2567,0.681,2568,0.681,2569,0.681,2570,0.681,2571,0.681,2572,0.681,2573,0.681,2574,0.681,2575,0.681,2576,0.681,2577,0.681,2578,0.681,2579,0.681,2580,0.681,2581,1.262,2582,0.681,2583,0.681,2584,1.262,2585,0.681,2586,0.681,2587,0.681,2588,0.681,2589,0.681,2590,0.681,2591,0.681,2592,0.681,2593,0.681,2594,0.681,2595,0.681,2596,0.681,2597,0.681,2598,0.681,2599,0.681,2600,0.681,2601,0.681,2602,0.681,2603,2.93,2604,2.203,2605,1.262,2606,0.681,2607,0.681,2608,0.681,2609,0.681,2610,0.681,2611,0.681,2612,0.681,2613,0.681,2614,1.262,2615,0.681,2616,1.262,2617,0.681,2618,0.681,2619,0.681,2620,0.681,2621,1.262,2622,0.681,2623,0.681,2624,0.681,2625,0.681,2626,0.681,2627,0.681,2628,0.681,2629,0.681,2630,2.588,2631,1.262,2632,0.681,2633,0.681,2634,0.681,2635,1.765,2636,1.262,2637,1.262,2638,0.681,2639,1.262,2640,1.262,2641,0.681,2642,0.681,2643,0.681,2644,0.681,2645,0.681,2646,0.681,2647,1.262,2648,1.765,2649,0.681,2650,0.681,2651,1.262,2652,0.681,2653,0.681,2654,0.681,2655,0.681,2656,0.681,2657,0.681,2658,0.681,2659,0.681,2660,0.681,2661,0.681,2662,0.681,2663,0.681,2664,0.681,2665,0.681,2666,2.588,2667,0.681,2668,0.681,2669,1.262,2670,0.681,2671,0.681,2672,0.681,2673,0.681,2674,0.681,2675,0.681,2676,0.681,2677,0.681,2678,1.262,2679,0.681,2680,0.681,2681,0.681,2682,0.681,2683,0.681,2684,1.262,2685,0.681,2686,0.681,2687,0.681,2688,0.681,2689,0.681,2690,1.765,2691,0.681,2692,0.681,2693,0.681,2694,1.765,2695,0.681,2696,0.681,2697,0.681,2698,0.681,2699,0.681,2700,1.262,2701,0.681,2702,0.681,2703,0.681,2704,0.681,2705,0.681,2706,2.588,2707,0.681,2708,0.681,2709,0.681,2710,0.681,2711,0.681,2712,0.681,2713,0.681,2714,0.681,2715,0.681,2716,0.681,2717,0.681,2718,0.681,2719,0.681,2720,0.681,2721,0.681,2722,0.681,2723,0.681,2724,0.681,2725,0.681,2726,0.681,2727,0.681,2728,0.681,2729,0.681,2730,0.681,2731,0.681,2732,0.681,2733,0.681,2734,0.681,2735,0.681,2736,0.681,2737,1.262,2738,0.681,2739,0.681,2740,0.681,2741,0.681,2742,0.681,2743,0.681,2744,0.681,2745,1.262,2746,0.681,2747,0.681,2748,0.681,2749,0.681,2750,0.681,2751,0.681,2752,0.681,2753,0.681,2754,0.681,2755,1.262,2756,0.681,2757,0.681,2758,0.681,2759,0.681,2760,1.765,2761,0.681,2762,0.681,2763,0.681,2764,0.681,2765,0.681,2766,0.681,2767,0.681,2768,0.681,2769,0.681,2770,0.681,2771,0.681,2772,0.681,2773,0.681,2774,1.262,2775,0.681,2776,0.681,2777,0.681,2778,0.681,2779,0.681,2780,0.681,2781,0.681,2782,0.681,2783,0.681,2784,0.681,2785,0.681,2786,0.681,2787,0.681]]],"invertedIndex":[["",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":649,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1815,"title":{},"body":{"properties.html":{}}}],["0.14.2",{"_index":1680,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1688,"title":{},"body":{"dependencies.html":{}}}],["0.3.27",{"_index":1690,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1679,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1650,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1662,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1636,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1652,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1653,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1659,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1651,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1655,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1654,"title":{},"body":{"coverage.html":{}}}],["0ce2",{"_index":2686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":513,"title":{},"body":{"entities/CartItem.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllProductsProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/SeedProducts1759619432047.html":{}}}],["1.0.0",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DataResponseInterceptor.html":{}}}],["1.1.26",{"_index":1672,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1638,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1649,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":1668,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1040,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"miscellaneous/variables.html":{}}}],["10.0",{"_index":2068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10.0.0",{"_index":1673,"title":{},"body":{"dependencies.html":{}}}],["10.5",{"_index":2771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["100",{"_index":1195,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["11.0",{"_index":2364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11.0.0",{"_index":1675,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":1677,"title":{},"body":{"dependencies.html":{}}}],["11/11",{"_index":1657,"title":{},"body":{"coverage.html":{}}}],["12.0",{"_index":1878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12.5",{"_index":2576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12oz",{"_index":2345,"title":{},"body":{"miscellaneous/variables.html":{}}}],["13.0",{"_index":2496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["14.0",{"_index":2340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["14.5",{"_index":2645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["15",{"_index":1813,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["15.0",{"_index":2101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["16",{"_index":2578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["16.0",{"_index":2311,"title":{},"body":{"miscellaneous/variables.html":{}}}],["17.0",{"_index":2704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["17.2.3",{"_index":1682,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":2757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["18.0",{"_index":2127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["18.0.1",{"_index":1684,"title":{},"body":{"dependencies.html":{}}}],["19.0",{"_index":2594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1].charat(0).touppercase()}${pathsegments[pathsegments.length",{"_index":953,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["1].slice(1",{"_index":954,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["2",{"_index":1204,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["2/2",{"_index":1639,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1667,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["20.0",{"_index":2238,"title":{},"body":{"miscellaneous/variables.html":{}}}],["200",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{}}}],["201",{"_index":1591,"title":{},"body":{"controllers/UsersController.html":{}}}],["20oz",{"_index":2210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["21.0",{"_index":2735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["22.0",{"_index":2180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["24",{"_index":2219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["24.0",{"_index":2756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["25",{"_index":2102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["27",{"_index":1812,"title":{},"body":{"overview.html":{}}}],["28.0",{"_index":2611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2wulatjl.jpg",{"_index":2182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":1467,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["3/3",{"_index":1645,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":1661,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":856,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["32oz",{"_index":2293,"title":{},"body":{"miscellaneous/variables.html":{}}}],["33",{"_index":1648,"title":{},"body":{"coverage.html":{}}}],["35",{"_index":2036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["36125653336302.jpg?v=1750452777&width=2000",{"_index":2543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":1468,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"overview.html":{}}}],["4.0",{"_index":2259,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.2",{"_index":1674,"title":{},"body":{"dependencies.html":{}}}],["4.5",{"_index":2419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4/4",{"_index":1646,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":1666,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":1973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["400",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/UsersController.html":{}}}],["401",{"_index":960,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["403",{"_index":962,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["404",{"_index":964,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["409",{"_index":966,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["40°f",{"_index":2484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["422",{"_index":968,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["429",{"_index":969,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["42d7",{"_index":2687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["45",{"_index":2153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["450°f",{"_index":1892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4636",{"_index":2157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["480°f",{"_index":2485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":1469,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["5.0",{"_index":1943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5.5",{"_index":2398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5/5",{"_index":1647,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1330,"title":{},"body":{"entities/Product.html":{},"miscellaneous/variables.html":{}}}],["500",{"_index":971,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["502",{"_index":972,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["503",{"_index":974,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["504",{"_index":976,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["55",{"_index":2002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["58f4a6745939.4a0aae3c06dcdb4e3d94ae2cf91c1c3c.jpeg?odnheight=576&odnwidth=576&odnbg=ffffff",{"_index":2689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":1470,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["6.0",{"_index":2205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6.0.0",{"_index":1678,"title":{},"body":{"dependencies.html":{}}}],["6.5",{"_index":1972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["60",{"_index":1660,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["65",{"_index":2365,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7",{"_index":1811,"title":{},"body":{"overview.html":{}}}],["7.0",{"_index":2290,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7.5",{"_index":2001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7.8.1",{"_index":1689,"title":{},"body":{"dependencies.html":{}}}],["70",{"_index":2420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["75",{"_index":1944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8.0",{"_index":1918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8.16.3",{"_index":1686,"title":{},"body":{"dependencies.html":{}}}],["8.5",{"_index":2664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8/8",{"_index":1656,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1665,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["85",{"_index":2462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9.0",{"_index":2035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9.5",{"_index":2152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["90",{"_index":2399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["93d3",{"_index":2688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["96",{"_index":1564,"title":{},"body":{"entities/User.html":{}}}],["_",{"_index":91,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["a526",{"_index":2158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["absorb",{"_index":2552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["absorbent",{"_index":2375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["absorbing",{"_index":2593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["absorbs",{"_index":2509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["absorption",{"_index":2748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abstract",{"_index":1182,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["acacia",{"_index":2631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GenerateTokensProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{}}}],["accesstoken",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["accidents",{"_index":2617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accommodate",{"_index":2150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accommodates",{"_index":2639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accompaniments",{"_index":2752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["account",{"_index":1583,"title":{},"body":{"controllers/UsersController.html":{}}}],["action",{"_index":2391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["active",{"_index":1830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["activeuser",{"_index":475,"title":{},"body":{"controllers/CartController.html":{},"controllers/OrdersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["activeuser('sub",{"_index":487,"title":{},"body":{"controllers/CartController.html":{},"controllers/OrdersController.html":{}}}],["activeuserdata",{"_index":97,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["activities",{"_index":2232,"title":{},"body":{"miscellaneous/variables.html":{}}}],["add",{"_index":560,"title":{},"body":{"injectables/CartService.html":{},"miscellaneous/variables.html":{}}}],["adding",{"_index":2098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["address",{"_index":1493,"title":{},"body":{"classes/SignInDto.html":{}}}],["adds",{"_index":2636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addtocart",{"_index":111,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{}}}],["addtocart(@activeuser('sub",{"_index":483,"title":{},"body":{"controllers/CartController.html":{}}}],["addtocart(userid",{"_index":119,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{}}}],["addtocartprovider",{"_index":107,"title":{"injectables/AddToCartProvider.html":{}},"body":{"injectables/AddToCartProvider.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"coverage.html":{},"overview.html":{}}}],["adhesives",{"_index":2620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["adjust",{"_index":1474,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["admin",{"_index":1717,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["aesthetic",{"_index":1942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["again",{"_index":862,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["agnes",{"_index":1602,"title":{},"body":{"controllers/UsersController.html":{}}}],["air",{"_index":2172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["airflow",{"_index":2569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["airtight",{"_index":2078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allow",{"_index":1428,"title":{},"body":{"guards/RolesGuard.html":{}}}],["allowedfields",{"_index":1548,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["allowedfields.includes(el",{"_index":1557,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["allowing",{"_index":2198,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allows",{"_index":2188,"title":{},"body":{"miscellaneous/variables.html":{}}}],["already",{"_index":772,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{}}}],["alternative",{"_index":1487,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["aluminum",{"_index":2046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazing",{"_index":1793,"title":{},"body":{"index.html":{}}}],["amazon.com/images/i/413kbqce+cl.jpg",{"_index":1945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/41w9dl8ke3l.jpg",{"_index":2442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/519twmwo2tl.jpg",{"_index":2291,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/51a6ztwcjel.jpg",{"_index":2478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/51abhippj4l.jpg",{"_index":2366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/51srqbmnpel.jpg",{"_index":2517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/51vq0ipxqul.jpg",{"_index":1919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/618gm",{"_index":2772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/61a2v30mxol.jpg",{"_index":2341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/61bw3a5w0cl.jpg",{"_index":2665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/61csyqgirfl.jpg",{"_index":2628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/61s5b8hwuil.jpg",{"_index":2006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/61vgtekvpql.jpg",{"_index":2560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/61wqnrbzqll.jpg",{"_index":2758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/71",{"_index":2181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/712zqjxfuyl.jpg",{"_index":2103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/713aghybljl.jpg",{"_index":2612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/71eg5iyovel.jpg",{"_index":2705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/71g5unlihrl.jpg",{"_index":2497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/71hqarzk7al.jpg",{"_index":2595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/71ifr2n807l.jpg",{"_index":2787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/71lxsajgcgl.jpg",{"_index":2463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/71o0o8ppfvl.jpg",{"_index":2239,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/71phf6am0+l.jpg",{"_index":2720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/71tjvjfnnkl.jpg",{"_index":2037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/71tts6crs3l.jpg",{"_index":2421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/71wejvgp1fl.jpg",{"_index":2736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/818",{"_index":2206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/81dlaomw94l.jpg",{"_index":2260,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/81i+oawo9pl.jpg",{"_index":2577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/81jbfallwbl.jpg",{"_index":1880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/81jwx",{"_index":2069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/81rwurfw",{"_index":2312,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/81s+ikiyxyl.jpg",{"_index":2646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/81vm",{"_index":1974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/91qleaoa2gl.jpg",{"_index":2128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/s/aplus",{"_index":2154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amount",{"_index":2505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["andwhere('ci.deletedat",{"_index":632,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["antibacterial",{"_index":1862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["antimicrobial",{"_index":1964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["any).code",{"_index":985,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["any).column",{"_index":990,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["any).constraint",{"_index":987,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["any).table",{"_index":989,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["anyone",{"_index":2361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apibadrequestresponse",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibody",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apiconsumes",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiconsumes('application/json",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":1582,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiproperty",{"_index":743,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["apiproperty({description",{"_index":724,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["apiresponse",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":1598,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiversion",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DataResponseInterceptor.html":{}}}],["app",{"_index":209,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["app.controller",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":154,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":147,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appetizers",{"_index":2692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application",{"_index":1769,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1728,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":158,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":153,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["area",{"_index":2524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["argumentshost",{"_index":887,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["around",{"_index":2050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":403,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["art",{"_index":2744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["artisan",{"_index":2750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["artisanal",{"_index":2338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["artisans",{"_index":2321,"title":{},"body":{"miscellaneous/variables.html":{}}}],["asc",{"_index":1072,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["assorted",{"_index":2541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assumes",{"_index":1473,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["async",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"injectables/UsersService.html":{}}}],["asynchrousnously",{"_index":362,"title":{},"body":{"modules/AuthModule.html":{}}}],["atleast",{"_index":737,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["audience",{"_index":1135,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["auth",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.none",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["auth(authtype.none)@get",{"_index":1364,"title":{},"body":{"controllers/ProductsController.html":{}}}],["auth.controller",{"_index":352,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/config/jwt.config",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/enums/role",{"_index":1577,"title":{},"body":{"entities/User.html":{}}}],["auth/guards/access",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/authentication/authentication.guard",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/roles/roles.guard",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_type_key",{"_index":385,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":248,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticates",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticating",{"_index":380,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authentication",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authenticationguard",{"_index":198,"title":{"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":410,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authmodule",{"_index":169,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1799,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":298,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":393,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":398,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":373,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":406,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((type",{"_index":412,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["autoloadentities",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":2147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["await",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"injectables/UsersService.html":{}}}],["away",{"_index":2471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["baby",{"_index":2466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backdrop",{"_index":2749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backers",{"_index":1794,"title":{},"body":{"index.html":{}}}],["backpacks",{"_index":2350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bacteria",{"_index":2413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bacterial",{"_index":2396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bags",{"_index":2129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["baked",{"_index":2430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["baking",{"_index":1713,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["balance",{"_index":2608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bamboo",{"_index":1837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base",{"_index":1580,"title":{},"body":{"controllers/UsersController.html":{}}}],["based",{"_index":381,"title":{},"body":{"guards/AuthenticationGuard.html":{},"entities/CartItem.html":{},"miscellaneous/variables.html":{}}}],["baseurl",{"_index":1306,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["basil",{"_index":2653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":422,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":442,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt",{"_index":440,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(data",{"_index":441,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":356,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":1700,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["beautiful",{"_index":1926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beautifully",{"_index":2727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beauty",{"_index":2637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["becoming",{"_index":2511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beechwood",{"_index":2500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beeswax",{"_index":2038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["before",{"_index":797,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["being",{"_index":1958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["better",{"_index":2289,"title":{},"body":{"miscellaneous/variables.html":{}}}],["between",{"_index":1025,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"miscellaneous/variables.html":{}}}],["between(min",{"_index":1054,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["beverage",{"_index":2237,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beverages",{"_index":2245,"title":{},"body":{"miscellaneous/variables.html":{}}}],["billingaddress",{"_index":583,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{}}}],["biodegradable",{"_index":2013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blade",{"_index":2609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blades",{"_index":2603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blemishes",{"_index":2681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blend",{"_index":2032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bnh4l.jpg",{"_index":2070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["board",{"_index":1786,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["boards",{"_index":2540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bodied",{"_index":2271,"title":{},"body":{"miscellaneous/variables.html":{}}}],["body",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":430,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"entities/Product.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"classes/UpdateProductDto.html":{}}}],["bootstrap",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["borosilicate",{"_index":2074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["both",{"_index":2363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bottle",{"_index":2292,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bottles",{"_index":2301,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bottom",{"_index":2469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bottoms",{"_index":2765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bowl",{"_index":2630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bowls",{"_index":1961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bpa",{"_index":1977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["branded",{"_index":2753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bread",{"_index":2601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["breads",{"_index":2573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["break",{"_index":1070,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"miscellaneous/variables.html":{}}}],["breathable",{"_index":2044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["brew",{"_index":2272,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bringing",{"_index":2322,"title":{},"body":{"miscellaneous/variables.html":{}}}],["brings",{"_index":2014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bristles",{"_index":1953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["browse",{"_index":1809,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1807,"title":{},"body":{"modules.html":{}}}],["bruising",{"_index":2642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["brush",{"_index":2242,"title":{},"body":{"miscellaneous/variables.html":{}}}],["brushed",{"_index":2167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["brushes",{"_index":2414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer",{"_index":426,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["build",{"_index":1064,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["builder",{"_index":624,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["builderrorresponse",{"_index":912,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["builderrorresponse(exception",{"_index":1173,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["building",{"_index":1724,"title":{},"body":{"index.html":{}}}],["builds",{"_index":911,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["built",{"_index":1914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["burn",{"_index":2140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["c3c01475d03b.__cr38,0,1872,1872_pt0_sx300_v1___.jpeg",{"_index":2159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cakes",{"_index":2572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calculatesubtotal",{"_index":1142,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["calculatesubtotal(items",{"_index":1145,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["callhandler",{"_index":792,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["canactivate",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["cancelled",{"_index":1707,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["candies",{"_index":2557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canisters",{"_index":2162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cannotcreateentityidmaperror",{"_index":890,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["cap",{"_index":2296,"title":{},"body":{"miscellaneous/variables.html":{}}}],["capacity",{"_index":2330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["car",{"_index":2251,"title":{},"body":{"miscellaneous/variables.html":{}}}],["carbon",{"_index":2602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["care",{"_index":2516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["carefully",{"_index":1928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["carrying",{"_index":1870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cart",{"_index":125,"title":{"interfaces/Cart.html":{}},"body":{"injectables/AddToCartProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"injectables/GetCartProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"coverage.html":{}}}],["cart.controller",{"_index":535,"title":{},"body":{"modules/CartModule.html":{}}}],["cart.provider",{"_index":133,"title":{},"body":{"injectables/AddToCartProvider.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["cart.provider.ts",{"_index":110,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/GetCartProvider.html":{},"coverage.html":{}}}],["cart.provider.ts:12",{"_index":118,"title":{},"body":{"injectables/AddToCartProvider.html":{}}}],["cart.provider.ts:17",{"_index":1147,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["cart.provider.ts:36",{"_index":121,"title":{},"body":{"injectables/AddToCartProvider.html":{}}}],["cart.provider.ts:37",{"_index":1146,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["cart.provider.ts:8",{"_index":1144,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["cart/cart",{"_index":1350,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{}}}],["cart/cart.module",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["cart['items",{"_index":1152,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["cartcontroller",{"_index":450,"title":{"controllers/CartController.html":{}},"body":{"controllers/CartController.html":{},"modules/CartModule.html":{},"coverage.html":{}}}],["cartid",{"_index":462,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["cartitem",{"_index":129,"title":{"entities/CartItem.html":{}},"body":{"injectables/AddToCartProvider.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Product.html":{},"injectables/UpdateCartItemProvider.html":{},"entities/User.html":{},"coverage.html":{}}}],["cartitem.id",{"_index":1531,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["cartitem.product",{"_index":1327,"title":{},"body":{"entities/Product.html":{}}}],["cartitem.quantity",{"_index":1529,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["cartitem.user",{"_index":1561,"title":{},"body":{"entities/User.html":{}}}],["cartitemrepository",{"_index":115,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["cartitems",{"_index":639,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Product.html":{},"injectables/UpdateCartItemProvider.html":{},"entities/User.html":{}}}],["cartitems.length",{"_index":648,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["cartitems.map((item",{"_index":659,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{}}}],["cartitemsraw",{"_index":625,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["cartitemsraw.map((ci",{"_index":640,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["cartmodule",{"_index":170,"title":{"modules/CartModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules.html":{},"overview.html":{}}}],["cartrepository",{"_index":1526,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["cartservice",{"_index":473,"title":{"injectables/CartService.html":{}},"body":{"controllers/CartController.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"coverage.html":{},"overview.html":{}}}],["carved",{"_index":2011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cascade",{"_index":510,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/SeedProducts1759619432047.html":{}}}],["case",{"_index":1068,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["catch",{"_index":90,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateOrderProvider.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/UpdateCartItemProvider.html":{},"miscellaneous/variables.html":{}}}],["catch(exception",{"_index":893,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["catcherror",{"_index":852,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["catcherror((error",{"_index":858,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["category",{"_index":682,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["category.enum",{"_index":701,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"entities/Product.html":{}}}],["category.enum.ts",{"_index":1698,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cellulose",{"_index":2369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["centerpiece",{"_index":2702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ceramic",{"_index":2314,"title":{},"body":{"miscellaneous/variables.html":{}}}],["certified",{"_index":1924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["challenges",{"_index":2441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["channel",{"_index":1760,"title":{},"body":{"index.html":{}}}],["character",{"_index":741,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["characters",{"_index":736,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["charcuterie",{"_index":2695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["charm",{"_index":2339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["charts",{"_index":2522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["check",{"_index":1747,"title":{},"body":{"index.html":{}}}],["checking",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["checkout",{"_index":1533,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["cheese",{"_index":2694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cheeses",{"_index":2751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chef",{"_index":2598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chemicals",{"_index":2125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chives",{"_index":2656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chlorine",{"_index":2710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chop",{"_index":2650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chopping",{"_index":2614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ci",{"_index":628,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["ci.id",{"_index":641,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["ci.product.id",{"_index":643,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["ci.product.price",{"_index":647,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["ci.product.stock",{"_index":645,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["ci.quantity",{"_index":642,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["cilantro",{"_index":2654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["circulation",{"_index":2199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":64,"title":{"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseConnectionException.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateProductDto.html":{},"classes/ValidationException.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":568,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseConnectionException.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateProductDto.html":{},"classes/ValidationException.html":{},"overview.html":{}}}],["classic",{"_index":2513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clay",{"_index":2319,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clean",{"_index":1911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cleanedquery",{"_index":1033,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleanedquery.category",{"_index":1043,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleanedquery.name",{"_index":1055,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleanedquery.name.split",{"_index":1057,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleanedquery.price",{"_index":1046,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleaning",{"_index":1712,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["cleanquery",{"_index":1011,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleanquery(query",{"_index":1015,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleans",{"_index":2536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cleanup",{"_index":2663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clear",{"_index":1536,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{},"miscellaneous/variables.html":{}}}],["clearcart",{"_index":544,"title":{},"body":{"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["clearcart(userid",{"_index":551,"title":{},"body":{"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["cleared",{"_index":1537,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["clearusercart",{"_index":452,"title":{},"body":{"controllers/CartController.html":{}}}],["clearusercart(@activeuser('sub",{"_index":480,"title":{},"body":{"controllers/CartController.html":{}}}],["clearusercart(userid",{"_index":458,"title":{},"body":{"controllers/CartController.html":{}}}],["clerks",{"_index":2189,"title":{},"body":{"miscellaneous/variables.html":{}}}],["closure",{"_index":2193,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cloths",{"_index":2444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":344,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":346,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":345,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_cartmodule",{"_index":529,"title":{},"body":{"modules/CartModule.html":{},"overview.html":{}}}],["cluster_cartmodule_exports",{"_index":532,"title":{},"body":{"modules/CartModule.html":{},"overview.html":{}}}],["cluster_cartmodule_imports",{"_index":530,"title":{},"body":{"modules/CartModule.html":{},"overview.html":{}}}],["cluster_cartmodule_providers",{"_index":531,"title":{},"body":{"modules/CartModule.html":{},"overview.html":{}}}],["cluster_ordersmodule",{"_index":1240,"title":{},"body":{"modules/OrdersModule.html":{},"overview.html":{}}}],["cluster_ordersmodule_imports",{"_index":1242,"title":{},"body":{"modules/OrdersModule.html":{}}}],["cluster_ordersmodule_providers",{"_index":1241,"title":{},"body":{"modules/OrdersModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":1278,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":1279,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":1280,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_productsmodule",{"_index":1388,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_exports",{"_index":1389,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_imports",{"_index":1391,"title":{},"body":{"modules/ProductsModule.html":{}}}],["cluster_productsmodule_providers",{"_index":1390,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1613,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1614,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1615,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["coarse",{"_index":2437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coaster",{"_index":2779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coasters",{"_index":2774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coated",{"_index":1979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coconut",{"_index":2007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["code",{"_index":885,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["coffee",{"_index":2091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coir",{"_index":2422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cold",{"_index":2218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["collapses",{"_index":2353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["collapsible",{"_index":2342,"title":{},"body":{"miscellaneous/variables.html":{}}}],["colors",{"_index":2225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["column",{"_index":525,"title":{},"body":{"entities/CartItem.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["column({default",{"_index":512,"title":{},"body":{"entities/CartItem.html":{},"entities/Product.html":{}}}],["column({length",{"_index":1329,"title":{},"body":{"entities/Product.html":{}}}],["column({nullable",{"_index":1339,"title":{},"body":{"entities/Product.html":{}}}],["column({type",{"_index":1186,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["comb",{"_index":2661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["come",{"_index":1750,"title":{},"body":{"index.html":{}}}],["comes",{"_index":1868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["comfort",{"_index":1970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["comfortable",{"_index":1867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["commit",{"_index":669,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["common/interceptors/data",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["common/pagination/interfaces/paginated.interface",{"_index":1375,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["commuting",{"_index":2230,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compact",{"_index":1996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compactly",{"_index":2626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compared",{"_index":2280,"title":{},"body":{"miscellaneous/variables.html":{}}}],["comparepassword",{"_index":423,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepassword(data",{"_index":425,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparing",{"_index":429,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["compatible",{"_index":2284,"title":{},"body":{"miscellaneous/variables.html":{}}}],["complements",{"_index":2178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["complete",{"_index":672,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["completely",{"_index":2108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["completing",{"_index":2417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compodoc/compodoc",{"_index":1671,"title":{},"body":{"dependencies.html":{}}}],["composition",{"_index":2331,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compost",{"_index":2029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compostable",{"_index":2109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["composted",{"_index":2392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["comprehensive",{"_index":2597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["condensation",{"_index":2778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conditions",{"_index":1065,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["conduct",{"_index":1935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthModule.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokensProvider.html":{}}}],["config/app.config",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["config/enviroment.validation",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":353,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{}}}],["configmodule",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":240,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{}}}],["configservice.get('database.autoloadentities",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["confirmed",{"_index":1704,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["conflict",{"_index":1471,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["conflictexception",{"_index":604,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["conflictexception('cart",{"_index":650,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["conflictexception('could",{"_index":671,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["conforms",{"_index":2762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connect",{"_index":619,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["connecting",{"_index":818,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["connection",{"_index":678,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"classes/ValidationException.html":{}}}],["connectionerrorcodes",{"_index":868,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["connectionerrorcodes.some((code",{"_index":876,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["conscious",{"_index":2126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consistent",{"_index":2503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log('before",{"_index":796,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["console.log('clearing",{"_index":481,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{}}}],["console.log('controller",{"_index":900,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["console.log('qty",{"_index":490,"title":{},"body":{"controllers/CartController.html":{}}}],["console.log(error",{"_index":617,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["console.log(product",{"_index":1551,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["const",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":1833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constraint",{"_index":986,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["construction",{"_index":2168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constructor",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{}}}],["constructor(addtocartprovider",{"_index":548,"title":{},"body":{"injectables/CartService.html":{}}}],["constructor(cartitemrepository",{"_index":1143,"title":{},"body":{"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["constructor(configservice",{"_index":789,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["constructor(createorderprovider",{"_index":1253,"title":{},"body":{"injectables/OrdersService.html":{}}}],["constructor(createproductprovider",{"_index":1401,"title":{},"body":{"injectables/ProductsService.html":{}}}],["constructor(createuserprovider",{"_index":1622,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(datasource",{"_index":599,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["constructor(errors",{"_index":823,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["constructor(jwtservice",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["constructor(operation",{"_index":808,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["constructor(orderrepository",{"_index":998,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{}}}],["constructor(private",{"_index":155,"title":{},"body":{"controllers/AppController.html":{},"guards/RolesGuard.html":{}}}],["constructor(productsrepository",{"_index":710,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["constructor(productsservice",{"_index":112,"title":{},"body":{"injectables/AddToCartProvider.html":{}}}],["constructor(reflector",{"_index":376,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["constructor(request",{"_index":1284,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(signinprovider",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(usersrepository",{"_index":755,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{}}}],["constructor(usersservice",{"_index":1500,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["containers",{"_index":2051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["containing",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{}}}],["contains",{"_index":2716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["content",{"_index":2583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contents",{"_index":2083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["context",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":409,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":408,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getresponse",{"_index":798,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["contours",{"_index":2677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["control",{"_index":1969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controller",{"_index":146,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CartController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CartController.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('cart",{"_index":479,"title":{},"body":{"controllers/CartController.html":{}}}],["controller('orders",{"_index":1234,"title":{},"body":{"controllers/OrdersController.html":{}}}],["controller('products",{"_index":1376,"title":{},"body":{"controllers/ProductsController.html":{}}}],["controller('users",{"_index":1599,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":148,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CartController.html":{},"modules/CartModule.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["controller}::${handler",{"_index":907,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["convenient",{"_index":1869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conversion",{"_index":2521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cookies",{"_index":2488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cooking",{"_index":1908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cookware",{"_index":1896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cool",{"_index":2063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cooling",{"_index":2561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cork",{"_index":2164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["corrosion",{"_index":2607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cotton",{"_index":2042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["countertop",{"_index":2619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["countertops",{"_index":2457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["countless",{"_index":2203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["courses",{"_index":1767,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":1632,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["covers",{"_index":2610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crack",{"_index":2640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cracking",{"_index":2592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crafted",{"_index":1844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["create",{"_index":411,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"classes/SeedProducts1759619432047.html":{},"classes/UpdateProductDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["createcartitemdto",{"_index":120,"title":{"classes/CreateCartItemDto.html":{}},"body":{"injectables/AddToCartProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"coverage.html":{}}}],["created",{"_index":1592,"title":{},"body":{"controllers/UsersController.html":{}}}],["createdat",{"_index":497,"title":{},"body":{"entities/CartItem.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["createdatecolumn",{"_index":501,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["createdatecolumn()@index",{"_index":1333,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{}}}],["createorder",{"_index":598,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["createorder(userid",{"_index":602,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["createorderdto",{"_index":580,"title":{"classes/CreateOrderDto.html":{}},"body":{"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"coverage.html":{}}}],["createorderprovider",{"_index":595,"title":{"injectables/CreateOrderProvider.html":{}},"body":{"injectables/CreateOrderProvider.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"overview.html":{}}}],["createparamdecorator",{"_index":1825,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createproduct",{"_index":709,"title":{},"body":{"injectables/CreateProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["createproduct(@body",{"_index":1378,"title":{},"body":{"controllers/ProductsController.html":{}}}],["createproduct(createproductdto",{"_index":713,"title":{},"body":{"injectables/CreateProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["createproductdto",{"_index":679,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["createproductprovider",{"_index":706,"title":{"injectables/CreateProductProvider.html":{}},"body":{"injectables/CreateProductProvider.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["createquerybuilder(cartitem",{"_index":627,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["creates",{"_index":1595,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["createuser",{"_index":754,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":758,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":721,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":771,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserprovider",{"_index":751,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["creating",{"_index":1625,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["creations",{"_index":1957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["credentials",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["crystal",{"_index":2079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx",{"_index":894,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":897,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":896,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1827,"title":{},"body":{"miscellaneous/variables.html":{}}}],["culinary",{"_index":1956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cup",{"_index":2343,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cupcakes",{"_index":2551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cups",{"_index":2235,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":1275,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpage",{"_index":1271,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["custom",{"_index":1829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cutlery",{"_index":1838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cutting",{"_index":1714,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["cycle",{"_index":2418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["d72b",{"_index":2156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["daily",{"_index":1999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["damage",{"_index":1965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dangerous",{"_index":2615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dashes",{"_index":1060,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["data",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/SeedProducts1759619432047.html":{},"controllers/UsersController.html":{}}}],["data.interface",{"_index":1126,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["data.interface.ts",{"_index":100,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["database",{"_index":234,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["databaseconfig",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseconnectionexception",{"_index":803,"title":{"classes/DatabaseConnectionException.html":{}},"body":{"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"classes/ValidationException.html":{},"coverage.html":{}}}],["databaseerror",{"_index":924,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["dataresponseinterceptor",{"_index":194,"title":{"injectables/DataResponseInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["datasource",{"_index":600,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["date",{"_index":500,"title":{},"body":{"entities/CartItem.html":{},"injectables/DeleteProductProvider.html":{},"entities/Order.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["date().toisostring",{"_index":935,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["db",{"_index":522,"title":{},"body":{"entities/CartItem.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["decimal",{"_index":1201,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{}}}],["decimal(10,2",{"_index":1456,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["declarations",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decoraror",{"_index":1835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorator",{"_index":1420,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["decorator/auth.decorator",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators",{"_index":151,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/GetProductsBaseDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"classes/SignInDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["decrementquantity",{"_index":453,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["decrementquantity(userid",{"_index":461,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["deductstock",{"_index":1517,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["deductstock(userid",{"_index":1522,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["deep",{"_index":2465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deeper",{"_index":1762,"title":{},"body":{"index.html":{}}}],["default",{"_index":392,"title":{},"body":{"guards/AuthenticationGuard.html":{},"entities/CartItem.html":{},"injectables/FindAllProductsProvider.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":375,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defaultroletype",{"_index":1424,"title":{},"body":{"guards/RolesGuard.html":{}}}],["defined",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{}}}],["delete",{"_index":471,"title":{},"body":{"controllers/CartController.html":{},"entities/CartItem.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["delete(':cartid",{"_index":469,"title":{},"body":{"controllers/CartController.html":{}}}],["delete(':productid",{"_index":1384,"title":{},"body":{"controllers/ProductsController.html":{}}}],["delete('clear",{"_index":459,"title":{},"body":{"controllers/CartController.html":{}}}],["deleted",{"_index":840,"title":{},"body":{"injectables/DeleteProductProvider.html":{}}}],["deletedat",{"_index":498,"title":{},"body":{"entities/CartItem.html":{},"injectables/DeleteProductProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Product.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{}}}],["deletedatecolumn",{"_index":503,"title":{},"body":{"entities/CartItem.html":{}}}],["deleteproduct",{"_index":829,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["deleteproduct(@param('productid",{"_index":1386,"title":{},"body":{"controllers/ProductsController.html":{}}}],["deleteproduct(productid",{"_index":831,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["deleteproductprovider",{"_index":827,"title":{"injectables/DeleteProductProvider.html":{}},"body":{"injectables/DeleteProductProvider.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["delicate",{"_index":1927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["delivered",{"_index":1706,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["demands",{"_index":2000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dense",{"_index":2745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dependencies",{"_index":160,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["depending",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/RolesGuard.html":{}}}],["deposits",{"_index":2723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["desc",{"_index":1007,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{}}}],["description",{"_index":9,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"classes/ValidationException.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["design",{"_index":1997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["designed",{"_index":1980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["desserts",{"_index":2696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["details",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/UsersController.html":{}}}],["development",{"_index":1735,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1773,"title":{},"body":{"index.html":{}}}],["diff",{"_index":400,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["different",{"_index":918,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["directly",{"_index":2052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dirt",{"_index":2448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disable",{"_index":83,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["discord",{"_index":1759,"title":{},"body":{"index.html":{}}}],["dish",{"_index":2423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dishes",{"_index":2435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dishwasher",{"_index":1912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["display",{"_index":2755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disposable",{"_index":2234,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distribution",{"_index":2486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dive",{"_index":1761,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1633,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":1608,"title":{},"body":{"controllers/UsersController.html":{}}}],["doesn't",{"_index":2701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["don't",{"_index":667,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["dotenv",{"_index":1681,"title":{},"body":{"dependencies.html":{}}}],["double",{"_index":2211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dough",{"_index":2502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["down",{"_index":1437,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["down(queryrunner",{"_index":1439,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["dramatically",{"_index":2265,"title":{},"body":{"miscellaneous/variables.html":{}}}],["drawer",{"_index":2627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["drawstring",{"_index":2192,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dressings",{"_index":1951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dries",{"_index":2393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["drinking",{"_index":2336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["drinks",{"_index":2215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["drinkware",{"_index":1711,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["drippers",{"_index":2287,"title":{},"body":{"miscellaneous/variables.html":{}}}],["drop",{"_index":1483,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["dry",{"_index":2075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto",{"_index":456,"title":{},"body":{"controllers/CartController.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SignInDto.html":{}}}],["dtos/create",{"_index":124,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":1021,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["dtos/pagination",{"_index":1290,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["dtos/sign",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["dtos/update",{"_index":478,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["dull",{"_index":2534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["duplicates",{"_index":1463,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["durability",{"_index":1852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["durable",{"_index":1884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["during",{"_index":1906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dust",{"_index":2447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["duty",{"_index":2633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dyes",{"_index":2711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["décor",{"_index":2179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e2e",{"_index":1744,"title":{},"body":{"index.html":{}}}],["each",{"_index":1859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["earth",{"_index":2031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ease",{"_index":2381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["easily",{"_index":2081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["easy",{"_index":1910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eco",{"_index":1846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["econnrefused",{"_index":869,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["econnreset",{"_index":872,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["edge",{"_index":2605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["edges",{"_index":2581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["effective",{"_index":2405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["effectively",{"_index":2449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["efficient",{"_index":1725,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["effort",{"_index":2652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["effortless",{"_index":2668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["effortlessly",{"_index":2491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eggs",{"_index":1949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eigt",{"_index":735,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ejim",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{}}}],["ejim'})@isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":729,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["elegance",{"_index":2016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["elegant",{"_index":2077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["elevated",{"_index":2574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eliminate",{"_index":2527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eliminates",{"_index":1848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email",{"_index":103,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["email.provider",{"_index":1619,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["email.provider.ts",{"_index":1101,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"coverage.html":{}}}],["email.provider.ts:21",{"_index":1105,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{}}}],["email.provider.ts:7",{"_index":1103,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{}}}],["empty",{"_index":651,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"miscellaneous/variables.html":{}}}],["encrypted",{"_index":427,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["end",{"_index":2110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["endpoint",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["endpoints",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["ends",{"_index":2027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["engineered",{"_index":2445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["engraved",{"_index":2519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["engravings",{"_index":2781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enhance",{"_index":2738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enjoy",{"_index":2288,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enotfound",{"_index":870,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["enough",{"_index":2246,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ensure",{"_index":2334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ensures",{"_index":1866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ensuring",{"_index":2548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enterprise",{"_index":1776,"title":{},"body":{"index.html":{}}}],["entertaining",{"_index":2740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entire",{"_index":2416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities",{"_index":494,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":493,"title":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{}},"body":{"entities/CartItem.html":{},"injectables/CreateOrderProvider.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('cart_items",{"_index":527,"title":{},"body":{"entities/CartItem.html":{}}}],["entity('order_items",{"_index":1221,"title":{},"body":{"entities/OrderItem.html":{}}}],["entity('orders",{"_index":1212,"title":{},"body":{"entities/Order.html":{}}}],["entity('products",{"_index":1353,"title":{},"body":{"entities/Product.html":{}}}],["entitynotfounderror",{"_index":889,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["entityvalidationerror",{"_index":932,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["enum",{"_index":1199,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["enumerations",{"_index":1692,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/auth",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{}}}],["enums/order",{"_index":1210,"title":{},"body":{"entities/Order.html":{}}}],["enums/product",{"_index":700,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"entities/Product.html":{}}}],["enums/role",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{}}}],["env",{"_index":211,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["enviromentvalidation",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":210,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["environmental",{"_index":1874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ergonomic",{"_index":1904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err",{"_index":420,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["err_bad_gateway",{"_index":973,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_bad_request",{"_index":959,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_conflict",{"_index":967,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_db_connection",{"_index":820,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["err_db_query_failed",{"_index":925,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_entity_not_found",{"_index":930,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_entity_validation",{"_index":933,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_forbidden",{"_index":963,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_gateway_timeout",{"_index":977,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_internal",{"_index":917,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_not_found",{"_index":965,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_rate_limit",{"_index":970,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_service_unavailable",{"_index":975,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_unauthorized",{"_index":961,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_unknown",{"_index":934,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_unknown_http",{"_index":979,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_validation",{"_index":825,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["error",{"_index":414,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateOrderProvider.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/ValidationException.html":{}}}],["error.message.tolowercase",{"_index":875,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["errorcode",{"_index":819,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["errorhandlinginterceptor",{"_index":841,"title":{"injectables/ErrorHandlingInterceptor.html":{}},"body":{"injectables/ErrorHandlingInterceptor.html":{},"coverage.html":{}}}],["errormessage",{"_index":874,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["errormessage.includes(code.tolowercase",{"_index":877,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["errorresponse",{"_index":878,"title":{"interfaces/ErrorResponse.html":{}},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["errorresponse.errortype",{"_index":906,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["errors",{"_index":822,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["errortype",{"_index":881,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["eslint",{"_index":82,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["eslint/no",{"_index":87,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["etimedout",{"_index":871,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["even",{"_index":2410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["events",{"_index":1167,"title":{},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["everyday",{"_index":1855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["everything",{"_index":1989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["example",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["examples",{"_index":1589,"title":{},"body":{"controllers/UsersController.html":{}}}],["excellent",{"_index":2390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["excels",{"_index":2433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exception",{"_index":805,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["exception.constructor.name",{"_index":921,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":880,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:115",{"_index":1174,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:175",{"_index":1177,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:193",{"_index":1178,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:209",{"_index":1179,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:232",{"_index":1180,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:70",{"_index":1172,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:77",{"_index":1175,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.getresponse",{"_index":923,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exception.getstatus",{"_index":919,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exception.message",{"_index":920,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exception.stack",{"_index":909,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exceptionally",{"_index":2325,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exceptionfilter",{"_index":886,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exceptions.filter",{"_index":765,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["exceptions.filter.ts",{"_index":804,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{},"coverage.html":{}}}],["exceptions.filter.ts:28",{"_index":1631,"title":{},"body":{"classes/ValidationException.html":{}}}],["exceptions.filter.ts:6",{"_index":809,"title":{},"body":{"classes/DatabaseConnectionException.html":{}}}],["exclude",{"_index":1575,"title":{},"body":{"entities/User.html":{}}}],["excluded",{"_index":1596,"title":{},"body":{"controllers/UsersController.html":{}}}],["execution",{"_index":402,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["executioncontext",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1108,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{}}}],["existinguser",{"_index":769,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["exists",{"_index":773,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/SeedProducts1759619432047.html":{},"controllers/UsersController.html":{}}}],["exists})@post('')@httpcode(httpstatus.created)@auth(authtype.none",{"_index":1593,"title":{},"body":{"controllers/UsersController.html":{}}}],["expand",{"_index":2376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expands",{"_index":2351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expensive",{"_index":1939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["experience",{"_index":1764,"title":{},"body":{"index.html":{}}}],["expertly",{"_index":1947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiresin",{"_index":1122,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["explicit",{"_index":1448,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["export",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{}}}],["exports",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["expose",{"_index":991,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["express",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["extend",{"_index":2195,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extended",{"_index":1907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extends",{"_index":806,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/UpdateProductDto.html":{},"classes/ValidationException.html":{}}}],["exterior",{"_index":2224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extract",{"_index":898,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["extracting",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(request",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extras",{"_index":2249,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eye",{"_index":2679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fabric",{"_index":2183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fade",{"_index":2559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["failed",{"_index":824,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["fallback",{"_index":1075,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["falling",{"_index":2568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":40,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/FindAllProductsProvider.html":{},"entities/Product.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{}}}],["false})@exclude",{"_index":1571,"title":{},"body":{"entities/User.html":{}}}],["family",{"_index":2248,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fatigue",{"_index":2675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["favorite",{"_index":1984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["favour",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{}}}],["favour'})@isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":727,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["favour233",{"_index":1496,"title":{},"body":{"classes/SignInDto.html":{}}}],["favour233'})@isnotempty()@isstring",{"_index":1494,"title":{},"body":{"classes/SignInDto.html":{}}}],["favour@ejim1",{"_index":748,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["favour@ejim1'})@isstring()@isnotempty()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":731,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["favour@gmail.com",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["favour@gmail.com'})@isemail()@isnotempty",{"_index":1491,"title":{},"body":{"classes/SignInDto.html":{}}}],["favour@gmail.com'})@isemail()@isnotempty()@maxlength(96",{"_index":725,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["fbehl.jpg",{"_index":2773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["feature",{"_index":2084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["features",{"_index":2227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["featuring",{"_index":1993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["festival",{"_index":2359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["few",{"_index":1748,"title":{},"body":{"index.html":{}}}],["fiber",{"_index":2106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fibers",{"_index":2425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["field",{"_index":1826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fields",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"coverage.html":{}}}],["file.ts",{"_index":1664,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["filter",{"_index":867,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["filteredpayload",{"_index":1552,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["filtering",{"_index":2276,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filterobj",{"_index":1546,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["filterobj(obj",{"_index":1547,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["filters",{"_index":2261,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finally",{"_index":675,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["finalresponse",{"_index":1315,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["find",{"_index":1258,"title":{},"body":{"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":1289,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["findallorders",{"_index":997,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/OrdersService.html":{}}}],["findallorders(userid",{"_index":1001,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/OrdersService.html":{}}}],["findallordersforuserprovider",{"_index":994,"title":{"injectables/FindAllOrdersForUserProvider.html":{}},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"overview.html":{}}}],["findallproducts",{"_index":1012,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["findallproducts(productquery",{"_index":1018,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"injectables/ProductsService.html":{}}}],["findallproducts(productsquery",{"_index":1363,"title":{},"body":{"controllers/ProductsController.html":{}}}],["findallproductsprovider",{"_index":1008,"title":{"injectables/FindAllProductsProvider.html":{}},"body":{"injectables/FindAllProductsProvider.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["finding",{"_index":1106,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{}}}],["findoptionsorder",{"_index":1026,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["findorderbyid",{"_index":1087,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{},"injectables/OrdersService.html":{}}}],["findorderbyid(userid",{"_index":1089,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{},"injectables/OrdersService.html":{}}}],["findorderbyidprovider",{"_index":1085,"title":{"injectables/FindOrderByIdProvider.html":{}},"body":{"injectables/FindOrderByIdProvider.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"overview.html":{}}}],["findproductbyid",{"_index":1095,"title":{},"body":{"injectables/FindProductByIdProvider.html":{},"injectables/ProductsService.html":{}}}],["findproductbyid(productid",{"_index":1096,"title":{},"body":{"injectables/FindProductByIdProvider.html":{},"injectables/ProductsService.html":{}}}],["findproductbyidprovider",{"_index":1094,"title":{"injectables/FindProductByIdProvider.html":{}},"body":{"injectables/FindProductByIdProvider.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["finduserbyemail",{"_index":1102,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["finduserbyemail(email",{"_index":1104,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["finduserbyemailprovider",{"_index":1099,"title":{"injectables/FindUserByEmailProvider.html":{}},"body":{"injectables/FindUserByEmailProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["finduserbyid",{"_index":1110,"title":{},"body":{"injectables/FindUserByIdProvider.html":{},"injectables/UsersService.html":{}}}],["finduserbyid(userid",{"_index":1111,"title":{},"body":{"injectables/FindUserByIdProvider.html":{},"injectables/UsersService.html":{}}}],["finduserbyidprovider",{"_index":1109,"title":{"injectables/FindUserByIdProvider.html":{}},"body":{"injectables/FindUserByIdProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["fine",{"_index":2274,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finish",{"_index":1865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finished",{"_index":2724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fire",{"_index":417,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["firm",{"_index":2407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["first",{"_index":1273,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["firstname",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fish",{"_index":1990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["five",{"_index":2649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fixed",{"_index":622,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["flat",{"_index":2347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["flavor",{"_index":2279,"title":{},"body":{"miscellaneous/variables.html":{}}}],["flavors",{"_index":2221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["flexible",{"_index":1893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["flipping",{"_index":1981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["flour",{"_index":2089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["flows",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["foil",{"_index":2047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["folds",{"_index":2346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["follow",{"_index":1779,"title":{},"body":{"index.html":{}}}],["food",{"_index":1888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["foods",{"_index":1985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["footprint",{"_index":2719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forbiddenexception",{"_index":1421,"title":{},"body":{"guards/RolesGuard.html":{}}}],["forbiddenexception('user",{"_index":1429,"title":{},"body":{"guards/RolesGuard.html":{}}}],["forget",{"_index":668,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["forgot",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{}}}],["fork",{"_index":1841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format",{"_index":637,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/UsersController.html":{}}}],["formatting",{"_index":794,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["forwardref",{"_index":351,"title":{},"body":{"modules/AuthModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":837,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByIdProvider.html":{},"classes/GlobalExceptionFilter.html":{},"guards/RolesGuard.html":{},"injectables/UpdateProductProvider.html":{}}}],["fragrances",{"_index":2712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["frame",{"_index":2563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["framework",{"_index":1723,"title":{},"body":{"index.html":{}}}],["free",{"_index":1978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["freezer",{"_index":2132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["freezing",{"_index":2553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fresh",{"_index":2061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["freshness",{"_index":2138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fridge",{"_index":2122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["friendly",{"_index":1847,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fruit",{"_index":2684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fruits",{"_index":2196,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fsc",{"_index":1923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["full",{"_index":904,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/SeedProducts1759619432047.html":{},"index.html":{}}}],["fuller",{"_index":2270,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fully",{"_index":2012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["functional",{"_index":2743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["functionality",{"_index":2033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["functions",{"_index":1718,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furniture",{"_index":2775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["future",{"_index":2401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gathering",{"_index":2703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gatherings",{"_index":2718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gaurding",{"_index":1836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generate",{"_index":438,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["generatetokenprovider",{"_index":1501,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["generatetokens",{"_index":1116,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokens(user",{"_index":1119,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokensprovider",{"_index":348,"title":{"injectables/GenerateTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["generating",{"_index":1115,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generations",{"_index":2514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generous",{"_index":2329,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generously",{"_index":2698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gentle",{"_index":1959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get(':id",{"_index":1228,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getcart",{"_index":545,"title":{},"body":{"injectables/CartService.html":{},"injectables/GetCartProvider.html":{}}}],["getcart(userid",{"_index":554,"title":{},"body":{"injectables/CartService.html":{},"injectables/GetCartProvider.html":{}}}],["getcartprovider",{"_index":117,"title":{"injectables/GetCartProvider.html":{}},"body":{"injectables/AddToCartProvider.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"coverage.html":{},"overview.html":{}}}],["getcontrollername",{"_index":1168,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["getcontrollername(request",{"_index":940,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["gethandlername",{"_index":1169,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["gethandlername(request",{"_index":949,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["gethello",{"_index":150,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gethttperrorcode",{"_index":1170,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["gethttperrorcode(status",{"_index":957,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["getmany",{"_index":635,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["getorder",{"_index":1224,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getorder(userid",{"_index":1227,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getorders",{"_index":1225,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getorders(@activeuser('sub",{"_index":1236,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getorders(userid",{"_index":1230,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getproductsbasedto",{"_index":1155,"title":{"classes/GetProductsBaseDto.html":{}},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"coverage.html":{}}}],["getproductsdto",{"_index":1016,"title":{"classes/GetProductsDto.html":{}},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["getting",{"_index":938,"title":{"index.html":{}},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["getusercart",{"_index":454,"title":{},"body":{"controllers/CartController.html":{}}}],["getusercart(@activeuser('sub",{"_index":485,"title":{},"body":{"controllers/CartController.html":{}}}],["getusercart(userid",{"_index":466,"title":{},"body":{"controllers/CartController.html":{}}}],["glass",{"_index":2071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["glasses",{"_index":2784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["glaze",{"_index":2333,"title":{},"body":{"miscellaneous/variables.html":{}}}],["glazed",{"_index":2721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["glazes",{"_index":2725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["glide",{"_index":1894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["global",{"_index":866,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["globalexceptionfilter",{"_index":891,"title":{"classes/GlobalExceptionFilter.html":{}},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["go",{"_index":2119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["goers",{"_index":2360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gold",{"_index":2262,"title":{},"body":{"miscellaneous/variables.html":{}}}],["goods",{"_index":2076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grab",{"_index":2454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grade",{"_index":1889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grain",{"_index":2019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grains",{"_index":2093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["graph",{"_index":1770,"title":{},"body":{"index.html":{}}}],["grease",{"_index":2429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["greens",{"_index":2643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grid",{"_index":2565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grime",{"_index":2409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grip",{"_index":1905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gripping",{"_index":1982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grips",{"_index":2618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["groove",{"_index":2587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grounds",{"_index":2277,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grow",{"_index":1790,"title":{},"body":{"index.html":{}}}],["growth",{"_index":2397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["guarding",{"_index":1832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{},"overview.html":{}}}],["hand",{"_index":2010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handcrafted",{"_index":1922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handle",{"_index":859,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["handled",{"_index":865,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["handler",{"_index":882,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["handles",{"_index":1445,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["handling",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ErrorHandlingInterceptor.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["handling.interceptor.ts",{"_index":844,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"coverage.html":{}}}],["handling.interceptor.ts:24",{"_index":846,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["handling.interceptor.ts:55",{"_index":849,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["handling/error",{"_index":843,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"coverage.html":{}}}],["hands",{"_index":1763,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["handy",{"_index":1751,"title":{},"body":{"index.html":{}}}],["hanging",{"_index":2754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hangs",{"_index":2769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["harbor",{"_index":2412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["harder",{"_index":2579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["harmful",{"_index":2124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["harsh",{"_index":2450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["harvested",{"_index":2426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashed",{"_index":436,"title":{},"body":{"injectables/BcryptProvider.html":{},"controllers/UsersController.html":{}}}],["hashed.'})@apibody({description",{"_index":1587,"title":{},"body":{"controllers/UsersController.html":{}}}],["hashing",{"_index":435,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashing.provider",{"_index":437,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashingprovider",{"_index":347,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":424,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(data",{"_index":433,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hasrole",{"_index":1430,"title":{},"body":{"guards/RolesGuard.html":{}}}],["head",{"_index":2474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["headers",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["heat",{"_index":1885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["heavy",{"_index":1991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hello",{"_index":246,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1774,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["herb",{"_index":2647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["herbs",{"_index":2651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["here",{"_index":1797,"title":{},"body":{"index.html":{}}}],["high",{"_index":2165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["highlights",{"_index":2697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["highly",{"_index":2374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hikers",{"_index":2358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hold",{"_index":2455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["holder",{"_index":2786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["honey",{"_index":2741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hooks",{"_index":2453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["host",{"_index":232,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":895,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["hot",{"_index":2216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hours",{"_index":2217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":956,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["httpcode",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["httpcode(204",{"_index":1385,"title":{},"body":{"controllers/ProductsController.html":{}}}],["httpcode(httpstatus.created",{"_index":1611,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpcode(httpstatus.ok",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":807,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["https",{"_index":1465,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["https://i5.walmartimages.com/seo/stainless",{"_index":2682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://images",{"_index":2003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://m.media",{"_index":1879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":1803,"title":{},"body":{"index.html":{}}}],["https://plantishfuture.com/cdn/shop/products/plantish",{"_index":2400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://www.zulaykitchen.com/cdn/shop/files/bamboo",{"_index":2539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpstatus",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{},"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/UsersController.html":{},"classes/ValidationException.html":{}}}],["httpstatus.bad_request",{"_index":826,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["httpstatus.internal_server_error",{"_index":913,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["httpstatus.not_found",{"_index":927,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["httpstatus.request_timeout",{"_index":821,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["hundreds",{"_index":2066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["husks",{"_index":2427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hydrated",{"_index":2309,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hydration",{"_index":2233,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ice",{"_index":2307,"title":{},"body":{"miscellaneous/variables.html":{}}}],["id",{"_index":106,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/Cart.html":{},"entities/CartItem.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id.provider",{"_index":1250,"title":{},"body":{"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["id.provider.ts",{"_index":1086,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByIdProvider.html":{},"coverage.html":{}}}],["id.provider.ts:12",{"_index":1091,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{}}}],["id.provider.ts:16",{"_index":1097,"title":{},"body":{"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByIdProvider.html":{}}}],["id.provider.ts:7",{"_index":1088,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByIdProvider.html":{}}}],["ideal",{"_index":1900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["identifier",{"_index":1634,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":2082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["identity",{"_index":1486,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["idx_category",{"_index":1460,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["idx_name",{"_index":1459,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["ignore",{"_index":1462,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["ilike",{"_index":1027,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["ilike(`%${searchterm",{"_index":1063,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["iloghaluagneskc@gmail.com",{"_index":1603,"title":{},"body":{"controllers/UsersController.html":{}}}],["images",{"_index":2005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["imageurl",{"_index":683,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["impact",{"_index":1875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implements",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{}}}],["import",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{}}}],["imports",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["in')@auth(authtype.none)@httpcode(httpstatus.ok)@apioperation({summary",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{}}}],["in(cleanedquery.category.split",{"_index":1045,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["in.dto",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["in.dto.ts",{"_index":1490,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["in.dto.ts:17",{"_index":1492,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.dto.ts:28",{"_index":1495,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.provider",{"_index":359,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["in.provider.ts",{"_index":1498,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["in.provider.ts:17",{"_index":1502,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["in.provider.ts:47",{"_index":1503,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["inch",{"_index":2355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["included",{"_index":2241,"title":{},"body":{"miscellaneous/variables.html":{}}}],["includes",{"_index":2257,"title":{},"body":{"miscellaneous/variables.html":{}}}],["including",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index(['category",{"_index":1355,"title":{},"body":{"entities/Product.html":{}}}],["index(['name",{"_index":1354,"title":{},"body":{"entities/Product.html":{}}}],["indicates",{"_index":431,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["individual",{"_index":2554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["individually",{"_index":2017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{}}}],["information",{"_index":984,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["infused",{"_index":2055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inherent",{"_index":2584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inhibit",{"_index":2585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(forwardref",{"_index":768,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(jwtconfig.key",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["inject(request",{"_index":1294,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["injectable",{"_index":53,"title":{"injectables/AddToCartProvider.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/HashingProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"injectables/UsersService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/HashingProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":108,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/HashingProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":135,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"controllers/OrdersController.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["injectrepository",{"_index":131,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["injectrepository(cartitem",{"_index":140,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["injectrepository(order",{"_index":1003,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{}}}],["injectrepository(product",{"_index":717,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["injectrepository(user",{"_index":767,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{}}}],["innerjoinandselect('ci.product",{"_index":629,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["inorder",{"_index":1292,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["insert",{"_index":1461,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["installcompile",{"_index":1734,"title":{},"body":{"index.html":{}}}],["instance",{"_index":418,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["instanceof",{"_index":860,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["instantly",{"_index":2352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["insulated",{"_index":2209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["insulation",{"_index":2214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["integer",{"_index":1457,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["interact",{"_index":1771,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":788,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["intercept(context",{"_index":791,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["interceptor",{"_index":787,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["interest",{"_index":2783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interface",{"_index":96,"title":{"interfaces/ActiveUserData.html":{},"interfaces/Cart.html":{},"interfaces/ErrorResponse.html":{},"interfaces/Paginated.html":{}},"body":{"interfaces/ActiveUserData.html":{},"interfaces/Cart.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"interfaces/Paginated.html":{},"coverage.html":{}}}],["interfaces",{"_index":98,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/Cart.html":{},"interfaces/ErrorResponse.html":{},"interfaces/Paginated.html":{},"overview.html":{}}}],["interfaces/active",{"_index":1125,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["interfaces/cart.interface",{"_index":127,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["interfaces/paginated.interface",{"_index":1293,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["interior",{"_index":2022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["internal",{"_index":914,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["internalservererror",{"_index":916,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["intersectiontype",{"_index":1165,"title":{},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["invalid",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/UsersController.html":{}}}],["invaliduser",{"_index":1605,"title":{},"body":{"controllers/UsersController.html":{}}}],["isboolean",{"_index":1544,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["isconnectionerror",{"_index":845,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["isconnectionerror(error",{"_index":847,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["isdeleted",{"_index":839,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{}}}],["isemail",{"_index":744,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isenum",{"_index":697,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isenum(productcategory",{"_index":705,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isenum(productcategory)@isnotempty",{"_index":685,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isglobal",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":1164,"title":{},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["isin(['newest",{"_index":1166,"title":{},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["isint",{"_index":576,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateProductDto.html":{},"classes/UpdateCartItemDto.html":{}}}],["isint()@isnotempty",{"_index":693,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isint()@isnotempty()@min(1",{"_index":695,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isint()@min(1",{"_index":574,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/UpdateCartItemDto.html":{}}}],["isnan(max",{"_index":1052,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["isnan(min",{"_index":1051,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["isnotempty",{"_index":591,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isnotempty()@isstring",{"_index":586,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["isoptional",{"_index":592,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/PaginationQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["isoptional()@isboolean",{"_index":1541,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["isoptional()@ispositive",{"_index":1323,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isoptional()@isstring",{"_index":588,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["isoptional()@isstring()@isin(['newest",{"_index":1162,"title":{},"body":{"classes/GetProductsBaseDto.html":{}}}],["ispasswordequal",{"_index":1505,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["ispositive",{"_index":1325,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":572,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/SignInDto.html":{}}}],["isstring()@isnotempty",{"_index":689,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isstring()@isnotempty()@minlength(5)@maxlength(150",{"_index":691,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isstring()@isnotempty()@minlength(5)@maxlength(350",{"_index":687,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isstring()@isoptional",{"_index":1158,"title":{},"body":{"classes/GetProductsBaseDto.html":{}}}],["issuer",{"_index":1137,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["item",{"_index":139,"title":{},"body":{"injectables/AddToCartProvider.html":{},"entities/CartItem.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["item.dto",{"_index":126,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["item.dto.ts",{"_index":570,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/UpdateCartItemDto.html":{},"coverage.html":{}}}],["item.dto.ts:5",{"_index":573,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["item.dto.ts:6",{"_index":1514,"title":{},"body":{"classes/UpdateCartItemDto.html":{}}}],["item.dto.ts:9",{"_index":575,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["item.entity",{"_index":130,"title":{},"body":{"injectables/AddToCartProvider.html":{},"modules/CartModule.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Order.html":{},"modules/OrdersModule.html":{},"entities/Product.html":{},"injectables/UpdateCartItemProvider.html":{},"entities/User.html":{}}}],["item.entity.ts",{"_index":496,"title":{},"body":{"entities/CartItem.html":{},"entities/OrderItem.html":{},"coverage.html":{}}}],["item.entity.ts:11",{"_index":1220,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:14",{"_index":1218,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:17",{"_index":1217,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:18",{"_index":506,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:20",{"_index":1219,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:21",{"_index":514,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:24",{"_index":518,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:29",{"_index":511,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:32",{"_index":502,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:35",{"_index":516,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:38",{"_index":504,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:8",{"_index":1215,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.id",{"_index":1149,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["item.price",{"_index":654,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["item.product",{"_index":1150,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["item.product.price",{"_index":1153,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["item.product.stock",{"_index":1534,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.productid",{"_index":661,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["item.provider",{"_index":539,"title":{},"body":{"modules/CartModule.html":{},"injectables/CartService.html":{}}}],["item.provider.ts",{"_index":1516,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{},"coverage.html":{}}}],["item.provider.ts:101",{"_index":1520,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.provider.ts:15",{"_index":1519,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.provider.ts:32",{"_index":1521,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.provider.ts:58",{"_index":1524,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.provider.ts:72",{"_index":1525,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.provider.ts:88",{"_index":1523,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.quantity",{"_index":655,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["item.stock",{"_index":652,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["items",{"_index":444,"title":{},"body":{"interfaces/Cart.html":{},"entities/CartItem.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Order.html":{},"classes/PaginationQueryDto.html":{},"miscellaneous/variables.html":{}}}],["items.product",{"_index":1006,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{}}}],["itemsperpage",{"_index":1269,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["jar",{"_index":2622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jars",{"_index":2072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jellies",{"_index":2556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["job",{"_index":1783,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1785,"title":{},"body":{"index.html":{}}}],["john",{"_index":1607,"title":{},"body":{"controllers/UsersController.html":{}}}],["john.doe@example.com",{"_index":1609,"title":{},"body":{"controllers/UsersController.html":{}}}],["joi",{"_index":1683,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":1058,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"index.html":{}}}],["jojoba",{"_index":2056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jsbfiwhvfquobdfj",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{}}}],["juice",{"_index":2586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{}}}],["jwtconfig",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{}}}],["jwtconfiguration",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["jwtmodule",{"_index":205,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":241,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtservice",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["kamil",{"_index":1800,"title":{},"body":{"index.html":{}}}],["keep",{"_index":2060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keeping",{"_index":2136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keeps",{"_index":2194,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kelechi",{"_index":1601,"title":{},"body":{"controllers/UsersController.html":{}}}],["key",{"_index":1453,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["keyof",{"_index":1554,"title":{},"body":{"injectables/UpdateProductProvider.html":{},"miscellaneous/variables.html":{}}}],["keyword",{"_index":391,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["kind",{"_index":2018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kitchen",{"_index":1917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kneading",{"_index":2525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["knife",{"_index":1842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["knives",{"_index":2535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ladle",{"_index":2009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":1274,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"miscellaneous/variables.html":{}}}],["lasting",{"_index":2170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lastname",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["later",{"_index":817,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"classes/ValidationException.html":{}}}],["lather",{"_index":2385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["leach",{"_index":2300,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lead",{"_index":2332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["leak",{"_index":2104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["learn",{"_index":1755,"title":{},"body":{"index.html":{}}}],["leave",{"_index":2254,"title":{},"body":{"miscellaneous/variables.html":{}}}],["leaving",{"_index":2708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["leftovers",{"_index":2118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legend",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":1194,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["less",{"_index":2354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lets",{"_index":2080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["letter",{"_index":739,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":1806,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1788,"title":{},"body":{"index.html":{}}}],["lid",{"_index":2229,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lids",{"_index":2073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["life",{"_index":2026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lifetime",{"_index":2135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["light",{"_index":2171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lightweight",{"_index":1863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["limit",{"_index":1035,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/PaginationQueryDto.html":{}}}],["line",{"_index":85,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["liners",{"_index":2546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linkedin",{"_index":1781,"title":{},"body":{"index.html":{}}}],["links",{"_index":1264,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["lint",{"_index":2460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["liquids",{"_index":2588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["literal",{"_index":447,"title":{},"body":{"interfaces/Cart.html":{},"interfaces/Paginated.html":{}}}],["load",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["lock",{"_index":2112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["locking",{"_index":1994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["locks",{"_index":2137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log",{"_index":903,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["logged",{"_index":101,"title":{},"body":{"interfaces/ActiveUserData.html":{},"guards/AuthenticationGuard.html":{}}}],["logger",{"_index":888,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["logger(globalexceptionfilter.name",{"_index":892,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["logging",{"_index":239,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["long",{"_index":2169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["longer",{"_index":2606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["longevity",{"_index":1933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["looking",{"_index":1782,"title":{},"body":{"index.html":{}}}],["loop",{"_index":415,"title":{},"body":{"guards/AuthenticationGuard.html":{},"index.html":{}}}],["lost",{"_index":2660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lunches",{"_index":2120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["machine",{"_index":2202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["made",{"_index":1887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["main",{"_index":2693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maintain",{"_index":2173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maintaining",{"_index":2236,"title":{},"body":{"miscellaneous/variables.html":{}}}],["make",{"_index":1872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["makers",{"_index":2286,"title":{},"body":{"miscellaneous/variables.html":{}}}],["makes",{"_index":399,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["making",{"_index":1899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manytoone",{"_index":526,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{}}}],["manytoone(undefined",{"_index":507,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{}}}],["map",{"_index":394,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["map((data",{"_index":800,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["map((p",{"_index":1049,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["maple",{"_index":2580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marble",{"_index":2507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marinating",{"_index":2141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marks",{"_index":2777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mat",{"_index":2479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["match",{"_index":2226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matches",{"_index":745,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":750,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":95,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":2123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["materials",{"_index":2411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["math.ceil(totalitems",{"_index":1312,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["max",{"_index":1047,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["maximizes",{"_index":2095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maximum",{"_index":2174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maxlength",{"_index":698,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(150",{"_index":703,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["maxlength(350",{"_index":704,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["maxlength(96",{"_index":747,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["meal",{"_index":2116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meals",{"_index":1856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["means",{"_index":387,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["measurements",{"_index":2520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["measuring",{"_index":2530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mechanism",{"_index":1995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["media/sc/478fe6bb",{"_index":2155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["medium",{"_index":2406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meets",{"_index":1418,"title":{},"body":{"guards/RolesGuard.html":{}}}],["mesh",{"_index":2184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/ValidationException.html":{}}}],["messes",{"_index":2380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meta",{"_index":1265,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["metadata",{"_index":401,"title":{},"body":{"guards/AuthenticationGuard.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["metal",{"_index":1936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metallic",{"_index":2255,"title":{},"body":{"miscellaneous/variables.html":{}}}],["method",{"_index":405,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/CreateOrderDto.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{}}}],["methods",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["method}${pathsegments[pathsegments.length",{"_index":952,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["method}handler",{"_index":955,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["microfiber",{"_index":2443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["microplastics",{"_index":2373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["microwave",{"_index":2107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migration",{"_index":1449,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["migrationinterface",{"_index":1436,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["mildew",{"_index":2438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["millions",{"_index":2451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["min",{"_index":577,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateProductDto.html":{},"injectables/FindAllProductsProvider.html":{},"classes/UpdateCartItemDto.html":{}}}],["min(1",{"_index":579,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateProductDto.html":{},"classes/UpdateCartItemDto.html":{}}}],["minimal",{"_index":2386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["minimum",{"_index":734,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":699,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":746,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(5",{"_index":702,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["minlength(8",{"_index":749,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1691,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["misses",{"_index":1076,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["missing",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["mit",{"_index":1787,"title":{},"body":{"index.html":{}}}],["mixing",{"_index":1960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mocked",{"_index":594,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{}}}],["mode",{"_index":1738,"title":{},"body":{"index.html":{}}}],["modern",{"_index":2099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["module",{"_index":157,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":159,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moisture",{"_index":2087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mold",{"_index":2785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["molds",{"_index":2049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["moment",{"_index":815,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["more",{"_index":1756,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["most_purchased",{"_index":1073,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["mounted",{"_index":2404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mouth",{"_index":2305,"title":{},"body":{"miscellaneous/variables.html":{}}}],["move",{"_index":2533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["muffin",{"_index":2544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["muffins",{"_index":2550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mug",{"_index":2315,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mugs",{"_index":2317,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multiple",{"_index":2148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["myśliwiec",{"_index":1801,"title":{},"body":{"index.html":{}}}],["na.ssl",{"_index":2004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"miscellaneous/variables.html":{}}}],["napkins",{"_index":2706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["narrow",{"_index":2467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["natural",{"_index":1931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["naturally",{"_index":1861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["need",{"_index":638,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["needed",{"_index":1475,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["needs",{"_index":2151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nest",{"_index":1729,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1805,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":795,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["nestjs",{"_index":1753,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokensProvider.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/PaginationProvider.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1676,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/SignInDto.html":{},"classes/UpdateProductDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":132,"title":{},"body":{"injectables/AddToCartProvider.html":{},"modules/AppModule.html":{},"modules/CartModule.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GetCartProvider.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["new",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["newest",{"_index":1066,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["newobj",{"_index":1555,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["newobj[el",{"_index":1558,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["newproduct",{"_index":718,"title":{},"body":{"injectables/CreateProductProvider.html":{}}}],["newurl",{"_index":1309,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${nextpage",{"_index":1319,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${paginationquery.page",{"_index":1318,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${prevpage",{"_index":1320,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${totalpages",{"_index":1317,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=1",{"_index":1316,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":774,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.createdat",{"_index":783,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.email",{"_index":781,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.firstname",{"_index":779,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.id",{"_index":778,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.lastname",{"_index":780,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.role",{"_index":782,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["next",{"_index":84,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllProductsProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["next.handle().pipe",{"_index":799,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["nextpage",{"_index":1313,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":1722,"title":{},"body":{"index.html":{}}}],["non",{"_index":1901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["none",{"_index":1701,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notfoundexception",{"_index":833,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["notfoundexception('item",{"_index":1528,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["notfoundexception('order",{"_index":1093,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{}}}],["notfoundexception('product",{"_index":836,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["notfoundexception(`user",{"_index":1112,"title":{},"body":{"injectables/FindUserByIdProvider.html":{}}}],["nothing",{"_index":1472,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["npm",{"_index":1733,"title":{},"body":{"index.html":{}}}],["null",{"_index":633,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{}}}],["nullable",{"_index":1331,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{}}}],["number",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Cart.html":{},"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ErrorResponse.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"classes/UpdateCartItemDto.html":{}}}],["number(limit",{"_index":1039,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["number(page",{"_index":1042,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["number(subtotal.tofixed(2",{"_index":1154,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["numerous",{"_index":2717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nutrients",{"_index":2030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["obj",{"_index":1550,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["obj[el",{"_index":1559,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["object",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/UsersController.html":{}}}],["object.entries(query).filter",{"_index":1083,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["object.fromentries",{"_index":1082,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["object.keys(obj).foreach((el",{"_index":1556,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["objectliteral",{"_index":1291,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["observable",{"_index":382,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["occasional",{"_index":2589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["occasionally",{"_index":2644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["odor",{"_index":2747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["odors",{"_index":2222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["offer",{"_index":1784,"title":{},"body":{"index.html":{}}}],["offering",{"_index":2186,"title":{},"body":{"miscellaneous/variables.html":{}}}],["offers",{"_index":1967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["official",{"_index":1765,"title":{},"body":{"index.html":{}}}],["oil",{"_index":2057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oiling",{"_index":2590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oils",{"_index":1932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oldest",{"_index":1071,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["olive",{"_index":2737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ondelete",{"_index":509,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{}}}],["one",{"_index":738,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/PaginationProvider.html":{},"miscellaneous/variables.html":{}}}],["onetomany",{"_index":1209,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":1191,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["open",{"_index":1789,"title":{},"body":{"index.html":{}}}],["opener",{"_index":2623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["opening",{"_index":2306,"title":{},"body":{"miscellaneous/variables.html":{}}}],["openings",{"_index":2477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operation",{"_index":810,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["operations",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["optimal",{"_index":2501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"injectables/CartService.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{}}}],["options",{"_index":1077,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"injectables/PaginationProvider.html":{}}}],["options.order",{"_index":1304,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["options.relations",{"_index":1301,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["options.select",{"_index":1302,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["options.where",{"_index":1303,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["order",{"_index":607,"title":{"entities/Order.html":{}},"body":{"injectables/CreateOrderProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"entities/Product.html":{},"injectables/UpdateCartItemProvider.html":{},"entities/User.html":{},"coverage.html":{}}}],["order.createdat",{"_index":1069,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["order.dto",{"_index":611,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["order.dto.ts",{"_index":582,"title":{},"body":{"classes/CreateOrderDto.html":{},"coverage.html":{}}}],["order.dto.ts:10",{"_index":587,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.dto.ts:15",{"_index":589,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.dto.ts:6",{"_index":590,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.entity",{"_index":608,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"entities/OrderItem.html":{},"modules/OrdersModule.html":{}}}],["order.items",{"_index":1216,"title":{},"body":{"entities/OrderItem.html":{}}}],["order.product",{"_index":1344,"title":{},"body":{"entities/Product.html":{}}}],["order.provider",{"_index":1246,"title":{},"body":{"modules/OrdersModule.html":{},"injectables/OrdersService.html":{}}}],["order.provider.ts",{"_index":597,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"coverage.html":{}}}],["order.provider.ts:16",{"_index":601,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["order.provider.ts:21",{"_index":603,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["order.purchasecount",{"_index":1074,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["order.user",{"_index":1569,"title":{},"body":{"entities/User.html":{}}}],["orderid",{"_index":1090,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["orderitem",{"_index":606,"title":{"entities/OrderItem.html":{}},"body":{"injectables/CreateOrderProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"modules/OrdersModule.html":{},"entities/Product.html":{},"coverage.html":{}}}],["orderitem.order",{"_index":1192,"title":{},"body":{"entities/Order.html":{}}}],["orderitems",{"_index":658,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["orderrepository",{"_index":1000,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{}}}],["orders",{"_index":996,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"entities/Product.html":{},"injectables/UpdateCartItemProvider.html":{},"entities/User.html":{},"coverage.html":{}}}],["orders.controller",{"_index":1244,"title":{},"body":{"modules/OrdersModule.html":{}}}],["orders/order",{"_index":1352,"title":{},"body":{"entities/Product.html":{}}}],["orders/order.entity",{"_index":1351,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{}}}],["orders/orders.module",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["orderscontroller",{"_index":1222,"title":{"controllers/OrdersController.html":{}},"body":{"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"coverage.html":{}}}],["ordersmodule",{"_index":171,"title":{"modules/OrdersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OrdersModule.html":{},"modules.html":{},"overview.html":{}}}],["ordersservice",{"_index":1232,"title":{"injectables/OrdersService.html":{}},"body":{"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"overview.html":{}}}],["orderstatus",{"_index":1198,"title":{},"body":{"entities/Order.html":{},"miscellaneous/enumerations.html":{}}}],["orderstatus.pending",{"_index":1213,"title":{},"body":{"entities/Order.html":{}}}],["organic",{"_index":2041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["organized",{"_index":2100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["original",{"_index":864,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["originated",{"_index":939,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["out",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["outdoor",{"_index":2231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oven",{"_index":2545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["over",{"_index":2134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["overview",{"_index":1810,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["ozeozl.jpg",{"_index":1975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["p",{"_index":630,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["pack",{"_index":2040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["package",{"_index":1670,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packing",{"_index":2145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["page",{"_index":1036,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/PaginationQueryDto.html":{}}}],["pages",{"_index":1268,"title":{},"body":{"interfaces/Paginated.html":{}}}],["paginated",{"_index":1023,"title":{"interfaces/Paginated.html":{}},"body":{"injectables/FindAllProductsProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["paginatedproducts",{"_index":1079,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["paginating",{"_index":1288,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pagination",{"_index":1032,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{}}}],["paginationmodule",{"_index":1277,"title":{"modules/PaginationModule.html":{}},"body":{"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":1013,"title":{"injectables/PaginationProvider.html":{}},"body":{"injectables/FindAllProductsProvider.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquery",{"_index":1078,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"injectables/PaginationProvider.html":{}}}],["paginationquery(paginationquery",{"_index":1286,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.limit",{"_index":1299,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.page",{"_index":1298,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto",{"_index":1028,"title":{"classes/PaginationQueryDto.html":{}},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["paired",{"_index":2464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pans",{"_index":1903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pantry",{"_index":2096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["paper",{"_index":2267,"title":{},"body":{"miscellaneous/variables.html":{}}}],["param",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"miscellaneous/variables.html":{}}}],["param('cartid",{"_index":488,"title":{},"body":{"controllers/CartController.html":{}}}],["param('id",{"_index":1238,"title":{},"body":{"controllers/OrdersController.html":{}}}],["param('productid",{"_index":1382,"title":{},"body":{"controllers/ProductsController.html":{}}}],["parameters",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{}}}],["parchment",{"_index":2481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["paring",{"_index":2599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parsefloat(p.trim",{"_index":1050,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["parsley",{"_index":2655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["part",{"_index":1775,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":1543,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["partialtype(createproductdto",{"_index":1539,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["particles",{"_index":2456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parties",{"_index":2715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["party",{"_index":2699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pass",{"_index":2275,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passing",{"_index":364,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["password",{"_index":230,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["password1",{"_index":1604,"title":{},"body":{"controllers/UsersController.html":{}}}],["pasta",{"_index":2092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pastries",{"_index":2489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pastry",{"_index":2518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":472,"title":{},"body":{"controllers/CartController.html":{},"controllers/ProductsController.html":{}}}],["patch(':cartid",{"_index":464,"title":{},"body":{"controllers/CartController.html":{}}}],["patch(':productid",{"_index":1381,"title":{},"body":{"controllers/ProductsController.html":{}}}],["path",{"_index":883,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["pathsegments",{"_index":944,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["pathsegments.length",{"_index":946,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["pathsegments[2].charat(0).touppercase()}${pathsegments[2].slice(1)}controller",{"_index":947,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["pattern",{"_index":2566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patterns",{"_index":2020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pay",{"_index":2281,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{}}}],["payment",{"_index":593,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{}}}],["paymentmethod",{"_index":584,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{}}}],["peeler",{"_index":2666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["peeler_a69fddff",{"_index":2685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["peelers",{"_index":2667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["peeling",{"_index":2669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pending",{"_index":1703,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["per",{"_index":521,"title":{},"body":{"entities/CartItem.html":{}}}],["perfect",{"_index":1854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["perfectly",{"_index":2475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["permission",{"_index":1432,"title":{},"body":{"guards/RolesGuard.html":{}}}],["persists",{"_index":520,"title":{},"body":{"entities/CartItem.html":{}}}],["personal",{"_index":1585,"title":{},"body":{"controllers/UsersController.html":{}}}],["pests",{"_index":2088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pg",{"_index":1685,"title":{},"body":{"dependencies.html":{}}}],["picnics",{"_index":1857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["piece",{"_index":1860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pieces",{"_index":2658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pin",{"_index":2499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pins",{"_index":2508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pl.jpg",{"_index":2313,"title":{},"body":{"miscellaneous/variables.html":{}}}],["place",{"_index":2767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plant",{"_index":2368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plastic",{"_index":1850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["platinum",{"_index":2131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["platter",{"_index":2690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":816,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"classes/ValidationException.html":{},"index.html":{}}}],["pockets",{"_index":2348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["polished",{"_index":2021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["porous",{"_index":2382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["port",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["portable",{"_index":2344,"title":{},"body":{"miscellaneous/variables.html":{}}}],["portions",{"_index":2555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["positive",{"_index":1873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["post('')@roles(role.admin",{"_index":1359,"title":{},"body":{"controllers/ProductsController.html":{}}}],["post('/sign",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["posts",{"_index":1296,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pot",{"_index":2764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["potato",{"_index":2678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pots",{"_index":2434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pouch",{"_index":1871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pour",{"_index":2264,"title":{},"body":{"miscellaneous/variables.html":{}}}],["powder",{"_index":2223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["power",{"_index":2372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["powerful",{"_index":2428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["precise",{"_index":2523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["precision",{"_index":1202,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{}}}],["preferences",{"_index":2673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preferred",{"_index":1484,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["prefix",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["premature",{"_index":2200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["premium",{"_index":1845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prep",{"_index":2117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preparation",{"_index":1971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prepping",{"_index":2634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["presenting",{"_index":2691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preserve",{"_index":2659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pressure",{"_index":2506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prevent",{"_index":2113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preventing",{"_index":2510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prevents",{"_index":2139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["previous",{"_index":1276,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["prevpage",{"_index":1314,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["price",{"_index":646,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/UpdateProductProvider.html":{},"miscellaneous/variables.html":{}}}],["primary",{"_index":1452,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["primarygeneratedcolumn",{"_index":524,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":505,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["private",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":814,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["process.env.node_env",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["produce",{"_index":2053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["producing",{"_index":2268,"title":{},"body":{"miscellaneous/variables.html":{}}}],["product",{"_index":136,"title":{"entities/Product.html":{}},"body":{"injectables/AddToCartProvider.html":{},"interfaces/Cart.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"coverage.html":{},"overview.html":{}}}],["product.cartitems",{"_index":508,"title":{},"body":{"entities/CartItem.html":{}}}],["product.category",{"_index":1477,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["product.description",{"_index":1478,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["product.dto",{"_index":716,"title":{},"body":{"injectables/CreateProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{}}}],["product.dto.ts",{"_index":681,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:11",{"_index":1540,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:17",{"_index":692,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:23",{"_index":688,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:27",{"_index":686,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:31",{"_index":694,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:36",{"_index":696,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:40",{"_index":690,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:8",{"_index":1542,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.entity",{"_index":715,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/UpdateProductProvider.html":{}}}],["product.imageurl",{"_index":1480,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["product.name",{"_index":1476,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["product.price",{"_index":1479,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["product.provider",{"_index":1395,"title":{},"body":{"modules/ProductsModule.html":{},"injectables/ProductsService.html":{}}}],["product.provider.ts",{"_index":708,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/UpdateProductProvider.html":{},"coverage.html":{}}}],["product.provider.ts:16",{"_index":832,"title":{},"body":{"injectables/DeleteProductProvider.html":{}}}],["product.provider.ts:17",{"_index":714,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["product.provider.ts:42",{"_index":1549,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["product.provider.ts:7",{"_index":830,"title":{},"body":{"injectables/DeleteProductProvider.html":{}}}],["product.provider.ts:8",{"_index":711,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["product.stock",{"_index":145,"title":{},"body":{"injectables/AddToCartProvider.html":{},"classes/SeedProducts1759619432047.html":{}}}],["productcategory",{"_index":684,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"entities/Product.html":{},"miscellaneous/enumerations.html":{}}}],["productid",{"_index":571,"title":{},"body":{"classes/CreateCartItemDto.html":{},"injectables/CreateOrderProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindProductByIdProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/UpdateProductProvider.html":{}}}],["production",{"_index":237,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["productquery",{"_index":1020,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"injectables/ProductsService.html":{}}}],["productrepository",{"_index":1518,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["products",{"_index":834,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/UpdateProductProvider.html":{},"miscellaneous/variables.html":{}}}],["products.controller",{"_index":1394,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products.dto",{"_index":1022,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["products.dto.ts",{"_index":1157,"title":{},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"coverage.html":{}}}],["products.dto.ts:12",{"_index":1160,"title":{},"body":{"classes/GetProductsBaseDto.html":{}}}],["products.dto.ts:19",{"_index":1159,"title":{},"body":{"classes/GetProductsBaseDto.html":{}}}],["products.dto.ts:26",{"_index":1161,"title":{},"body":{"classes/GetProductsBaseDto.html":{}}}],["products.dto.ts:31",{"_index":1163,"title":{},"body":{"classes/GetProductsBaseDto.html":{}}}],["products.provider",{"_index":1396,"title":{},"body":{"modules/ProductsModule.html":{},"injectables/ProductsService.html":{}}}],["products.provider.ts",{"_index":1010,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"coverage.html":{}}}],["products.provider.ts:11",{"_index":1014,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["products.provider.ts:25",{"_index":1019,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["products.provider.ts:95",{"_index":1017,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["products/product.entity",{"_index":448,"title":{},"body":{"interfaces/Cart.html":{},"entities/CartItem.html":{},"entities/OrderItem.html":{}}}],["products/products.module",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["productscontroller",{"_index":1356,"title":{"controllers/ProductsController.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["productsmodule",{"_index":172,"title":{"modules/ProductsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CartModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["productsquery",{"_index":1366,"title":{},"body":{"controllers/ProductsController.html":{}}}],["productsrepository",{"_index":712,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["productsservice",{"_index":113,"title":{"injectables/ProductsService.html":{}},"body":{"injectables/AddToCartProvider.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["professional",{"_index":2596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["progressive",{"_index":1721,"title":{},"body":{"index.html":{}}}],["project",{"_index":1731,"title":{},"body":{"index.html":{}}}],["promise",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/HashingProvider.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":142,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/GenerateTokensProvider.html":{}}}],["promise.resolve(instance.canactivate(context",{"_index":419,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["proof",{"_index":2105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["proper",{"_index":2515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":102,"title":{"properties.html":{}},"body":{"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"interfaces/Cart.html":{},"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ErrorResponse.html":{},"classes/GetProductsBaseDto.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"classes/SignInDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property",{"_index":389,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["protect",{"_index":1987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protected",{"_index":2086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protecting",{"_index":1937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protection",{"_index":2303,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protective",{"_index":2294,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protects",{"_index":2624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provide",{"_index":242,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":931,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/UsersController.html":{}}}],["provider",{"_index":141,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/HashingProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UsersService.html":{}}}],["providers",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/add",{"_index":536,"title":{},"body":{"modules/CartModule.html":{}}}],["providers/auth.service",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/bcrypt.provider",{"_index":357,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/cart.service",{"_index":474,"title":{},"body":{"controllers/CartController.html":{},"modules/CartModule.html":{}}}],["providers/create",{"_index":1245,"title":{},"body":{"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["providers/delete",{"_index":1398,"title":{},"body":{"modules/ProductsModule.html":{}}}],["providers/find",{"_index":1248,"title":{},"body":{"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["providers/generate",{"_index":360,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/get",{"_index":537,"title":{},"body":{"modules/CartModule.html":{}}}],["providers/hashing.provider",{"_index":355,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/orders.service",{"_index":1233,"title":{},"body":{"controllers/OrdersController.html":{},"modules/OrdersModule.html":{}}}],["providers/pagination.provider",{"_index":1282,"title":{},"body":{"modules/PaginationModule.html":{}}}],["providers/products.service",{"_index":1371,"title":{},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{}}}],["providers/sign",{"_index":358,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/update",{"_index":538,"title":{},"body":{"modules/CartModule.html":{},"modules/ProductsModule.html":{}}}],["providers/users.service",{"_index":1597,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["providing",{"_index":1851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/PaginationProvider.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["purchasecount",{"_index":664,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"entities/Product.html":{}}}],["purses",{"_index":2349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["quality",{"_index":2166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["quantity",{"_index":449,"title":{},"body":{"interfaces/Cart.html":{},"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"entities/OrderItem.html":{},"classes/UpdateCartItemDto.html":{}}}],["queries",{"_index":1263,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["query",{"_index":623,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllProductsProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/ProductsController.html":{}}}],["query.dto",{"_index":1030,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"injectables/PaginationProvider.html":{}}}],["query.dto.ts",{"_index":1321,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:12",{"_index":1322,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:19",{"_index":1324,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryfailederror",{"_index":848,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["queryrunner",{"_index":613,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"classes/SeedProducts1759619432047.html":{}}}],["queryrunner.committransaction",{"_index":666,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.connect",{"_index":615,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager",{"_index":626,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.create(order",{"_index":656,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.getrepository(order).save(order",{"_index":657,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.getrepository(orderitem).create",{"_index":660,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.getrepository(orderitem).save(orderitems",{"_index":662,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.getrepository(product).update",{"_index":663,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.getrepository(user).findone",{"_index":621,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.softdelete(cartitem",{"_index":665,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.query",{"_index":1450,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["queryrunner.query(`drop",{"_index":1488,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["queryrunner.release",{"_index":676,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.rollbacktransaction",{"_index":670,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.starttransaction",{"_index":616,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["questions",{"_index":1757,"title":{},"body":{"index.html":{}}}],["quickly",{"_index":2283,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rack",{"_index":2562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["raised",{"_index":2700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["raw",{"_index":992,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["re",{"_index":863,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"classes/SeedProducts1759619432047.html":{}}}],["reaches",{"_index":2468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["read",{"_index":1796,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["real",{"_index":1772,"title":{},"body":{"index.html":{}}}],["recipe",{"_index":2532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["record",{"_index":396,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/UpdateProductProvider.html":{}}}],["recycled",{"_index":2318,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reduce",{"_index":2266,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reduces",{"_index":2482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reducing",{"_index":1916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":1687,"title":{},"body":{"dependencies.html":{}}}],["reflection",{"_index":942,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["reflector",{"_index":377,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["refreshtoken",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["refused",{"_index":873,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["register",{"_index":1584,"title":{},"body":{"controllers/UsersController.html":{}}}],["registering",{"_index":363,"title":{},"body":{"modules/AuthModule.html":{}}}],["registration",{"_index":1588,"title":{},"body":{"controllers/UsersController.html":{}}}],["rejectunauthorized",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["related",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["relations",{"_index":1005,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["release",{"_index":677,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"miscellaneous/variables.html":{}}}],["releases",{"_index":2487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["removal",{"_index":2431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remove",{"_index":982,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["removecartitem",{"_index":546,"title":{},"body":{"injectables/CartService.html":{}}}],["removecartitem(userid",{"_index":556,"title":{},"body":{"injectables/CartService.html":{}}}],["removefromcart",{"_index":455,"title":{},"body":{"controllers/CartController.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["removefromcart(userid",{"_index":468,"title":{},"body":{"controllers/CartController.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["removers",{"_index":2680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["renewable",{"_index":2432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["renewal",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{}}}],["replace",{"_index":1059,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"miscellaneous/variables.html":{}}}],["replaces",{"_index":2480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replacing",{"_index":2458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["repository",{"_index":116,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"index.html":{}}}],["repository.count",{"_index":1311,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository.find",{"_index":1295,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["request",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"classes/ValidationException.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":93,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request.method",{"_index":937,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["request.method.tolowercase",{"_index":950,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["request.route?.path",{"_index":943,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["request.url",{"_index":936,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["request.url.split('/').filter(boolean",{"_index":951,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["request[request_user_key",{"_index":81,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requested",{"_index":928,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["requests",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{},"classes/PaginationQueryDto.html":{}}}],["requesttimeoutexception",{"_index":605,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["requesttimeoutexception('could",{"_index":618,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["required",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["requiredroles",{"_index":1426,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":1431,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requirements",{"_index":1419,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reset",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["residue",{"_index":2472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["residues",{"_index":2709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resin",{"_index":2059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resist",{"_index":2395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resistance",{"_index":2739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resistant",{"_index":1886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resisting",{"_index":2746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resists",{"_index":2537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resource",{"_index":929,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["resources",{"_index":1749,"title":{},"body":{"index.html":{}}}],["response",{"_index":786,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"interfaces/Paginated.html":{},"controllers/UsersController.html":{}}}],["response.interceptor",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["response.interceptor.ts",{"_index":785,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:14",{"_index":790,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response.interceptor.ts:32",{"_index":793,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response.status(errorresponse.statuscode).json(errorresponse",{"_index":910,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["response.statuscode",{"_index":802,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response/data",{"_index":196,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["restart",{"_index":1485,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["resulting",{"_index":2278,"title":{},"body":{"miscellaneous/variables.html":{}}}],["results",{"_index":94,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retain",{"_index":2220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["retaining",{"_index":2324,"title":{},"body":{"miscellaneous/variables.html":{}}}],["retains",{"_index":2734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["return",{"_index":92,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1266,"title":{},"body":{"interfaces/Paginated.html":{}}}],["returns",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reusable",{"_index":1881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reuse",{"_index":2065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rice",{"_index":2728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rich",{"_index":2384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["richer",{"_index":2269,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rim",{"_index":2327,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rings",{"_index":2776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rinse",{"_index":2493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ritual",{"_index":2323,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roasted",{"_index":2490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roasting",{"_index":2575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["role",{"_index":104,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.admin",{"_index":1425,"title":{},"body":{"guards/RolesGuard.html":{}}}],["role.user",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{}}}],["roles",{"_index":1373,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":1377,"title":{},"body":{"controllers/ProductsController.html":{}}}],["roles(role.admin)@delete(':productid",{"_index":1361,"title":{},"body":{"controllers/ProductsController.html":{}}}],["roles(role.admin)@patch(':productid",{"_index":1369,"title":{},"body":{"controllers/ProductsController.html":{}}}],["roles_key",{"_index":1422,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":200,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rollback",{"_index":1481,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["rolling",{"_index":2498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rolls",{"_index":2625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["route",{"_index":941,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["route.split('/').filter(boolean",{"_index":945,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["rulers",{"_index":2529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":1464,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"index.html":{}}}],["rust",{"_index":2163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rustic",{"_index":1940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":383,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":854,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["safe",{"_index":1913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["safelimit",{"_index":1038,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["safely",{"_index":2121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["safepage",{"_index":1041,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["salad",{"_index":2629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["salads",{"_index":2635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["salt",{"_index":439,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["same",{"_index":432,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["sanded",{"_index":1929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sanitizedatabaseerror",{"_index":1171,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["sanitizedatabaseerror(error",{"_index":981,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["sanitizing",{"_index":980,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["sauces",{"_index":1950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["saving",{"_index":2770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scalable",{"_index":1726,"title":{},"body":{"index.html":{}}}],["scale",{"_index":1203,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{}}}],["schema",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["scissors",{"_index":2648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scratch",{"_index":1938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scratching",{"_index":1898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scrub",{"_index":2403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scrubbing",{"_index":2371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seal",{"_index":2054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seals",{"_index":2085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seamlessly",{"_index":2730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["searchterm",{"_index":1056,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["second",{"_index":857,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["secret",{"_index":1139,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["secure",{"_index":1988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["securely",{"_index":1586,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["see",{"_index":2190,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seed",{"_index":1444,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["seedproducts",{"_index":1443,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["seedproducts.ts",{"_index":1435,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"coverage.html":{}}}],["seedproducts.ts:39",{"_index":1440,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["seedproducts.ts:5",{"_index":1442,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["seedproducts1759619432047",{"_index":1433,"title":{"classes/SeedProducts1759619432047.html":{}},"body":{"classes/SeedProducts1759619432047.html":{},"coverage.html":{}}}],["seeking",{"_index":2362,"title":{},"body":{"miscellaneous/variables.html":{}}}],["select",{"_index":1107,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/PaginationProvider.html":{},"entities/User.html":{}}}],["sensitive",{"_index":983,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["separate",{"_index":2528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serial",{"_index":1451,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["serve",{"_index":2043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server",{"_index":915,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"index.html":{}}}],["serves",{"_index":2632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serveware",{"_index":1716,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["service",{"_index":137,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/OrdersController.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["serving",{"_index":1983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["servware",{"_index":1715,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sessions",{"_index":1909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["set",{"_index":1839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setlock('pessimistic_write",{"_index":634,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["setmetadata(auth_type_key",{"_index":1831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":1834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":2638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1732,"title":{},"body":{"index.html":{}}}],["shaped",{"_index":2549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shaping",{"_index":2526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sharp",{"_index":2604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sheets",{"_index":2495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shell",{"_index":2008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shipped",{"_index":1705,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["shippingaddress",{"_index":585,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{}}}],["shock",{"_index":2299,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shopping",{"_index":2185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":1727,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["sigining",{"_index":1499,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["sign",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"classes/SignInDto.html":{}}}],["signed",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{}}}],["signin",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signin(@body",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signindto",{"_index":268,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["signindto.password",{"_index":1507,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["signindto})@apiresponse({status",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{}}}],["signing",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signinprovider",{"_index":349,"title":{"injectables/SignInProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["signs",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{}}}],["signtoken",{"_index":1117,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signtoken(userid",{"_index":1121,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["silica",{"_index":2582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["silicone",{"_index":1882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["simply",{"_index":2028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["single",{"_index":1849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sipping",{"_index":2328,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sized",{"_index":2476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sizes",{"_index":2149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skilled",{"_index":2320,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skin",{"_index":2713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skins",{"_index":2674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skip",{"_index":1297,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["sleek",{"_index":2177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sleeve",{"_index":2295,"title":{},"body":{"miscellaneous/variables.html":{}}}],["slides",{"_index":2662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sliding",{"_index":2616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["slightly",{"_index":2337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["slip",{"_index":2302,"title":{},"body":{"miscellaneous/variables.html":{}}}],["small",{"_index":2567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["smooth",{"_index":1864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["smoothies",{"_index":2308,"title":{},"body":{"miscellaneous/variables.html":{}}}],["smoothly",{"_index":1895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["snacks",{"_index":2146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["snap",{"_index":2111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["soap",{"_index":2387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["soft",{"_index":528,"title":{},"body":{"entities/CartItem.html":{},"miscellaneous/variables.html":{}}}],["solution",{"_index":2439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sophistication",{"_index":2726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sort",{"_index":1037,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["soups",{"_index":2023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"index.html":{}}}],["sourced",{"_index":2722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sous",{"_index":2142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["space",{"_index":2097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["spaces",{"_index":1061,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["spatulas",{"_index":1883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["special",{"_index":740,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specialized",{"_index":2258,"title":{},"body":{"miscellaneous/variables.html":{}}}],["specific",{"_index":404,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["spill",{"_index":2228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["spills",{"_index":2114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["split",{"_index":1048,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"miscellaneous/variables.html":{}}}],["spoiling",{"_index":2201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sponge",{"_index":2367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sponge_2048x2048.webp?v=1712813576",{"_index":2402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sponges",{"_index":2370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sponsors",{"_index":1792,"title":{},"body":{"index.html":{}}}],["spoon",{"_index":1843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["spoons",{"_index":1921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["spray",{"_index":2492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sql",{"_index":993,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["src/.../active",{"_index":1818,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.module.ts",{"_index":1821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth",{"_index":1693,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constant.ts",{"_index":1820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1819,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1719,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../order",{"_index":1695,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../product",{"_index":1697,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role",{"_index":1699,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role.constant.ts",{"_index":1823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.decorator.ts",{"_index":1822,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../seed",{"_index":1824,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":149,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":152,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":244,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":245,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:97",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1618,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":350,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/config/jwt.config",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["src/auth/constants/auth.constant",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["src/auth/constants/auth.constant.ts",{"_index":1640,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/constants/role.constant",{"_index":1423,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/constants/role.constant.ts",{"_index":1641,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorator/active",{"_index":476,"title":{},"body":{"controllers/CartController.html":{},"controllers/OrdersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorator/auth.decorator",{"_index":1372,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["src/auth/decorator/auth.decorator.ts",{"_index":1643,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorator/role.decorator",{"_index":1374,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/auth/decorator/role.decorator.ts",{"_index":1644,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/sign",{"_index":1489,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/enums/auth",{"_index":384,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["src/auth/enums/role",{"_index":766,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts",{"_index":372,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:33",{"_index":378,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:59",{"_index":379,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/roles/roles.guard.ts",{"_index":1414,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles/roles.guard.ts:16",{"_index":1415,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles/roles.guard.ts:31",{"_index":1416,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/interfaces/active",{"_index":99,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:19",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:6",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":421,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:15",{"_index":434,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:27",{"_index":428,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/generate",{"_index":1113,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider",{"_index":761,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":1181,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:12",{"_index":1184,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:19",{"_index":1183,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/sign",{"_index":1497,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["src/cart/cart",{"_index":495,"title":{},"body":{"entities/CartItem.html":{},"injectables/CreateOrderProvider.html":{},"coverage.html":{}}}],["src/cart/cart.controller.ts",{"_index":451,"title":{},"body":{"controllers/CartController.html":{},"coverage.html":{}}}],["src/cart/cart.controller.ts:25",{"_index":460,"title":{},"body":{"controllers/CartController.html":{}}}],["src/cart/cart.controller.ts:31",{"_index":457,"title":{},"body":{"controllers/CartController.html":{}}}],["src/cart/cart.controller.ts:36",{"_index":467,"title":{},"body":{"controllers/CartController.html":{}}}],["src/cart/cart.controller.ts:41",{"_index":470,"title":{},"body":{"controllers/CartController.html":{}}}],["src/cart/cart.controller.ts:49",{"_index":465,"title":{},"body":{"controllers/CartController.html":{}}}],["src/cart/cart.module",{"_index":1247,"title":{},"body":{"modules/OrdersModule.html":{}}}],["src/cart/cart.module.ts",{"_index":534,"title":{},"body":{"modules/CartModule.html":{}}}],["src/cart/dtos/create",{"_index":569,"title":{},"body":{"classes/CreateCartItemDto.html":{},"coverage.html":{}}}],["src/cart/dtos/update",{"_index":1513,"title":{},"body":{"classes/UpdateCartItemDto.html":{},"coverage.html":{}}}],["src/cart/entities/cart",{"_index":519,"title":{},"body":{"entities/CartItem.html":{}}}],["src/cart/interfaces/cart.interface.ts",{"_index":443,"title":{},"body":{"interfaces/Cart.html":{},"coverage.html":{}}}],["src/cart/providers/add",{"_index":109,"title":{},"body":{"injectables/AddToCartProvider.html":{},"coverage.html":{}}}],["src/cart/providers/cart.service",{"_index":610,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["src/cart/providers/cart.service.ts",{"_index":543,"title":{},"body":{"injectables/CartService.html":{},"coverage.html":{}}}],["src/cart/providers/cart.service.ts:27",{"_index":550,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/cart.service.ts:31",{"_index":555,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/cart.service.ts:35",{"_index":557,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/cart.service.ts:39",{"_index":553,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/cart.service.ts:51",{"_index":559,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/cart.service.ts:55",{"_index":552,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/cart.service.ts:9",{"_index":549,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/get",{"_index":1141,"title":{},"body":{"injectables/GetCartProvider.html":{},"coverage.html":{}}}],["src/cart/providers/update",{"_index":1515,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{},"coverage.html":{}}}],["src/common/filters/common",{"_index":764,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"classes/ValidationException.html":{},"coverage.html":{}}}],["src/common/filters/global",{"_index":879,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["src/common/interceptors/data",{"_index":784,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/error",{"_index":842,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"coverage.html":{}}}],["src/common/pagination/dtos/pagination",{"_index":1029,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/pagination/interfaces/paginated.interface",{"_index":1024,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["src/common/pagination/interfaces/paginated.interface.ts",{"_index":1262,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.module",{"_index":1397,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/common/pagination/pagination.module.ts",{"_index":1281,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/providers/pagination.provider",{"_index":1031,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts",{"_index":1283,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:14",{"_index":1285,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:34",{"_index":1287,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/main.ts",{"_index":1658,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/migrations/1759619432047",{"_index":1434,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"coverage.html":{}}}],["src/orders/dtos/create",{"_index":581,"title":{},"body":{"classes/CreateOrderDto.html":{},"coverage.html":{}}}],["src/orders/enums/order",{"_index":1702,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/orders/order",{"_index":1214,"title":{},"body":{"entities/OrderItem.html":{},"coverage.html":{}}}],["src/orders/order.entity.ts",{"_index":1185,"title":{},"body":{"entities/Order.html":{},"coverage.html":{}}}],["src/orders/order.entity.ts:17",{"_index":1190,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:20",{"_index":1205,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:23",{"_index":1200,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:28",{"_index":1197,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:33",{"_index":1188,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:40",{"_index":1196,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:43",{"_index":1189,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:46",{"_index":1206,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:49",{"_index":1208,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:52",{"_index":1193,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/orders.controller.ts",{"_index":1223,"title":{},"body":{"controllers/OrdersController.html":{},"coverage.html":{}}}],["src/orders/orders.controller.ts:16",{"_index":1226,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.controller.ts:24",{"_index":1231,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.controller.ts:29",{"_index":1229,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.module.ts",{"_index":1243,"title":{},"body":{"modules/OrdersModule.html":{}}}],["src/orders/providers/create",{"_index":596,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"coverage.html":{}}}],["src/orders/providers/find",{"_index":995,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"coverage.html":{}}}],["src/orders/providers/orders.service.ts",{"_index":1252,"title":{},"body":{"injectables/OrdersService.html":{},"coverage.html":{}}}],["src/orders/providers/orders.service.ts:20",{"_index":1255,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/providers/orders.service.ts:24",{"_index":1256,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/providers/orders.service.ts:28",{"_index":1257,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/providers/orders.service.ts:8",{"_index":1254,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/products/dtos/create",{"_index":680,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/products/dtos/get",{"_index":1156,"title":{},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"coverage.html":{}}}],["src/products/dtos/update",{"_index":1538,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/products/enums/product",{"_index":1708,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/products/product.entity",{"_index":540,"title":{},"body":{"modules/CartModule.html":{},"injectables/CreateOrderProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["src/products/product.entity.ts",{"_index":1326,"title":{},"body":{"entities/Product.html":{},"coverage.html":{}}}],["src/products/product.entity.ts:20",{"_index":1338,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:23",{"_index":1343,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:26",{"_index":1332,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:29",{"_index":1337,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:32",{"_index":1346,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:35",{"_index":1348,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:38",{"_index":1340,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:42",{"_index":1334,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:45",{"_index":1349,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:51",{"_index":1341,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:57",{"_index":1335,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:62",{"_index":1347,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:65",{"_index":1328,"title":{},"body":{"entities/Product.html":{}}}],["src/products/product.entity.ts:68",{"_index":1345,"title":{},"body":{"entities/Product.html":{}}}],["src/products/products.controller.ts",{"_index":1357,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{}}}],["src/products/products.controller.ts:33",{"_index":1360,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:39",{"_index":1365,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:47",{"_index":1370,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:57",{"_index":1362,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.module",{"_index":541,"title":{},"body":{"modules/CartModule.html":{}}}],["src/products/products.module.ts",{"_index":1393,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/products/providers/create",{"_index":707,"title":{},"body":{"injectables/CreateProductProvider.html":{},"coverage.html":{}}}],["src/products/providers/delete",{"_index":828,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"coverage.html":{}}}],["src/products/providers/find",{"_index":1009,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"coverage.html":{}}}],["src/products/providers/products.service",{"_index":123,"title":{},"body":{"injectables/AddToCartProvider.html":{}}}],["src/products/providers/products.service.ts",{"_index":1400,"title":{},"body":{"injectables/ProductsService.html":{},"coverage.html":{}}}],["src/products/providers/products.service.ts:14",{"_index":1402,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:42",{"_index":1403,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:46",{"_index":1405,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:52",{"_index":1408,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:62",{"_index":1404,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:66",{"_index":1406,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/update",{"_index":1545,"title":{},"body":{"injectables/UpdateProductProvider.html":{},"coverage.html":{}}}],["src/seed",{"_index":1663,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/dtos/create",{"_index":722,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/providers/create",{"_index":752,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["src/users/providers/find",{"_index":1100,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":134,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/SignInProvider.html":{}}}],["src/users/providers/users.service.ts",{"_index":1621,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:32",{"_index":1624,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:38",{"_index":1626,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:42",{"_index":1627,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:9",{"_index":1623,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":609,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["src/users/user.entity.ts",{"_index":1560,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:18",{"_index":1567,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:25",{"_index":1566,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:32",{"_index":1568,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:40",{"_index":1565,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:47",{"_index":1573,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:56",{"_index":1572,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:60",{"_index":1563,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:63",{"_index":1574,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:66",{"_index":1562,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:69",{"_index":1570,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1579,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:82",{"_index":1594,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":354,"title":{},"body":{"modules/AuthModule.html":{},"modules/CartModule.html":{}}}],["src/users/users.module.ts",{"_index":1616,"title":{},"body":{"modules/UsersModule.html":{}}}],["ssl",{"_index":236,"title":{},"body":{"modules/AppModule.html":{}}}],["stability",{"_index":2733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stable",{"_index":2613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stack",{"_index":908,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["stackable",{"_index":2094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stain",{"_index":2768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["staining",{"_index":2538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stainless",{"_index":2160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stains",{"_index":2473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["standard",{"_index":2285,"title":{},"body":{"miscellaneous/variables.html":{}}}],["staples",{"_index":2176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start",{"_index":1736,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1739,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1740,"title":{},"body":{"index.html":{}}}],["started",{"_index":1720,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1730,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1635,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":374,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["status",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"controllers/UsersController.html":{}}}],["status.enum",{"_index":1211,"title":{},"body":{"entities/Order.html":{}}}],["status.enum.ts",{"_index":1696,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statuscode",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["statuscodes",{"_index":958,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["statuscodes[status",{"_index":978,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["stay",{"_index":1777,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["stays",{"_index":2571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["steaks",{"_index":1992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["steel",{"_index":2161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stews",{"_index":2024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stick",{"_index":1902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sticking",{"_index":2504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sticky",{"_index":2512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stiff",{"_index":2424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stock",{"_index":644,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"miscellaneous/variables.html":{}}}],["storage",{"_index":1710,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["storing",{"_index":2144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["straight",{"_index":2671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["straw",{"_index":2243,"title":{},"body":{"miscellaneous/variables.html":{}}}],["straws",{"_index":2240,"title":{},"body":{"miscellaneous/variables.html":{}}}],["streak",{"_index":2461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/SignInDto.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"miscellaneous/variables.html":{}}}],["string(error",{"_index":674,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["strong",{"_index":2244,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stronger",{"_index":2714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["structure",{"_index":2383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stuck",{"_index":2408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sturdy",{"_index":1966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["style",{"_index":1853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["styles",{"_index":2672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stylish",{"_index":2297,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sub",{"_index":105,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{}}}],["substantial",{"_index":2731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subtotal",{"_index":445,"title":{},"body":{"interfaces/Cart.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{}}}],["successful",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["successfully",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DeleteProductProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"controllers/UsersController.html":{}}}],["such",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["sugar",{"_index":2090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sum",{"_index":653,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["summary",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":812,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["superior",{"_index":1968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["support",{"_index":1758,"title":{},"body":{"index.html":{},"modules.html":{}}}],["surface",{"_index":2389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["surfaces",{"_index":1897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sustainability",{"_index":2034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sustainable",{"_index":1840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sustainably",{"_index":2310,"title":{},"body":{"miscellaneous/variables.html":{}}}],["svg",{"_index":1808,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":1067,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["swivel",{"_index":2676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sync",{"_index":1447,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["synchronize",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["synthetic",{"_index":1952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t",{"_index":1123,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["table",{"_index":988,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/SeedProducts1759619432047.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tables",{"_index":2761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1669,"title":{},"body":{"coverage.html":{}}}],["tackle",{"_index":2378,"title":{},"body":{"miscellaneous/variables.html":{}}}],["take",{"_index":1300,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["tall",{"_index":2470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tapes",{"_index":2531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tasks",{"_index":2436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["taste",{"_index":2256,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tasteful",{"_index":2780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tea",{"_index":2175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tearing",{"_index":2547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["temperature",{"_index":2253,"title":{},"body":{"miscellaneous/variables.html":{}}}],["temperatures",{"_index":1891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test",{"_index":1743,"title":{},"body":{"index.html":{}}}],["test:covresources",{"_index":1746,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1745,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1741,"title":{},"body":{"index.html":{}}}],["text",{"_index":1336,"title":{},"body":{"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{}}}],["texture",{"_index":1955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textured",{"_index":2388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["thanks",{"_index":1791,"title":{},"body":{"index.html":{}}}],["themselves",{"_index":2282,"title":{},"body":{"miscellaneous/variables.html":{}}}],["thermal",{"_index":2298,"title":{},"body":{"miscellaneous/variables.html":{}}}],["thick",{"_index":2356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.accesstokenguard",{"_index":397,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.addtocartprovider.addtocart(userid",{"_index":562,"title":{},"body":{"injectables/CartService.html":{}}}],["this.appservice.gethello",{"_index":156,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.signin(signindto",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type]).flat",{"_index":413,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.builderrorresponse",{"_index":902,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["this.calculatesubtotal(items",{"_index":1151,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["this.cartitemrepository.find",{"_index":1148,"title":{},"body":{"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["this.cartitemrepository.findone",{"_index":1527,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["this.cartitemrepository.softdelete",{"_index":1530,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["this.cartservice.addtocart(userid",{"_index":484,"title":{},"body":{"controllers/CartController.html":{}}}],["this.cartservice.clearcart(userid",{"_index":482,"title":{},"body":{"controllers/CartController.html":{}}}],["this.cartservice.decrementquantity",{"_index":492,"title":{},"body":{"controllers/CartController.html":{}}}],["this.cartservice.getcart(userid",{"_index":486,"title":{},"body":{"controllers/CartController.html":{}}}],["this.cartservice.removecartitem(userid",{"_index":489,"title":{},"body":{"controllers/CartController.html":{}}}],["this.cartservice.validatecartstock(userid",{"_index":620,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["this.cleanquery(productquery",{"_index":1034,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["this.configservice.get('appconfig.apiversion",{"_index":801,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["this.createorderprovider.createorder(userid",{"_index":1259,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.createproductprovider.createproduct(createproductdto",{"_index":1409,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.createuserprovider.createuser(createuserdto",{"_index":1628,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.datasource.createqueryrunner",{"_index":614,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["this.deleteproductprovider.deleteproduct(productid",{"_index":1412,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.extractrequestfromheader(request",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.filterobj",{"_index":1553,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["this.findallordersforuserprovider.findallorders(userid",{"_index":1260,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.findallproductsprovider.findallproducts(productquery",{"_index":1410,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.findorderbyidprovider.findorderbyid(userid",{"_index":1261,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.findproductbyidprovider.findproductbyid(productid",{"_index":1413,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.finduserbyemailprovider.finduserbyemail(email",{"_index":1629,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.finduserbyidprovider.finduserbyid(userid",{"_index":1630,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.generatetokenprovider.generatetokens(user",{"_index":1510,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.getcartprovider.getcart(userid",{"_index":563,"title":{},"body":{"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["this.getcontrollername(request",{"_index":899,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["this.gethandlername(request",{"_index":901,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["this.gethttperrorcode(status",{"_index":922,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["this.hashingprovider.comparepassword",{"_index":1506,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.hashingprovider.hashpassword(createuserdto.password",{"_index":776,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.isconnectionerror(error",{"_index":861,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["this.jwtconfiguration",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":1129,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.audience",{"_index":1136,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.issuer",{"_index":1138,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.refreshtokenttl",{"_index":1133,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":1140,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.signasync",{"_index":1134,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.verify",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.logger.error",{"_index":905,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["this.orderrepository.find",{"_index":1004,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{}}}],["this.orderrepository.findone",{"_index":1092,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{}}}],["this.ordersservice.createorder(userid",{"_index":1235,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.ordersservice.findallorders(userid",{"_index":1237,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.ordersservice.findorderbyid(userid",{"_index":1239,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.paginationprovider.paginationquery",{"_index":1080,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["this.productrepository.save(item.product",{"_index":1535,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["this.productsrepository",{"_index":1081,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["this.productsrepository.create",{"_index":719,"title":{},"body":{"injectables/CreateProductProvider.html":{}}}],["this.productsrepository.findone",{"_index":1098,"title":{},"body":{"injectables/FindProductByIdProvider.html":{}}}],["this.productsrepository.findoneby",{"_index":835,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["this.productsrepository.save",{"_index":838,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["this.productsrepository.save(newproduct",{"_index":720,"title":{},"body":{"injectables/CreateProductProvider.html":{}}}],["this.productsservice.createproduct(createproductdto",{"_index":1379,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.deleteproduct(productid",{"_index":1387,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.findallproducts(productsquery",{"_index":1380,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.findproductbyid(createcartitemdto.productid",{"_index":144,"title":{},"body":{"injectables/AddToCartProvider.html":{}}}],["this.productsservice.updateproduct(updateproductdto",{"_index":1383,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.reflector.getallandoverride(auth_type_key",{"_index":407,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":1427,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.request.headers.host",{"_index":1308,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol",{"_index":1307,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.sanitizedatabaseerror(exception",{"_index":926,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["this.signinprovider.signin(signindto",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signtoken",{"_index":1127,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.signtoken(user.id",{"_index":1132,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.updatecartitemprovider.clearcart(userid",{"_index":567,"title":{},"body":{"injectables/CartService.html":{}}}],["this.updatecartitemprovider.decrementquantity",{"_index":565,"title":{},"body":{"injectables/CartService.html":{}}}],["this.updatecartitemprovider.removefromcart(userid",{"_index":564,"title":{},"body":{"injectables/CartService.html":{}}}],["this.updatecartitemprovider.validatecartstock(userid",{"_index":566,"title":{},"body":{"injectables/CartService.html":{}}}],["this.updateproductprovider.updateproduct",{"_index":1411,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.usersrepository.create",{"_index":775,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersrepository.findone",{"_index":770,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{}}}],["this.usersrepository.save(newuser",{"_index":777,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":1612,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.finduserbyemail(signindto.email",{"_index":1504,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.usersservice.finduserbyid(userid",{"_index":143,"title":{},"body":{"injectables/AddToCartProvider.html":{}}}],["thousands",{"_index":2133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["through",{"_index":416,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["throw",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["throwerror",{"_index":850,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["thrown",{"_index":2316,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tight",{"_index":2564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["time",{"_index":1610,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["timeout",{"_index":853,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["timeout(30000",{"_index":855,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["timeouterror",{"_index":851,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["times",{"_index":2067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timestamp",{"_index":884,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Product.html":{}}}],["tines",{"_index":1954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tiny",{"_index":2452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tips",{"_index":1986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["token",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["token.guard",{"_index":203,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:18",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:42",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:72",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["tokens",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["tokens.'})@apiconsumes('application/json')@apibody({description",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens.provider",{"_index":361,"title":{},"body":{"modules/AuthModule.html":{},"injectables/SignInProvider.html":{}}}],["tokens.provider.ts",{"_index":1114,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"coverage.html":{}}}],["tokens.provider.ts:12",{"_index":1118,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:36",{"_index":1120,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:64",{"_index":1124,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tone",{"_index":2263,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tones",{"_index":2742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tongs",{"_index":1976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tool",{"_index":1963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["toss",{"_index":2494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tossing",{"_index":2641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["total",{"_index":446,"title":{},"body":{"interfaces/Cart.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Order.html":{}}}],["totalitems",{"_index":1270,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpages",{"_index":1272,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["touch",{"_index":1798,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["tough",{"_index":2379,"title":{},"body":{"miscellaneous/variables.html":{}}}],["toughest",{"_index":2440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["towels",{"_index":2459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["toxin",{"_index":2335,"title":{},"body":{"miscellaneous/variables.html":{}}}],["traditional",{"_index":1962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transaction",{"_index":673,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["transactions",{"_index":612,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["transfer",{"_index":2766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transform",{"_index":636,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["transformer",{"_index":1576,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["transitions",{"_index":2729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transport",{"_index":2115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trap",{"_index":2446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["travel",{"_index":1858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["travelers",{"_index":2357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["treated",{"_index":1930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tree",{"_index":2058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trips",{"_index":2204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trivet",{"_index":2759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trivets",{"_index":2760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tropical",{"_index":2015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"injectables/DeleteProductProvider.html":{},"entities/Product.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["truncate",{"_index":1482,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["try",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateOrderProvider.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/ValidationException.html":{}}}],["tumbler",{"_index":2208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["twitter",{"_index":1804,"title":{},"body":{"index.html":{}}}],["type",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["type.enum.ts",{"_index":1694,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeorm",{"_index":128,"title":{},"body":{"injectables/AddToCartProvider.html":{},"entities/CartItem.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"injectables/PaginationProvider.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":188,"title":{},"body":{"modules/AppModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([cartitem",{"_index":542,"title":{},"body":{"modules/CartModule.html":{}}}],["typeormmodule.forfeature([order",{"_index":1251,"title":{},"body":{"modules/OrdersModule.html":{}}}],["typeormmodule.forfeature([product",{"_index":1399,"title":{},"body":{"modules/ProductsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1620,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":395,"title":{},"body":{"guards/AuthenticationGuard.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["typescript",{"_index":86,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{},"index.html":{}}}],["ultra",{"_index":2273,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unable",{"_index":813,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["unauthorizedexception",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"guards/AuthenticationGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["unauthorizedexception('incorrect",{"_index":1509,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["unbleached",{"_index":2707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllProductsProvider.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"miscellaneous/variables.html":{}}}],["undefined})@apibadrequestresponse({description",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@apiresponse({status",{"_index":1590,"title":{},"body":{"controllers/UsersController.html":{}}}],["underneath",{"_index":2570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uneven",{"_index":2763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uniform",{"_index":2657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unique",{"_index":1342,"title":{},"body":{"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":1742,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CartService.html":{},"interfaces/ErrorResponse.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["unknowncontroller",{"_index":948,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["unlicensed",{"_index":1816,"title":{},"body":{"properties.html":{}}}],["unlike",{"_index":2252,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unused",{"_index":88,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["up",{"_index":1438,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["up(queryrunner",{"_index":1441,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["update",{"_index":561,"title":{},"body":{"injectables/CartService.html":{},"injectables/ProductsService.html":{}}}],["updatecartitemdto",{"_index":463,"title":{"classes/UpdateCartItemDto.html":{}},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"coverage.html":{}}}],["updatecartitemdto.quantity",{"_index":491,"title":{},"body":{"controllers/CartController.html":{}}}],["updatecartitemprovider",{"_index":533,"title":{"injectables/UpdateCartItemProvider.html":{}},"body":{"modules/CartModule.html":{},"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{},"coverage.html":{},"overview.html":{}}}],["updatedat",{"_index":499,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["updatedatecolumn",{"_index":515,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{}}}],["updateproduct",{"_index":1358,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/UpdateProductProvider.html":{}}}],["updateproduct(productid",{"_index":1367,"title":{},"body":{"controllers/ProductsController.html":{}}}],["updateproduct(updateproductdto",{"_index":1407,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/UpdateProductProvider.html":{}}}],["updateproductdto",{"_index":1368,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"coverage.html":{}}}],["updateproductprovider",{"_index":1392,"title":{"injectables/UpdateProductProvider.html":{}},"body":{"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/UpdateProductProvider.html":{},"coverage.html":{},"overview.html":{}}}],["updates",{"_index":1778,"title":{},"body":{"index.html":{}}}],["upon",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["url",{"_index":1581,"title":{},"body":{"controllers/UsersController.html":{}}}],["url(this.request.url",{"_index":1310,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["urls",{"_index":1305,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["use",{"_index":388,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateOrderProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllProductsProvider.html":{},"classes/GlobalExceptionFilter.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["useclass",{"_index":243,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["usefactory",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["useful",{"_index":2025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user",{"_index":35,"title":{"entities/User.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/CartItem.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Order.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user.cartitems",{"_index":517,"title":{},"body":{"entities/CartItem.html":{}}}],["user.decorator",{"_index":477,"title":{},"body":{"controllers/CartController.html":{},"controllers/OrdersController.html":{}}}],["user.decorator.ts",{"_index":1642,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":762,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":723,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:23",{"_index":728,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":730,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:48",{"_index":726,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:65",{"_index":742,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":1130,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["user.entity",{"_index":760,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.firstname",{"_index":1511,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.id",{"_index":1128,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["user.lastname",{"_index":1512,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.orders",{"_index":1207,"title":{},"body":{"entities/Order.html":{}}}],["user.password",{"_index":1508,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.provider",{"_index":1249,"title":{},"body":{"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.provider.ts",{"_index":753,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:11",{"_index":756,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:12",{"_index":1002,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{}}}],["user.provider.ts:26",{"_index":759,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:7",{"_index":999,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{}}}],["user.role",{"_index":1131,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{}}}],["user?.[field",{"_index":1828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":122,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":138,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":1617,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/user.entity",{"_index":523,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{}}}],["users/users.module",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":1578,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":173,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":757,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{}}}],["usersservice",{"_index":114,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AddToCartProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":2394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["using",{"_index":386,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/GenerateTokensProvider.html":{},"guards/RolesGuard.html":{},"index.html":{}}}],["utensils",{"_index":1709,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["utility",{"_index":2600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uuid",{"_index":1606,"title":{},"body":{"controllers/UsersController.html":{}}}],["vacuum",{"_index":2213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["validate",{"_index":1532,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["validatecartstock",{"_index":547,"title":{},"body":{"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["validatecartstock(userid",{"_index":558,"title":{},"body":{"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["validating",{"_index":1417,"title":{},"body":{"guards/RolesGuard.html":{}}}],["validation",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{},"classes/DatabaseConnectionException.html":{},"injectables/FindAllProductsProvider.html":{},"classes/ValidationException.html":{}}}],["validationexception",{"_index":763,"title":{"classes/ValidationException.html":{}},"body":{"injectables/CreateUserProvider.html":{},"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{},"coverage.html":{}}}],["validationschema",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":578,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SignInDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateProductDto.html":{},"dependencies.html":{}}}],["validuser",{"_index":1600,"title":{},"body":{"controllers/UsersController.html":{}}}],["value",{"_index":1084,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GlobalExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1466,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["varchar",{"_index":1187,"title":{},"body":{"entities/Order.html":{},"entities/User.html":{}}}],["varchar(100",{"_index":1454,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["varchar(255",{"_index":1458,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["varchar(50",{"_index":1455,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["variable",{"_index":1637,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1817,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":1267,"title":{},"body":{"interfaces/Paginated.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":89,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["vegetable",{"_index":2683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vegetables",{"_index":2197,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{}}}],["versatile",{"_index":1998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1814,"title":{},"body":{"properties.html":{}}}],["via",{"_index":1446,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["vibrant",{"_index":2558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vide",{"_index":2143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["video",{"_index":1766,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1754,"title":{},"body":{"index.html":{}}}],["visual",{"_index":2782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["visualize",{"_index":1768,"title":{},"body":{"index.html":{}}}],["void",{"_index":1176,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["wall",{"_index":2212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["warm",{"_index":1941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["warmth",{"_index":2048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["warping",{"_index":2591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wash",{"_index":2062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["washable",{"_index":2187,"title":{},"body":{"miscellaneous/variables.html":{}}}],["waste",{"_index":1877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":1737,"title":{},"body":{"index.html":{}}}],["water",{"_index":2064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["website",{"_index":1802,"title":{},"body":{"index.html":{}}}],["weigh",{"_index":2191,"title":{},"body":{"miscellaneous/variables.html":{}}}],["weight",{"_index":2732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["well",{"_index":2326,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wet",{"_index":2377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["where('ci.user.id",{"_index":631,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["where.category",{"_index":1044,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["where.name",{"_index":1062,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["where.price",{"_index":1053,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["whether",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"guards/RolesGuard.html":{}}}],["whipping",{"_index":1948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whisk",{"_index":1946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whole",{"_index":2247,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wide",{"_index":2304,"title":{},"body":{"miscellaneous/variables.html":{}}}],["without",{"_index":390,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["withstand",{"_index":1890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["withstands",{"_index":2483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["won't",{"_index":1934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wood",{"_index":1925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wooden",{"_index":1920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["work",{"_index":2250,"title":{},"body":{"miscellaneous/variables.html":{}}}],["working",{"_index":1752,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["works",{"_index":2621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["world",{"_index":247,"title":{},"body":{"injectables/AppService.html":{}}}],["worn",{"_index":2415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wrap",{"_index":2045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wraps",{"_index":2039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x",{"_index":1780,"title":{},"body":{"index.html":{}}}],["y",{"_index":2670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["years",{"_index":1915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yes",{"_index":811,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/PaginationProvider.html":{}}}],["you'd",{"_index":1795,"title":{},"body":{"index.html":{}}}],["z3xbekl.jpg",{"_index":2207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z])(?=.*\\d)(?=.*[\\w_]).{8",{"_index":733,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":732,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zero",{"_index":1876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zip",{"_index":2130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["zulay",{"_index":2542,"title":{},"body":{"miscellaneous/variables.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token/access-token.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    guard for access token\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token/access-token.guard.ts:18\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:42\n                        \n                    \n\n\n            \n                \n                        function for checking if user has access token\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                true or false depending on whether user is signed in or not\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:72\n                        \n                    \n\n\n            \n                \n                        function for extracting the access token from the request headers\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                access token\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { REQUEST_USER_KEY } from 'src/auth/constants/auth.constant';\n\n/**\n * guard for access token\n */\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  /**\n   * constructor\n   * @param jwtService\n   * @param jwtConfiguration\n   */\n  constructor(\n    /**\n     * Inject jwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * inject jwt config\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  /**\n   * function for checking if user has access token\n   * @param context\n   * @returns true or false depending on whether user is signed in or not\n   */\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n\n    const token = this.extractRequestFromHeader(request);\n\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n\n    try {\n      const payload = await this.jwtService.verify(\n        token,\n        this.jwtConfiguration,\n      );\n\n      request[REQUEST_USER_KEY] = payload;\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    } catch (_) {\n      throw new UnauthorizedException();\n    }\n\n    return true;\n  }\n\n  /**\n   * function for extracting the access token from the request headers\n   * @param request\n   * @returns access token\n   */\n  private extractRequestFromHeader(request: Request): string | undefined {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, token] = request.headers.authorization?.split(' ') ?? [];\n    return token;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActiveUserData.html":{"url":"interfaces/ActiveUserData.html","title":"interface - ActiveUserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActiveUserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/active-user-data.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                interface for a user that has logged in (payload)\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    user email\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    user role\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    id for user\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ActiveUserData {\n  /**\n   * id for user\n   */\n  sub: string;\n\n  /**\n   * user email\n   */\n  email: string;\n\n  /**\n   * user role\n   */\n  role: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AddToCartProvider.html":{"url":"injectables/AddToCartProvider.html","title":"injectable - AddToCartProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AddToCartProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/providers/add-to-cart.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addToCart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsService: ProductsService, usersService: UsersService, cartItemRepository: Repository, getCartProvider: GetCartProvider)\n                    \n                \n                        \n                            \n                                Defined in src/cart/providers/add-to-cart.provider.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsService\n                                                  \n                                                        \n                                                                        ProductsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cartItemRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        getCartProvider\n                                                  \n                                                        \n                                                                        GetCartProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addToCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    addToCart(userId: string, createCartItemDto: CreateCartItemDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/add-to-cart.provider.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createCartItemDto\n                                            \n                                                            CreateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ProductsService } from 'src/products/providers/products.service';\nimport { CreateCartItemDto } from '../dtos/create-cart-item.dto';\nimport { Cart } from '../interfaces/cart.interface';\nimport { Repository } from 'typeorm';\nimport { CartItem } from '../cart-item.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { GetCartProvider } from './get-cart.provider';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AddToCartProvider {\n  constructor(\n    /**\n     * injecting the product service\n     */\n    private readonly productsService: ProductsService,\n\n    /**\n     * injecting the users service\n     */\n    private readonly usersService: UsersService,\n\n    /**\n     * injecting the cart item repository\n     */\n    @InjectRepository(CartItem)\n    private readonly cartItemRepository: Repository,\n\n    /**\n     * injecting the get cart provider\n     */\n    private readonly getCartProvider: GetCartProvider,\n  ) {}\n\n  async addToCart(\n    userId: string,\n    createCartItemDto: CreateCartItemDto,\n  ): Promise {\n    const [user, product] = await Promise.all([\n      this.usersService.findUserById(userId),\n      this.productsService.findProductById(createCartItemDto.productId),\n    ]);\n\n    if (product.stock \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCartModule\n\nCartModule\n\nAppModule -->\n\nCartModule->AppModule\n\n\n\n\n\nOrdersModule\n\nOrdersModule\n\nAppModule -->\n\nOrdersModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CartModule\n                        \n                        \n                            OrdersModule\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport enviromentValidation from './config/enviroment.validation';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { DataResponseInterceptor } from './common/interceptors/data-response/data-response.interceptor';\nimport { AuthenticationGuard } from './auth/guards/authentication/authentication.guard';\nimport { RolesGuard } from './auth/guards/roles/roles.guard';\nimport { AccessTokenGuard } from './auth/guards/access-token/access-token.guard';\nimport jwtConfig from './auth/config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ProductsModule } from './products/products.module';\nimport { CartModule } from './cart/cart.module';\nimport { OrdersModule } from './orders/orders.module';\n\n/**\n * app environment\n */\nconst ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n      validationSchema: enviromentValidation,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return {\n          type: 'postgres',\n          autoLoadEntities: configService.get('database.autoLoadEntities'),\n          synchronize: configService.get('database.synchronize'),\n          port: +configService.get('database.port'),\n          username: configService.get('database.user'),\n          password: configService.get('database.password'),\n          host: configService.get('database.host'),\n          database: configService.get('database.name'),\n          ssl:\n            process.env.NODE_ENV === 'production'\n              ? {\n                  rejectUnauthorized: false,\n                }\n              : false,\n          logging: true,\n        };\n      },\n    }),\n    UsersModule,\n    AuthModule,\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    ProductsModule,\n    CartModule,\n    OrdersModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: DataResponseInterceptor,\n    },\n\n    { provide: APP_GUARD, useClass: AuthenticationGuard },\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard,\n    },\n    AccessTokenGuard,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Controller handling authentication-related operations such as sign-in\nThis controller provides endpoints for user authentication flows, including login, forgot password, reset password, and email verification.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/sign-in')@Auth(AuthType.None)@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Sign in a user with email and password', description: 'Authenticates a user and returns access and refresh tokens.'})@ApiConsumes('application/json')@ApiBody({description: 'Sign-in credentials', required: true, type: SignInDto})@ApiResponse({status: 200, description: 'User signed in successfully', schema: undefined})@ApiBadRequestResponse({description: 'Invalid credentials or missing fields', schema: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:97\n                        \n                    \n\n\n            \n                \n                        Signs in a user with valid email and password.\nThis endpoint authenticates the user and returns access and refresh tokens upon successful validation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe sign-in credentials (email and password).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An object containing the access token and refresh token.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiConsumes,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { Auth } from './decorator/auth.decorator';\nimport { AuthType } from './enums/auth-type.enum';\nimport { SignInDto } from './dtos/sign-in.dto';\nimport { Role } from './enums/role-type.enum';\n\n/**\n * Controller handling authentication-related operations such as sign-in\n *\n * This controller provides endpoints for user authentication flows, including login, forgot password, reset password, and email verification.\n */\n@ApiTags('Auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    /**\n     * injecting the auth service\n     */\n    private readonly authService: AuthService,\n  ) {}\n\n  /**\n   * Signs in a user with valid email and password.\n   *\n   * This endpoint authenticates the user and returns access and refresh tokens upon successful validation.\n   *\n   * @param signInDto - The sign-in credentials (email and password).\n   * @returns An object containing the access token and refresh token.\n   */\n  @Post('/sign-in')\n  @Auth(AuthType.None)\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Sign in a user with email and password',\n    description: 'Authenticates a user and returns access and refresh tokens.',\n  })\n  @ApiConsumes('application/json')\n  @ApiBody({\n    description: 'Sign-in credentials',\n    required: true,\n    type: SignInDto,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'User signed in successfully',\n    schema: {\n      type: 'object',\n      properties: {\n        apiVersion: { type: 'string', example: '1.0.0' },\n        data: {\n          type: 'object',\n          example: {\n            accessToken: {\n              type: 'string',\n              description: 'JWT access token for authenticated requests',\n              example: 'jsbfiwhvfquobdfj',\n            },\n            refreshToken: {\n              type: 'string',\n              description: 'JWT refresh token for token renewal',\n              example: 'jsbfiwhvfquobdfj',\n            },\n            user: {\n              type: 'object',\n              description: 'user details',\n              example: {\n                firstname: 'favour',\n                lastname: 'ejim',\n                email: 'favour@gmail.com',\n                role: Role.USER,\n              },\n            },\n          },\n        },\n      },\n    },\n  })\n  @ApiBadRequestResponse({\n    description: 'Invalid credentials or missing fields',\n    schema: {\n      type: 'object',\n      properties: {\n        statusCode: { type: 'number', example: 400 },\n        message: { type: 'string', example: 'Invalid email or password' },\n      },\n    },\n  })\n  public signIn(@Body() signInDto: SignInDto) {\n    return this.authService.signIn(signInDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GenerateTokensProvider\n                        \n                        \n                            SignInProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { ConfigModule } from '@nestjs/config';\nimport jwtConfig from './config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { UsersModule } from 'src/users/users.module';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { BcryptProvider } from './providers/bcrypt.provider';\nimport { SignInProvider } from './providers/sign-in.provider';\nimport { GenerateTokensProvider } from './providers/generate-tokens.provider';\n\n@Module({\n  imports: [\n    forwardRef(() => UsersModule),\n    ConfigModule.forFeature(jwtConfig),\n    // for asynchrousnously registering the jwt module and passing the config to the module\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    { provide: HashingProvider, useClass: BcryptProvider },\n    SignInProvider,\n    GenerateTokensProvider,\n  ],\n  exports: [HashingProvider],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(signInProvider: SignInProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        signInProvider\n                                                  \n                                                        \n                                                                        SignInProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:19\n                        \n                    \n\n\n            \n                \n                        function for signing in a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                access and refresh tokens\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { SignInProvider } from './sign-in.provider';\nimport { SignInDto } from '../dtos/sign-in.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    /**\n     * injecting the sign in provider\n     */\n    private readonly signInProvider: SignInProvider,\n  ) {}\n\n  /**\n   * function for signing in a user\n   * @param signInDto\n   * @returns access and refresh tokens\n   */\n  public async signIn(signInDto: SignInDto) {\n    return await this.signInProvider.signIn(signInDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication/authentication.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    guard for authentication\n\n                \n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authentication/authentication.guard.ts:33\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/authentication/authentication.guard.ts:59\n                        \n                    \n\n\n            \n                \n                        function for authenticating a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                true or false based on whether user is logged in or not\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n// import { Observable } from 'rxjs';\nimport { AccessTokenGuard } from '../access-token/access-token.guard';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { AUTH_TYPE_KEY } from 'src/auth/constants/auth.constant';\n\n/**\n * guard for authentication\n */\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  // using static means you can use the name of the property of the class without the \"this\" keyword\n  /**\n   * default auth type\n   */\n  private static readonly defaultAuthType = AuthType.Bearer;\n\n  /**\n   * map for auth types and guards they use\n   */\n  private readonly authTypeGuardMap: Record = {\n    [AuthType.Bearer]: this.accessTokenGuard,\n    [AuthType.None]: { canActivate: () => true },\n  };\n\n  /**\n   * constructor\n   * @param reflector\n   * @param accessTokenGuard\n   */\n  constructor(\n    /**\n     * injecting the reflector class\n     * The reflector class makes you access diff metadata from the execution context\n     */\n    private readonly reflector: Reflector,\n\n    /**\n     * Injecting the access token guard\n     *\n     */\n    private readonly accessTokenGuard: AccessTokenGuard,\n  ) {}\n\n  /**\n   * function for authenticating a user\n   * @param context\n   * @returns true or false based on whether user is logged in or not\n   */\n  async canActivate(context: ExecutionContext): Promise {\n    // Get all the auth types from reflector\n    // This returns an array of the auth types for a specific class or method in a class\n    const authTypes = this.reflector.getAllAndOverride(AUTH_TYPE_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]) ?? [AuthenticationGuard.defaultAuthType];\n\n    // create an array of the guards\n    const guards = authTypes.map((type) => this.authTypeGuardMap[type]).flat();\n\n    // Default error\n    const error = new UnauthorizedException();\n\n    // loop through the guards and fire the canActivate\n    for (const instance of guards) {\n      let canActivate;\n\n      try {\n        canActivate = await Promise.resolve(instance.canActivate(context));\n      } catch (err) {\n        throw err;\n      }\n\n      if (canActivate) {\n        return true;\n      }\n    }\n\n    throw error;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                bcrypt provider\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                comparePassword\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:27\n                        \n                    \n\n\n            \n                \n                        function for comparing password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                a boolean that indicates whether it is same password or not\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:15\n                        \n                    \n\n\n            \n                \n                        function for hashing user password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                hashed password\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing.provider';\nimport * as bcrypt from 'bcrypt';\n\n/**\n * bcrypt provider\n */\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n  /**\n   * function for hashing user password\n   * @param data\n   * @returns hashed password\n   */\n  public async hashPassword(data: string | Buffer): Promise {\n    // generate salt\n    const salt = await bcrypt.genSalt();\n    return bcrypt.hash(data, salt);\n  }\n\n  /**\n   * function for comparing password\n   * @param data\n   * @param encrypted\n   * @returns a boolean that indicates whether it is same password or not\n   */\n  public async comparePassword(\n    data: string | Buffer,\n    encrypted: string,\n  ): Promise {\n    return await bcrypt.compare(data, encrypted);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Cart.html":{"url":"interfaces/Cart.html","title":"interface - Cart","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Cart\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/interfaces/cart.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            items\n                                        \n                                \n                                \n                                        \n                                            subtotal\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        items:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subtotal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subtotal:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Product } from '../../products/product.entity';\n\nexport interface Cart {\n  items: {\n    id: string;\n    product: Product;\n    quantity: number;\n  }[];\n  subtotal: number;\n  total: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CartController.html":{"url":"controllers/CartController.html","title":"controller - CartController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CartController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/cart.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                cart\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addToCart\n                            \n                            \n                                    \n                                clearUserCart\n                            \n                            \n                                    \n                                decrementQuantity\n                            \n                            \n                                    \n                                getUserCart\n                            \n                            \n                                    \n                                removeFromCart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addToCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    addToCart(userId: string, dto: CreateCartItemDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/cart/cart.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        clearUserCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearUserCart(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('clear')\n                \n            \n\n                    \n                        \n                            Defined in src/cart/cart.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        decrementQuantity\n                        \n                    \n                \n            \n            \n                \n                        \n                    decrementQuantity(userId: string, cartId: string, updateCartItemDto: UpdateCartItemDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':cartId')\n                \n            \n\n                    \n                        \n                            Defined in src/cart/cart.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCartItemDto\n                                            \n                                                            UpdateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getUserCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserCart(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('')\n                \n            \n\n                    \n                        \n                            Defined in src/cart/cart.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeFromCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFromCart(userId: string, cartId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':cartId')\n                \n            \n\n                    \n                        \n                            Defined in src/cart/cart.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport { CartService } from './providers/cart.service';\nimport { ActiveUser } from 'src/auth/decorator/active-user.decorator';\nimport { CreateCartItemDto } from './dtos/create-cart-item.dto';\nimport { UpdateCartItemDto } from './dtos/update-cart-item.dto';\n\n@Controller('cart')\nexport class CartController {\n  constructor(\n    /**\n     * injecting the cartService\n     */\n    private readonly cartService: CartService,\n  ) {}\n\n  @Delete('clear')\n  clearUserCart(@ActiveUser('sub') userId: string) {\n    console.log('clearing...');\n    return this.cartService.clearCart(userId);\n  }\n\n  @Post('')\n  addToCart(@ActiveUser('sub') userId: string, @Body() dto: CreateCartItemDto) {\n    return this.cartService.addToCart(userId, dto);\n  }\n\n  @Get('')\n  getUserCart(@ActiveUser('sub') userId: string) {\n    return this.cartService.getCart(userId);\n  }\n\n  @Delete(':cartId')\n  removeFromCart(\n    @ActiveUser('sub') userId: string,\n    @Param('cartId') cartId: string,\n  ) {\n    return this.cartService.removeCartItem(userId, cartId);\n  }\n\n  @Patch(':cartId')\n  decrementQuantity(\n    @ActiveUser('sub') userId: string,\n    @Param('cartId') cartId: string,\n    @Body() updateCartItemDto: UpdateCartItemDto,\n  ) {\n    console.log('qty', updateCartItemDto.quantity);\n    return this.cartService.decrementQuantity(\n      userId,\n      cartId,\n      updateCartItemDto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CartItem.html":{"url":"entities/CartItem.html","title":"entity - CartItem","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CartItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/cart-item.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                product\n                            \n                            \n                                    \n                                quantity\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, product => product.cartItems, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.cartItems, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // src/cart/entities/cart-item.entity.ts\n// User-based cart item entity: Persists cart per user in DB\nimport { Product } from '../products/product.entity';\nimport { User } from '../users/user.entity';\nimport {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  DeleteDateColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity('cart_items')\nexport class CartItem {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ default: 1 })\n  quantity: number;\n\n  @ManyToOne(() => User, (user) => user.cartItems, { onDelete: 'CASCADE' })\n  user: User;\n\n  @ManyToOne(() => Product, (product) => product.cartItems, {\n    onDelete: 'CASCADE',\n  })\n  product: Product;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @DeleteDateColumn()\n  deletedAt?: Date; // Soft delete for cart items\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CartModule.html":{"url":"modules/CartModule.html","title":"module - CartModule","body":"\n                   \n\n\n\n\n    Modules\n    CartModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CartModule\n\n\n\ncluster_CartModule_imports\n\n\n\ncluster_CartModule_providers\n\n\n\ncluster_CartModule_exports\n\n\n\n\nProduct\n\nProduct\n\n\n\nCartModule\n\nCartModule\n\nCartModule -->\n\nProduct->CartModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nCartModule -->\n\nProductsModule->CartModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nCartModule -->\n\nUsersModule->CartModule\n\n\n\n\n\nCartService \n\nCartService \n\nCartService  -->\n\nCartModule->CartService \n\n\n\n\n\nAddToCartProvider\n\nAddToCartProvider\n\nCartModule -->\n\nAddToCartProvider->CartModule\n\n\n\n\n\nCartService\n\nCartService\n\nCartModule -->\n\nCartService->CartModule\n\n\n\n\n\nGetCartProvider\n\nGetCartProvider\n\nCartModule -->\n\nGetCartProvider->CartModule\n\n\n\n\n\nUpdateCartItemProvider\n\nUpdateCartItemProvider\n\nCartModule -->\n\nUpdateCartItemProvider->CartModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cart/cart.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AddToCartProvider\n                        \n                        \n                            CartService\n                        \n                        \n                            GetCartProvider\n                        \n                        \n                            UpdateCartItemProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CartController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            Product\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CartService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CartController } from './cart.controller';\nimport { CartItem } from './cart-item.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CartService } from './providers/cart.service';\nimport { AddToCartProvider } from './providers/add-to-cart.provider';\nimport { GetCartProvider } from './providers/get-cart.provider';\nimport { UsersModule } from 'src/users/users.module';\nimport { UpdateCartItemProvider } from './providers/update-cart-item.provider';\nimport { Product } from 'src/products/product.entity';\nimport { ProductsModule } from 'src/products/products.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([CartItem]),\n    Product,\n    UsersModule,\n    ProductsModule,\n  ],\n  controllers: [CartController],\n  providers: [\n    CartService,\n    AddToCartProvider,\n    GetCartProvider,\n    UpdateCartItemProvider,\n  ],\n  exports: [CartService],\n})\nexport class CartModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CartService.html":{"url":"injectables/CartService.html","title":"injectable - CartService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CartService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/providers/cart.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addToCart\n                            \n                            \n                                    Async\n                                clearCart\n                            \n                            \n                                    Async\n                                decrementQuantity\n                            \n                            \n                                    Async\n                                getCart\n                            \n                            \n                                    Async\n                                removeCartItem\n                            \n                            \n                                    Async\n                                validateCartStock\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(addToCartProvider: AddToCartProvider, getCartProvider: GetCartProvider, updateCartItemProvider: UpdateCartItemProvider)\n                    \n                \n                        \n                            \n                                Defined in src/cart/providers/cart.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        addToCartProvider\n                                                  \n                                                        \n                                                                        AddToCartProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        getCartProvider\n                                                  \n                                                        \n                                                                        GetCartProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateCartItemProvider\n                                                  \n                                                        \n                                                                        UpdateCartItemProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addToCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    addToCart(userId: string, createCartItemDto: CreateCartItemDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/cart.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createCartItemDto\n                                            \n                                                            CreateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        clearCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearCart(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/cart.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decrementQuantity\n                        \n                    \n                \n            \n            \n                \n                        \n                    decrementQuantity(userId: string, cartId: string, updateCartItemDto: UpdateCartItemDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/cart.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCartItemDto\n                                            \n                                                            UpdateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCart(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/cart.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeCartItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeCartItem(userId: string, cartId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/cart.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateCartStock\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateCartStock(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/cart.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AddToCartProvider } from './add-to-cart.provider';\nimport { CreateCartItemDto } from '../dtos/create-cart-item.dto';\nimport { GetCartProvider } from './get-cart.provider';\nimport { UpdateCartItemProvider } from './update-cart-item.provider';\nimport { UpdateCartItemDto } from '../dtos/update-cart-item.dto';\n\n@Injectable()\nexport class CartService {\n  constructor(\n    /**\n     * injecting the addToCartProvider\n     */\n    private readonly addToCartProvider: AddToCartProvider,\n\n    /**\n     * injecting the getCartProvider\n     */\n    private readonly getCartProvider: GetCartProvider,\n\n    /**\n     * injecting the update\n     */\n    private readonly updateCartItemProvider: UpdateCartItemProvider,\n  ) {}\n\n  async addToCart(userId: string, createCartItemDto: CreateCartItemDto) {\n    return await this.addToCartProvider.addToCart(userId, createCartItemDto);\n  }\n\n  async getCart(userId: string) {\n    return await this.getCartProvider.getCart(userId);\n  }\n\n  async removeCartItem(userId: string, cartId: string) {\n    return await this.updateCartItemProvider.removeFromCart(userId, cartId);\n  }\n\n  async decrementQuantity(\n    userId: string,\n    cartId: string,\n    updateCartItemDto: UpdateCartItemDto,\n  ) {\n    return await this.updateCartItemProvider.decrementQuantity(\n      userId,\n      cartId,\n      updateCartItemDto,\n    );\n  }\n\n  async validateCartStock(userId: string) {\n    return await this.updateCartItemProvider.validateCartStock(userId);\n  }\n\n  async clearCart(userId: string) {\n    console.log('Clearing cart for user:', userId);\n    return await this.updateCartItemProvider.clearCart(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCartItemDto.html":{"url":"classes/CreateCartItemDto.html","title":"class - CreateCartItemDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCartItemDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/dtos/create-cart-item.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                productId\n                            \n                            \n                                    \n                                    \n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/dtos/create-cart-item.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/dtos/create-cart-item.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsString, Min } from 'class-validator';\n\nexport class CreateCartItemDto {\n  @IsString()\n  productId: string;\n\n  @IsInt()\n  @Min(1)\n  quantity: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateOrderDto.html":{"url":"classes/CreateOrderDto.html","title":"class - CreateOrderDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateOrderDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/dtos/create-order.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                billingAddress\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                paymentMethod\n                            \n                            \n                                    \n                                    \n                                shippingAddress\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        billingAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dtos/create-order.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        paymentMethod\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dtos/create-order.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        shippingAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dtos/create-order.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport class CreateOrderDto {\n  @IsNotEmpty()\n  @IsString()\n  shippingAddress: string;\n\n  @IsNotEmpty()\n  @IsString()\n  billingAddress: string;\n\n  // Optional: Payment method (mocked)\n  @IsOptional()\n  @IsString()\n  paymentMethod?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateOrderProvider.html":{"url":"injectables/CreateOrderProvider.html","title":"injectable - CreateOrderProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateOrderProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/providers/create-order.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource, cartService: CartService)\n                    \n                \n                        \n                            \n                                Defined in src/orders/providers/create-order.provider.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cartService\n                                                  \n                                                        \n                                                                        CartService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrder(userId: string, createOrderDto: CreateOrderDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/create-order.provider.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createOrderDto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { OrderItem } from '../order-item.entity';\nimport { Order } from '../order.entity';\nimport { User } from 'src/users/user.entity';\nimport { DataSource } from 'typeorm';\nimport { Product } from 'src/products/product.entity';\nimport { CartService } from 'src/cart/providers/cart.service';\nimport { CreateOrderDto } from '../dtos/create-order.dto';\nimport { CartItem } from 'src/cart/cart-item.entity';\n\n@Injectable()\nexport class CreateOrderProvider {\n  constructor(\n    private readonly dataSource: DataSource, // For transactions\n    private readonly cartService: CartService,\n  ) {}\n  async createOrder(\n    userId: string,\n    createOrderDto: CreateOrderDto,\n  ): Promise {\n    const queryRunner = this.dataSource.createQueryRunner();\n\n    try {\n      await queryRunner.connect();\n      await queryRunner.startTransaction();\n    } catch (error) {\n      console.log(error);\n      throw new RequestTimeoutException('Could not connect to datasource');\n    }\n\n    try {\n      await this.cartService.validateCartStock(userId);\n\n      const user = await queryRunner.manager.getRepository(User).findOne({\n        where: { id: userId },\n      });\n\n      // Fixed: Use CartItem entity and Query Builder\n      const cartItemsRaw = await queryRunner.manager\n        .createQueryBuilder(CartItem, 'ci')\n        .innerJoinAndSelect('ci.product', 'p')\n        .where('ci.user.id = :userId', { userId })\n        .andWhere('ci.deletedAt IS NULL')\n        .setLock('pessimistic_write')\n        .getMany();\n\n      // Transform to the format you need\n      const cartItems = cartItemsRaw.map((ci) => ({\n        id: ci.id,\n        quantity: ci.quantity,\n        productId: ci.product.id,\n        stock: ci.product.stock,\n        price: ci.product.price,\n      }));\n\n      if (cartItems.length === 0) {\n        throw new ConflictException('Cart is empty');\n      }\n\n      for (const item of cartItems) {\n        if (item.stock  sum + item.price * item.quantity,\n        0,\n      );\n      const total = subtotal;\n\n      const order = queryRunner.manager.create(Order, {\n        user,\n        total,\n        ...createOrderDto,\n      });\n      await queryRunner.manager.getRepository(Order).save(order);\n\n      const orderItems = cartItems.map((item) =>\n        queryRunner.manager.getRepository(OrderItem).create({\n          order,\n          product: { id: item.productId },\n          quantity: item.quantity,\n          price: item.price,\n        }),\n      );\n      await queryRunner.manager.getRepository(OrderItem).save(orderItems);\n\n      for (const item of cartItems) {\n        await queryRunner.manager.getRepository(Product).update(\n          { id: item.productId },\n          {\n            stock: () => `stock - ${item.quantity}`,\n            purchaseCount: () => `\"purchaseCount\" + ${item.quantity}`,\n          },\n        );\n      }\n\n      await queryRunner.manager.softDelete(CartItem, { user: { id: userId } });\n\n      await queryRunner.commitTransaction(); // Don't forget to commit!\n      return order;\n    } catch (error) {\n      await queryRunner.rollbackTransaction();\n      throw new ConflictException('Could not complete the transaction', {\n        description: String(error),\n      });\n    } finally {\n      try {\n        await queryRunner.release();\n      } catch (error) {\n        throw new RequestTimeoutException('Could not release the connection', {\n          description: String(error),\n        });\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dtos/create-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                imageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                stock\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ProductCategory)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(5)@MaxLength(350)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(5)@MaxLength(150)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEnum,\n  IsInt,\n  IsNotEmpty,\n  IsString,\n  MaxLength,\n  Min,\n  MinLength,\n} from 'class-validator';\nimport { ProductCategory } from '../enums/product-category.enum';\n\nexport class CreateProductDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(5)\n  @MaxLength(150)\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(5)\n  @MaxLength(350)\n  description: string;\n\n  @IsEnum(ProductCategory)\n  @IsNotEmpty()\n  category: ProductCategory;\n\n  @IsInt()\n  @IsNotEmpty()\n  price: number;\n\n  @IsInt()\n  @IsNotEmpty()\n  @Min(1)\n  stock: number;\n\n  @IsString()\n  @IsNotEmpty()\n  imageUrl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateProductProvider.html":{"url":"injectables/CreateProductProvider.html","title":"injectable - CreateProductProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateProductProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/create-product.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/create-product.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProduct(createProductDto: CreateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/create-product.provider.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Product } from '../product.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateProductDto } from '../dtos/create-product.dto';\n\n@Injectable()\nexport class CreateProductProvider {\n  constructor(\n    /**\n     * injecting the product repository\n     */\n    @InjectRepository(Product)\n    private readonly productsRepository: Repository,\n  ) {}\n\n  async createProduct(createProductDto: CreateProductDto): Promise {\n    const newProduct = this.productsRepository.create({\n      ...createProductDto,\n    });\n\n    return await this.productsRepository.save(newProduct);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                firstname\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                lastname\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'user email', example: 'favour@gmail.com'})@IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:48\n                        \n                    \n\n            \n                \n                    user email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'user firstname', example: 'favour'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:23\n                        \n                    \n\n            \n                \n                    user firstname\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'user lastname', example: 'ejim'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:36\n                        \n                    \n\n            \n                \n                    user lastname\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'user password', example: 'favour@Ejim1'})@IsString()@IsNotEmpty()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[\\W_]).{8,}$/, {message: 'Minimum eigt characters, atleast one letter, number and special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:65\n                        \n                    \n\n            \n                \n                    user password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  /**\n   * user firstname\n   */\n  @ApiProperty({\n    description: 'user firstname',\n    example: 'favour',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstname: string;\n\n  /**\n   * user lastname\n   */\n  @ApiProperty({\n    description: 'user lastname',\n    example: 'ejim',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  lastname: string;\n\n  /**\n   * user email\n   */\n  @ApiProperty({\n    description: 'user email',\n    example: 'favour@gmail.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  /**\n   * user password\n   */\n  @ApiProperty({\n    description: 'user password',\n    example: 'favour@Ejim1',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(/^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[\\W_]).{8,}$/, {\n    message:\n      'Minimum eigt characters, atleast one letter, number and special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, hashingProvider: HashingProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-user.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-user.provider.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { ValidationException } from 'src/common/filters/common-exceptions.filter';\nimport { Role } from 'src/auth/enums/role-type.enum';\n\n@Injectable()\nexport class CreateUserProvider {\n  constructor(\n    /**\n     * injecting the users repository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n\n    /**\n     * Injecting hashing provider\n     */\n    @Inject(forwardRef(() => HashingProvider))\n    private readonly hashingProvider: HashingProvider,\n  ) {}\n\n  public async createUser(\n    createUserDto: CreateUserDto,\n  ): Promise> {\n    const existingUser = await this.usersRepository.findOne({\n      where: { email: createUserDto.email },\n    });\n\n    if (existingUser) {\n      throw new ValidationException([\n        `user with ${createUserDto.email} already exists`,\n      ]);\n    }\n\n    // create a new user\n    let newUser = this.usersRepository.create({\n      ...createUserDto,\n      role: Role.USER,\n      password: await this.hashingProvider.hashPassword(createUserDto.password),\n    });\n\n    newUser = await this.usersRepository.save(newUser);\n\n    return {\n      id: newUser.id,\n      firstname: newUser.firstname,\n      lastname: newUser.lastname,\n      email: newUser.email,\n      role: newUser.role,\n      createdAt: newUser.createdAt,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataResponseInterceptor.html":{"url":"injectables/DataResponseInterceptor.html","title":"injectable - DataResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/data-response/data-response.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for the data response interceptor\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/data-response/data-response.interceptor.ts:14\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/data-response/data-response.interceptor.ts:32\n                        \n                    \n\n\n            \n                \n                        function for formatting the response data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                the response in {apiVersion: \"1.0.0\", data: ...} format\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { map, Observable } from 'rxjs';\n\n/**\n * provider for the data response interceptor\n */\n@Injectable()\nexport class DataResponseInterceptor implements NestInterceptor {\n  /**\n   * constructor\n   * @param configService\n   */\n  constructor(\n    /**\n     * injecting config service\n     */\n    private readonly configService: ConfigService,\n  ) {}\n\n  /**\n   * function for formatting the response data\n   * @param context\n   * @param next\n   * @returns the response in {apiVersion: \"1.0.0\", data: ...} format\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    // console.log('Before ...');\n    // before method execution\n\n    const response = context.switchToHttp().getResponse();\n    return next.handle().pipe(\n      map((data) => ({\n        apiVersion: this.configService.get('appConfig.apiVersion'),\n        statusCode: response.statusCode,\n        data: data,\n      })),\n    );\n    // After method execution\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseConnectionException.html":{"url":"classes/DatabaseConnectionException.html","title":"class - DatabaseConnectionException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseConnectionException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/common-exceptions.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                database connection exception\n\n            \n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(operation?: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/filters/common-exceptions.filter.ts:6\n                            \n                        \n\n                \n                    \n                            constructor for the database connection exception\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        operation\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\n/**\n * database connection exception\n */\nexport class DatabaseConnectionException extends HttpException {\n  /**\n   * constructor for the database connection exception\n   * @param operation\n   */\n  constructor(operation?: string) {\n    super(\n      {\n        message:\n          'Unable to process your request at the moment, please try later',\n        description: 'Error connecting to the database',\n        operation,\n        errorCode: 'ERR_DB_CONNECTION',\n      },\n      HttpStatus.REQUEST_TIMEOUT,\n    );\n  }\n}\n\n/**\n * validation exception\n */\nexport class ValidationException extends HttpException {\n  /**\n   * constructor for the validation exception\n   * @param errors\n   */\n  constructor(errors: string[]) {\n    super(\n      {\n        message: 'Validation failed',\n        errors,\n        errorCode: 'ERR_VALIDATION',\n      },\n      HttpStatus.BAD_REQUEST,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DeleteProductProvider.html":{"url":"injectables/DeleteProductProvider.html","title":"injectable - DeleteProductProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DeleteProductProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/delete-product.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                deleteProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/delete-product.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProduct(productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/delete-product.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Product } from '../product.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class DeleteProductProvider {\n  constructor(\n    /**\n     * injecting the products repository\n     */\n    @InjectRepository(Product)\n    private readonly productsRepository: Repository,\n  ) {}\n\n  public async deleteProduct(productId: string): Promise {\n    const product = await this.productsRepository.findOneBy({ id: productId });\n\n    if (!product) throw new NotFoundException('Product not found');\n\n    await this.productsRepository.save({\n      ...product,\n      isDeleted: true,\n      deletedAt: new Date(),\n    });\n\n    return {\n      message: 'Product deleted successfully.',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ErrorHandlingInterceptor.html":{"url":"injectables/ErrorHandlingInterceptor.html","title":"injectable - ErrorHandlingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ErrorHandlingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/error-handling/error-handling.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                interceptor for handling error\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                isConnectionError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/error-handling/error-handling.interceptor.ts:24\n                        \n                    \n\n\n            \n                \n                        intercept function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isConnectionError\n                        \n                    \n                \n            \n            \n                \n                        \n                    isConnectionError(error: QueryFailedError)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/error-handling/error-handling.interceptor.ts:55\n                        \n                    \n\n\n            \n                \n                        function for checking whether it is a connection error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                        QueryFailedError\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                boolean for whether it is a connection error\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { Observable, throwError, TimeoutError } from 'rxjs';\nimport { catchError, timeout } from 'rxjs/operators';\nimport { DatabaseConnectionException } from 'src/common/filters/common-exceptions.filter';\nimport { QueryFailedError } from 'typeorm';\n\n/**\n * interceptor for handling error\n */\n@Injectable()\nexport class ErrorHandlingInterceptor implements NestInterceptor {\n  /**\n   * intercept function\n   * @param context\n   * @param next\n   * @returns\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      timeout(30000), // 30 second timeout\n      catchError((error) => {\n        // Handle specific database errors\n        if (error instanceof QueryFailedError) {\n          if (this.isConnectionError(error)) {\n            return throwError(() => new DatabaseConnectionException());\n          }\n        }\n\n        if (error instanceof TimeoutError) {\n          return throwError(\n            () =>\n              new RequestTimeoutException(\n                'Request timeout - please try again later',\n              ),\n          );\n        }\n\n        // Re-throw the original error to be handled by global filter\n        return throwError(() => error);\n      }),\n    );\n  }\n\n  /**\n   * function for checking whether it is a connection error\n   * @param error\n   * @returns boolean for whether it is a connection error\n   */\n  private isConnectionError(error: QueryFailedError): boolean {\n    const connectionErrorCodes = [\n      'ECONNREFUSED',\n      'ENOTFOUND',\n      'ETIMEDOUT',\n      'ECONNRESET',\n      'connection refused',\n      'connect timeout',\n    ];\n\n    const errorMessage = error.message.toLowerCase();\n    return connectionErrorCodes.some((code) =>\n      errorMessage.includes(code.toLowerCase()),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ErrorResponse.html":{"url":"interfaces/ErrorResponse.html","title":"interface - ErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/global-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                error response interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            controller\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            details\n                                        \n                                \n                                \n                                        \n                                            errorCode\n                                        \n                                \n                                \n                                        \n                                            errorType\n                                        \n                                \n                                \n                                        \n                                            handler\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            method\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        controller\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        controller:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    controller name\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        details\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        details:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    error details\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    error code\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    error type\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        handler:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    handler name\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    error message\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    controller method name\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    controller path\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    status code\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    timestamp\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport {\n  QueryFailedError,\n  EntityNotFoundError,\n  CannotCreateEntityIdMapError,\n} from 'typeorm';\n\n/**\n * error response interface\n */\nexport interface ErrorResponse {\n  /**\n   * status code\n   */\n  statusCode: number;\n  /**\n   * timestamp\n   */\n  timestamp: string;\n  /**\n   * controller path\n   */\n  path: string;\n  /**\n   * controller method name\n   */\n  method: string;\n  /**\n   * controller name\n   */\n  controller: string;\n  /**\n   * handler name\n   */\n  handler: string;\n  /**\n   * error type\n   */\n  errorType: string;\n  /**\n   * error code\n   */\n  errorCode: string;\n  /**\n   * error message\n   */\n  message: string;\n  /**\n   * error details\n   */\n  details?: any;\n}\n\n/**\n * global exception filter\n */\n@Catch()\nexport class GlobalExceptionFilter implements ExceptionFilter {\n  /**\n   * logger\n   */\n  private readonly logger = new Logger(GlobalExceptionFilter.name);\n\n  /**\n   * catch function\n   * @param exception\n   * @param host\n   */\n  catch(exception: unknown, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n\n    // Extract controller and handler info from request\n    const controller = this.getControllerName(request);\n\n    console.log('controller: ', controller);\n    const handler = this.getHandlerName(request);\n\n    const errorResponse = this.buildErrorResponse(\n      exception,\n      request,\n      controller,\n      handler,\n    );\n\n    // Log the error with full context\n    this.logger.error(\n      `${errorResponse.errorType} in ${controller}::${handler}`,\n      {\n        ...errorResponse,\n        stack: exception instanceof Error ? exception.stack : undefined,\n      },\n    );\n\n    response.status(errorResponse.statusCode).json(errorResponse);\n  }\n\n  /**\n   * builds the error response\n   * @param exception\n   * @param request\n   * @param controller\n   * @param handler\n   * @returns error response\n   */\n  private buildErrorResponse(\n    exception: unknown,\n    request: Request,\n    controller: string,\n    handler: string,\n  ): ErrorResponse {\n    let status = HttpStatus.INTERNAL_SERVER_ERROR;\n    let message = 'Internal server error';\n    let errorType = 'InternalServerError';\n    let errorCode = 'ERR_INTERNAL';\n    let details: any;\n\n    // Handle different error types\n    if (exception instanceof HttpException) {\n      status = exception.getStatus();\n      message = exception.message;\n      errorType = exception.constructor.name;\n      errorCode = this.getHttpErrorCode(status);\n      details = exception.getResponse();\n    } else if (exception instanceof QueryFailedError) {\n      status = HttpStatus.BAD_REQUEST;\n      message = 'Database query failed';\n      errorType = 'DatabaseError';\n      errorCode = 'ERR_DB_QUERY_FAILED';\n      details = this.sanitizeDatabaseError(exception);\n    } else if (exception instanceof EntityNotFoundError) {\n      status = HttpStatus.NOT_FOUND;\n      message = 'Requested resource not found';\n      errorType = 'EntityNotFoundError';\n      errorCode = 'ERR_ENTITY_NOT_FOUND';\n    } else if (exception instanceof CannotCreateEntityIdMapError) {\n      status = HttpStatus.BAD_REQUEST;\n      message = 'Invalid entity data provided';\n      errorType = 'EntityValidationError';\n      errorCode = 'ERR_ENTITY_VALIDATION';\n    } else if (exception instanceof Error) {\n      message = exception.message;\n      errorType = exception.constructor.name;\n      errorCode = 'ERR_UNKNOWN';\n    }\n\n    return {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      method: request.method,\n      controller,\n      handler,\n      errorType,\n      errorCode,\n      message,\n      details,\n    };\n  }\n\n  /**\n   * function for getting the controller name where the error originated from\n   * @param request\n   * @returns controller name\n   */\n  private getControllerName(request: Request): string {\n    // Extract controller from route path or use reflection metadata\n    const route = request.route?.path || request.url;\n\n    const pathSegments = route.split('/').filter(Boolean);\n\n    if (pathSegments.length > 0) {\n      return `${pathSegments[2].charAt(0).toUpperCase()}${pathSegments[2].slice(1)}Controller`;\n    }\n\n    return 'UnknownController';\n  }\n\n  /**\n   * function for getting the handler name of the handler function where the error originated from\n   * @param request\n   * @returns the handler name\n   */\n  private getHandlerName(request: Request): string {\n    const method = request.method.toLowerCase();\n    const pathSegments = request.url.split('/').filter(Boolean);\n\n    if (pathSegments.length > 1) {\n      return `${method}${pathSegments[pathSegments.length - 1].charAt(0).toUpperCase()}${pathSegments[pathSegments.length - 1].slice(1)}`;\n    }\n\n    return `${method}Handler`;\n  }\n\n  /**\n   * function for getting the http error code\n   * @param status\n   * @returns  http error code\n   */\n  private getHttpErrorCode(status: number): string {\n    const statusCodes = {\n      400: 'ERR_BAD_REQUEST',\n      401: 'ERR_UNAUTHORIZED',\n      403: 'ERR_FORBIDDEN',\n      404: 'ERR_NOT_FOUND',\n      409: 'ERR_CONFLICT',\n      422: 'ERR_VALIDATION',\n      429: 'ERR_RATE_LIMIT',\n      500: 'ERR_INTERNAL',\n      502: 'ERR_BAD_GATEWAY',\n      503: 'ERR_SERVICE_UNAVAILABLE',\n      504: 'ERR_GATEWAY_TIMEOUT',\n    };\n\n    return statusCodes[status] || 'ERR_UNKNOWN_HTTP';\n  }\n\n  /**\n   * function for sanitizing the db error\n   * @param error\n   * @returns db error object\n   */\n  private sanitizeDatabaseError(error: QueryFailedError): any {\n    // Remove sensitive information from database errors\n    return {\n      code: (error as any).code,\n      constraint: (error as any).constraint,\n      table: (error as any).table,\n      column: (error as any).column,\n      // Don't expose raw SQL or sensitive details\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindAllOrdersForUserProvider.html":{"url":"injectables/FindAllOrdersForUserProvider.html","title":"injectable - FindAllOrdersForUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindAllOrdersForUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/providers/find-all-orders-for-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllOrders\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(orderRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/orders/providers/find-all-orders-for-user.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        orderRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllOrders\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllOrders(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/find-all-orders-for-user.provider.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Order } from '../order.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class FindAllOrdersForUserProvider {\n  constructor(\n    @InjectRepository(Order)\n    private readonly orderRepository: Repository,\n  ) {}\n  async findAllOrders(userId: string): Promise {\n    const orders = await this.orderRepository.find({\n      where: { user: { id: userId } },\n      relations: ['items', 'items.product'],\n      order: { createdAt: 'DESC' },\n    });\n\n    return orders;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindAllProductsProvider.html":{"url":"injectables/FindAllProductsProvider.html","title":"injectable - FindAllProductsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindAllProductsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/find-all-products.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cleanQuery\n                            \n                            \n                                    Async\n                                findAllProducts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository, paginationProvider: PaginationProvider)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/find-all-products.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cleanQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanQuery(query: GetProductsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/find-all-products.provider.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            GetProductsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         GetProductsDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllProducts(productQuery: GetProductsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/find-all-products.provider.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productQuery\n                                            \n                                                            GetProductsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { GetProductsDto } from '../dtos/get-products.dto';\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\nimport { Product } from '../product.entity';\nimport { Between, FindOptionsOrder, ILike, In, Repository } from 'typeorm';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\n\n@Injectable()\nexport class FindAllProductsProvider {\n  constructor(\n    /**\n     * injecting the products repository\n     */\n    @InjectRepository(Product)\n    private readonly productsRepository: Repository,\n\n    /**\n     * injecting the pagination provider\n     */\n    private readonly paginationProvider: PaginationProvider,\n  ) {}\n\n  async findAllProducts(\n    productQuery: GetProductsDto,\n  ): Promise> {\n    const cleanedQuery = this.cleanQuery(productQuery);\n\n    const { limit, page, sort } = cleanedQuery;\n\n    const safeLimit = Number(limit) > 0 ? Number(limit) : 10;\n    const safePage = Number(page) > 0 ? Number(page) : 1;\n\n    const where: any = {\n      isDeleted: false,\n    };\n\n    if (cleanedQuery.category) {\n      where.category = In(cleanedQuery.category.split(','));\n    }\n    if (cleanedQuery.price) {\n      const [min, max] = cleanedQuery.price\n        .split('-')\n        .map((p) => parseFloat(p.trim()));\n\n      if (!isNaN(min) && !isNaN(max)) {\n        where.price = Between(min, max);\n      }\n    }\n    if (cleanedQuery.name) {\n      const searchTerm = cleanedQuery.name.split('-').join(' '); // Replace dashes with spaces\n      where.name = ILike(`%${searchTerm}%`);\n    }\n\n    // Build order conditions (default to newest)\n    const order: FindOptionsOrder = { createdAt: 'DESC' };\n    if (sort) {\n      switch (sort) {\n        case 'newest':\n          order.createdAt = 'DESC';\n          break;\n        case 'oldest':\n          order.createdAt = 'ASC';\n          break;\n        case 'most_purchased':\n          order.purchaseCount = 'DESC';\n          break;\n\n        default:\n          // Fallback if validation misses\n          order.createdAt = 'DESC';\n      }\n    }\n\n    // Use PaginationProvider with options\n    const paginationQuery: PaginationQueryDto = {\n      limit: safeLimit,\n      page: safePage,\n    };\n\n    const paginatedProducts =\n      await this.paginationProvider.paginationQuery(\n        paginationQuery,\n        this.productsRepository,\n        {\n          where,\n          order,\n        },\n      );\n\n    return paginatedProducts;\n  }\n\n  private cleanQuery(query: GetProductsDto): GetProductsDto {\n    return Object.fromEntries(\n      Object.entries(query).filter(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        ([_, value]) =>\n          value !== 'undefined' && value !== undefined && value !== '',\n      ),\n    ) as GetProductsDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOrderByIdProvider.html":{"url":"injectables/FindOrderByIdProvider.html","title":"injectable - FindOrderByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOrderByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/providers/find-order-by-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findOrderById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(orderRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/orders/providers/find-order-by-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        orderRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOrderById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOrderById(userId: string, orderId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/find-order-by-id.provider.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Order } from '../order.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class FindOrderByIdProvider {\n  constructor(\n    @InjectRepository(Order)\n    private readonly orderRepository: Repository,\n  ) {}\n  async findOrderById(userId: string, orderId: string): Promise {\n    const order = await this.orderRepository.findOne({\n      where: { id: orderId, user: { id: userId } },\n      relations: ['items', 'items.product'],\n    });\n\n    if (!order) {\n      throw new NotFoundException('Order not found');\n    }\n\n    return order;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindProductByIdProvider.html":{"url":"injectables/FindProductByIdProvider.html","title":"injectable - FindProductByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindProductByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/find-product-by-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findProductById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/find-product-by-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findProductById(productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/find-product-by-id.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Product } from '../product.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindProductByIdProvider {\n  constructor(\n    /**\n     * injecting the products repository\n     */\n    @InjectRepository(Product)\n    private readonly productsRepository: Repository,\n  ) {}\n\n  public async findProductById(productId: string): Promise {\n    const product = await this.productsRepository.findOne({\n      where: {\n        id: productId,\n      },\n    });\n\n    if (!product) throw new NotFoundException('Product not found!');\n\n    return product;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindUserByEmailProvider.html":{"url":"injectables/FindUserByEmailProvider.html","title":"injectable - FindUserByEmailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindUserByEmailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-user-by-email.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findUserByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-user-by-email.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-user-by-email.provider.ts:21\n                        \n                    \n\n\n            \n                \n                        function for finding user by email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                User\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindUserByEmailProvider {\n  constructor(\n    /**\n     * injecting the users repository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  /**\n   * function for finding user by email\n   * @param email\n   * @returns User\n   */\n  public async findUserByEmail(email: string): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { email },\n      select: ['id', 'password', 'email', 'role', 'firstname', 'lastname'],\n    });\n\n    if (!user)\n      throw new NotFoundException(\n        `user with this email: ${email} does not exist.`,\n      );\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindUserByIdProvider.html":{"url":"injectables/FindUserByIdProvider.html","title":"injectable - FindUserByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindUserByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-user-by-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findUserById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-user-by-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserById(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-user-by-id.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindUserByIdProvider {\n  constructor(\n    /**\n     * injecting the users repository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  async findUserById(userId: string): Promise {\n    const user = await this.usersRepository.findOne({\n      where: {\n        id: userId,\n      },\n    });\n\n    if (!user) throw new NotFoundException(`user not found!`);\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokensProvider.html":{"url":"injectables/GenerateTokensProvider.html","title":"injectable - GenerateTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-tokens.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for generating tokens\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                            \n                                    Private\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-tokens.provider.ts:12\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:36\n                        \n                    \n\n\n            \n                \n                        function for generating tokens\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                access and refresh tokens\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(userId: string, expiresIn: number, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:64\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        function for using jwt to sign the user info\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                the object containing payload when a user signs in\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../config/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { User } from 'src/users/user.entity';\nimport { ActiveUserData } from '../interfaces/active-user-data.interface';\n\n/**\n * provider for generating tokens\n */\n@Injectable()\nexport class GenerateTokensProvider {\n  /**\n   * constructor\n   * @param jwtService\n   * @param jwtConfiguration\n   */\n  constructor(\n    /**\n     * Injecting the jwt service\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * Injecting the jwt config\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  /**\n   * function for generating tokens\n   * @param user\n   * @returns access and refresh tokens\n   */\n  public async generateTokens(user: User) {\n    const [accessToken, refreshToken] = await Promise.all([\n      // Generate the access token\n      this.signToken>(\n        user.id,\n        this.jwtConfiguration.accessTokenTtl,\n        {\n          email: user.email,\n          role: user.role,\n        },\n      ),\n      // Generate the refresh token\n      this.signToken(user.id, this.jwtConfiguration.refreshTokenTtl),\n    ]);\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  /**\n   * function for using jwt to sign the user info\n   * @param userId\n   * @param expiresIn\n   * @param payload\n   * @returns the object containing payload when a user signs in\n   */\n  private async signToken(userId: string, expiresIn: number, payload?: T) {\n    return await this.jwtService.signAsync(\n      {\n        sub: userId,\n        ...payload,\n      },\n      {\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n        secret: this.jwtConfiguration.secret,\n        expiresIn,\n      },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GetCartProvider.html":{"url":"injectables/GetCartProvider.html","title":"injectable - GetCartProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GetCartProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/providers/get-cart.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                calculateSubtotal\n                            \n                            \n                                    Async\n                                getCart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cartItemRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/cart/providers/get-cart.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cartItemRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        calculateSubtotal\n                        \n                    \n                \n            \n            \n                \n                        \n                    calculateSubtotal(items: Cart)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/get-cart.provider.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                items\n                                            \n                                                            Cart\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCart(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/get-cart.provider.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Cart } from '../interfaces/cart.interface';\nimport { Repository } from 'typeorm';\nimport { CartItem } from '../cart-item.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class GetCartProvider {\n  constructor(\n    /**\n     * injecting the cart item repository\n     */\n    @InjectRepository(CartItem)\n    private readonly cartItemRepository: Repository,\n  ) {}\n\n  async getCart(userId: string): Promise {\n    const cartItems = await this.cartItemRepository.find({\n      where: { user: { id: userId }, deletedAt: null },\n      relations: ['product'],\n    });\n\n    const items = cartItems.map((item) => ({\n      id: item.id,\n      product: item.product,\n      quantity: item.quantity,\n    }));\n\n    const subtotal = await this.calculateSubtotal(items);\n    return {\n      items,\n      subtotal,\n      total: subtotal,\n    };\n  }\n\n  private async calculateSubtotal(items: Cart['items']): Promise {\n    let subtotal = 0;\n    for (const item of items) {\n      subtotal += item.product.price * item.quantity;\n    }\n    return Number(subtotal.toFixed(2));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetProductsBaseDto.html":{"url":"classes/GetProductsBaseDto.html","title":"class - GetProductsBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetProductsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dtos/get-products.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                category\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                sort\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/get-products.dto.ts:19\n                        \n                    \n\n            \n                \n                    product category\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/get-products.dto.ts:12\n                        \n                    \n\n            \n                \n                    product name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/get-products.dto.ts:26\n                        \n                    \n\n            \n                \n                    product price\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"newest\" | \"oldest\" | \"most_purchased\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsIn(['newest', 'oldest', 'most_purchased'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/get-products.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsOptional, IsString } from 'class-validator';\nimport { ProductCategory } from '../enums/product-category.enum';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\nimport { IntersectionType } from '@nestjs/swagger';\n\nexport class GetProductsBaseDto {\n  /**\n   * product name\n   */\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  /**\n   * product category\n   */\n  @IsString()\n  @IsOptional()\n  category?: ProductCategory;\n\n  /**\n   * product price\n   */\n  @IsString()\n  @IsOptional()\n  price?: string;\n\n  @IsOptional()\n  @IsString()\n  @IsIn(['newest', 'oldest', 'most_purchased'])\n  sort?: 'newest' | 'oldest' | 'most_purchased';\n}\n\n/**\n * dto for get events\n */\nexport class GetProductsDto extends IntersectionType(\n  GetProductsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetProductsDto.html":{"url":"classes/GetProductsDto.html","title":"class - GetProductsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetProductsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dtos/get-products.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                dto for get events\n\n            \n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetProductsBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsOptional, IsString } from 'class-validator';\nimport { ProductCategory } from '../enums/product-category.enum';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\nimport { IntersectionType } from '@nestjs/swagger';\n\nexport class GetProductsBaseDto {\n  /**\n   * product name\n   */\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  /**\n   * product category\n   */\n  @IsString()\n  @IsOptional()\n  category?: ProductCategory;\n\n  /**\n   * product price\n   */\n  @IsString()\n  @IsOptional()\n  price?: string;\n\n  @IsOptional()\n  @IsString()\n  @IsIn(['newest', 'oldest', 'most_purchased'])\n  sort?: 'newest' | 'oldest' | 'most_purchased';\n}\n\n/**\n * dto for get events\n */\nexport class GetProductsDto extends IntersectionType(\n  GetProductsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GlobalExceptionFilter.html":{"url":"classes/GlobalExceptionFilter.html","title":"class - GlobalExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GlobalExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/global-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                global exception filter\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                buildErrorResponse\n                            \n                            \n                                catch\n                            \n                            \n                                    Private\n                                getControllerName\n                            \n                            \n                                    Private\n                                getHandlerName\n                            \n                            \n                                    Private\n                                getHttpErrorCode\n                            \n                            \n                                    Private\n                                sanitizeDatabaseError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(GlobalExceptionFilter.name)\n                    \n                \n                    \n                        \n                                Defined in src/common/filters/global-exception.filter.ts:70\n                        \n                    \n\n            \n                \n                    logger\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildErrorResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildErrorResponse(exception, request: Request, controller: string, handler: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/global-exception.filter.ts:115\n                        \n                    \n\n\n            \n                \n                        builds the error response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                controller\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                handler\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ErrorResponse\n\n                        \n                            \n                                error response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/global-exception.filter.ts:77\n                        \n                    \n\n\n            \n                \n                        catch function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getControllerName\n                        \n                    \n                \n            \n            \n                \n                        \n                    getControllerName(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/global-exception.filter.ts:175\n                        \n                    \n\n\n            \n                \n                        function for getting the controller name where the error originated from\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                controller name\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getHandlerName\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHandlerName(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/global-exception.filter.ts:193\n                        \n                    \n\n\n            \n                \n                        function for getting the handler name of the handler function where the error originated from\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                the handler name\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getHttpErrorCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHttpErrorCode(status: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/global-exception.filter.ts:209\n                        \n                    \n\n\n            \n                \n                        function for getting the http error code\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                http error code\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeDatabaseError\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeDatabaseError(error: QueryFailedError)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/global-exception.filter.ts:232\n                        \n                    \n\n\n            \n                \n                        function for sanitizing the db error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                        QueryFailedError\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                db error object\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport {\n  QueryFailedError,\n  EntityNotFoundError,\n  CannotCreateEntityIdMapError,\n} from 'typeorm';\n\n/**\n * error response interface\n */\nexport interface ErrorResponse {\n  /**\n   * status code\n   */\n  statusCode: number;\n  /**\n   * timestamp\n   */\n  timestamp: string;\n  /**\n   * controller path\n   */\n  path: string;\n  /**\n   * controller method name\n   */\n  method: string;\n  /**\n   * controller name\n   */\n  controller: string;\n  /**\n   * handler name\n   */\n  handler: string;\n  /**\n   * error type\n   */\n  errorType: string;\n  /**\n   * error code\n   */\n  errorCode: string;\n  /**\n   * error message\n   */\n  message: string;\n  /**\n   * error details\n   */\n  details?: any;\n}\n\n/**\n * global exception filter\n */\n@Catch()\nexport class GlobalExceptionFilter implements ExceptionFilter {\n  /**\n   * logger\n   */\n  private readonly logger = new Logger(GlobalExceptionFilter.name);\n\n  /**\n   * catch function\n   * @param exception\n   * @param host\n   */\n  catch(exception: unknown, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n\n    // Extract controller and handler info from request\n    const controller = this.getControllerName(request);\n\n    console.log('controller: ', controller);\n    const handler = this.getHandlerName(request);\n\n    const errorResponse = this.buildErrorResponse(\n      exception,\n      request,\n      controller,\n      handler,\n    );\n\n    // Log the error with full context\n    this.logger.error(\n      `${errorResponse.errorType} in ${controller}::${handler}`,\n      {\n        ...errorResponse,\n        stack: exception instanceof Error ? exception.stack : undefined,\n      },\n    );\n\n    response.status(errorResponse.statusCode).json(errorResponse);\n  }\n\n  /**\n   * builds the error response\n   * @param exception\n   * @param request\n   * @param controller\n   * @param handler\n   * @returns error response\n   */\n  private buildErrorResponse(\n    exception: unknown,\n    request: Request,\n    controller: string,\n    handler: string,\n  ): ErrorResponse {\n    let status = HttpStatus.INTERNAL_SERVER_ERROR;\n    let message = 'Internal server error';\n    let errorType = 'InternalServerError';\n    let errorCode = 'ERR_INTERNAL';\n    let details: any;\n\n    // Handle different error types\n    if (exception instanceof HttpException) {\n      status = exception.getStatus();\n      message = exception.message;\n      errorType = exception.constructor.name;\n      errorCode = this.getHttpErrorCode(status);\n      details = exception.getResponse();\n    } else if (exception instanceof QueryFailedError) {\n      status = HttpStatus.BAD_REQUEST;\n      message = 'Database query failed';\n      errorType = 'DatabaseError';\n      errorCode = 'ERR_DB_QUERY_FAILED';\n      details = this.sanitizeDatabaseError(exception);\n    } else if (exception instanceof EntityNotFoundError) {\n      status = HttpStatus.NOT_FOUND;\n      message = 'Requested resource not found';\n      errorType = 'EntityNotFoundError';\n      errorCode = 'ERR_ENTITY_NOT_FOUND';\n    } else if (exception instanceof CannotCreateEntityIdMapError) {\n      status = HttpStatus.BAD_REQUEST;\n      message = 'Invalid entity data provided';\n      errorType = 'EntityValidationError';\n      errorCode = 'ERR_ENTITY_VALIDATION';\n    } else if (exception instanceof Error) {\n      message = exception.message;\n      errorType = exception.constructor.name;\n      errorCode = 'ERR_UNKNOWN';\n    }\n\n    return {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      method: request.method,\n      controller,\n      handler,\n      errorType,\n      errorCode,\n      message,\n      details,\n    };\n  }\n\n  /**\n   * function for getting the controller name where the error originated from\n   * @param request\n   * @returns controller name\n   */\n  private getControllerName(request: Request): string {\n    // Extract controller from route path or use reflection metadata\n    const route = request.route?.path || request.url;\n\n    const pathSegments = route.split('/').filter(Boolean);\n\n    if (pathSegments.length > 0) {\n      return `${pathSegments[2].charAt(0).toUpperCase()}${pathSegments[2].slice(1)}Controller`;\n    }\n\n    return 'UnknownController';\n  }\n\n  /**\n   * function for getting the handler name of the handler function where the error originated from\n   * @param request\n   * @returns the handler name\n   */\n  private getHandlerName(request: Request): string {\n    const method = request.method.toLowerCase();\n    const pathSegments = request.url.split('/').filter(Boolean);\n\n    if (pathSegments.length > 1) {\n      return `${method}${pathSegments[pathSegments.length - 1].charAt(0).toUpperCase()}${pathSegments[pathSegments.length - 1].slice(1)}`;\n    }\n\n    return `${method}Handler`;\n  }\n\n  /**\n   * function for getting the http error code\n   * @param status\n   * @returns  http error code\n   */\n  private getHttpErrorCode(status: number): string {\n    const statusCodes = {\n      400: 'ERR_BAD_REQUEST',\n      401: 'ERR_UNAUTHORIZED',\n      403: 'ERR_FORBIDDEN',\n      404: 'ERR_NOT_FOUND',\n      409: 'ERR_CONFLICT',\n      422: 'ERR_VALIDATION',\n      429: 'ERR_RATE_LIMIT',\n      500: 'ERR_INTERNAL',\n      502: 'ERR_BAD_GATEWAY',\n      503: 'ERR_SERVICE_UNAVAILABLE',\n      504: 'ERR_GATEWAY_TIMEOUT',\n    };\n\n    return statusCodes[status] || 'ERR_UNKNOWN_HTTP';\n  }\n\n  /**\n   * function for sanitizing the db error\n   * @param error\n   * @returns db error object\n   */\n  private sanitizeDatabaseError(error: QueryFailedError): any {\n    // Remove sensitive information from database errors\n    return {\n      code: (error as any).code,\n      constraint: (error as any).constraint,\n      table: (error as any).table,\n      column: (error as any).column,\n      // Don't expose raw SQL or sensitive details\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                hashing provider\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePassword\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:19\n                        \n                    \n\n\n            \n                \n                        abstract method for comparing password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:12\n                        \n                    \n\n\n            \n                \n                        abstract method for hashing password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * hashing provider\n */\n@Injectable()\nexport abstract class HashingProvider {\n  /**\n   * abstract method for hashing password\n   * @param data\n   */\n  abstract hashPassword(data: string | Buffer): Promise;\n\n  /**\n   * abstract method for comparing password\n   * @param data\n   * @param encrypted\n   */\n  abstract comparePassword(\n    data: string | Buffer,\n    encrypted: string,\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Order.html":{"url":"entities/Order.html","title":"entity - Order","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Order\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/order.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                billingAddress\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                items\n                            \n                            \n                                    \n                                paymentMethod\n                            \n                            \n                                    \n                                shippingAddress\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                total\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        billingAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OrderItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, orderItem => orderItem.order)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        paymentMethod\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 100, default: 'Mocked Payment Method'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        shippingAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: OrderStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        total\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.orders, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:49\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from '../users/user.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { OrderItem } from './order-item.entity';\nimport { OrderStatus } from './enums/order-status.enum';\n\n@Entity('orders')\nexport class Order {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  total: number;\n\n  @Column({ type: 'enum', enum: OrderStatus, default: OrderStatus.PENDING })\n  status: OrderStatus;\n\n  @Column({\n    type: 'varchar',\n  })\n  shippingAddress: string;\n\n  @Column({\n    type: 'varchar',\n  })\n  billingAddress: string;\n\n  @Column({\n    type: 'varchar',\n    length: 100,\n    default: 'Mocked Payment Method',\n  })\n  paymentMethod: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @ManyToOne(() => User, (user) => user.orders, { onDelete: 'CASCADE' })\n  user: User;\n\n  @OneToMany(() => OrderItem, (orderItem) => orderItem.order)\n  items: OrderItem[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/OrderItem.html":{"url":"entities/OrderItem.html","title":"entity - OrderItem","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  OrderItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/order-item.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                order\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                product\n                            \n                            \n                                    \n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, order => order.items, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Order } from './order.entity';\nimport { Product } from '../products/product.entity';\n\n@Entity('order_items')\nexport class OrderItem {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  quantity: number;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  price: number;\n\n  @ManyToOne(() => Order, (order) => order.items, { onDelete: 'CASCADE' })\n  order: Order;\n\n  @ManyToOne(() => Product, { onDelete: 'CASCADE' })\n  product: Product;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OrdersController.html":{"url":"controllers/OrdersController.html","title":"controller - OrdersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OrdersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/orders.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                orders\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createOrder\n                            \n                            \n                                    \n                                    Async\n                                getOrder\n                            \n                            \n                                    \n                                    Async\n                                getOrders\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrder(userId: string, createOrderDto: CreateOrderDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/orders/orders.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createOrderDto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrder(userId: string, orderId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/orders/orders.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getOrders\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrders(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/orders/orders.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post } from '@nestjs/common';\nimport { OrdersService } from './providers/orders.service';\nimport { ActiveUser } from 'src/auth/decorator/active-user.decorator';\nimport { CreateOrderDto } from './dtos/create-order.dto';\n\n@Controller('orders')\nexport class OrdersController {\n  constructor(\n    /**\n     * injecting the orders service\n     */\n    private readonly ordersService: OrdersService,\n  ) {}\n\n  @Post()\n  async createOrder(\n    @ActiveUser('sub') userId: string,\n    @Body() createOrderDto: CreateOrderDto,\n  ) {\n    return this.ordersService.createOrder(userId, createOrderDto);\n  }\n\n  @Get()\n  async getOrders(@ActiveUser('sub') userId: string) {\n    return this.ordersService.findAllOrders(userId);\n  }\n\n  @Get(':id')\n  async getOrder(\n    @ActiveUser('sub') userId: string,\n    @Param('id') orderId: string,\n  ) {\n    return this.ordersService.findOrderById(userId, orderId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OrdersModule.html":{"url":"modules/OrdersModule.html","title":"module - OrdersModule","body":"\n                   \n\n\n\n\n    Modules\n    OrdersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OrdersModule\n\n\n\ncluster_OrdersModule_providers\n\n\n\ncluster_OrdersModule_imports\n\n\n\n\nCartModule\n\nCartModule\n\n\n\nOrdersModule\n\nOrdersModule\n\nOrdersModule -->\n\nCartModule->OrdersModule\n\n\n\n\n\nCreateOrderProvider\n\nCreateOrderProvider\n\nOrdersModule -->\n\nCreateOrderProvider->OrdersModule\n\n\n\n\n\nFindAllOrdersForUserProvider\n\nFindAllOrdersForUserProvider\n\nOrdersModule -->\n\nFindAllOrdersForUserProvider->OrdersModule\n\n\n\n\n\nFindOrderByIdProvider\n\nFindOrderByIdProvider\n\nOrdersModule -->\n\nFindOrderByIdProvider->OrdersModule\n\n\n\n\n\nOrdersService\n\nOrdersService\n\nOrdersModule -->\n\nOrdersService->OrdersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/orders/orders.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateOrderProvider\n                        \n                        \n                            FindAllOrdersForUserProvider\n                        \n                        \n                            FindOrderByIdProvider\n                        \n                        \n                            OrdersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OrdersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CartModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OrdersController } from './orders.controller';\nimport { OrdersService } from './providers/orders.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Order } from './order.entity';\nimport { OrderItem } from './order-item.entity';\nimport { CreateOrderProvider } from './providers/create-order.provider';\nimport { CartModule } from 'src/cart/cart.module';\nimport { FindAllOrdersForUserProvider } from './providers/find-all-orders-for-user.provider';\nimport { FindOrderByIdProvider } from './providers/find-order-by-id.provider';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Order, OrderItem]), CartModule],\n  controllers: [OrdersController],\n  providers: [\n    OrdersService,\n    CreateOrderProvider,\n    FindAllOrdersForUserProvider,\n    FindOrderByIdProvider,\n  ],\n})\nexport class OrdersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OrdersService.html":{"url":"injectables/OrdersService.html","title":"injectable - OrdersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OrdersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/providers/orders.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createOrder\n                            \n                            \n                                    Async\n                                findAllOrders\n                            \n                            \n                                    Async\n                                findOrderById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createOrderProvider: CreateOrderProvider, findAllOrdersForUserProvider: FindAllOrdersForUserProvider, findOrderByIdProvider: FindOrderByIdProvider)\n                    \n                \n                        \n                            \n                                Defined in src/orders/providers/orders.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createOrderProvider\n                                                  \n                                                        \n                                                                        CreateOrderProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findAllOrdersForUserProvider\n                                                  \n                                                        \n                                                                        FindAllOrdersForUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOrderByIdProvider\n                                                  \n                                                        \n                                                                        FindOrderByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrder(userId: string, createOrderDto: CreateOrderDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/orders.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createOrderDto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllOrders\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllOrders(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/orders.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOrderById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOrderById(userId: string, orderId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/orders.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateOrderProvider } from './create-order.provider';\nimport { CreateOrderDto } from '../dtos/create-order.dto';\nimport { FindAllOrdersForUserProvider } from './find-all-orders-for-user.provider';\nimport { FindOrderByIdProvider } from './find-order-by-id.provider';\n\n@Injectable()\nexport class OrdersService {\n  constructor(\n    /**\n     * createOrder provider\n     */\n    private readonly createOrderProvider: CreateOrderProvider,\n\n    private readonly findAllOrdersForUserProvider: FindAllOrdersForUserProvider,\n\n    private readonly findOrderByIdProvider: FindOrderByIdProvider,\n  ) {}\n\n  async createOrder(userId: string, createOrderDto: CreateOrderDto) {\n    return await this.createOrderProvider.createOrder(userId, createOrderDto);\n  }\n\n  async findAllOrders(userId: string) {\n    return await this.findAllOrdersForUserProvider.findAllOrders(userId);\n  }\n\n  async findOrderById(userId: string, orderId: string) {\n    return await this.findOrderByIdProvider.findOrderById(userId, orderId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/interfaces/paginated.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                interface for the response on paginated queries\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the data to be returned\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    various links for the pages of the data\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the metadata for the data\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n  /**\n   * the data to be returned\n   */\n  data: T[];\n\n  /**\n   * the metadata for the data\n   */\n  meta: {\n    itemsPerPage: number;\n    totalItems: number;\n    currentPage: number;\n    totalPages: number;\n  };\n\n  /**\n   * various links for the pages of the data\n   */\n  links: {\n    first: string;\n    last: string;\n    current: string;\n    next: string;\n    previous: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationProvider } from './providers/pagination.provider';\n\n@Module({\n  providers: [PaginationProvider],\n  exports: [PaginationProvider],\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/providers/pagination.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for pagination\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginationQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/providers/pagination.provider.ts:14\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginationQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginationQuery(paginationQuery: PaginationQueryDto, repository: Repository, options?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/providers/pagination.provider.ts:34\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        function for paginating find all queries\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                data, metadata and links for the findAll queries\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { PaginationQueryDto } from '../dtos/pagination-query.dto';\nimport { ObjectLiteral, Repository } from 'typeorm';\n\n// inorder to inject a request to a provider\nimport { Request } from 'express';\nimport { REQUEST } from '@nestjs/core';\nimport { Paginated } from '../interfaces/paginated.interface';\n\n/**\n * provider for pagination\n */\n@Injectable()\nexport class PaginationProvider {\n  /**\n   * constructor\n   * @param request\n   */\n  constructor(\n    /**\n     * Injecting request\n     */\n    @Inject(REQUEST)\n    private readonly request: Request,\n  ) {}\n\n  /**\n   * function for paginating find all queries\n   * @param paginationQuery\n   * @param repository\n   * @param options\n   * @returns data, metadata and links for the findAll queries\n   */\n  public async paginationQuery(\n    paginationQuery: PaginationQueryDto,\n    repository: Repository,\n    options?: any,\n  ): Promise> {\n    const results = await repository.find({\n      // no of posts to skip in one query\n      skip: (paginationQuery.page - 1) * paginationQuery.limit,\n      // the no of posts to take in one query\n      take: paginationQuery.limit,\n      relations: options.relations,\n      select: options.select,\n      where: options.where,\n      order: options.order,\n    });\n\n    /**\n     * Create the request URLS\n     */\n    const baseURL =\n      this.request.protocol + '://' + this.request.headers.host + '/';\n\n    const newUrl = new URL(this.request.url, baseURL);\n\n    const totalItems = await repository.count({\n      // no of posts to skip in one query\n      skip: (paginationQuery.page - 1) * paginationQuery.limit,\n      // the no of posts to take in one query\n      take: paginationQuery.limit,\n      relations: options.relations,\n      select: options.select,\n      where: options.where,\n    });\n    const totalPages = Math.ceil(totalItems / paginationQuery.limit);\n    const nextPage =\n      paginationQuery.page === totalPages\n        ? paginationQuery.page\n        : paginationQuery.page + 1;\n    const prevPage =\n      paginationQuery.page === 1\n        ? paginationQuery.page\n        : paginationQuery.page - 1;\n\n    const finalResponse: Paginated = {\n      data: results,\n      meta: {\n        itemsPerPage: paginationQuery.limit,\n        totalItems: totalItems,\n        currentPage: paginationQuery.page,\n        totalPages: totalPages,\n      },\n      links: {\n        first: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=1`,\n        last: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${totalPages}`,\n        current: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${paginationQuery.page}`,\n        next: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${nextPage}`,\n        previous: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${prevPage}`,\n      },\n    };\n\n    return finalResponse;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/dtos/pagination-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                dto for the pagination query\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:12\n                        \n                    \n\n            \n                \n                    limit for the number of items in the get all requests\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:19\n                        \n                    \n\n            \n                \n                    page number for the get all requests\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from 'class-validator';\n\n/**\n * dto for the pagination query\n */\nexport class PaginationQueryDto {\n  /**\n   * limit for the number of items in the get all requests\n   */\n  @IsOptional()\n  limit?: number = 0;\n\n  /**\n   * page number for the get all requests\n   */\n  @IsOptional()\n  @IsPositive()\n  page?: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Product.html":{"url":"entities/Product.html","title":"entity - Product","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/product.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                cartItems\n                            \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                imageUrl\n                            \n                            \n                                    \n                                isDeleted\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                orders\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                purchaseCount\n                            \n                            \n                                    \n                                stock\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        cartItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CartItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, cartItem => cartItem.product)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 50, nullable: false, enum: ProductCategory})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()@Index()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 100, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, order => order.product)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        purchaseCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:45\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  Index,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n} from 'typeorm';\nimport { ProductCategory } from './enums/product-category.enum';\nimport { CartItem } from '../cart/cart-item.entity';\nimport { Order } from '../orders/order.entity';\nimport { OrderItem } from '../orders/order-item.entity';\n\n@Entity('products')\n@Index(['name'])\n@Index(['category'])\nexport class Product {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ length: 100, nullable: false, unique: true })\n  name: string;\n\n  @Column({ length: 50, nullable: false, enum: ProductCategory })\n  category: ProductCategory;\n\n  @Column({ type: 'text', nullable: false })\n  description: string;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2, nullable: false })\n  price: number;\n\n  @Column({ default: 0, nullable: false })\n  stock: number;\n\n  @Column({ nullable: true })\n  imageUrl?: string;\n\n  @CreateDateColumn()\n  @Index()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @Column({\n    type: 'boolean',\n    default: false,\n  })\n  isDeleted: boolean;\n\n  @Column({\n    type: 'timestamp',\n    nullable: true,\n  })\n  deletedAt?: Date;\n\n  @Column({\n    default: 0,\n  })\n  purchaseCount: number;\n\n  @OneToMany(() => CartItem, (cartItem) => cartItem.product)\n  cartItems?: CartItem[];\n\n  @OneToMany(() => OrderItem, (order) => order.product)\n  orders: Order[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductsController.html":{"url":"controllers/ProductsController.html","title":"controller - ProductsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                products\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createProduct\n                            \n                            \n                                    \n                                    \n                                deleteProduct\n                            \n                            \n                                    \n                                    \n                                findAllProducts\n                            \n                            \n                                    \n                                    \n                                updateProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProduct(createProductDto: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('')@Roles(Role.ADMIN)\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        deleteProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProduct(productId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.ADMIN)@Delete(':productid')\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAllProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllProducts(productsQuery: GetProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth(AuthType.None)@Get('')\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productsQuery\n                                            \n                                                            GetProductsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updateProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProduct(productId: string, updateProductDto: UpdateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.ADMIN)@Patch(':productid')\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { ProductsService } from './providers/products.service';\nimport { CreateProductDto } from './dtos/create-product.dto';\nimport { Auth } from 'src/auth/decorator/auth.decorator';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { Roles } from 'src/auth/decorator/role.decorator';\nimport { Role } from 'src/auth/enums/role-type.enum';\nimport { Product } from './product.entity';\nimport { GetProductsDto } from './dtos/get-products.dto';\nimport { Paginated } from '../common/pagination/interfaces/paginated.interface';\nimport { UpdateProductDto } from './dtos/update-product.dto';\n\n@Controller('products')\nexport class ProductsController {\n  constructor(\n    /**\n     * injecting the productsService\n     */\n    private readonly productsService: ProductsService,\n  ) {}\n\n  @Post('')\n  @Roles(Role.ADMIN)\n  createProduct(@Body() createProductDto: CreateProductDto): Promise {\n    return this.productsService.createProduct(createProductDto);\n  }\n\n  @Auth(AuthType.None)\n  @Get('')\n  findAllProducts(\n    @Query() productsQuery: GetProductsDto,\n  ): Promise> {\n    return this.productsService.findAllProducts(productsQuery);\n  }\n\n  @Roles(Role.ADMIN)\n  @Patch(':productid')\n  updateProduct(\n    @Param('productid') productId: string,\n    @Body() updateProductDto: UpdateProductDto,\n  ) {\n    return this.productsService.updateProduct(updateProductDto, productId);\n  }\n\n  @Roles(Role.ADMIN)\n  @Delete(':productid')\n  // @HttpCode(204)\n  deleteProduct(@Param('productid') productId: string) {\n    return this.productsService.deleteProduct(productId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductsModule.html":{"url":"modules/ProductsModule.html","title":"module - ProductsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_exports\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_ProductsModule_imports\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nProductsModule\n\nProductsModule\n\nProductsModule -->\n\nPaginationModule->ProductsModule\n\n\n\n\n\nProductsService \n\nProductsService \n\nProductsService  -->\n\nProductsModule->ProductsService \n\n\n\n\n\nCreateProductProvider\n\nCreateProductProvider\n\nProductsModule -->\n\nCreateProductProvider->ProductsModule\n\n\n\n\n\nDeleteProductProvider\n\nDeleteProductProvider\n\nProductsModule -->\n\nDeleteProductProvider->ProductsModule\n\n\n\n\n\nFindAllProductsProvider\n\nFindAllProductsProvider\n\nProductsModule -->\n\nFindAllProductsProvider->ProductsModule\n\n\n\n\n\nFindProductByIdProvider\n\nFindProductByIdProvider\n\nProductsModule -->\n\nFindProductByIdProvider->ProductsModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\nUpdateProductProvider\n\nUpdateProductProvider\n\nProductsModule -->\n\nUpdateProductProvider->ProductsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/products/products.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateProductProvider\n                        \n                        \n                            DeleteProductProvider\n                        \n                        \n                            FindAllProductsProvider\n                        \n                        \n                            FindProductByIdProvider\n                        \n                        \n                            ProductsService\n                        \n                        \n                            UpdateProductProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProductsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductsController } from './products.controller';\nimport { ProductsService } from './providers/products.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Product } from './product.entity';\nimport { CreateProductProvider } from './providers/create-product.provider';\nimport { FindAllProductsProvider } from './providers/find-all-products.provider';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\nimport { UpdateProductProvider } from './providers/update-product.provider';\nimport { DeleteProductProvider } from './providers/delete-product.provider';\nimport { FindProductByIdProvider } from './providers/find-product-by-id.provider';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Product]), PaginationModule],\n  controllers: [ProductsController],\n  providers: [\n    ProductsService,\n    CreateProductProvider,\n    FindAllProductsProvider,\n    UpdateProductProvider,\n    DeleteProductProvider,\n    FindProductByIdProvider,\n  ],\n  exports: [ProductsService, TypeOrmModule],\n})\nexport class ProductsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsService.html":{"url":"injectables/ProductsService.html","title":"injectable - ProductsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/products.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProduct\n                            \n                            \n                                    Async\n                                deleteProduct\n                            \n                            \n                                    Async\n                                findAllProducts\n                            \n                            \n                                    Async\n                                findProductById\n                            \n                            \n                                    Async\n                                updateProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createProductProvider: CreateProductProvider, findAllProductsProvider: FindAllProductsProvider, updateProductProvider: UpdateProductProvider, deleteProductProvider: DeleteProductProvider, findProductByIdProvider: FindProductByIdProvider)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/products.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createProductProvider\n                                                  \n                                                        \n                                                                        CreateProductProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findAllProductsProvider\n                                                  \n                                                        \n                                                                        FindAllProductsProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateProductProvider\n                                                  \n                                                        \n                                                                        UpdateProductProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        deleteProductProvider\n                                                  \n                                                        \n                                                                        DeleteProductProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findProductByIdProvider\n                                                  \n                                                        \n                                                                        FindProductByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProduct(createProductDto: CreateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProduct(productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllProducts(productQuery: GetProductsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productQuery\n                                            \n                                                            GetProductsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findProductById(productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProduct(updateProductDto: UpdateProductDto, productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateProductProvider } from './create-product.provider';\nimport { CreateProductDto } from '../dtos/create-product.dto';\nimport { Product } from '../product.entity';\nimport { FindAllProductsProvider } from './find-all-products.provider';\nimport { GetProductsDto } from '../dtos/get-products.dto';\nimport { Paginated } from '../../common/pagination/interfaces/paginated.interface';\nimport { UpdateProductProvider } from './update-product.provider';\nimport { UpdateProductDto } from '../dtos/update-product.dto';\nimport { DeleteProductProvider } from './delete-product.provider';\nimport { FindProductByIdProvider } from './find-product-by-id.provider';\n\n@Injectable()\nexport class ProductsService {\n  constructor(\n    /**\n     * injecting the create product provider\n     */\n    private readonly createProductProvider: CreateProductProvider,\n\n    /**\n     * injecting the find all products provider\n     */\n    private readonly findAllProductsProvider: FindAllProductsProvider,\n\n    /**\n     * injecting the update product provider\n     */\n    private readonly updateProductProvider: UpdateProductProvider,\n\n    /**\n     * injecting the deleteProductProvider\n     */\n    private readonly deleteProductProvider: DeleteProductProvider,\n\n    /**\n     * injecting the findProductByIdProvider\n     */\n    private readonly findProductByIdProvider: FindProductByIdProvider,\n  ) {}\n\n  async createProduct(createProductDto: CreateProductDto): Promise {\n    return this.createProductProvider.createProduct(createProductDto);\n  }\n\n  async findAllProducts(\n    productQuery: GetProductsDto,\n  ): Promise> {\n    return this.findAllProductsProvider.findAllProducts(productQuery);\n  }\n\n  async updateProduct(\n    updateProductDto: UpdateProductDto,\n    productId: string,\n  ): Promise {\n    return await this.updateProductProvider.updateProduct(\n      updateProductDto,\n      productId,\n    );\n  }\n\n  async deleteProduct(productId: string): Promise {\n    return await this.deleteProductProvider.deleteProduct(productId);\n  }\n\n  async findProductById(productId: string): Promise {\n    return await this.findProductByIdProvider.findProductById(productId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles/roles.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    role guard\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles/roles.guard.ts:16\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles/roles.guard.ts:31\n                        \n                    \n\n\n            \n                \n                        function for validating role of user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true or false depending whether the users role meets the role requirements in the role decorator\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from 'src/auth/constants/role.constant';\nimport { Role } from 'src/auth/enums/role-type.enum';\n\n/**\n * role guard\n */\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  // using static means you can use the name of the property of the class without the \"this\" keyword\n  //   private static readonly defaultRoleType: Role = Role.ADMIN;\n\n  /**\n   * constructor\n   * @param reflector\n   */\n  constructor(private reflector: Reflector) {}\n\n  /**\n   * function for validating role of user\n   * @param context\n   * @returns true or false depending whether the users role meets the role requirements in the role decorator\n   */\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (!requiredRoles) {\n      return true; //  allow access.\n    }\n\n    const { user } = context.switchToHttp().getRequest();\n\n    if (!user) {\n      throw new ForbiddenException('User not found.');\n    }\n\n    const hasRole = requiredRoles.some((role) => user.role === role);\n\n    if (!hasRole) {\n      throw new ForbiddenException(\n        'You do not have permission to access this resource.',\n      );\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SeedProducts1759619432047.html":{"url":"classes/SeedProducts1759619432047.html","title":"class - SeedProducts1759619432047","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SeedProducts1759619432047\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations/1759619432047-SeedProducts.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/migrations/1759619432047-SeedProducts.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/migrations/1759619432047-SeedProducts.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { seedProducts } from '../seed-file';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class SeedProducts1759619432047 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    // Create table if not exists (TypeORM handles this via entity sync, but explicit for migration)\n    await queryRunner.query(`\n      CREATE TABLE IF NOT EXISTS products (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(100) NOT NULL UNIQUE,\n        category VARCHAR(50) NOT NULL,\n        description TEXT NOT NULL,\n        price DECIMAL(10,2) NOT NULL,\n        stock INTEGER NOT NULL DEFAULT 0,\n        \"imageUrl\" VARCHAR(255) NULL,\n        INDEX idx_name (name),\n        INDEX idx_category (category)\n      );\n    `);\n\n    // Insert seed data (ignore duplicates if re-run)\n    https: for (const product of seedProducts) {\n      await queryRunner.query(\n        `INSERT INTO products (name, category, description, price, stock, \"imageUrl\") \n         VALUES ($1, $2, $3, $4, $5, $6) \n         ON CONFLICT (name) DO NOTHING;`, // Assumes name is unique; adjust if needed\n        [\n          product.name,\n          product.category,\n          product.description,\n          product.price,\n          product.stock,\n          product.imageUrl,\n        ],\n      );\n    }\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    // Rollback: Truncate seed data (or drop table if preferred)\n    await queryRunner.query(\n      `TRUNCATE TABLE products RESTART IDENTITY CASCADE;`,\n    );\n    // Alternative full drop: await queryRunner.query(`DROP TABLE IF EXISTS products;`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/sign-in.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                sign in dto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the email of the user', example: 'Favour@gmail.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/sign-in.dto.ts:17\n                        \n                    \n\n            \n                \n                    email address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the password of the user', example: '@Favour233'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/sign-in.dto.ts:28\n                        \n                    \n\n            \n                \n                    password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * sign in dto\n */\nexport class SignInDto {\n  /**\n   * email address\n   */\n  @ApiProperty({\n    description: 'This is the email of the user',\n    example: 'Favour@gmail.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * password\n   */\n  @ApiProperty({\n    description: 'This is the password of the user',\n    example: '@Favour233',\n  })\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SignInProvider.html":{"url":"injectables/SignInProvider.html","title":"injectable - SignInProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SignInProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/sign-in.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for sigining in users\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, hashingProvider: HashingProvider, generateTokenProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/sign-in.provider.ts:17\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.provider.ts:47\n                        \n                    \n\n\n            \n                \n                        function for signing in users\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                access and refresh tokens\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { HashingProvider } from './hashing.provider';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\nimport { SignInDto } from '../dtos/sign-in.dto';\nimport { User } from 'src/users/user.entity';\n\n/**\n * provider for sigining in users\n */\n@Injectable()\nexport class SignInProvider {\n  /**\n   * constructor\n   * @param usersService\n   * @param hashingProvider\n   * @param generateTokenProvider\n   */\n  constructor(\n    /**\n     * injecting the user service\n     */\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n\n    /**\n     * Injecting the hashing provider\n     */\n    private readonly hashingProvider: HashingProvider,\n\n    /**\n     * injecting the generate token provider\n     */\n    private readonly generateTokenProvider: GenerateTokensProvider,\n  ) {}\n\n  /**\n   * function for signing in users\n   * @param signInDto\n   * @returns access and refresh tokens\n   */\n  public async signIn(signInDto: SignInDto): Promise;\n  }> {\n    const user: User = await this.usersService.findUserByEmail(signInDto.email);\n\n    let isPasswordEqual: boolean = false;\n\n    isPasswordEqual = await this.hashingProvider.comparePassword(\n      signInDto.password,\n      user.password,\n    );\n\n    if (!isPasswordEqual) {\n      throw new UnauthorizedException('Incorrect email or password');\n    }\n\n    // generate an access token\n    const { accessToken, refreshToken } =\n      await this.generateTokenProvider.generateTokens(user);\n\n    return {\n      accessToken,\n      refreshToken,\n      user: {\n        id: user.id,\n        firstname: user.firstname,\n        lastname: user.lastname,\n        role: user.role,\n        email: user.email,\n      },\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCartItemDto.html":{"url":"classes/UpdateCartItemDto.html","title":"class - UpdateCartItemDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCartItemDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/dtos/update-cart-item.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/dtos/update-cart-item.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, Min } from 'class-validator';\n\nexport class UpdateCartItemDto {\n  @IsInt()\n  @Min(1)\n  quantity: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UpdateCartItemProvider.html":{"url":"injectables/UpdateCartItemProvider.html","title":"injectable - UpdateCartItemProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UpdateCartItemProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/providers/update-cart-item.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clearCart\n                            \n                            \n                                    Async\n                                decrementQuantity\n                            \n                            \n                                    Async\n                                deductStock\n                            \n                            \n                                    Async\n                                removeFromCart\n                            \n                            \n                                    Async\n                                validateCartStock\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cartItemRepository: Repository, getCartProvider: GetCartProvider, productRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/cart/providers/update-cart-item.provider.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cartItemRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        getCartProvider\n                                                  \n                                                        \n                                                                        GetCartProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        productRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        clearCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearCart(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/update-cart-item.provider.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decrementQuantity\n                        \n                    \n                \n            \n            \n                \n                        \n                    decrementQuantity(userId: string, cartId: string, updateCartItemDto: UpdateCartItemDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/update-cart-item.provider.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCartItemDto\n                                            \n                                                            UpdateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deductStock\n                        \n                    \n                \n            \n            \n                \n                        \n                    deductStock(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/update-cart-item.provider.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeFromCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFromCart(userId: string, cartId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/update-cart-item.provider.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateCartStock\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateCartStock(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/update-cart-item.provider.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { CartItem } from '../cart-item.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Cart } from '../interfaces/cart.interface';\nimport { GetCartProvider } from './get-cart.provider';\nimport { Product } from 'src/products/product.entity';\nimport { UpdateCartItemDto } from '../dtos/update-cart-item.dto';\n\n@Injectable()\nexport class UpdateCartItemProvider {\n  constructor(\n    /**\n     * injecting the cartRepository\n     */\n    @InjectRepository(CartItem)\n    private readonly cartItemRepository: Repository,\n\n    /**\n     * injecting the get cart provider\n     */\n    private readonly getCartProvider: GetCartProvider,\n\n    @InjectRepository(Product)\n    private readonly productRepository: Repository,\n  ) {}\n\n  async decrementQuantity(\n    userId: string,\n    cartId: string,\n    updateCartItemDto: UpdateCartItemDto,\n  ): Promise {\n    const cartItem = await this.cartItemRepository.findOne({\n      where: { user: { id: userId }, id: cartId },\n    });\n\n    if (!cartItem) {\n      throw new NotFoundException('Item not in cart');\n    }\n\n    if (\n      cartItem.quantity  {\n    const cartItem = await this.cartItemRepository.findOne({\n      where: { user: { id: userId }, id: cartId },\n    });\n\n    if (!cartItem) {\n      throw new NotFoundException('Item not in cart');\n    }\n\n    await this.cartItemRepository.softDelete({ id: cartItem.id });\n    return this.getCartProvider.getCart(userId);\n  }\n\n  // For orders: Validate stock before checkout\n  async validateCartStock(userId: string): Promise {\n    const cartItems = await this.cartItemRepository.find({\n      where: { user: { id: userId }, deletedAt: null },\n      relations: ['product'],\n    });\n\n    for (const item of cartItems) {\n      if (item.product.stock  {\n    const cartItems = await this.cartItemRepository.find({\n      where: { user: { id: userId }, deletedAt: null },\n      relations: ['product'],\n    });\n\n    for (const item of cartItems) {\n      item.product.stock -= item.quantity;\n      await this.productRepository.save(item.product);\n    }\n  }\n\n  // Clear cart after order\n  async clearCart(userId: string): Promise {\n    try {\n      await this.cartItemRepository.softDelete({ user: { id: userId } });\n    } catch (error) {\n      console.log(error);\n    }\n\n    return {\n      message: 'Cart cleared successfully',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dtos/update-product.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateProductDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isDeleted\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/update-product.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/update-product.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateProductDto } from './create-product.dto';\nimport { IsBoolean, IsOptional } from 'class-validator';\n\nexport class UpdateProductDto extends PartialType(CreateProductDto) {\n  @IsOptional()\n  @IsBoolean()\n  isDeleted?: boolean;\n\n  @IsOptional()\n  deletedAt?: Date | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UpdateProductProvider.html":{"url":"injectables/UpdateProductProvider.html","title":"injectable - UpdateProductProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UpdateProductProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/update-product.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                filterObj\n                            \n                            \n                                    Public\n                                    Async\n                                updateProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/update-product.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        filterObj\n                        \n                    \n                \n            \n            \n                \n                        \n                    filterObj(obj: T, ...allowedFields: ()[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/update-product.provider.ts:42\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                allowedFields\n                                            \n                                                        ()[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Record\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProduct(updateProductDto: UpdateProductDto, productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/update-product.provider.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Product } from '../product.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UpdateProductDto } from '../dtos/update-product.dto';\n\n@Injectable()\nexport class UpdateProductProvider {\n  constructor(\n    /**\n     * injecting the products repository\n     */\n    @InjectRepository(Product)\n    private readonly productsRepository: Repository,\n  ) {}\n\n  public async updateProduct(\n    updateProductDto: UpdateProductDto,\n    productId: string,\n  ): Promise {\n    const product = await this.productsRepository.findOneBy({ id: productId });\n\n    console.log(product);\n\n    if (!product) throw new NotFoundException('Product not found');\n\n    const filteredPayload = this.filterObj(\n      updateProductDto,\n      'description',\n      'price',\n      'stock',\n      'isDeleted',\n      'deletedAt',\n    );\n\n    return await this.productsRepository.save({\n      ...product,\n      ...filteredPayload,\n    });\n  }\n\n  private filterObj>(\n    obj: T,\n    ...allowedFields: (keyof T)[]\n  ) {\n    const newObj = {} as Record;\n    Object.keys(obj).forEach((el) => {\n      if (allowedFields.includes(el)) {\n        newObj[el] = obj[el];\n      }\n    });\n    return newObj;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                cartItems\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    Optional\n                                firstname\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastname\n                            \n                            \n                                    \n                                orders\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        cartItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CartItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, cartItem => cartItem.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()@Index()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, order => order.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, select: false})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Role, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:63\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Role } from '../auth/enums/role-type.enum';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  Index,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { CartItem } from '../cart/cart-item.entity';\nimport { Order } from '../orders/order.entity';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstname?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  lastname: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n\n  @Column({\n    type: 'enum',\n    enum: Role,\n    nullable: false,\n  })\n  role: Role;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    select: false,\n  })\n  @Exclude()\n  password: string;\n\n  @CreateDateColumn()\n  @Index()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @OneToMany(() => CartItem, (cartItem) => cartItem.user)\n  cartItems?: CartItem[];\n\n  @OneToMany(() => Order, (order) => order.user)\n  orders: Order[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Controller handling user-related operations\nBase URL: /users\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new user account', description: 'Register a new user with personal details and credentials. Password will be securely hashed.'})@ApiBody({description: 'User registration details', required: true, type: CreateUserDto, examples: undefined})@ApiResponse({status: 201, description: 'User account created successfully. Returns user details without password.', schema: undefined})@ApiResponse({status: 400, description: user with {email} already exists})@Post('')@HttpCode(HttpStatus.CREATED)@Auth(AuthType.None)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:82\n                        \n                    \n\n\n            \n                \n                        Creates a new user account with the provided user details\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user registration data including firstName, lastName, email and password\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                Promise - The created user object (password excluded from response)\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { User } from './user.entity';\nimport { ApiBody, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { Auth } from 'src/auth/decorator/auth.decorator';\nimport { UsersService } from './providers/users.service';\nimport { Role } from 'src/auth/enums/role-type.enum';\nimport { CreateUserDto } from './dtos/create-user.dto';\n\n/**\n * Controller handling user-related operations\n * Base URL: /users\n */\n@ApiTags('Users')\n@Controller('users')\nexport class UsersController {\n  constructor(\n    /**\n     * Injecting the users service for user-related operations\n     */\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * Creates a new user account with the provided user details\n   *\n   * @param createUserDto - The user registration data including firstName, lastName, email and password\n   * @returns Promise - The created user object (password excluded from response)\n   */\n  @ApiOperation({\n    summary: 'Create a new user account',\n    description:\n      'Register a new user with personal details and credentials. Password will be securely hashed.',\n  })\n  @ApiBody({\n    description: 'User registration details',\n    required: true,\n    type: CreateUserDto,\n    examples: {\n      validUser: {\n        summary: 'Valid user registration',\n        value: {\n          firstname: 'Kelechi',\n          lastname: 'Agnes',\n          email: 'iloghaluagneskc@gmail.com',\n          password: '@Password1',\n        },\n      },\n      invalidUser: {\n        summary: 'Invalid registration - missing password',\n        value: {\n          firstname: 'Kelechi',\n          lastname: 'Agnes',\n          email: 'iloghaluagneskc@gmail.com',\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 201,\n    description:\n      'User account created successfully. Returns user details without password.',\n    schema: {\n      type: 'object',\n      properties: {\n        id: { type: 'string', example: 'uuid-string' },\n        firstName: { type: 'string', example: 'John' },\n        lastName: { type: 'string', example: 'Doe' },\n        email: { type: 'string', example: 'john.doe@example.com' },\n        role: { type: 'string', example: Role.USER },\n        createdAt: { type: 'string', format: 'date-time' },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 400,\n    description: `user with {email} already exists`,\n  })\n  @Post('')\n  @HttpCode(HttpStatus.CREATED)\n  @Auth(AuthType.None)\n  public createUser(\n    @Body() createUserDto: CreateUserDto,\n  ): Promise> {\n    return this.usersService.createUser(createUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindUserByEmailProvider\n\nFindUserByEmailProvider\n\nUsersModule -->\n\nFindUserByEmailProvider->UsersModule\n\n\n\n\n\nFindUserByIdProvider\n\nFindUserByIdProvider\n\nUsersModule -->\n\nFindUserByIdProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateUserProvider\n                        \n                        \n                            FindUserByEmailProvider\n                        \n                        \n                            FindUserByIdProvider\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { CreateUserProvider } from './providers/create-user.provider';\nimport { FindUserByEmailProvider } from './providers/find-user-by-email.provider';\nimport { FindUserByIdProvider } from './providers/find-user-by-id.provider';\n\n@Module({\n  imports: [forwardRef(() => AuthModule), TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [\n    UsersService,\n    CreateUserProvider,\n    FindUserByEmailProvider,\n    FindUserByIdProvider,\n  ],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findUserById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createUserProvider: CreateUserProvider, findUserByEmailProvider: FindUserByEmailProvider, findUserByIdProvider: FindUserByIdProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findUserByEmailProvider\n                                                  \n                                                        \n                                                                        FindUserByEmailProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findUserByIdProvider\n                                                  \n                                                        \n                                                                        FindUserByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:32\n                        \n                    \n\n\n            \n                \n                        service for creating a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                User\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserById(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateUserProvider } from './create-user.provider';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { User } from '../user.entity';\nimport { FindUserByEmailProvider } from './find-user-by-email.provider';\nimport { FindUserByIdProvider } from './find-user-by-id.provider';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    /**\n     * injecting the create user provider\n     */\n    private readonly createUserProvider: CreateUserProvider,\n\n    /**\n     * injecting the find user by email provider\n     */\n    private readonly findUserByEmailProvider: FindUserByEmailProvider,\n\n    /**\n     * injecting the find user by id provider\n     */\n    private readonly findUserByIdProvider: FindUserByIdProvider,\n  ) {}\n\n  /**\n   * service for creating a user\n   * @param createUserDto\n   * @returns User\n   */\n  public async createUser(\n    createUserDto: CreateUserDto,\n  ): Promise> {\n    return await this.createUserProvider.createUser(createUserDto);\n  }\n\n  public async findUserByEmail(email: string): Promise {\n    return await this.findUserByEmailProvider.findUserByEmail(email);\n  }\n\n  public async findUserById(userId: string): Promise {\n    return await this.findUserByIdProvider.findUserById(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationException.html":{"url":"classes/ValidationException.html","title":"class - ValidationException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/common-exceptions.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                validation exception\n\n            \n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(errors: string[])\n                    \n                \n                        \n                            \n                                Defined in src/common/filters/common-exceptions.filter.ts:28\n                            \n                        \n\n                \n                    \n                            constructor for the validation exception\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        errors\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\n/**\n * database connection exception\n */\nexport class DatabaseConnectionException extends HttpException {\n  /**\n   * constructor for the database connection exception\n   * @param operation\n   */\n  constructor(operation?: string) {\n    super(\n      {\n        message:\n          'Unable to process your request at the moment, please try later',\n        description: 'Error connecting to the database',\n        operation,\n        errorCode: 'ERR_DB_CONNECTION',\n      },\n      HttpStatus.REQUEST_TIMEOUT,\n    );\n  }\n}\n\n/**\n * validation exception\n */\nexport class ValidationException extends HttpException {\n  /**\n   * constructor for the validation exception\n   * @param errors\n   */\n  constructor(errors: string[]) {\n    super(\n      {\n        message: 'Validation failed',\n        errors,\n        errorCode: 'ERR_VALIDATION',\n      },\n      HttpStatus.BAD_REQUEST,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/app.module.ts\n            \n            variable\n            ENV\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/auth/constants/auth.constant.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/constants/auth.constant.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/constants/role.constant.ts\n            \n            variable\n            ROLES_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/decorator/active-user.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/decorator/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/decorator/role.decorator.ts\n            \n            variable\n            Roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/sign-in.dto.ts\n            \n            class\n            SignInDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/guards/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/interfaces/active-user-data.interface.ts\n            \n            interface\n            ActiveUserData\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-tokens.provider.ts\n            \n            injectable\n            GenerateTokensProvider\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/providers/sign-in.provider.ts\n            \n            injectable\n            SignInProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/cart/cart-item.entity.ts\n            \n            entity\n            CartItem\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/cart/cart.controller.ts\n            \n            controller\n            CartController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/cart/dtos/create-cart-item.dto.ts\n            \n            class\n            CreateCartItemDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/cart/dtos/update-cart-item.dto.ts\n            \n            class\n            UpdateCartItemDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/cart/interfaces/cart.interface.ts\n            \n            interface\n            Cart\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cart/providers/add-to-cart.provider.ts\n            \n            injectable\n            AddToCartProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/cart/providers/cart.service.ts\n            \n            injectable\n            CartService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/cart/providers/get-cart.provider.ts\n            \n            injectable\n            GetCartProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cart/providers/update-cart-item.provider.ts\n            \n            injectable\n            UpdateCartItemProvider\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/common/filters/common-exceptions.filter.ts\n            \n            class\n            DatabaseConnectionException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/filters/common-exceptions.filter.ts\n            \n            class\n            ValidationException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/filters/global-exception.filter.ts\n            \n            class\n            GlobalExceptionFilter\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/common/filters/global-exception.filter.ts\n            \n            interface\n            ErrorResponse\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/common/interceptors/data-response/data-response.interceptor.ts\n            \n            injectable\n            DataResponseInterceptor\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/error-handling/error-handling.interceptor.ts\n            \n            injectable\n            ErrorHandlingInterceptor\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/pagination/dtos/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/pagination/interfaces/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/pagination/providers/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/migrations/1759619432047-SeedProducts.ts\n            \n            class\n            SeedProducts1759619432047\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/orders/dtos/create-order.dto.ts\n            \n            class\n            CreateOrderDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/orders/order-item.entity.ts\n            \n            entity\n            OrderItem\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/orders/order.entity.ts\n            \n            entity\n            Order\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/orders/orders.controller.ts\n            \n            controller\n            OrdersController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/orders/providers/create-order.provider.ts\n            \n            injectable\n            CreateOrderProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/orders/providers/find-all-orders-for-user.provider.ts\n            \n            injectable\n            FindAllOrdersForUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/orders/providers/find-order-by-id.provider.ts\n            \n            injectable\n            FindOrderByIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/orders/providers/orders.service.ts\n            \n            injectable\n            OrdersService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/products/dtos/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/products/dtos/get-products.dto.ts\n            \n            class\n            GetProductsBaseDto\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/products/dtos/get-products.dto.ts\n            \n            class\n            GetProductsDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/products/dtos/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/product.entity.ts\n            \n            entity\n            Product\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/products/product.entity.ts\n            \n            class\n            Product\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/products/products.controller.ts\n            \n            controller\n            ProductsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/products/providers/create-product.provider.ts\n            \n            injectable\n            CreateProductProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/providers/delete-product.provider.ts\n            \n            injectable\n            DeleteProductProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/providers/find-all-products.provider.ts\n            \n            injectable\n            FindAllProductsProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/products/providers/find-product-by-id.provider.ts\n            \n            injectable\n            FindProductByIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/providers/products.service.ts\n            \n            injectable\n            ProductsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/products/providers/update-product.provider.ts\n            \n            injectable\n            UpdateProductProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/seed-file.ts\n            \n            variable\n            seedProducts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/users/providers/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-user-by-email.provider.ts\n            \n            injectable\n            FindUserByEmailProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-user-by-id.provider.ts\n            \n            injectable\n            FindUserByIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (2/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            bcrypt : ^6.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            dotenv : ^17.2.3\n        \n            joi : ^18.0.1\n        \n            pg : ^8.16.3\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.27\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth-type.enum.ts)\n                        \n                        \n                            OrderStatus   (src/.../order-status.enum.ts)\n                        \n                        \n                            ProductCategory   (src/.../product-category.enum.ts)\n                        \n                        \n                            Role   (src/.../role-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/auth-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n    src/orders/enums/order-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 CONFIRMED\n                            \n                        \n                        \n                            \n                                Value : confirmed\n                            \n                        \n                        \n                            \n                                 SHIPPED\n                            \n                        \n                        \n                            \n                                Value : shipped\n                            \n                        \n                        \n                            \n                                 DELIVERED\n                            \n                        \n                        \n                            \n                                Value : delivered\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n    src/products/enums/product-category.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ProductCategory\n                    \n                \n                        \n                            \n                                 UTENSILS\n                            \n                        \n                        \n                            \n                                Value : Utensils\n                            \n                        \n                        \n                            \n                                 STORAGE\n                            \n                        \n                        \n                            \n                                Value : Storage\n                            \n                        \n                        \n                            \n                                 DRINKWARE\n                            \n                        \n                        \n                            \n                                Value : Drinkware\n                            \n                        \n                        \n                            \n                                 CLEANING\n                            \n                        \n                        \n                            \n                                Value : Cleaning\n                            \n                        \n                        \n                            \n                                 BAKING\n                            \n                        \n                        \n                            \n                                Value : Baking\n                            \n                        \n                        \n                            \n                                 CUTTING\n                            \n                        \n                        \n                            \n                                Value : Cutting\n                            \n                        \n                        \n                            \n                                 SERVWARE\n                            \n                        \n                        \n                            \n                                Value : Serveware\n                            \n                        \n            \n        \n\n    src/auth/enums/role-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CartModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OrdersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CartModule\n\n\n\ncluster_CartModule_imports\n\n\n\ncluster_CartModule_exports\n\n\n\ncluster_CartModule_providers\n\n\n\ncluster_OrdersModule\n\n\n\ncluster_OrdersModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_exports\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nCartModule\n\nCartModule\n\n\n\nOrdersModule\n\nOrdersModule\n\nOrdersModule -->\n\nCartModule->OrdersModule\n\n\n\nAppModule -->\n\nCartModule->AppModule\n\n\n\n\n\nCartService \n\nCartService \n\nCartService  -->\n\nCartModule->CartService \n\n\n\nAppModule -->\n\nOrdersModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nCartModule -->\n\nProductsModule->CartModule\n\n\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nProductsService \n\nProductsService \n\nProductsService  -->\n\nProductsModule->ProductsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nCartModule -->\n\nUsersModule->CartModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\nProduct\n\nProduct\n\nCartModule -->\n\nProduct->CartModule\n\n\n\n\n\nAddToCartProvider\n\nAddToCartProvider\n\nCartModule -->\n\nAddToCartProvider->CartModule\n\n\n\n\n\nCartService\n\nCartService\n\nCartModule -->\n\nCartService->CartModule\n\n\n\n\n\nGetCartProvider\n\nGetCartProvider\n\nCartModule -->\n\nGetCartProvider->CartModule\n\n\n\n\n\nUpdateCartItemProvider\n\nUpdateCartItemProvider\n\nCartModule -->\n\nUpdateCartItemProvider->CartModule\n\n\n\n\n\nCreateOrderProvider\n\nCreateOrderProvider\n\nOrdersModule -->\n\nCreateOrderProvider->OrdersModule\n\n\n\n\n\nFindAllOrdersForUserProvider\n\nFindAllOrdersForUserProvider\n\nOrdersModule -->\n\nFindAllOrdersForUserProvider->OrdersModule\n\n\n\n\n\nFindOrderByIdProvider\n\nFindOrderByIdProvider\n\nOrdersModule -->\n\nFindOrderByIdProvider->OrdersModule\n\n\n\n\n\nOrdersService\n\nOrdersService\n\nOrdersModule -->\n\nOrdersService->OrdersModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nProductsModule -->\n\nPaginationModule->ProductsModule\n\n\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nCreateProductProvider\n\nCreateProductProvider\n\nProductsModule -->\n\nCreateProductProvider->ProductsModule\n\n\n\n\n\nDeleteProductProvider\n\nDeleteProductProvider\n\nProductsModule -->\n\nDeleteProductProvider->ProductsModule\n\n\n\n\n\nFindAllProductsProvider\n\nFindAllProductsProvider\n\nProductsModule -->\n\nFindAllProductsProvider->ProductsModule\n\n\n\n\n\nFindProductByIdProvider\n\nFindProductByIdProvider\n\nProductsModule -->\n\nFindProductByIdProvider->ProductsModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\nUpdateProductProvider\n\nUpdateProductProvider\n\nProductsModule -->\n\nUpdateProductProvider->ProductsModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindUserByEmailProvider\n\nFindUserByEmailProvider\n\nUsersModule -->\n\nFindUserByEmailProvider->UsersModule\n\n\n\n\n\nFindUserByIdProvider\n\nFindUserByIdProvider\n\nUsersModule -->\n\nFindUserByIdProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    27 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../active-user.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.constant.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constant.ts)\n                        \n                        \n                            Roles   (src/.../role.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../role.constant.ts)\n                        \n                        \n                            seedProducts   (src/.../seed-file.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorator/active-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof ActiveUserData | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user: ActiveUserData = request[REQUEST_USER_KEY];\n\n    return field ? user?.[field] : user;\n  },\n)\n                    \n                \n\n            \n                \n                    Custom param decorator for the active user\n\n                \n            \n\n        \n    \n\n    src/auth/decorator/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) =>\n  SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n            \n                \n                    decorator for guarding user authentication\n\n                \n            \n\n        \n    \n\n    src/auth/constants/auth.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n            \n                \n                    constant for auth type\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n            \n                \n                    constant for request user\n\n                \n            \n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n            \n                \n                    app environment\n\n                \n            \n\n        \n    \n\n    src/auth/decorator/role.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n            \n                \n                    decoraror for gaurding the user roles\n\n                \n            \n\n        \n    \n\n    src/auth/constants/role.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n            \n                \n                    constant for the roles\n\n                \n            \n\n        \n    \n\n    src/seed-file.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        seedProducts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  // Utensils (6 products)\n  {\n    name: 'Bamboo Cutlery Set',\n    category: 'Utensils',\n    description:\n      'Sustainable fork, knife, spoon set crafted from premium bamboo. This eco-friendly cutlery eliminates the need for single-use plastic utensils while providing durability and style. Perfect for everyday meals, picnics, or travel, each piece is naturally antibacterial and lightweight. The smooth finish ensures comfortable handling, and the set comes with a convenient carrying pouch. Make a positive environmental impact with zero plastic waste.',\n    price: 12.0,\n    stock: 50,\n    imageUrl: 'https://m.media-amazon.com/images/I/81jBfaLlwBL.jpg',\n  },\n  {\n    name: 'Reusable Silicone Spatulas',\n    category: 'Utensils',\n    description:\n      'Durable, heat-resistant spatulas made from premium food-grade silicone that can withstand temperatures up to 450°F. These flexible spatulas glide smoothly across all cookware surfaces without scratching, making them ideal for non-stick pans. The ergonomic handles provide a comfortable grip during extended cooking sessions. Easy to clean and dishwasher safe, these spatulas are built to last for years while reducing kitchen waste.',\n    price: 8.0,\n    stock: 30,\n    imageUrl: 'https://m.media-amazon.com/images/I/51vq0IpXquL.jpg',\n  },\n  {\n    name: 'Wooden Spoons Set',\n    category: 'Utensils',\n    description: `Handcrafted from FSC-certified sustainable wood, this beautiful spoon set is perfect for non-stick cookware and delicate surfaces. Each spoon is carefully sanded to a smooth finish and treated with natural oils for longevity. The natural wood won't conduct heat like metal utensils, protecting your hands during cooking. These spoons won't scratch your expensive cookware and add a rustic, warm aesthetic to your kitchen.`,\n    price: 5.0,\n    stock: 75,\n    imageUrl: 'https://m.media-amazon.com/images/I/413kbQCe+cL.jpg',\n  },\n  {\n    name: 'Bamboo Whisk',\n    category: 'Utensils',\n    description: `Eco-friendly whisk expertly crafted from natural bamboo for whipping eggs, sauces, and dressings without synthetic bristles. The flexible bamboo tines create the perfect texture for your culinary creations while being gentle on your mixing bowls. This traditional tool is naturally antimicrobial and won't scratch or damage cookware. Lightweight yet sturdy, it offers superior control and comfort during food preparation.`,\n    price: 6.5,\n    stock: 40,\n    imageUrl: 'https://m.media-amazon.com/images/I/81Vm-oZEOzL.jpg',\n  },\n  {\n    name: 'Silicone Tongs',\n    category: 'Utensils',\n    description:\n      'BPA-free silicone-coated tongs designed for safe flipping, gripping, and serving of all your favorite foods. The heat-resistant silicone tips protect non-stick surfaces while providing a secure grip on everything from delicate fish to heavy steaks. Featuring a locking mechanism for compact storage and an ergonomic design for comfortable handling. These versatile tongs are dishwasher safe and built to withstand daily kitchen demands.',\n    price: 7.5,\n    stock: 55,\n    imageUrl:\n      'https://images-na.ssl-images-amazon.com/images/I/61S5b8hwuIL.jpg',\n  },\n  {\n    name: 'Coconut Shell Ladle',\n    category: 'Utensils',\n    description:\n      'Hand-carved from natural coconut shell, this unique ladle is fully biodegradable and brings tropical elegance to your kitchen. Each piece is individually crafted, making every ladle one-of-a-kind with its own natural grain patterns. The smooth polished interior is perfect for serving soups, stews, and sauces. When its useful life ends, simply compost it to return nutrients to the earth. A beautiful blend of functionality and sustainability.',\n    price: 9.0,\n    stock: 35,\n    imageUrl: 'https://m.media-amazon.com/images/I/71TjVJFNNkL.jpg',\n  },\n  // Storage (6 products)\n  {\n    name: 'Beeswax Wraps Pack',\n    category: 'Storage',\n    description:\n      'Natural beeswax-coated organic cotton wraps that serve as a reusable, breathable alternative to plastic wrap and aluminum foil. The warmth of your hands molds these wraps around food containers, bowls, or directly around produce, creating a natural seal. Infused with jojoba oil and tree resin for antibacterial properties, these wraps keep food fresh while being gentle on the environment. Simply wash with cool water and reuse hundreds of times.',\n    price: 10.0,\n    stock: 60,\n    imageUrl: 'https://m.media-amazon.com/images/I/81jwx-bnh4L.jpg',\n  },\n  {\n    name: 'Glass Jars with Lids',\n    category: 'Storage',\n    description:\n      'Premium borosilicate glass jars designed for dry goods storage with elegant airtight bamboo lids. The crystal-clear glass lets you easily identify contents while the eco-friendly bamboo lids feature silicone seals to keep food fresh and protected from moisture and pests. These versatile jars are perfect for flour, sugar, coffee, pasta, grains, and more. Stackable design maximizes pantry space while adding a modern, organized aesthetic to your kitchen.',\n    price: 15.0,\n    stock: 25,\n    imageUrl: 'https://m.media-amazon.com/images/I/712zqjxfUYL.jpg',\n  },\n  {\n    name: 'Bamboo Food Containers',\n    category: 'Storage',\n    description:\n      'Leak-proof containers made from natural bamboo fiber that are microwave-safe and completely compostable at end of life. These lightweight yet durable containers feature secure snap-lock lids that prevent spills during transport. Ideal for meal prep, leftovers, or on-the-go lunches, they can safely go from fridge to microwave to dishwasher. The natural bamboo material is free from harmful chemicals and provides an eco-conscious alternative to plastic containers.',\n    price: 18.0,\n    stock: 35,\n    imageUrl: 'https://m.media-amazon.com/images/I/91qleaoa2gL.jpg',\n  },\n  {\n    name: 'Silicone Food Bags',\n    category: 'Storage',\n    description:\n      'Reusable zip-lock bags crafted from platinum-grade silicone that are freezer-safe, microwave-safe, and dishwasher-safe. These versatile bags replace thousands of single-use plastic bags over their lifetime while keeping food fresh and organized. The airtight seal locks in freshness and prevents freezer burn, making them perfect for marinating, sous vide cooking, storing leftovers, or packing snacks. Available in multiple sizes to accommodate all your storage needs.',\n    price: 9.5,\n    stock: 45,\n    imageUrl:\n      'https://m.media-amazon.com/images/S/aplus-media/sc/478fe6bb-d72b-4636-a526-c3c01475d03b.__CR38,0,1872,1872_PT0_SX300_V1___.jpeg',\n  },\n  {\n    name: 'Stainless Steel Canisters',\n    category: 'Storage',\n    description:\n      'Rust-proof stainless steel canisters with sustainable cork seals that provide airtight storage for dry goods. The high-quality brushed stainless steel construction ensures long-lasting durability while the natural cork lids add a touch of organic warmth. These canisters protect contents from light, moisture, and air to maintain maximum freshness. Perfect for storing coffee, tea, flour, sugar, and other pantry staples. Their sleek design complements any kitchen décor.',\n    price: 22.0,\n    stock: 20,\n    imageUrl: 'https://m.media-amazon.com/images/I/71-2WuLATJL.jpg',\n  },\n  {\n    name: 'Fabric Produce Bags',\n    category: 'Storage',\n    description:\n      'Organic cotton mesh bags designed for fresh produce shopping and storage, offering a washable and breathable alternative to plastic produce bags. The lightweight mesh allows produce clerks to easily see and weigh contents while the drawstring closure keeps items secure. These bags help extend the life of fruits and vegetables by allowing air circulation that prevents premature spoiling. Machine washable and built to last through countless shopping trips and years of use.',\n    price: 6.0,\n    stock: 80,\n    imageUrl:\n      'https://images-na.ssl-images-amazon.com/images/I/818-Z3XBeKL.jpg',\n  },\n  // Drinkware (6 products)\n  {\n    name: 'Stainless Steel Tumbler',\n    category: 'Drinkware',\n    description: `Insulated 20oz tumbler with double-wall vacuum insulation that keeps drinks hot for up to 6 hours or cold for 24 hours. Made from premium BPA-free stainless steel that won't retain flavors or odors. The powder-coated exterior provides a secure grip and comes in various colors to match your style. Features a spill-resistant lid perfect for commuting, outdoor activities, or everyday hydration. Eliminates the need for disposable cups while maintaining perfect beverage temperatures.`,\n    price: 20.0,\n    stock: 20,\n    imageUrl: 'https://m.media-amazon.com/images/I/71o0O8PPFvL.jpg',\n  },\n  {\n    name: 'Bamboo Straws Pack (10-pack)',\n    category: 'Drinkware',\n    description: `Reusable bamboo straws with included cleaning brush that are naturally antibacterial and biodegradable. Each straw is individually crafted from sustainable bamboo, making them smooth, strong, and safe for hot and cold beverages. The 10-pack provides enough straws for the whole family or for keeping extras at work and in your car. Unlike metal straws, these won't conduct temperature or leave a metallic taste. Includes a specialized brush for easy cleaning.`,\n    price: 4.0,\n    stock: 100,\n    imageUrl: 'https://m.media-amazon.com/images/I/81DLAoMW94L.jpg',\n  },\n  {\n    name: 'Reusable Coffee Filters',\n    category: 'Drinkware',\n    description:\n      'Gold-tone mesh filters designed for pour-over coffee that dramatically reduce paper waste while producing a richer, fuller-bodied brew. The ultra-fine mesh allows coffee oils to pass through while filtering out grounds, resulting in superior flavor compared to paper filters. Easy to clean and dishwasher safe, these filters last for years and pay for themselves quickly. Compatible with most standard pour-over coffee makers and drippers. Enjoy better coffee while protecting the environment.',\n    price: 7.0,\n    stock: 55,\n    imageUrl:\n      'https://images-na.ssl-images-amazon.com/images/I/519TwMWO2TL.jpg',\n  },\n  {\n    name: 'Glass Water Bottle',\n    category: 'Drinkware',\n    description: `32oz borosilicate glass bottle featuring a protective silicone sleeve and sustainable bamboo cap for stylish hydration on the go. The high-quality borosilicate glass is thermal shock resistant and won't leach chemicals or retain flavors like plastic bottles. The non-slip silicone sleeve provides grip and impact protection while the wide mouth opening makes cleaning and adding ice easy. Perfect for water, smoothies, or infused beverages. Stay hydrated sustainably with this elegant bottle.`,\n    price: 16.0,\n    stock: 15,\n    imageUrl: 'https://m.media-amazon.com/images/I/81RwUrFW-PL.jpg',\n  },\n  {\n    name: 'Ceramic Mug Set',\n    category: 'Drinkware',\n    description:\n      'Hand-thrown ceramic mugs crafted from recycled clay by skilled artisans, bringing unique character to your daily coffee or tea ritual. Each mug is microwave and dishwasher safe while retaining heat exceptionally well. The ergonomic handle and smooth rim provide comfortable sipping, and the generous capacity is perfect for your favorite hot beverages. The natural clay composition and lead-free glaze ensure safe, toxin-free drinking. Every piece is slightly unique, adding artisanal charm to your kitchen.',\n    price: 14.0,\n    stock: 40,\n    imageUrl: 'https://m.media-amazon.com/images/I/61a2v30mxOL.jpg',\n  },\n  {\n    name: 'Collapsible Silicone Cup',\n    category: 'Drinkware',\n    description:\n      'Portable 12oz cup that folds completely flat for easy storage in pockets, purses, or backpacks, made from food-safe silicone. Expands instantly when needed and collapses to less than an inch thick when empty. Perfect for travelers, hikers, festival-goers, or anyone seeking to reduce single-use cup waste. The durable silicone is heat-resistant and can handle both hot and cold beverages. Includes a secure lid to prevent spills during transport.',\n    price: 11.0,\n    stock: 65,\n    imageUrl: 'https://m.media-amazon.com/images/I/51abhIpPj4L.jpg',\n  },\n  // Cleaning (5 products)\n  {\n    name: 'Eco Sponge Set',\n    category: 'Cleaning',\n    description:\n      'Plant-based cellulose sponges that are completely biodegradable and feature natural scrubbing power without microplastics. These highly absorbent sponges expand when wet and tackle tough kitchen messes with ease. The porous structure creates rich lather with minimal soap while the textured surface provides excellent scrubbing action. Unlike synthetic sponges, these break down naturally at end of life and can be composted. Dries quickly between uses to resist odors and bacterial growth.',\n    price: 5.5,\n    stock: 90,\n    imageUrl:\n      'https://plantishfuture.com/cdn/shop/products/plantish-future-set-of-2-eco-sponge_2048x2048.webp?v=1712813576',\n  },\n  {\n    name: 'Bamboo Scrub Brush',\n    category: 'Cleaning',\n    description: `Natural fiber bristles mounted on a sustainable bamboo handle create this effective and fully compostable scrub brush. The medium-firm bristles are tough on stuck-on food and grime but gentle enough for most cookware surfaces. The ergonomic bamboo handle provides a comfortable grip even when wet, and the natural materials won't harbor bacteria like plastic brushes. When worn out, the entire brush can be composted, completing a zero-waste cycle.`,\n    price: 4.5,\n    stock: 70,\n    imageUrl: 'https://m.media-amazon.com/images/I/71TTs6crS3L.jpg',\n  },\n  {\n    name: 'Coconut Coir Dish Brush',\n    category: 'Cleaning',\n    description:\n      'Stiff coir fibers harvested from coconut husks provide powerful scrubbing action for tough grease and baked-on food removal. This renewable resource creates a naturally durable brush that excels at cleaning pots, pans, and dishes without scratching. The sturdy wooden handle offers excellent control and comfort during cleaning tasks. The coarse fibers are naturally resistant to bacteria and dry quickly to prevent mildew. An effective, sustainable solution for your toughest kitchen cleaning challenges.',\n    price: 6.0,\n    stock: 50,\n    imageUrl: 'https://m.media-amazon.com/images/I/41w9Dl8KE3L.jpg',\n  },\n  {\n    name: 'Reusable Microfiber Cloths',\n    category: 'Cleaning',\n    description:\n      'Washable microfiber cloths engineered to trap dust, dirt, and spills effectively without the need for harsh chemicals. The ultra-fine fibers create millions of tiny hooks that grab and hold particles, making cleaning more efficient with just water. These versatile cloths are safe for all surfaces including glass, stainless steel, wood, and countertops. Machine washable hundreds of times, replacing thousands of paper towels over their lifetime. Lint-free and streak-free results every time.',\n    price: 8.0,\n    stock: 85,\n    imageUrl: 'https://m.media-amazon.com/images/I/71LXSAJGCGL.jpg',\n  },\n  {\n    name: 'Wooden Bottle Brush',\n    category: 'Cleaning',\n    description:\n      'FSC-certified wood handle paired with natural plant-based bristles for deep cleaning water bottles, baby bottles, and narrow containers. The long handle reaches to the bottom of tall bottles while the firm bristles scrub away residue and stains. The brush head is perfectly sized for most bottle openings and the bristles are gentle enough not to scratch glass or stainless steel. Dries quickly on its own and the natural materials resist bacterial growth.',\n    price: 7.0,\n    stock: 60,\n    imageUrl: 'https://m.media-amazon.com/images/I/51a6zTwcjEL.jpg',\n  },\n  // Baking (5 products)\n  {\n    name: 'Silicone Baking Mat',\n    category: 'Baking',\n    description:\n      'Non-stick, reusable mat that completely replaces parchment paper and reduces kitchen waste while providing superior baking results. Made from food-grade silicone that withstands temperatures from -40°F to 480°F, this mat ensures even heat distribution for perfectly baked goods every time. The smooth surface releases cookies, pastries, and roasted vegetables effortlessly without oil or spray. Simply rinse clean or toss in the dishwasher. One mat replaces thousands of sheets of parchment paper.',\n    price: 13.0,\n    stock: 45,\n    imageUrl: 'https://m.media-amazon.com/images/I/71g5uNliHRL.jpg',\n  },\n  {\n    name: 'Wooden Rolling Pin',\n    category: 'Baking',\n    description:\n      'Smooth FSC-certified beechwood rolling pin crafted for optimal dough preparation with consistent results. The natural wood surface prevents dough from sticking while maintaining the perfect amount of texture for easy rolling. The comfortable handles provide excellent control and even pressure distribution. Unlike marble or silicone pins, wood naturally absorbs moisture, preventing dough from becoming too sticky. This classic kitchen tool is durable enough to last generations with proper care.',\n    price: 10.0,\n    stock: 55,\n    imageUrl:\n      'https://images-na.ssl-images-amazon.com/images/I/51SrQbmNpEL.jpg',\n  },\n  {\n    name: 'Bamboo Pastry Board',\n    category: 'Baking',\n    description: `Portable bamboo board featuring engraved measurements and conversion charts for precise baking and dough work. The smooth, durable bamboo surface provides an ideal working area for rolling, kneading, and shaping dough. Built-in measurements eliminate the need for separate rulers or measuring tapes during recipe preparation. The lightweight design makes it easy to move around the kitchen, and the natural bamboo won't dull knives. Cleans easily and resists staining and odors.`,\n    price: 16.0,\n    stock: 30,\n    imageUrl:\n      'https://www.zulaykitchen.com/cdn/shop/files/Bamboo-Wooden-Cutting-Boards-3-Assorted-Sizes-Zulay-Kitchen-36125653336302.jpg?v=1750452777&width=2000',\n  },\n  {\n    name: 'Silicone Muffin Cups',\n    category: 'Baking',\n    description: `Food-grade silicone baking cups that are oven-safe up to 450°F and provide a reusable, eco-friendly alternative to paper liners. These flexible cups release baked goods easily without sticking or tearing, ensuring perfectly shaped muffins and cupcakes every time. The non-porous silicone won't absorb odors or flavors and cleans up quickly in the dishwasher. Use them for baking, freezing individual portions, or even as molds for jellies and candies. Available in vibrant colors that won't fade.`,\n    price: 9.0,\n    stock: 75,\n    imageUrl:\n      'https://images-na.ssl-images-amazon.com/images/I/61VGTeKVpqL.jpg',\n  },\n  {\n    name: 'Eco Cooling Rack',\n    category: 'Baking',\n    description: `Stainless steel rack featuring a sustainable bamboo frame that resists rust and provides excellent air circulation for cooling baked goods. The tight grid pattern prevents small cookies from falling through while allowing maximum airflow underneath. The bamboo frame stays cool to the touch and won't scratch countertops. Perfect for cooling cookies, cakes, breads, and roasted items, or use it as an elevated roasting rack in the oven. Stackable for efficient storage.`,\n    price: 12.5,\n    stock: 40,\n    imageUrl: 'https://m.media-amazon.com/images/I/81i+oawo9PL.jpg',\n  },\n  // Cutting (6 products)\n  {\n    name: 'Bamboo Cutting Board',\n    category: 'Cutting',\n    description: `Antibacterial bamboo cutting board that is naturally gentle on knives while providing a durable, eco-friendly food preparation surface. Bamboo is 16% harder than maple yet won't dull knife edges like plastic or glass boards. The natural silica content provides inherent antimicrobial properties that inhibit bacterial growth. Features a juice groove to catch liquids and prevent spills. Easy to maintain with occasional oiling, this board resists warping, cracking, and absorbing odors or stains.`,\n    price: 19.0,\n    stock: 25,\n    imageUrl: 'https://m.media-amazon.com/images/I/71HQaRZK7aL.jpg',\n  },\n  {\n    name: 'Eco Knife Set',\n    category: 'Cutting',\n    description:\n      'Professional-quality knives crafted from recycled stainless steel with ergonomic bamboo handles for comfort and sustainability. This comprehensive set includes chef knife, paring knife, utility knife, and bread knife to handle all your cutting needs. The high-carbon steel blades maintain their sharp edge longer and resist corrosion. The beautiful bamboo handles provide excellent grip and balance while adding natural elegance to your kitchen. Includes protective blade covers for safe storage.',\n    price: 28.0,\n    stock: 15,\n    imageUrl:\n      'https://images-na.ssl-images-amazon.com/images/I/713aghYBLjL.jpg',\n  },\n  {\n    name: 'Silicone Gripping Mat',\n    category: 'Cutting',\n    description:\n      'Non-slip mat designed to keep cutting boards stable during chopping and food preparation, preventing dangerous sliding and accidents. The textured silicone surface grips both the countertop and cutting board securely without adhesives. This versatile mat also works as a jar opener, protects surfaces from hot pots, and provides grip for mixing bowls. Rolls up compactly for drawer storage and is dishwasher safe for easy cleaning. Heat resistant up to 450°F.',\n    price: 11.0,\n    stock: 65,\n    imageUrl: 'https://m.media-amazon.com/images/I/61csYQGIRFL.jpg',\n  },\n  {\n    name: 'Wooden Salad Bowl',\n    category: 'Cutting',\n    description: `Acacia wood bowl that serves double duty for both prepping and serving fresh salads and side dishes. The natural wood grain adds rustic beauty to any table setting while the generous capacity accommodates family-sized portions. Acacia wood is naturally water-resistant and won't crack or split with proper care. The smooth interior is perfect for tossing salads without bruising delicate greens. Hand wash and occasionally oil to maintain the rich, warm finish for years of use.`,\n    price: 14.5,\n    stock: 35,\n    imageUrl: 'https://m.media-amazon.com/images/I/81S+ikiYxYL.jpg',\n  },\n  {\n    name: 'Herb Scissors',\n    category: 'Cutting',\n    description:\n      'Stainless steel scissors featuring five sharp blades that quickly chop fresh herbs directly over your dish with minimal effort. These specialized scissors eliminate the need for knives and cutting boards when working with delicate herbs like basil, cilantro, parsley, and chives. The multiple blades create uniform pieces and preserve herb oils that might be lost with traditional chopping methods. Includes a cleaning comb that slides between blades for easy cleanup. Dishwasher safe.',\n    price: 8.5,\n    stock: 80,\n    imageUrl:\n      'https://images-na.ssl-images-amazon.com/images/I/61bW3A5W0cL.jpg',\n  },\n  {\n    name: 'Peeler Set',\n    category: 'Cutting',\n    description:\n      'Ergonomic bamboo-handled peelers designed for effortless peeling of vegetables and fruits with minimal waste. The set includes both Y-peeler and straight peeler styles to accommodate different foods and preferences. Ultra-sharp stainless steel blades glide smoothly through tough skins while the soft-grip bamboo handles prevent hand fatigue during extended use. The swivel blades adjust to contours for efficient peeling. Built-in potato eye removers handle blemishes with ease.',\n    price: 7.0,\n    stock: 70,\n    imageUrl:\n      'https://i5.walmartimages.com/seo/Stainless-Steel-Potato-Peeler-Ultra-Sharp-Vegetable-Peeler-for-Kitchen-Ergonomic-Non-Slip-Handle-Fruit-Peeler_a69fddff-0ce2-42d7-93d3-58f4a6745939.4a0aae3c06dcdb4e3d94ae2cf91c1c3c.jpeg?odnHeight=576&odnWidth=576&odnBg=FFFFFF',\n  },\n  // Serveware (6 products)\n  {\n    name: 'Bamboo Serving Platter',\n    category: 'Serveware',\n    description: `Elegant bamboo platter perfect for presenting appetizers, main courses, cheese, charcuterie, or desserts with style. The smooth, food-safe finish highlights the natural grain patterns unique to each piece. This generously sized platter accommodates party portions while the raised edges prevent items from sliding off. Bamboo naturally resists bacteria and doesn't absorb odors or stains like traditional wood. The lightweight construction makes serving and passing easy. A beautiful centerpiece for any gathering.`,\n    price: 17.0,\n    stock: 40,\n    imageUrl: 'https://m.media-amazon.com/images/I/71Eg5IYOVeL.jpg',\n  },\n  {\n    name: 'Compostable Napkins Pack',\n    category: 'Serveware',\n    description:\n      'Unbleached bamboo fiber napkins that are fully compostable and break down naturally without leaving harmful residues. These soft, absorbent napkins are free from chlorine, dyes, and fragrances, making them safe for sensitive skin and the environment. The natural bamboo fibers are naturally antimicrobial and stronger than traditional paper napkins, even when wet. Perfect for everyday meals, parties, or picnics. Each pack contains enough napkins for numerous gatherings while reducing your environmental footprint.',\n    price: 5.0,\n    stock: 100,\n    imageUrl: 'https://m.media-amazon.com/images/I/71phF6Am0+L.jpg',\n  },\n  {\n    name: 'Ceramic Serving Bowl',\n    category: 'Serveware',\n    description:\n      'Glazed ceramic bowl sourced from sustainable clay deposits and finished with lead-free, food-safe glazes. The smooth interior prevents food from sticking while the elegant exterior adds sophistication to any table. This versatile bowl works beautifully for serving salads, pasta, rice dishes, or fruit, and transitions seamlessly from oven to table. The substantial weight provides stability, and the ceramic material retains temperature well. Microwave and dishwasher safe for convenient everyday use.',\n    price: 21.0,\n    stock: 20,\n    imageUrl: 'https://m.media-amazon.com/images/I/71WEJvgP1fL.jpg',\n  },\n  {\n    name: 'Wooden Cheese Board',\n    category: 'Serveware',\n    description: `Olive wood board treated with natural oils to enhance its inherent beauty and water resistance, perfect for cheese service and entertaining. The unique grain patterns and warm honey tones make each board a one-of-a-kind piece of functional art. Olive wood is naturally dense and non-porous, resisting bacterial growth and odor absorption. The smooth surface won't dull knives and provides an ideal backdrop for artisan cheeses, fruits, and accompaniments. Includes a branded edge for hanging display.`,\n    price: 24.0,\n    stock: 18,\n    imageUrl: 'https://m.media-amazon.com/images/I/61wqNrbzqLL.jpg',\n  },\n  {\n    name: 'Silicone Trivet Set',\n    category: 'Serveware',\n    description: `Heat-resistant trivets made from premium silicone that protect tables and countertops from hot dishes, pots, and pans up to 450°F. The flexible material conforms to uneven pot bottoms while the raised pattern allows air circulation and prevents heat transfer. These trivets are also slip-resistant, keeping hot items securely in place. Easy to clean and dishwasher safe, they won't stain, crack, or harbor bacteria like traditional cork or fabric trivets. Folds or hangs for space-saving storage.`,\n    price: 10.5,\n    stock: 50,\n    imageUrl: 'https://m.media-amazon.com/images/I/618GM-FbEhL.jpg',\n  },\n  {\n    name: 'Bamboo Coasters (Set of 6)',\n    category: 'Serveware',\n    description:\n      'Engraved bamboo coasters that are naturally absorbent and protect furniture surfaces from water rings and heat marks with style. The dense bamboo material quickly absorbs condensation from cold drinks while the smooth finish prevents scratching delicate surfaces. Each coaster features tasteful engravings that add visual interest and help grip glasses. The natural antimicrobial properties of bamboo prevent mold and mildew growth. Includes a holder for convenient storage and display when not in use.',\n    price: 9.0,\n    stock: 75,\n    imageUrl: 'https://m.media-amazon.com/images/I/71ifR2n807L.jpg',\n  },\n]\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
