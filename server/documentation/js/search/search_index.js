var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.378,1,2.693]],["body/guards/AccessTokenGuard.html",[0,3.027,1,3.428,2,2.611,3,0.132,4,0.119,5,0.119,6,5.603,7,4.645,8,3.149,9,0.801,10,4.383,11,4.934,12,0.218,13,0.88,14,1.562,15,5.055,16,1.401,17,5.108,18,1.376,19,3.149,20,6.439,21,5.603,22,5.603,23,0.51,24,3.616,25,1.058,26,0.014,27,0.808,28,0.381,29,0.743,30,4.012,31,4.047,32,3.616,33,2.74,34,4.447,35,1.426,36,3.027,37,1.108,38,1.445,39,2.869,40,2.592,41,4.447,42,3.428,43,4.447,44,5.108,45,4.007,46,3.616,47,5.108,48,5.108,49,0.641,50,3.027,51,0.311,52,3.724,53,0.372,54,3.974,55,0.435,56,2.274,57,2.427,58,2.427,59,2.611,60,3.616,61,2.841,62,3.149,63,0.132,64,0.038,65,1.927,66,1.954,67,1.054,68,2.427,69,2.611,70,3.149,71,1.64,72,3.149,73,3.616,74,2.175,75,1.727,76,2.143,77,4.012,78,0.988,79,3.616,80,3.616,81,3.149,82,4.447,83,4.447,84,3.212,85,4.447,86,4.012,87,4.447,88,4.447,89,4.447,90,2.143,91,4.447,92,0.913,93,3.616,94,0.008,95,0.008]],["title/interfaces/ActiveUserData.html",[96,2.037,97,2.693]],["body/interfaces/ActiveUserData.html",[3,0.201,4,0.181,5,0.181,9,1.218,12,0.331,26,0.014,28,0.468,35,1.795,49,1.025,63,0.201,77,4.318,94,0.011,95,0.011,96,3.418,97,4.52,98,3.689,99,4.786,100,4.786,101,4.786,102,1.84,103,3.839,104,3.672,105,6.608,106,1.974]],["title/injectables/AddToCartProvider.html",[53,0.292,107,2.524]],["body/injectables/AddToCartProvider.html",[3,0.16,4,0.144,5,0.144,12,0.264,13,1.004,14,1.727,16,1.441,18,1.246,23,0.502,25,1.041,26,0.014,27,0.795,28,0.375,29,0.731,35,0.971,37,0.755,38,1.649,49,0.822,51,0.346,53,0.424,54,2.942,55,0.527,63,0.16,64,0.047,67,1.441,71,1.117,78,1.197,94,0.009,95,0.009,107,3.665,108,1.117,109,5.7,110,3.443,111,5.143,112,4.383,113,4.427,114,4.276,115,5.143,116,2.971,117,4.276,118,4.383,119,3.443,120,4.793,121,4.383,122,2.587,123,4.383,124,2.031,125,3.366,126,3.164,127,3.443,128,1.197,129,2.123,130,2.224,131,1.946,132,1.538,133,3.164,134,3.816,135,1.974,136,1.649,137,3.105,138,2.459,139,2.942,140,3.443,141,1.866,142,3.816,143,4.383,144,4.383,145,3.816]],["title/controllers/AppController.html",[146,1.641,147,2.897]],["body/controllers/AppController.html",[3,0.213,4,0.191,5,0.191,12,0.35,13,1.2,23,0.501,26,0.014,37,1.001,49,0.875,51,0.308,55,0.699,63,0.213,64,0.062,67,1.2,92,1.039,94,0.011,95,0.011,146,2.849,147,5.03,148,2.581,149,5.062,150,6.735,151,1.896,152,5.814,153,4.692,154,5.062,155,5.062,156,5.814]],["title/modules/AppModule.html",[157,1.641,158,2.897]],["body/modules/AppModule.html",[1,3.478,3,0.135,4,0.121,5,0.121,7,2.665,26,0.014,28,0.237,39,2.511,40,2.63,51,0.36,52,2.321,55,0.444,56,2.321,57,2.477,59,2.665,63,0.135,64,0.039,71,0.941,92,0.66,94,0.008,95,0.008,132,1.295,147,4.323,148,2.3,153,4.46,154,3.214,157,2.449,158,5.786,159,1.873,160,1.873,161,2.071,162,2.071,163,1.873,164,3.359,165,2.071,166,3.214,167,3.214,168,3.214,169,4.46,170,4.46,171,4.759,172,4.46,173,4.203,174,2.907,175,1.967,176,1.873,177,2.9,178,3.766,179,3.691,180,4.512,181,5.654,182,5.182,183,3.691,184,5.182,185,3.691,186,5.182,187,3.691,188,2.477,189,3.691,190,3.691,191,5.988,192,5.182,193,2.477,194,3.741,195,3.691,196,2.9,197,3.691,198,3.741,199,3.691,200,3.741,201,3.691,202,3.691,203,3.214,204,3.691,205,3.214,206,3.691,207,3.691,208,3.691,209,3.214,210,3.214,211,4.704,212,4.512,213,3.691,214,3.691,215,3.691,216,3.691,217,3.691,218,3.691,219,3.691,220,3.691,221,3.691,222,3.691,223,3.691,224,3.691,225,3.691,226,3.691,227,3.691,228,3.691,229,3.691,230,1.788,231,3.691,232,2.9,233,3.691,234,2.188,235,3.691,236,3.691,237,3.214,238,3.691,239,3.691,240,3.214,241,3.214,242,4.704,243,5.214]],["title/injectables/AppService.html",[53,0.292,153,2.524]],["body/injectables/AppService.html",[3,0.219,4,0.197,5,0.197,12,0.36,13,1.22,23,0.515,26,0.013,37,1.03,49,0.889,51,0.264,53,0.516,55,0.719,63,0.219,64,0.064,92,1.068,94,0.012,95,0.012,108,1.523,150,6.798,153,4.456,244,5.206,245,5.979,246,5.979,247,5.979]],["title/controllers/AuthController.html",[146,1.641,248,2.897]],["body/controllers/AuthController.html",[3,0.116,4,0.104,5,0.104,9,1.661,10,4.12,11,4.372,12,0.19,13,0.798,16,0.652,18,0.675,23,0.272,25,0.564,26,0.014,27,0.431,28,0.488,29,0.396,35,1.712,37,1.158,39,2.244,43,4.033,49,0.759,50,1.871,51,0.307,55,0.38,63,0.116,64,0.034,66,0.959,67,0.652,68,3.109,92,0.564,94,0.008,95,0.008,102,1.266,103,3.583,104,2.147,135,0.893,137,1.682,146,2.632,148,1.402,151,1.03,175,2.468,230,3.633,248,3.344,249,2.749,250,2.119,251,3.45,252,3.344,253,4.748,254,4.033,255,4.033,256,4.632,257,5.148,258,4.033,259,4.632,260,4.632,261,3.639,262,4.632,263,4.632,264,4.632,265,2.336,266,3.639,267,2.48,268,4.484,269,4.632,270,3.157,271,6.044,272,5.019,273,3.157,274,5.857,275,3.639,276,3.157,277,4.033,278,3.109,279,5.263,280,3.157,281,3.682,282,3.639,283,4.033,284,3.157,285,4.033,286,3.639,287,4.632,288,3.961,289,4.632,290,4.632,291,3.109,292,4.515,293,4.033,294,2.119,295,2.749,296,1.986,297,2.119,298,3.45,299,2.749,300,4.632,301,3.639,302,3.157,303,3.639,304,3.639,305,2.749,306,1.682,307,3.157,308,1.986,309,3.157,310,2.745,311,2.48,312,2.48,313,3.157,314,3.157,315,3.157,316,2.48,317,3.157,318,2.48,319,3.157,320,1.986,321,2.48,322,4.372,323,2.48,324,1.53,325,2.48,326,3.157,327,2.749,328,4.632,329,2.48,330,3.157,331,2.119,332,1.871,333,2.749,334,1.871,335,2.749,336,2.48,337,2.48,338,2.119,339,1.194,340,2.119,341,1.682,342,3.157,343,3.157]],["title/modules/AuthModule.html",[157,1.641,169,2.524]],["body/modules/AuthModule.html",[3,0.169,4,0.152,5,0.152,26,0.014,51,0.356,55,0.557,56,2.911,57,3.106,59,3.341,63,0.169,64,0.049,68,3.106,69,3.341,94,0.01,95,0.01,148,2.681,157,3.024,159,2.349,160,2.349,161,2.596,162,2.596,163,2.349,164,3.772,165,3.772,169,5.063,173,3.58,174,3.389,175,2.466,176,2.349,178,2.911,180,4.03,205,4.03,240,4.03,241,4.03,242,3.636,243,4.03,248,4.855,298,4.769,299,4.03,344,4.03,345,4.03,346,4.03,347,4.394,348,4.769,349,4.769,350,4.628,351,4.361,352,4.628,353,4.03,354,4.03,355,4.628,356,4.361,357,4.628,358,4.628,359,4.03,360,4.628,361,4.03,362,4.628,363,4.628,364,4.03]],["title/injectables/AuthService.html",[53,0.292,298,2.524]],["body/injectables/AuthService.html",[3,0.185,4,0.166,5,0.166,10,3.787,12,0.304,13,1.1,14,1.849,16,1.043,18,1.367,23,0.55,25,1.142,26,0.014,27,0.872,28,0.411,29,0.802,33,2.721,35,1.416,37,1.1,51,0.31,53,0.465,55,0.608,63,0.185,64,0.054,66,1.534,67,1.043,78,1.38,92,0.903,94,0.01,95,0.01,108,1.287,135,1.43,141,2.151,257,4.614,265,2.985,266,5.02,267,5.02,268,4.881,272,4.614,288,4.614,298,4.019,311,3.969,312,3.969,349,4.881,359,4.399,365,4.399,366,5.052,367,5.052,368,5.052,369,5.564,370,2.994,371,5.052]],["title/guards/AuthenticationGuard.html",[0,2.378,198,2.897]],["body/guards/AuthenticationGuard.html",[0,3.474,1,4.94,2,5.055,3,0.13,4,0.117,5,0.117,7,2.563,9,0.786,10,3.474,11,2.232,12,0.214,13,0.868,14,1.547,15,5.882,16,1.446,18,1.365,23,0.434,25,0.901,26,0.014,27,0.8,28,0.377,29,0.633,30,3.96,31,4.013,33,2.147,35,1.414,36,3.474,37,1.009,38,1.426,39,3.092,40,2.558,42,3.383,51,0.31,53,0.367,54,3.383,55,0.427,62,3.091,63,0.13,64,0.075,65,1.891,66,1.78,67,1.446,71,1.626,74,2.147,75,1.2,76,2.104,78,0.97,90,2.104,92,0.634,94,0.008,95,0.008,101,4.389,102,0.97,135,1.426,193,2.382,198,3.639,203,3.091,251,4.013,253,3.96,308,2.232,310,2.104,372,3.091,373,5.041,374,5.104,375,5.041,376,3.091,377,6.611,378,3.55,379,3.55,380,5.041,381,3.96,382,2.788,383,2.563,384,2.563,385,2.788,386,2.563,387,3.091,388,2.988,389,3.091,390,2.563,391,3.091,392,2.558,393,5.041,394,3.091,395,4.605,396,3.091,397,3.55,398,3.55,399,3.091,400,3.55,401,2.232,402,3.091,403,5.041,404,3.091,405,2.104,406,3.091,407,3.55,408,3.091,409,3.091,410,3.55,411,1.72,412,3.55,413,3.55,414,3.288,415,3.091,416,3.091,417,3.55,418,3.55,419,3.55,420,5.041]],["title/injectables/BcryptProvider.html",[53,0.292,356,2.897]],["body/injectables/BcryptProvider.html",[3,0.161,4,0.144,5,0.144,9,0.973,12,0.264,13,1.005,14,1.972,23,0.503,25,1.043,26,0.014,27,0.796,28,0.375,29,0.732,33,2.973,35,1.293,37,1.202,38,1.976,42,3.916,49,0.984,51,0.29,53,0.425,55,0.528,63,0.161,64,0.047,65,2.34,66,1.99,71,1.119,78,1.594,92,1.043,94,0.009,95,0.009,108,1.119,141,2.485,230,3.752,265,3.182,324,3.522,347,3.273,356,4.213,421,3.823,422,6.08,423,5.706,424,5.081,425,3.823,426,6.507,427,6.329,428,4.391,429,5.081,430,3.458,431,5.835,432,5.835,433,5.081,434,4.391,435,4.213,436,5.081,437,3.823,438,3.45,439,6.553,440,4.391,441,4.391,442,4.391]],["title/interfaces/Cart.html",[96,2.037,125,1.86]],["body/interfaces/Cart.html",[3,0.208,4,0.187,5,0.187,12,0.342,26,0.013,28,0.505,49,0.714,51,0.251,63,0.208,94,0.011,95,0.011,96,2.885,98,3.816,102,1.878,106,1.666,125,3.186,136,2.091,339,3.057,443,4.95,444,4.307,445,6.031,446,5.543,447,5.986,448,4.466,449,3.189]],["title/controllers/CartController.html",[146,1.641,450,2.897]],["body/controllers/CartController.html",[3,0.145,4,0.13,5,0.13,12,0.238,13,0.936,16,0.817,18,0.846,23,0.604,25,1.253,26,0.014,27,0.957,28,0.451,29,0.88,37,1.208,49,1.032,51,0.31,55,0.476,63,0.145,64,0.042,66,1.201,67,0.817,92,1.253,94,0.009,95,0.009,111,4.271,119,3.108,120,4.207,122,3.48,124,1.833,125,2.879,126,3.926,135,1.119,146,1.618,148,1.756,151,2.287,250,2.655,294,4.17,297,4.17,450,3.926,451,3.445,452,5.437,453,4.881,454,5.437,455,5.41,456,4.49,457,3.956,458,3.956,459,5.437,460,3.956,461,3.108,462,5.94,463,4.755,464,5.437,465,3.956,466,3.956,467,3.956,468,3.445,469,5.437,470,3.956,471,2.856,472,3.445,473,3.965,474,3.445,475,2.856,476,2.856,477,3.445,478,2.488,479,3.956,480,3.956,481,3.445,482,3.956,483,3.956,484,3.956,485,3.956,486,3.956,487,4.734,488,5.437,489,3.956,490,3.956,491,3.956,492,3.956]],["title/entities/CartItem.html",[129,1.944,493,1.578]],["body/entities/CartItem.html",[3,0.157,4,0.141,5,0.141,12,0.258,23,0.653,26,0.014,28,0.487,29,0.721,35,1.761,49,0.721,51,0.286,63,0.157,64,0.046,94,0.009,95,0.009,102,1.569,106,1.897,125,3,128,1.171,129,2.781,136,2.207,139,2.876,151,2.472,339,2.171,381,3.367,392,2.175,444,2.404,448,3.367,449,3.632,471,3.094,493,2.257,494,2.695,495,6.051,496,4.51,497,3.285,498,3.449,499,4.071,500,4.163,501,4.345,502,4.285,503,6.474,504,4.285,505,3.61,506,4.285,507,4.51,508,5.741,509,5.432,510,4.992,511,4.285,512,3.367,513,3.402,514,4.285,515,4.345,516,4.285,517,5.741,518,4.285,519,4.285,520,4.285,521,4.285,522,3.367,523,3.731,524,2.695,525,3.221,526,5.085,527,4.285,528,3.367]],["title/modules/CartModule.html",[157,1.641,170,2.524]],["body/modules/CartModule.html",[3,0.163,4,0.146,5,0.146,26,0.014,51,0.354,55,0.535,63,0.163,64,0.047,94,0.01,95,0.01,107,4.717,117,4.208,125,2.728,129,2.156,130,2.259,132,1.561,133,4.25,136,2.122,148,2.613,157,2.698,159,2.259,160,2.259,161,2.497,162,2.497,163,2.259,164,3.701,165,3.701,170,5.206,172,4.717,173,4.446,174,3.302,175,2.371,176,2.259,178,3.702,188,2.987,354,3.875,450,4.762,473,4.773,474,3.875,529,3.875,530,3.875,531,3.875,532,3.875,533,4.717,534,4.45,535,4.45,536,4.45,537,4.45,538,3.875,539,3.875,540,3.496,541,4.45,542,4.45]],["title/injectables/CartService.html",[53,0.292,473,2.378]],["body/injectables/CartService.html",[3,0.131,4,0.118,5,0.118,12,0.215,13,0.874,14,2.125,16,1.216,18,1.085,23,0.622,25,1.29,26,0.014,27,0.985,28,0.464,29,0.906,35,0.794,37,1.209,49,1.03,51,0.31,53,0.369,55,0.431,63,0.131,64,0.038,67,1.216,78,1.919,92,1.255,94,0.008,95,0.008,107,4.541,108,0.913,111,3.986,117,4.139,119,3.986,120,4.64,122,3.331,124,1.66,125,2.969,126,3.663,133,3.663,135,1.667,370,4.162,453,4.628,461,2.814,462,5.795,463,4.64,473,3.007,478,2.253,481,3.119,533,4.541,539,3.119,543,3.119,544,4.418,545,4.418,546,5.074,547,4.418,548,3.583,549,3.583,550,3.583,551,4.418,552,3.583,553,3.583,554,4.418,555,3.583,556,5.074,557,3.583,558,4.418,559,3.583,560,3.119,561,3.986,562,3.583,563,3.119,564,3.583,565,3.583,566,3.583,567,3.583]],["title/classes/CreateCartItemDto.html",[64,0.043,120,2.524]],["body/classes/CreateCartItemDto.html",[3,0.208,4,0.187,5,0.187,12,0.342,23,0.592,26,0.013,28,0.442,49,0.863,51,0.251,63,0.208,64,0.073,94,0.011,95,0.011,102,1.878,120,4.323,125,3.424,151,2.242,339,2.6,449,4.146,568,2.235,569,6.434,570,4.466,571,4.38,572,4.38,573,5.685,574,4.95,575,5.685,576,5.4,577,4.104,578,2.754,579,4.466]],["title/classes/CreateOrderDto.html",[64,0.043,580,2.524]],["body/classes/CreateOrderDto.html",[3,0.198,4,0.178,5,0.178,12,0.326,23,0.623,26,0.014,28,0.465,29,0.908,49,0.991,51,0.24,63,0.198,64,0.071,94,0.011,95,0.011,102,1.824,151,2.36,405,3.212,568,2.13,572,4.476,578,2.625,580,4.199,581,6.576,582,4.718,583,6.3,584,6.3,585,6.3,586,6.676,587,5.419,588,5.419,589,5.419,590,5.419,591,5.224,592,4.481,593,4.718,594,4.718]],["title/injectables/CreateOrderProvider.html",[53,0.292,595,2.524]],["body/injectables/CreateOrderProvider.html",[3,0.121,4,0.109,5,0.109,9,1.064,12,0.199,13,0.827,14,1.489,16,0.991,18,1.027,23,0.413,25,0.858,26,0.014,27,0.655,28,0.309,29,0.603,35,1.37,37,0.571,38,1.358,49,0.708,51,0.326,53,0.35,55,0.399,63,0.121,64,0.035,67,0.991,71,1.877,74,2.634,75,2.092,76,3.344,78,2.092,90,3.344,92,0.592,94,0.008,95,0.008,106,1.924,108,0.845,122,3.038,124,1.536,128,0.906,129,2.326,130,2.436,136,1.358,139,3.222,388,1.965,414,3.166,445,2.605,446,3.466,449,2.693,473,4.183,493,1.304,495,2.605,540,2.605,571,1.965,580,4.545,595,3.019,596,4.913,597,2.887,598,4.433,599,3.316,600,7.058,601,3.316,602,2.605,603,3.316,604,3.316,605,2.887,606,1.86,607,2.684,608,2.225,609,2.605,610,3.316,611,2.605,612,3.316,613,2.887,614,3.316,615,3.316,616,3.316,617,2.887,618,4.8,619,2.887,620,3.316,621,3.316,622,3.316,623,1.965,624,3.316,625,3.316,626,3.316,627,3.316,628,3.316,629,3.316,630,3.316,631,3.316,632,3.316,633,2.085,634,3.316,635,3.316,636,3.316,637,2.394,638,2.605,639,3.549,640,3.316,641,3.316,642,3.316,643,3.316,644,3.007,645,3.316,646,2.326,647,3.316,648,3.316,649,2.326,650,3.316,651,2.887,652,3.316,653,3.316,654,4.8,655,4.859,656,3.316,657,3.316,658,3.316,659,2.887,660,3.316,661,4.8,662,3.316,663,3.316,664,3.466,665,3.316,666,3.316,667,2.605,668,3.316,669,3.316,670,3.316,671,3.316,672,3.316,673,3.316,674,4.8,675,3.316,676,3.316,677,2.887,678,2.394]],["title/classes/CreateProductDto.html",[64,0.043,679,2.378]],["body/classes/CreateProductDto.html",[3,0.176,4,0.158,5,0.158,9,1.519,12,0.29,23,0.66,26,0.014,27,0.935,28,0.493,49,0.962,51,0.274,63,0.176,64,0.066,94,0.01,95,0.01,102,1.695,151,2.5,339,2.738,568,1.895,572,4.291,576,5.387,577,3.481,578,2.336,579,3.787,591,5.63,644,3.654,646,3.322,679,3.676,680,6.79,681,3.787,682,3.847,683,4.312,684,4.312,685,4.821,686,4.821,687,4.821,688,4.821,689,4.821,690,4.821,691,4.821,692,4.821,693,4.821,694,4.821,695,4.821,696,4.821,697,4.821,698,4.198,699,4.198,700,3.236,701,3.236,702,6.202,703,4.821,704,4.821,705,4.821]],["title/injectables/CreateProductProvider.html",[53,0.292,706,2.524]],["body/injectables/CreateProductProvider.html",[3,0.186,4,0.167,5,0.167,12,0.306,13,1.105,14,1.855,16,1.05,18,1.373,23,0.553,25,1.147,26,0.014,27,0.875,28,0.413,29,0.805,37,0.876,38,1.816,51,0.337,53,0.467,55,0.612,63,0.186,64,0.054,67,1.05,71,1.296,78,1.39,92,0.909,94,0.01,95,0.01,108,1.296,116,3.113,124,2.357,128,1.39,131,2.258,132,1.784,135,1.439,136,1.816,679,4.607,706,4.036,707,6.122,708,3.672,709,5.041,710,3.413,711,4.428,712,4.307,713,5.041,714,4.428,715,2.853,716,3.413,717,3.198,718,5.086,719,5.086,720,5.086]],["title/classes/CreateUserDto.html",[64,0.043,721,2.524]],["body/classes/CreateUserDto.html",[3,0.154,4,0.139,5,0.139,9,1.522,12,0.254,23,0.592,26,0.014,28,0.442,35,1.806,49,0.963,51,0.251,63,0.154,64,0.06,94,0.009,95,0.009,102,1.551,103,3.657,151,2.24,230,3.657,306,2.246,322,4.826,332,4.473,333,3.67,334,4.473,335,3.67,336,3.311,339,2.147,341,3.025,568,1.657,572,4.071,578,2.042,591,5.176,698,3.67,699,3.67,721,3.571,722,6.243,723,3.67,724,5.981,725,4.215,726,4.215,727,4.215,728,4.215,729,4.215,730,4.215,731,4.215,732,5.677,733,5.677,734,5.677,735,5.677,736,5.677,737,5.677,738,4.46,739,5.677,740,5.677,741,4.943,742,4.215,743,6.243,744,4.943,745,4.215,746,5.677,747,6.869,748,4.215,749,4.215,750,4.215]],["title/injectables/CreateUserProvider.html",[53,0.292,751,2.524]],["body/injectables/CreateUserProvider.html",[3,0.157,4,0.141,5,0.141,12,0.257,13,0.987,14,1.706,16,1.184,18,1.226,23,0.494,25,1.025,26,0.014,27,0.782,28,0.369,29,0.72,35,1.433,37,0.737,38,1.622,51,0.34,52,2.69,53,0.417,55,0.514,63,0.157,64,0.046,67,1.184,71,1.09,74,1.822,75,1.939,78,1.767,92,0.764,94,0.009,95,0.009,103,2.778,104,2.997,106,1.254,108,1.09,116,2.947,124,1.982,128,1.169,131,1.899,132,1.501,135,1.622,138,2.4,141,1.822,230,2.072,265,2.754,310,2.535,332,2.535,334,2.535,337,3.36,347,4.319,351,3.088,411,2.072,435,3.088,497,2.171,721,4.764,751,3.606,752,5.631,753,3.36,754,5.081,755,3.36,756,4.278,757,4.504,758,3.36,759,4.278,760,2.69,761,4.278,762,3.36,763,3.848,764,2.871,765,3.725,766,2.871,767,3.36,768,3.725,769,5.734,770,3.36,771,5.734,772,3.725,773,3.36,774,5.734,775,4.278,776,4.278,777,4.278,778,4.278,779,4.278,780,4.278,781,4.278,782,4.278,783,4.278]],["title/injectables/DataResponseInterceptor.html",[53,0.292,194,2.897]],["body/injectables/DataResponseInterceptor.html",[3,0.162,4,0.145,5,0.145,9,0.979,12,0.266,13,1.009,16,0.912,18,1.497,23,0.504,25,1.047,26,0.014,27,0.799,28,0.377,29,0.735,31,4.401,33,2.494,36,3.471,37,1.009,51,0.29,53,0.426,55,0.531,56,2.777,63,0.162,64,0.047,65,2.353,66,1.995,67,0.912,69,3.188,71,1.125,84,4.401,92,0.789,94,0.01,95,0.01,108,1.125,135,1.25,137,2.353,141,2.494,181,6.649,194,4.228,196,5.162,321,5.162,323,4.601,324,3.757,338,2.964,382,5.162,383,3.188,394,3.845,402,5.1,405,3.471,637,4.228,784,5.722,785,3.845,786,4.802,787,5.1,788,5.1,789,4.416,790,4.416,791,5.1,792,6.094,793,4.416,794,5.857,795,5.1,796,4.416,797,3.845,798,4.416,799,3.845,800,4.416,801,4.416,802,4.416]],["title/classes/DatabaseConnectionException.html",[64,0.043,803,2.693]],["body/classes/DatabaseConnectionException.html",[3,0.179,4,0.161,5,0.161,9,1.389,18,1.558,23,0.422,25,0.876,26,0.014,27,0.669,28,0.315,29,0.615,45,2.612,49,0.914,51,0.217,55,0.59,63,0.229,64,0.067,66,1.904,76,2.906,94,0.01,95,0.01,234,4.462,291,4.639,296,3.083,341,3.341,414,2.75,568,1.927,678,5.259,763,3.29,764,4.208,803,4.208,804,3.851,805,5.559,806,4.639,807,5.259,808,5.459,809,4.903,810,6.018,811,3.851,812,5.459,813,4.269,814,4.269,815,4.269,816,3.539,817,3.851,818,4.269,819,4.526,820,4.269,821,4.269,822,3.943,823,4.269,824,3.29,825,3.539,826,3.539]],["title/injectables/DeleteProductProvider.html",[53,0.292,827,2.524]],["body/injectables/DeleteProductProvider.html",[3,0.179,4,0.161,5,0.161,12,0.294,13,1.078,14,1.822,16,1.01,18,1.339,23,0.539,25,1.119,26,0.014,27,0.854,28,0.403,29,0.786,37,0.842,38,1.772,39,2.37,49,0.867,51,0.322,53,0.456,55,0.588,63,0.179,64,0.052,67,1.01,71,1.247,74,2.083,75,2.117,78,1.711,92,0.874,94,0.01,95,0.01,106,1.434,108,1.247,116,3.077,128,1.337,131,2.172,132,1.716,135,1.384,136,2.129,265,2.94,278,3.284,341,2.607,498,2.607,500,2.745,571,3.711,708,3.532,710,3.284,712,4.202,715,2.745,717,3.077,827,3.937,828,6.012,829,4.918,830,4.892,831,4.918,832,4.892,833,2.9,834,2.745,835,4.26,836,3.843,837,2.607,838,4.26,839,2.9,840,4.26]],["title/injectables/ErrorHandlingInterceptor.html",[53,0.292,841,3.152]],["body/injectables/ErrorHandlingInterceptor.html",[3,0.143,4,0.128,5,0.128,9,0.865,12,0.235,13,0.928,16,1.274,23,0.464,25,0.963,26,0.014,27,0.735,28,0.346,29,0.676,31,4.183,33,2.832,34,4.69,36,3.193,37,1.145,42,4.464,45,2.08,51,0.309,53,0.392,55,0.469,63,0.143,64,0.042,65,2.08,66,1.873,71,1.373,74,1.662,75,1.822,76,2.313,84,4.183,92,1.247,94,0.009,95,0.009,108,0.994,128,1.066,234,2.313,252,3.889,382,4.846,383,2.818,404,3.398,414,4.424,430,3.942,605,4.69,619,3.398,678,5.039,764,2.619,765,3.398,787,4.69,788,5.792,791,4.69,792,5.792,795,4.69,799,3.398,803,3.615,816,2.818,817,3.066,822,2.454,841,4.232,842,5.371,843,5.371,844,3.398,845,5.387,846,3.903,847,5.387,848,5.483,849,3.903,850,6.652,851,5.387,852,3.903,853,6.652,854,3.903,855,3.903,856,3.398,857,3.903,858,3.903,859,2.818,860,4.232,861,3.903,862,3.903,863,3.398,864,3.903,865,3.398,866,3.066,867,3.066,868,3.903,869,3.903,870,3.903,871,3.903,872,3.903,873,3.903,874,3.903,875,3.903,876,3.903,877,3.903]],["title/interfaces/ErrorResponse.html",[96,2.037,878,2.897]],["body/interfaces/ErrorResponse.html",[3,0.132,4,0.075,5,0.075,9,0.502,12,0.136,16,1.219,26,0.014,27,0.924,28,0.452,29,0.451,33,2.514,36,1.344,37,0.955,45,3.683,49,0.994,50,1.344,51,0.198,55,0.273,58,1.522,63,0.132,64,0.024,65,1.208,66,2.056,67,0.468,71,1.761,75,1.216,90,2.649,92,1.106,94,0.006,95,0.006,96,2.268,98,1.522,102,0.983,128,0.619,146,3.114,232,2.825,234,2.131,281,1.522,292,1.522,296,1.426,320,4.157,324,1.098,331,4.639,338,3.724,339,1.924,340,1.522,341,3.803,370,2.131,388,1.344,395,1.781,401,1.426,405,3.804,414,4.428,493,0.891,513,1.344,522,2.825,525,1.272,623,1.344,649,1.098,667,1.781,786,3.713,805,4.99,807,2.596,819,4.99,822,1.426,824,1.522,825,1.637,826,2.596,837,1.208,848,3.511,859,1.637,860,4.638,866,1.781,867,1.781,878,4.005,879,1.781,880,1.781,881,6.018,882,6.366,883,5.589,884,4.467,885,5.387,886,3.131,887,3.131,888,3.892,889,3.892,890,3.131,891,1.637,892,1.974,893,1.974,894,1.781,895,1.974,896,1.974,897,1.974,898,3.131,899,1.974,900,1.974,901,1.974,902,1.974,903,1.974,904,1.637,905,1.974,906,1.974,907,1.974,908,1.974,909,1.974,910,1.974,911,1.974,912,1.974,913,1.974,914,1.974,915,1.781,916,1.974,917,3.131,918,1.781,919,1.974,920,3.131,921,3.131,922,1.974,923,1.974,924,1.974,925,1.974,926,1.974,927,1.974,928,1.974,929,1.637,930,1.974,931,1.781,932,1.974,933,1.974,934,1.974,935,1.974,936,3.131,937,1.974,938,3.511,939,3.131,940,1.974,941,3.131,942,1.974,943,1.974,944,3.131,945,1.974,946,3.131,947,1.974,948,1.974,949,1.974,950,1.974,951,1.974,952,1.974,953,1.974,954,1.974,955,1.974,956,3.131,957,1.974,958,1.974,959,1.974,960,1.781,961,1.974,962,1.781,963,1.974,964,1.781,965,1.974,966,1.974,967,1.974,968,1.974,969,1.974,970,1.974,971,1.974,972,1.974,973,1.974,974,1.974,975,1.974,976,1.974,977,1.974,978,1.974,979,1.974,980,1.974,981,1.974,982,1.974,983,2.825,984,1.974,985,1.974,986,1.974,987,1.974,988,1.522,989,1.974,990,1.974,991,1.974,992,1.974,993,1.974]],["title/injectables/FindAllOrdersForUserProvider.html",[53,0.292,994,2.524]],["body/injectables/FindAllOrdersForUserProvider.html",[3,0.184,4,0.165,5,0.165,12,0.303,13,1.097,14,1.846,16,1.039,18,1.363,23,0.549,25,1.139,26,0.014,27,0.869,28,0.41,29,0.8,35,1.115,37,0.866,38,1.803,49,0.878,51,0.325,53,0.464,55,0.605,63,0.184,64,0.054,67,1.039,71,1.282,78,1.374,92,0.899,94,0.01,95,0.01,106,1.474,108,1.282,116,3.008,122,2.829,128,1.374,131,2.233,132,1.765,444,2.822,497,2.553,607,2.606,608,3.376,753,3.952,994,4.008,995,5.495,996,4.043,997,5.549,998,4.38,999,5.03,1000,5.549,1001,5.549,1002,5.03,1003,4.38,1004,5.03,1005,3.376,1006,4.38,1007,4.38]],["title/injectables/FindAllProductsProvider.html",[53,0.292,1008,2.524]],["body/injectables/FindAllProductsProvider.html",[3,0.123,4,0.11,5,0.11,12,0.201,13,0.833,14,1.497,16,1.361,18,1.034,23,0.489,25,1.014,26,0.014,27,0.774,28,0.365,29,0.712,37,0.833,38,1.368,40,1.7,50,2.866,51,0.32,53,0.352,55,0.403,63,0.123,64,0.036,67,0.998,71,1.91,78,0.915,82,2.916,83,2.916,84,2.106,85,2.916,86,2.631,87,2.916,88,2.916,89,2.916,91,2.916,92,0.864,94,0.008,95,0.008,108,0.853,116,2.695,128,0.915,131,1.487,132,1.175,135,1.368,136,0.948,141,1.426,291,2.248,388,1.985,392,2.454,497,1.7,513,1.985,577,2.418,607,2.321,623,1.985,649,2.343,710,2.248,712,3.245,715,1.879,717,2.106,834,1.879,839,1.985,1007,5.411,1008,3.041,1009,4.882,1010,2.916,1011,4.836,1012,4.458,1013,4.558,1014,3.349,1015,4.836,1016,4.443,1017,3.349,1018,2.916,1019,3.349,1020,4.21,1021,2.631,1022,2.631,1023,1.985,1024,3.349,1025,2.916,1026,4.836,1027,3.349,1028,2.866,1029,2.248,1030,2.418,1031,3.349,1032,2.631,1033,4.836,1034,3.349,1035,4.21,1036,4.21,1037,4.458,1038,4.836,1039,4.836,1040,1.985,1041,4.836,1042,4.836,1043,3.349,1044,3.349,1045,3.349,1046,4.836,1047,4.836,1048,2.916,1049,3.349,1050,3.349,1051,3.349,1052,3.349,1053,3.349,1054,3.349,1055,3.349,1056,3.349,1057,3.349,1058,2.916,1059,2.916,1060,3.349,1061,3.349,1062,3.349,1063,3.349,1064,3.349,1065,3.349,1066,3.799,1067,3.349,1068,5.675,1069,5.675,1070,4.941,1071,2.631,1072,3.349,1073,2.631,1074,3.349,1075,3.349,1076,3.349,1077,2.916,1078,4.21,1079,4.836,1080,3.349,1081,3.349,1082,3.349,1083,3.349,1084,3.683]],["title/injectables/FindOrderByIdProvider.html",[53,0.292,1085,2.524]],["body/injectables/FindOrderByIdProvider.html",[3,0.18,4,0.161,5,0.161,12,0.296,13,1.081,14,1.825,16,1.014,18,1.343,23,0.541,25,1.122,26,0.014,27,0.856,28,0.404,29,0.788,35,1.089,37,0.846,38,1.776,49,0.967,51,0.322,53,0.457,55,0.591,63,0.18,64,0.052,67,1.014,71,1.252,74,2.092,75,1.662,78,1.342,92,0.878,94,0.01,95,0.01,106,1.84,108,1.252,116,2.981,122,2.787,128,1.342,131,2.181,132,1.724,444,2.756,607,3.203,608,3.297,833,2.912,837,2.618,995,5.435,998,4.278,1000,5.466,1003,4.278,1005,3.297,1006,4.278,1085,3.948,1086,3.547,1087,5.466,1088,3.859,1089,5.466,1090,5.727,1091,4.913,1092,4.913,1093,4.913]],["title/injectables/FindProductByIdProvider.html",[53,0.292,1094,2.524]],["body/injectables/FindProductByIdProvider.html",[3,0.182,4,0.164,5,0.164,12,0.3,13,1.091,14,1.838,16,1.03,18,1.356,23,0.546,25,1.133,26,0.014,27,0.865,28,0.408,29,0.796,37,0.859,38,1.793,49,0.875,51,0.324,53,0.461,55,0.6,63,0.182,64,0.053,67,1.03,71,1.271,74,2.124,75,1.687,78,1.363,92,0.891,94,0.01,95,0.01,106,1.462,108,1.271,116,3.095,128,1.363,131,2.214,132,1.75,135,1.411,136,2.224,265,2.967,571,3.756,710,3.347,712,4.254,715,2.798,717,3.136,833,2.956,834,2.798,836,3.918,837,2.657,1009,5.473,1086,3.6,1088,3.918,1094,3.986,1095,5.519,1096,5.519,1097,4.342,1098,4.987]],["title/injectables/FindUserByEmailProvider.html",[53,0.292,1099,2.524]],["body/injectables/FindUserByEmailProvider.html",[3,0.172,4,0.155,5,0.155,12,0.283,13,1.051,14,1.788,16,0.971,18,1.306,23,0.526,25,1.091,26,0.014,27,0.833,28,0.392,29,0.766,33,2.599,35,1.799,37,1.051,38,1.727,49,0.851,51,0.317,53,0.444,55,0.566,63,0.172,64,0.05,66,1.428,67,0.971,71,1.198,74,2.003,75,1.591,78,1.285,92,0.84,94,0.01,95,0.01,103,3.808,104,2.18,106,1.378,108,1.198,116,3.039,128,1.285,131,2.088,132,1.65,135,1.331,138,2.639,230,2.279,265,2.886,332,2.788,334,2.788,755,3.695,757,4.795,760,2.958,767,3.695,770,3.695,833,3.618,1099,3.839,1100,5.324,1101,4.095,1102,5.315,1103,4.703,1104,5.315,1105,4.703,1106,6.104,1107,3.695,1108,4.703]],["title/injectables/FindUserByIdProvider.html",[53,0.292,1109,2.524]],["body/injectables/FindUserByIdProvider.html",[3,0.184,4,0.165,5,0.165,12,0.302,13,1.096,14,1.844,16,1.036,18,1.361,23,0.548,25,1.137,26,0.014,27,0.868,28,0.409,29,0.799,35,1.744,37,0.864,38,1.801,49,0.877,51,0.325,53,0.463,55,0.604,63,0.184,64,0.053,67,1.036,71,1.279,74,2.137,75,1.698,78,1.371,92,0.897,94,0.01,95,0.01,106,1.471,108,1.279,116,3.101,122,2.825,128,1.371,131,2.228,132,1.761,135,1.42,138,2.816,755,3.943,757,4.999,760,3.157,767,3.943,770,3.943,833,2.975,837,2.675,1086,3.624,1088,3.943,1097,4.371,1100,5.49,1109,4.002,1110,5.541,1111,5.541,1112,5.02]],["title/injectables/GenerateTokensProvider.html",[53,0.292,348,2.524]],["body/injectables/GenerateTokensProvider.html",[3,0.217,4,0.119,5,0.119,9,0.804,10,3.516,11,3.219,12,0.218,13,0.881,14,1.861,16,1.403,18,1.378,19,3.159,20,6.31,21,5.61,22,5.61,23,0.511,25,1.151,26,0.014,27,0.809,28,0.414,29,0.745,33,2.744,35,1.709,37,1.11,49,0.745,51,0.312,52,2.281,53,0.373,55,0.436,56,2.281,57,2.435,59,2.619,63,0.133,64,0.039,66,2.141,67,1.057,68,4.325,69,2.619,70,3.159,71,0.924,77,5.693,78,1.399,92,0.915,94,0.008,95,0.008,97,2.435,103,1.757,104,1.681,105,3.159,108,0.924,122,2.633,135,1.448,137,1.933,141,2.18,142,3.159,257,3.696,265,2.526,272,4.282,285,4.457,288,5.091,292,3.436,293,4.457,325,4.021,329,4.021,339,2.244,348,3.219,353,3.159,370,3.034,386,3.696,438,4.021,609,2.85,811,2.85,1113,5.61,1114,3.159,1115,6.443,1116,5.119,1117,5.119,1118,3.627,1119,5.119,1120,3.627,1121,5.119,1122,6.795,1123,4.652,1124,3.627,1125,3.627,1126,3.627,1127,3.627,1128,3.159,1129,3.627,1130,3.159,1131,2.85,1132,3.627,1133,3.627,1134,3.627,1135,3.627,1136,3.627,1137,3.627,1138,3.627,1139,3.627,1140,3.627]],["title/injectables/GetCartProvider.html",[53,0.292,117,2.251]],["body/injectables/GetCartProvider.html",[3,0.159,4,0.143,5,0.143,12,0.262,13,0.998,14,1.966,16,1.436,18,1.24,23,0.562,25,1.165,26,0.014,27,0.89,28,0.419,29,0.819,35,0.964,37,0.998,38,1.968,49,0.819,51,0.32,53,0.422,55,0.523,63,0.159,64,0.046,67,0.898,71,1.773,78,1.584,92,1.036,94,0.009,95,0.009,106,1.699,108,1.108,110,3.417,115,4.555,116,2.963,117,3.253,122,2.574,125,3.358,127,3.417,128,1.188,129,2.108,130,2.208,131,1.931,132,1.526,135,1.231,136,1.641,139,3.892,140,3.417,444,3.903,445,5.692,446,3.14,449,2.44,498,2.318,545,5.049,554,5.049,633,2.736,639,2.736,649,2.108,655,4.555,659,3.788,1005,2.92,1141,6.057,1142,5.798,1143,3.788,1144,4.35,1145,5.798,1146,4.35,1147,4.35,1148,3.788,1149,4.35,1150,4.35,1151,4.35,1152,4.35,1153,4.35,1154,4.35]],["title/classes/GetProductsBaseDto.html",[64,0.043,1155,2.897]],["body/classes/GetProductsBaseDto.html",[3,0.167,4,0.15,5,0.15,12,0.274,23,0.61,26,0.014,27,1.004,28,0.456,29,0.98,49,0.889,51,0.313,63,0.219,64,0.071,94,0.01,95,0.01,102,1.633,136,2.136,151,2.31,306,2.427,456,3.057,568,1.791,572,4.36,578,2.207,592,4.937,646,3.564,682,4.127,684,4.196,700,3.057,701,3.057,806,3.057,1016,2.7,1028,3.543,1029,3.057,1030,3.289,1037,5.242,1066,4.696,1071,5.565,1073,5.565,1155,4.817,1156,5.779,1157,3.578,1158,6.673,1159,4.555,1160,4.555,1161,4.555,1162,4.555,1163,4.555,1164,3.966,1165,5.205,1166,3.966,1167,3.966]],["title/classes/GetProductsDto.html",[64,0.043,1016,2.378]],["body/classes/GetProductsDto.html",[3,0.189,4,0.169,5,0.169,9,1.142,26,0.014,27,0.883,49,0.812,51,0.328,63,0.237,64,0.075,94,0.011,95,0.011,136,2.002,306,2.746,456,4.343,568,2.026,572,4.53,578,2.497,592,5.13,646,3.135,682,3.63,684,4.069,700,3.459,701,3.459,806,4.343,1016,3.835,1028,4.192,1029,3.459,1030,3.721,1037,4.048,1066,4.048,1071,5.083,1073,5.083,1155,5.107,1156,4.048,1157,4.048,1164,4.487,1165,6.159,1166,4.487,1167,5.634]],["title/classes/GlobalExceptionFilter.html",[64,0.043,891,2.897]],["body/classes/GlobalExceptionFilter.html",[3,0.123,4,0.068,5,0.068,9,0.461,12,0.125,13,0.578,16,1.525,23,0.515,25,1.015,26,0.014,27,0.999,28,0.384,29,0.713,33,2.926,36,1.233,37,1.161,45,4.023,49,0.941,50,1.233,51,0.187,55,0.25,58,1.396,63,0.123,64,0.022,65,1.788,66,2.003,67,0.871,71,1.718,75,1.427,90,3.367,92,1.068,94,0.005,95,0.005,96,1.703,102,0.917,128,0.568,146,3.021,232,3.804,234,1.989,281,1.396,292,2.253,296,1.308,320,4.04,324,1.008,331,4.012,338,2.253,339,1.832,340,1.396,341,3.423,370,1.989,388,1.233,392,1.055,395,1.634,401,1.308,405,2.87,414,4.436,493,0.818,513,1.233,522,3.804,525,1.167,568,0.818,623,1.233,649,1.008,667,1.634,786,3.759,805,5.114,807,2.423,819,4.491,822,1.308,824,1.396,825,1.501,826,2.423,837,1.108,848,4.174,859,1.501,860,4.463,866,2.637,867,2.637,878,3.836,879,4.886,880,1.634,881,5.416,882,6.314,883,4.217,884,3.047,885,5.205,886,3.674,887,4.217,888,4.947,889,3.674,890,2.922,891,2.423,892,2.922,893,2.922,894,1.634,895,1.811,896,1.811,897,1.811,898,2.922,899,1.811,900,1.811,901,1.811,902,1.811,903,1.811,904,1.501,905,1.811,906,1.811,907,1.811,908,1.811,909,1.811,910,1.811,911,2.922,912,3.674,913,1.811,914,1.811,915,1.634,916,1.811,917,2.922,918,1.634,919,1.811,920,2.922,921,2.922,922,1.811,923,1.811,924,1.811,925,1.811,926,1.811,927,1.811,928,1.811,929,1.501,930,1.811,931,1.634,932,1.811,933,1.811,934,1.811,935,1.811,936,2.922,937,1.811,938,4.463,939,4.217,940,2.922,941,2.922,942,1.811,943,1.811,944,2.922,945,1.811,946,2.922,947,1.811,948,1.811,949,2.922,950,1.811,951,1.811,952,1.811,953,1.811,954,1.811,955,1.811,956,4.217,957,2.922,958,1.811,959,1.811,960,1.634,961,1.811,962,1.634,963,1.811,964,1.634,965,1.811,966,1.811,967,1.811,968,1.811,969,1.811,970,1.811,971,1.811,972,1.811,973,1.811,974,1.811,975,1.811,976,1.811,977,1.811,978,1.811,979,1.811,980,2.922,981,2.922,982,1.811,983,2.637,984,1.811,985,1.811,986,1.811,987,1.811,988,1.396,989,1.811,990,1.811,991,1.811,992,1.811,993,1.811,1084,1.233,1168,3.356,1169,3.356,1170,3.356,1171,3.356,1172,2.08,1173,2.08,1174,2.08,1175,2.08,1176,2.08,1177,2.08,1178,2.08,1179,2.08,1180,2.08]],["title/injectables/HashingProvider.html",[53,0.292,347,2.251]],["body/injectables/HashingProvider.html",[3,0.178,4,0.16,5,0.16,9,1.077,12,0.292,13,1.074,23,0.537,25,1.114,26,0.014,27,0.851,28,0.401,29,0.783,37,1.074,38,2.055,49,1.003,51,0.215,53,0.454,55,0.585,63,0.178,64,0.052,66,2.09,94,0.01,95,0.01,108,1.239,141,2.655,230,3.518,324,3.638,347,3.498,405,4.304,423,5.994,424,5.429,425,4.233,426,6.69,427,6.323,429,5.429,433,5.429,435,5.243,1181,4.233,1182,8.112,1183,4.861,1184,4.861]],["title/entities/Order.html",[493,1.578,607,1.641]],["body/entities/Order.html",[3,0.142,4,0.128,5,0.128,12,0.234,23,0.666,26,0.014,28,0.516,35,1.694,49,0.945,50,2.305,51,0.294,63,0.142,64,0.041,94,0.009,95,0.009,102,1.468,106,1.805,128,1.063,130,1.974,151,2.523,320,3.873,339,2.033,392,3.371,405,3.185,444,3.455,446,4.446,493,1.529,494,2.446,497,3.125,499,3.873,500,3.726,501,4.133,505,3.38,507,3.055,509,4.222,510,3.88,515,4.133,523,3.387,524,2.446,525,4.044,526,4.222,583,5.362,584,5.362,585,5.362,593,4.68,594,4.68,606,4.044,607,2.518,1040,3.185,1185,3.387,1186,4.679,1187,6.277,1188,3.89,1189,3.89,1190,3.89,1191,2.808,1192,5.374,1193,3.89,1194,3.88,1195,3.607,1196,3.89,1197,3.89,1198,6.07,1199,4.795,1200,3.89,1201,3.88,1202,3.88,1203,3.88,1204,3.38,1205,3.89,1206,3.89,1207,5.374,1208,3.89,1209,3.88,1210,3.89,1211,3.89,1212,3.89,1213,3.89]],["title/entities/OrderItem.html",[493,1.578,606,2.251]],["body/entities/OrderItem.html",[3,0.173,4,0.155,5,0.155,12,0.284,23,0.641,26,0.014,28,0.49,49,0.768,51,0.3,63,0.173,64,0.05,94,0.01,95,0.01,102,1.672,106,1.99,128,1.29,136,2.196,151,2.427,339,2.717,448,3.71,449,3.809,493,1.857,494,2.97,496,3.71,505,3.849,507,4.808,509,5.643,510,5.186,524,2.97,525,4.03,526,5.334,606,3.433,607,3.251,608,3.17,646,3.29,1040,3.627,1186,3.17,1201,4.419,1202,4.419,1203,4.419,1204,3.849,1214,6.639,1215,4.723,1216,6.12,1217,4.723,1218,4.723,1219,4.723,1220,4.723,1221,4.723]],["title/controllers/OrdersController.html",[146,1.641,1222,2.897]],["body/controllers/OrdersController.html",[3,0.164,4,0.148,5,0.148,12,0.27,13,1.02,14,2.078,16,0.928,18,0.961,23,0.571,25,1.184,26,0.014,27,0.904,28,0.426,29,0.832,37,1.141,49,1.012,51,0.311,55,0.54,63,0.164,64,0.048,66,1.364,67,0.928,92,1.184,94,0.01,95,0.01,122,3.339,124,2.082,135,1.271,137,2.394,146,1.838,148,1.995,151,2.162,250,3.016,294,3.976,297,4.449,370,3.928,475,3.244,476,3.244,477,3.913,487,5.159,580,4.895,598,5.207,602,3.53,611,3.53,996,3.157,1090,5.535,1222,4.277,1223,3.913,1224,6.628,1225,5.924,1226,4.493,1227,4.493,1228,5.924,1229,4.493,1230,4.493,1231,4.493,1232,4.168,1233,3.913,1234,4.493,1235,4.493,1236,4.493,1237,4.493,1238,4.493,1239,4.493]],["title/modules/OrdersModule.html",[157,1.641,171,2.693]],["body/modules/OrdersModule.html",[3,0.174,4,0.156,5,0.156,26,0.014,51,0.355,55,0.57,63,0.174,64,0.05,94,0.01,95,0.01,130,2.407,132,1.664,148,2.724,157,2.782,159,2.407,160,2.407,161,2.66,162,2.66,163,2.407,164,3.817,165,2.66,170,4.8,171,5.507,174,3.443,175,2.527,176,2.407,178,3.859,188,3.183,595,4.8,606,3.443,607,2.782,608,3.183,994,4.8,996,2.527,1085,4.8,1222,4.912,1232,4.8,1233,4.129,1240,4.129,1241,4.129,1242,4.742,1243,4.742,1244,4.742,1245,3.725,1246,4.129,1247,4.742,1248,4.821,1249,3.423,1250,2.982,1251,4.742]],["title/injectables/OrdersService.html",[53,0.292,1232,2.524]],["body/injectables/OrdersService.html",[3,0.16,4,0.144,5,0.144,12,0.263,13,1.001,14,2.066,16,1.349,18,1.243,23,0.6,25,1.245,26,0.014,27,0.95,28,0.448,29,0.875,37,1.125,49,1.008,51,0.321,53,0.423,55,0.525,63,0.16,64,0.046,67,1.349,78,1.785,92,1.168,94,0.009,95,0.009,108,1.113,122,2.901,124,2.023,141,1.859,370,3.873,411,2.115,580,4.864,595,4.692,598,5.133,602,4.566,607,1.786,611,3.43,994,4.789,996,2.327,997,5.061,1001,5.061,1085,4.789,1087,5.061,1089,5.061,1090,5.473,1232,3.656,1246,3.802,1249,3.152,1250,2.746,1252,3.802,1253,4.366,1254,4.366,1255,4.366,1256,4.366,1257,4.366,1258,4.197,1259,4.366,1260,4.366,1261,4.366]],["title/interfaces/Paginated.html",[96,2.037,1023,2.378]],["body/interfaces/Paginated.html",[3,0.189,4,0.17,5,0.17,9,1.147,12,0.311,26,0.014,28,0.51,49,0.961,63,0.189,84,3.256,94,0.011,95,0.011,96,3.293,98,3.474,102,1.773,324,3.944,339,2.811,401,4.081,447,6.47,786,3.256,1023,4.201,1123,5.117,1262,4.507,1263,4.507,1264,6.799,1265,6.47,1266,6.489,1267,5.65,1268,6.489,1269,4.507,1270,4.507,1271,4.507,1272,4.507,1273,4.507,1274,4.067,1275,4.507,1276,4.507]],["title/modules/PaginationModule.html",[157,1.641,1277,2.693]],["body/modules/PaginationModule.html",[3,0.207,4,0.185,5,0.185,26,0.013,51,0.303,55,0.679,63,0.207,64,0.06,94,0.011,95,0.011,157,3.012,159,2.864,160,2.864,161,3.166,162,3.166,163,2.864,164,4.132,165,4.132,174,3.839,175,3.007,176,2.864,1013,5.231,1277,5.416,1278,4.914,1279,4.914,1280,4.914,1281,5.644,1282,5.644]],["title/injectables/PaginationProvider.html",[53,0.292,1013,2.524]],["body/injectables/PaginationProvider.html",[3,0.128,4,0.115,5,0.115,9,0.772,12,0.21,13,0.857,14,1.531,16,0.72,18,1.354,23,0.429,25,1.037,26,0.014,27,0.679,28,0.373,29,0.625,33,2.119,37,0.857,38,1.408,45,4.078,51,0.308,52,3.129,53,0.362,55,0.419,58,2.339,63,0.128,64,0.037,66,1.922,67,0.72,71,1.866,75,1.179,78,1.36,84,2.192,92,0.623,94,0.01,95,0.008,108,0.888,116,2.996,128,0.952,135,0.986,141,2.471,193,2.339,265,2.471,324,2.811,401,3.129,411,1.689,513,3.967,607,1.425,623,3.751,738,4.972,811,2.738,1005,3.34,1013,3.129,1023,2.949,1028,3.751,1030,2.516,1032,3.909,1077,5.511,1078,6.06,1107,3.909,1123,2.516,1258,3.592,1263,5.511,1264,5.053,1265,3.035,1269,3.035,1270,5.053,1271,3.035,1272,5.511,1273,3.035,1274,2.738,1275,3.035,1276,3.035,1283,3.035,1284,3.485,1285,3.485,1286,3.485,1287,3.485,1288,4.976,1289,4.976,1290,3.485,1291,3.485,1292,3.485,1293,3.485,1294,3.485,1295,3.485,1296,6.329,1297,6.329,1298,7.455,1299,6.96,1300,6.329,1301,4.976,1302,4.976,1303,4.976,1304,3.485,1305,3.485,1306,4.976,1307,3.485,1308,3.485,1309,3.485,1310,3.485,1311,3.485,1312,3.485,1313,3.485,1314,3.485,1315,4.976,1316,3.485,1317,3.485,1318,3.485,1319,3.485,1320,3.485]],["title/classes/PaginationQueryDto.html",[64,0.043,1028,2.378]],["body/classes/PaginationQueryDto.html",[3,0.189,4,0.169,5,0.169,9,1.142,12,0.31,23,0.557,26,0.014,28,0.416,29,0.931,51,0.228,63,0.189,64,0.069,94,0.011,95,0.011,102,1.768,151,2.11,327,6.46,339,3.028,392,3.284,444,3.63,456,4.343,513,3.835,568,2.026,578,2.497,592,4.979,623,3.835,649,3.135,1028,3.835,1029,4.748,1032,5.083,1035,6.655,1036,6.655,1084,3.835,1321,4.487,1322,5.154,1323,5.154,1324,5.154,1325,6.471]],["title/entities/Product.html",[136,1.135,493,1.578]],["body/entities/Product.html",[3,0.123,4,0.111,5,0.111,9,1.26,12,0.342,23,0.673,26,0.014,27,0.776,28,0.514,29,0.863,39,3.332,40,3.897,49,0.911,51,0.292,63,0.123,64,0.036,94,0.008,95,0.008,102,1.325,106,1.667,128,0.919,129,3.332,130,2.462,136,1.373,151,2.547,339,2.601,392,3.16,430,3.69,493,1.322,494,2.116,497,2.887,498,3.031,499,3.578,500,3.858,501,3.256,505,3.051,512,3.811,515,3.818,524,2.116,525,4.21,606,2.721,607,2.7,639,3.578,644,3.031,646,2.756,649,3.017,664,4.107,682,3.191,683,3.578,684,4.152,700,2.258,701,2.258,839,3.372,884,3.502,996,3.031,1040,2.875,1186,4.179,1191,3.502,1194,3.502,1195,3.256,1199,3.502,1201,3.502,1202,3.502,1203,3.502,1204,3.051,1209,4.107,1326,2.643,1327,4.224,1328,2.929,1329,4.224,1330,3.502,1331,6.087,1332,2.929,1333,2.643,1334,2.929,1335,2.929,1336,3.811,1337,2.929,1338,2.929,1339,2.929,1340,2.929,1341,2.929,1342,3.051,1343,2.929,1344,4.224,1345,2.929,1346,2.929,1347,2.929,1348,2.929,1349,2.929,1350,2.643,1351,2.643,1352,2.929,1353,2.929,1354,2.929,1355,2.929]],["title/controllers/ProductsController.html",[146,1.641,1356,2.897]],["body/controllers/ProductsController.html",[3,0.064,4,0.058,5,0.058,9,1.771,11,3.5,12,0.106,13,0.504,16,0.364,18,0.377,23,0.377,25,0.783,26,0.014,27,0.851,28,0.449,29,0.659,35,1.233,37,0.755,38,1.24,39,1.419,40,1.487,45,2.335,49,0.783,51,0.289,55,0.212,63,0.064,64,0.019,66,0.535,67,0.364,68,3.911,75,1.482,92,0.783,94,0.005,95,0.005,104,2.579,106,1.539,113,2.597,124,0.816,135,0.498,136,2.258,138,2.729,146,0.72,148,0.782,151,1.429,234,1.736,250,1.182,251,1.108,275,2.301,277,4.236,278,3.735,281,4.187,282,4.124,283,3.274,286,2.954,291,1.966,294,1.966,297,1.966,301,2.954,303,3.443,304,5.331,306,0.939,308,1.108,310,1.736,316,1.384,318,3.443,320,4.197,321,2.954,322,4.833,323,2.954,324,3.102,331,1.966,338,4.297,339,1.108,340,3.524,341,3.412,384,1.272,411,1.419,449,0.988,471,3.512,472,1.534,478,1.108,497,1.487,498,1.561,499,1.842,528,2.301,561,4.751,571,3.585,623,1.736,633,1.842,637,3.164,644,3.105,646,2.823,649,1.419,664,2.115,679,3.453,682,2.458,683,2.756,709,2.301,713,1.384,715,0.988,716,1.966,766,1.182,786,1.108,822,1.842,824,1.966,829,2.301,831,1.384,834,0.988,837,2.797,839,1.736,840,4.236,960,4.751,962,4.751,964,4.124,1012,2.954,1016,2.597,1021,1.384,1022,1.384,1023,1.044,1040,2.597,1084,2.597,1330,2.715,1342,2.756,1356,2.115,1357,1.534,1358,2.954,1359,3.761,1360,2.301,1361,5.25,1362,5.7,1363,2.93,1364,1.762,1365,2.93,1366,3.816,1367,5.7,1368,2.551,1369,2.551,1370,4.382,1371,6.049,1372,5.25,1373,1.762,1374,1.762,1375,2.93,1376,2.93,1377,2.93,1378,1.762,1379,3.816,1380,3.816,1381,4.865,1382,4.865,1383,4.865,1384,4.865,1385,1.762,1386,1.762,1387,1.762,1388,1.762,1389,1.762,1390,1.762,1391,2.93,1392,1.762,1393,3.804,1394,3.274,1395,2.93,1396,2.93,1397,1.762,1398,1.762,1399,2.93,1400,1.762,1401,1.762,1402,1.534,1403,1.534,1404,1.384,1405,1.762,1406,1.534,1407,1.762,1408,3.761,1409,1.762,1410,3.761,1411,1.534,1412,2.93,1413,2.93,1414,2.551,1415,3.816,1416,2.301,1417,2.551,1418,2.551,1419,2.551,1420,2.551,1421,2.551,1422,2.551,1423,2.551,1424,1.762,1425,2.301,1426,2.551,1427,2.93,1428,1.762,1429,1.762,1430,1.762,1431,1.762,1432,1.762,1433,1.534,1434,4.382,1435,2.93,1436,3.816,1437,2.551,1438,3.761,1439,3.761,1440,3.761,1441,1.762,1442,1.762,1443,1.762,1444,3.761,1445,1.762,1446,1.762,1447,1.762,1448,1.762,1449,3.816,1450,2.551,1451,3.816,1452,3.443,1453,2.551,1454,2.551,1455,1.762,1456,2.551,1457,2.551,1458,2.551,1459,2.551,1460,1.534,1461,1.534,1462,1.534,1463,1.384,1464,1.534,1465,1.762,1466,1.762,1467,1.762,1468,1.762,1469,1.762,1470,1.762,1471,1.762,1472,1.762,1473,1.762,1474,1.762]],["title/modules/ProductsModule.html",[157,1.641,172,2.524]],["body/modules/ProductsModule.html",[3,0.163,4,0.146,5,0.146,26,0.014,51,0.354,55,0.535,63,0.163,64,0.047,94,0.01,95,0.01,113,4.773,132,1.561,136,1.666,148,2.613,157,2.698,159,2.259,160,2.259,161,2.497,162,2.497,163,2.259,164,3.701,165,3.701,172,5.206,174,3.302,175,2.371,176,2.259,178,3.702,188,3.951,538,3.875,706,4.717,715,2.497,827,4.717,1008,4.717,1094,4.717,1245,3.496,1248,4.624,1250,2.799,1277,5.034,1356,4.762,1402,3.875,1475,3.875,1476,4.45,1477,3.875,1478,3.875,1479,4.717,1480,4.45,1481,4.45,1482,5.744,1483,3.875,1484,4.45,1485,4.45,1486,4.45]],["title/injectables/ProductsService.html",[53,0.292,113,2.378]],["body/injectables/ProductsService.html",[3,0.129,4,0.115,5,0.115,12,0.211,13,0.861,14,2.088,16,1.386,18,1.07,23,0.601,25,1.247,26,0.014,27,0.952,28,0.449,29,0.876,37,1.156,38,2.143,49,0.937,51,0.339,53,0.364,55,0.422,63,0.129,64,0.037,67,1.386,78,1.592,92,1.199,94,0.008,95,0.008,108,0.895,113,2.965,124,1.627,135,1.899,136,1.797,141,2.481,411,2.424,471,2.535,478,2.209,561,3.93,571,4.135,679,3.978,706,4.388,709,3.93,713,3.93,715,1.97,716,3.358,827,4.616,829,3.93,831,3.93,834,1.97,1008,4.515,1012,4.578,1016,3.764,1018,3.058,1020,4.356,1021,2.759,1022,2.759,1023,2.081,1094,4.616,1095,4.356,1096,4.356,1250,2.209,1258,4.207,1358,4.578,1393,4.515,1406,3.058,1479,4.515,1482,5.074,1483,3.058,1487,3.058,1488,3.512,1489,3.512,1490,3.512,1491,3.512,1492,3.512,1493,3.512,1494,3.058,1495,3.512,1496,3.512,1497,3.512,1498,3.512,1499,3.512,1500,3.512]],["title/guards/RolesGuard.html",[0,2.378,200,2.897]],["body/guards/RolesGuard.html",[0,3.357,2,3.032,3,0.154,4,0.138,5,0.138,9,0.931,10,3.357,12,0.253,13,0.975,15,5.388,16,0.867,18,1.371,23,0.488,25,1.012,26,0.014,27,0.874,28,0.364,29,0.711,30,4.449,31,4.313,33,2.412,35,1.52,36,3.357,37,0.975,39,3.323,40,2.874,41,4.931,42,3.801,51,0.303,53,0.412,55,0.505,63,0.154,64,0.06,65,2.238,66,1.72,67,0.867,71,1.633,72,3.657,74,2.412,75,1.915,92,1.012,94,0.009,95,0.009,104,3.722,138,3.177,155,3.657,193,2.819,200,4.089,310,2.489,374,4.931,376,3.657,377,6.566,386,3.032,387,3.657,388,2.489,389,3.657,390,3.032,391,3.657,408,3.657,409,3.657,430,3.357,766,2.819,837,2.238,929,3.032,1131,3.299,1501,3.657,1502,4.2,1503,4.2,1504,5.664,1505,5.664,1506,5.664,1507,4.931,1508,5.664,1509,3.299,1510,4.2,1511,4.2,1512,4.2,1513,5.664,1514,4.2,1515,4.2,1516,4.2,1517,5.664,1518,4.2,1519,4.2]],["title/classes/SeedProducts1759619432047.html",[64,0.043,1520,3.152]],["body/classes/SeedProducts1759619432047.html",[3,0.15,4,0.135,5,0.183,9,1.234,12,0.381,13,0.959,14,1.932,23,0.48,25,0.995,26,0.014,27,1.022,28,0.358,29,0.699,37,0.959,38,1.921,51,0.246,63,0.15,64,0.044,65,2.967,71,1.044,78,1.855,94,0.009,95,0.009,106,1.2,128,1.521,136,1.159,145,3.566,265,3.118,324,2.698,392,2.079,411,2.698,493,1.61,510,2.957,513,2.428,568,1.61,613,6.73,633,4.605,644,2.967,646,2.698,649,1.984,682,3.549,683,3.502,773,4.97,834,3.808,863,3.566,904,2.957,988,4.765,1204,2.576,1336,3.218,1342,3.502,1437,3.566,1463,4.374,1520,4.374,1521,5.508,1522,3.566,1523,6.326,1524,4.848,1525,5.568,1526,4.096,1527,5.568,1528,4.096,1529,4.374,1530,6.326,1531,3.566,1532,4.096,1533,4.096,1534,4.096,1535,4.096,1536,6.326,1537,4.096,1538,4.096,1539,4.096,1540,4.096,1541,4.096,1542,4.096,1543,4.096,1544,4.096,1545,4.096,1546,5.568,1547,4.096,1548,4.096,1549,3.566,1550,4.096,1551,4.096,1552,3.218,1553,3.566,1554,3.218,1555,3.218,1556,4.096,1557,4.096,1558,4.096,1559,3.566,1560,3.566,1561,4.096,1562,4.096,1563,4.096,1564,4.096,1565,4.096,1566,4.096,1567,5.568,1568,5.568,1569,4.096,1570,4.096,1571,4.096,1572,3.566,1573,4.096]],["title/classes/SignInDto.html",[64,0.043,268,2.524]],["body/classes/SignInDto.html",[3,0.187,4,0.168,5,0.168,9,1.562,12,0.308,23,0.555,26,0.014,28,0.414,35,1.64,49,0.929,51,0.285,63,0.187,64,0.069,94,0.01,95,0.01,102,1.761,103,3.83,151,2.102,230,3.83,257,4.652,268,4.052,306,2.728,322,4.655,336,4.022,456,4.325,568,2.013,572,3.819,578,2.48,591,5.091,724,5.611,743,6.14,744,5.611,1574,6.14,1575,4.458,1576,5.119,1577,5.119,1578,6.444,1579,5.119,1580,5.119,1581,5.119]],["title/injectables/SignInProvider.html",[53,0.292,349,2.524]],["body/injectables/SignInProvider.html",[3,0.144,4,0.129,5,0.129,9,0.871,10,3.669,11,3.404,12,0.236,13,0.932,14,1.633,16,1.278,18,1.427,23,0.466,25,0.967,26,0.014,27,0.738,28,0.348,29,0.679,33,2.305,35,1.55,37,0.932,38,1.531,40,1.994,51,0.32,52,2.471,53,0.394,54,2.637,55,0.472,63,0.144,64,0.042,66,2.025,67,1.278,71,1.379,74,1.673,75,1.329,78,1.691,92,0.702,94,0.009,95,0.009,103,2.622,104,1.821,106,1.152,108,1.001,114,4.235,134,3.421,135,1.752,137,2.094,138,3.742,141,2.841,230,1.904,265,2.636,266,4.251,267,4.251,268,4.548,272,3.907,288,3.907,311,3.087,312,3.087,325,4.251,329,4.251,332,2.329,334,2.329,347,4.235,348,4.195,349,3.404,351,2.837,361,3.421,369,4.712,430,2.329,435,2.837,437,3.421,438,4.863,609,3.087,768,3.421,1128,3.421,1130,3.421,1131,3.087,1582,5.39,1583,3.421,1584,5.412,1585,3.929,1586,6.671,1587,3.929,1588,3.929,1589,3.929,1590,6.191,1591,3.929,1592,3.929,1593,3.929,1594,3.929,1595,3.929,1596,3.929,1597,3.929]],["title/classes/UpdateCartItemDto.html",[64,0.043,463,2.524]],["body/classes/UpdateCartItemDto.html",[3,0.217,4,0.195,5,0.195,12,0.356,23,0.51,26,0.013,28,0.381,51,0.262,63,0.217,64,0.075,94,0.011,95,0.011,102,1.924,125,3.263,151,1.93,339,2.663,449,4.217,463,4.428,568,2.326,570,4.649,574,5.153,576,5.532,577,4.272,578,2.867,579,4.649,1598,6.131,1599,5.918]],["title/injectables/UpdateCartItemProvider.html",[53,0.292,533,2.524]],["body/injectables/UpdateCartItemProvider.html",[3,0.115,4,0.103,5,0.103,12,0.189,13,0.795,14,2.019,16,1.129,18,0.987,23,0.578,25,1.2,26,0.014,27,0.916,28,0.432,29,0.843,35,1.423,37,1.106,38,2.014,49,0.994,51,0.315,53,0.336,54,2.108,55,0.378,63,0.115,64,0.033,67,1.129,71,1.711,74,1.965,75,1.56,76,1.861,78,1.896,90,1.861,92,0.824,94,0.008,95,0.008,106,2.087,108,0.8,115,3.624,116,2.838,117,3.893,122,3.324,125,3.603,126,2.267,127,2.467,128,0.858,129,3.111,130,1.594,131,1.394,132,1.102,133,2.267,135,1.306,136,1.548,139,3.097,140,2.467,141,1.337,278,2.108,341,1.673,414,1.762,453,4.296,455,4.017,461,2.467,462,5.452,463,4.364,468,2.734,478,1.975,498,2.459,533,2.902,540,2.467,544,4.017,547,4.017,551,4.017,558,4.017,563,2.734,607,1.284,617,2.734,633,2.902,639,3.791,644,1.673,655,2.467,717,1.975,797,2.734,833,1.861,996,1.673,1005,3.097,1143,2.734,1148,4.017,1600,6.043,1601,2.734,1602,4.614,1603,5.469,1604,3.14,1605,3.14,1606,3.14,1607,3.14,1608,3.14,1609,3.14,1610,3.14,1611,3.14,1612,4.614,1613,4.614,1614,3.14,1615,4.614,1616,3.14,1617,3.14,1618,3.14,1619,4.614,1620,3.14,1621,2.734,1622,3.14]],["title/classes/UpdateProductDto.html",[64,0.043,1393,2.524]],["body/classes/UpdateProductDto.html",[3,0.199,4,0.179,5,0.179,12,0.327,23,0.576,26,0.014,28,0.43,29,0.949,51,0.32,63,0.199,64,0.071,94,0.011,95,0.011,102,1.827,151,2.18,306,2.894,411,2.632,430,3.962,498,3.86,500,3.751,568,2.135,578,2.632,592,5.073,633,4.205,679,3.219,681,4.267,716,3.646,806,4.487,839,4.293,1393,4.205,1623,6.307,1624,6.686,1625,5.432,1626,5.432,1627,5.432,1628,5.432,1629,6.686]],["title/injectables/UpdateProductProvider.html",[53,0.292,1479,2.524]],["body/injectables/UpdateProductProvider.html",[3,0.156,4,0.14,5,0.14,9,0.944,12,0.256,13,0.985,14,1.703,16,1.424,18,1.223,23,0.556,25,1.233,26,0.014,27,0.881,28,0.444,29,0.81,37,0.985,38,1.618,49,0.81,51,0.318,53,0.416,55,0.512,63,0.156,64,0.045,67,0.88,71,1.645,74,1.815,75,1.441,78,1.563,92,1.022,94,0.009,95,0.009,106,1.249,108,1.086,116,2.943,128,1.164,131,1.892,132,1.495,135,1.206,136,1.952,265,2.749,396,4.98,478,2.68,498,2.271,571,4.089,644,2.271,646,2.065,708,3.077,710,2.86,711,3.711,712,3.839,714,3.711,715,2.391,716,2.86,717,2.68,833,2.526,834,2.391,835,3.711,836,3.348,837,2.271,838,3.711,839,2.526,1123,5.195,1358,5.071,1393,4.76,1479,3.597,1494,3.711,1630,6.007,1631,6.456,1632,4.262,1633,6.456,1634,4.262,1635,5.72,1636,4.262,1637,5.72,1638,4.262,1639,3.711,1640,5.72,1641,4.262,1642,4.262,1643,4.262,1644,4.262]],["title/entities/User.html",[35,0.889,493,1.578]],["body/entities/User.html",[3,0.136,4,0.122,5,0.122,12,0.362,23,0.661,26,0.014,28,0.513,29,0.818,35,1.156,39,2.528,40,3.935,49,0.963,51,0.303,63,0.136,64,0.056,94,0.008,95,0.008,102,1.425,103,2.916,104,3.453,106,1.764,128,1.018,129,3.446,130,1.891,151,2.502,230,2.916,310,2.209,332,3.567,334,3.567,493,2.051,494,2.344,497,3.055,499,3.785,500,3.658,501,3.501,505,3.281,515,4.04,524,2.344,525,3.99,607,2.909,639,3.785,996,3.207,1107,4.098,1186,4.607,1187,6.488,1191,3.766,1194,5.38,1199,4.708,1209,4.346,1331,6.026,1333,2.928,1342,3.281,1350,2.928,1351,2.928,1645,3.245,1646,5.217,1647,3.727,1648,3.727,1649,7.452,1650,3.727,1651,3.727,1652,3.727,1653,3.727,1654,5.217,1655,3.727,1656,3.727,1657,3.727,1658,3.727,1659,3.727,1660,5.217,1661,3.245,1662,3.727]],["title/controllers/UsersController.html",[146,1.641,1663,2.897]],["body/controllers/UsersController.html",[3,0.116,4,0.104,5,0.104,9,1.615,12,0.191,13,0.802,16,0.656,18,0.68,23,0.274,25,0.568,26,0.014,27,0.434,28,0.476,29,0.399,35,1.801,37,1.044,38,1.716,39,2.256,49,0.874,51,0.316,55,0.382,63,0.116,64,0.034,66,0.965,67,0.656,75,2.281,92,0.568,94,0.008,95,0.008,102,0.869,103,3.375,104,2.157,106,0.932,114,3.09,124,1.473,135,0.9,137,1.694,138,3.402,146,2.253,148,1.411,151,1.037,230,3.589,250,2.134,251,1.999,252,3.361,254,4.796,255,4.796,261,3.657,265,2.346,274,4.054,275,3.657,278,3.125,279,4.054,281,2.134,282,2.497,286,2.497,292,3.697,294,3.125,295,2.768,296,1.999,297,3.125,301,3.657,303,3.657,304,4.327,305,2.768,306,1.694,308,1.999,310,2.759,316,2.497,318,4.327,320,2.928,322,4.059,324,2.256,331,4.795,332,3.825,334,3.825,337,2.497,340,3.125,384,2.295,390,3.361,411,2.256,436,2.768,497,1.613,500,1.784,637,2.295,721,4.584,754,4.327,758,2.497,760,1.999,762,2.497,766,2.134,772,4.054,773,2.497,786,2.928,931,3.657,1084,2.759,1360,3.657,1366,4.054,1367,4.054,1368,4.054,1369,5.28,1379,2.768,1403,2.768,1411,2.768,1663,3.361,1664,2.768,1665,4.656,1666,4.656,1667,3.179,1668,6.744,1669,4.656,1670,4.656,1671,4.054,1672,3.179,1673,6.744,1674,3.179,1675,3.179,1676,4.656,1677,2.768,1678,3.179,1679,3.179,1680,4.656,1681,4.656,1682,4.656,1683,3.179,1684,3.179,1685,3.179,1686,3.179,1687,3.179,1688,2.497,1689,3.179,1690,3.179]],["title/modules/UsersModule.html",[157,1.641,173,2.378]],["body/modules/UsersModule.html",[3,0.174,4,0.157,5,0.157,26,0.014,35,1.51,51,0.352,55,0.573,63,0.174,64,0.051,94,0.01,95,0.01,114,4.563,132,1.671,148,2.731,157,2.788,159,2.417,160,2.417,161,2.671,162,2.671,163,2.417,164,3.824,165,3.824,169,3.869,173,4.844,174,3.452,175,2.537,176,2.417,178,2.994,188,3.196,351,4.442,751,4.806,760,2.994,1099,4.806,1109,4.806,1245,3.74,1248,4.833,1249,3.438,1250,2.994,1663,4.921,1677,4.146,1691,4.146,1692,4.146,1693,4.146,1694,4.761,1695,4.761,1696,4.761,1697,4.146,1698,4.761]],["title/injectables/UsersService.html",[53,0.292,114,2.251]],["body/injectables/UsersService.html",[3,0.149,4,0.134,5,0.134,12,0.245,13,0.954,14,2.036,16,1.301,18,1.185,23,0.583,25,1.209,26,0.014,27,0.923,28,0.435,29,0.85,35,1.729,37,1.166,38,2.068,49,0.917,51,0.323,53,0.403,55,0.489,63,0.149,64,0.043,66,1.235,67,1.301,78,1.722,92,1.126,94,0.009,95,0.009,103,2.685,106,1.192,108,1.036,114,3.109,122,1.805,124,1.885,135,1.784,137,2.953,141,2.684,265,3.286,411,2.685,721,4.703,751,4.596,754,4.952,758,3.195,760,2.558,762,3.195,1099,4.703,1102,4.825,1104,4.825,1109,4.703,1110,4.825,1111,4.825,1249,2.936,1250,2.558,1258,4.886,1697,3.541,1699,3.541,1700,4.067,1701,4.067,1702,4.067,1703,4.825,1704,4.067,1705,4.067,1706,4.067,1707,4.067,1708,4.067]],["title/classes/ValidationException.html",[64,0.043,763,2.693]],["body/classes/ValidationException.html",[3,0.181,4,0.162,5,0.162,9,1.395,18,1.562,23,0.425,25,0.882,26,0.014,27,0.673,28,0.317,29,0.619,45,2.629,49,0.917,51,0.218,55,0.593,63,0.23,64,0.067,66,1.911,76,2.924,94,0.01,95,0.01,234,4.109,291,5.063,296,3.103,341,3.354,414,2.768,568,1.94,678,4.545,763,4.225,764,4.225,803,3.312,804,3.876,805,5.569,806,4.653,807,5.272,808,4.296,810,5.481,812,5.481,813,4.296,814,4.296,815,4.296,816,3.562,817,3.876,818,4.296,819,4.545,820,4.296,821,4.296,822,4.36,823,5.481,824,3.312,825,3.562,826,3.562,1709,4.934]],["title/coverage.html",[1710,4.313]],["body/coverage.html",[0,3.029,1,1.881,5,0.092,6,2.44,7,2.023,8,2.44,26,0.014,28,0.18,33,1.193,35,1.263,53,0.587,61,2.201,64,0.081,75,0.948,94,0.007,95,0.007,96,2.892,97,1.881,99,2.44,100,2.44,107,1.762,109,2.44,110,3.329,113,1.661,114,1.572,117,1.572,120,1.762,125,2.64,129,1.358,136,1.446,146,2.633,147,2.023,149,2.44,153,1.762,163,1.422,177,2.201,194,2.023,196,2.201,198,2.023,200,2.023,211,2.201,244,2.44,248,2.023,249,2.44,251,1.762,268,1.762,298,1.762,347,1.572,348,1.762,349,1.762,356,2.023,365,2.44,372,2.44,385,2.201,421,2.44,443,2.44,450,2.023,451,2.44,463,1.762,473,1.661,475,2.023,476,2.023,493,2.406,495,2.201,496,3.329,533,1.762,543,2.44,569,2.44,570,3.329,580,1.762,581,2.44,582,2.44,595,1.762,596,2.44,597,2.44,606,1.572,607,1.733,649,3.979,679,1.661,680,2.44,681,3.329,706,1.762,707,2.44,708,3.69,721,1.762,722,2.44,723,2.44,751,1.762,752,2.44,753,3.329,763,1.881,764,2.844,784,2.44,785,2.44,803,1.881,804,3.329,827,1.762,828,2.44,841,2.201,842,2.44,843,2.44,844,2.44,878,2.023,879,3.329,880,3.329,891,2.023,988,1.881,994,1.762,995,3.329,996,1.493,1008,1.762,1009,3.329,1010,2.44,1013,1.762,1016,1.661,1023,1.661,1028,1.661,1029,1.881,1085,1.762,1086,3.69,1094,1.762,1099,1.762,1100,3.329,1101,2.44,1109,1.762,1113,2.44,1114,2.44,1141,2.44,1155,2.023,1156,3.329,1157,3.329,1181,2.44,1185,2.44,1195,5.427,1214,2.44,1222,2.023,1223,2.44,1232,1.762,1252,2.44,1262,2.44,1283,2.44,1321,2.44,1326,3.329,1356,2.023,1357,2.44,1380,2.44,1393,1.762,1404,2.201,1425,2.201,1479,1.762,1487,2.44,1501,2.44,1509,2.201,1520,2.201,1521,2.44,1522,2.44,1529,2.201,1574,2.44,1575,2.44,1582,2.44,1583,2.44,1598,2.44,1600,2.44,1601,2.44,1623,2.44,1630,2.44,1645,2.44,1663,2.023,1664,2.44,1699,2.44,1710,2.201,1711,2.44,1712,2.802,1713,5.111,1714,6.884,1715,6.884,1716,5.698,1717,3.69,1718,2.44,1719,2.44,1720,2.44,1721,2.44,1722,7.047,1723,5.698,1724,2.802,1725,4.238,1726,4.238,1727,6.685,1728,2.802,1729,7.397,1730,6.437,1731,2.802,1732,5.111,1733,2.802,1734,2.802,1735,2.44,1736,4.238,1737,2.44,1738,2.802,1739,2.802,1740,2.44,1741,2.44,1742,2.44,1743,2.802,1744,2.802,1745,2.802]],["title/dependencies.html",[160,2.451,1746,2.912]],["body/dependencies.html",[26,0.014,55,0.682,56,3.567,57,3.806,58,3.806,64,0.073,94,0.011,95,0.011,128,1.549,132,1.99,160,2.878,193,3.806,306,3.022,383,4.094,401,3.567,422,4.938,578,2.748,1661,4.938,1747,5.671,1748,5.671,1749,7.382,1750,5.671,1751,6.864,1752,5.671,1753,5.671,1754,5.671,1755,5.671,1756,5.671,1757,5.671,1758,5.671,1759,5.671,1760,5.671,1761,5.671,1762,5.671,1763,5.671,1764,5.671,1765,5.671,1766,5.671]],["title/miscellaneous/enumerations.html",[1767,2.103,1768,4.206]],["body/miscellaneous/enumerations.html",[12,0.319,26,0.014,35,1.458,94,0.011,95,0.011,104,3.05,308,4.139,384,3.823,684,4.139,766,3.554,1084,4.926,1198,5.73,1362,5.73,1416,5.17,1452,5.17,1767,3.33,1768,4.61,1769,5.295,1770,7.491,1771,5.295,1772,6.581,1773,5.295,1774,6.581,1775,5.295,1776,5.295,1777,5.295,1778,5.295,1779,6.581,1780,6.581,1781,6.581,1782,6.581,1783,6.581,1784,5.295,1785,5.73,1786,5.73,1787,5.73,1788,5.73,1789,5.295,1790,4.61]],["title/miscellaneous/functions.html",[1767,2.103,1791,4.206]],["body/miscellaneous/functions.html",[12,0.387,26,0.012,94,0.012,95,0.012,163,3.948,1735,5.596,1767,4.042,1791,5.596,1792,6.427]],["title/index.html",[12,0.201,938,2.627,1793,3.344]],["body/index.html",[4,0.147,9,0.988,26,0.013,86,3.503,94,0.01,95,0.01,116,1.823,176,3.565,237,3.882,322,4.152,386,3.219,415,3.882,638,3.503,816,4.255,904,3.219,915,3.503,1058,3.882,1394,3.882,1549,6.665,1688,5.187,1710,3.503,1711,3.882,1794,4.459,1795,4.459,1796,6.603,1797,4.459,1798,3.882,1799,4.459,1800,3.882,1801,4.459,1802,6.603,1803,4.459,1804,7.025,1805,4.459,1806,7.654,1807,4.459,1808,4.459,1809,4.459,1810,4.459,1811,5.894,1812,4.459,1813,4.459,1814,6.603,1815,4.459,1816,5.894,1817,4.459,1818,4.459,1819,4.459,1820,7.025,1821,4.459,1822,4.459,1823,4.459,1824,4.459,1825,3.882,1826,7.025,1827,5.894,1828,4.459,1829,5.749,1830,4.459,1831,6.117,1832,4.459,1833,4.459,1834,4.459,1835,4.459,1836,3.882,1837,4.459,1838,6.603,1839,4.459,1840,3.882,1841,4.459,1842,5.894,1843,4.459,1844,4.459,1845,4.459,1846,4.459,1847,3.882,1848,4.459,1849,4.459,1850,5.132,1851,4.459,1852,4.459,1853,4.459,1854,4.459,1855,5.894,1856,4.459,1857,4.459,1858,3.882,1859,5.894,1860,5.894,1861,4.459,1862,4.459,1863,4.459,1864,4.459,1865,4.459,1866,4.459,1867,4.459,1868,4.459,1869,4.459,1870,3.882,1871,3.882,1872,4.459,1873,4.459,1874,4.459,1875,4.459,1876,4.459,1877,4.459,1878,3.882]],["title/modules.html",[159,2.787]],["body/modules.html",[26,0.012,94,0.012,95,0.012,158,4.305,159,3.027,169,3.75,170,3.75,171,4.002,172,3.75,173,3.534,1277,4.002,1831,7.104,1879,8.159,1880,8.159,1881,8.159]],["title/overview.html",[1882,4.781]],["body/overview.html",[2,2.682,26,0.014,94,0.008,95,0.008,98,2.493,107,3.779,108,0.947,113,4.324,114,4.093,117,3.371,136,1.7,148,1.649,153,3.779,157,1.519,158,5.728,159,1.885,160,1.885,161,2.084,162,2.084,163,1.885,164,2.084,165,2.084,166,3.235,167,3.235,168,3.235,169,4.821,170,5.107,171,5.289,172,5.107,173,4.671,174,2.92,175,1.979,176,1.885,298,3.779,344,3.235,345,3.235,346,3.235,347,3.653,348,3.779,349,3.779,473,4.324,494,2.336,529,3.235,530,3.235,531,3.235,532,3.235,533,3.779,568,1.46,595,3.779,706,3.779,751,3.779,827,3.779,994,3.779,1008,3.779,1013,4.588,1085,3.779,1094,3.779,1099,3.779,1109,3.779,1232,3.779,1240,3.235,1241,3.235,1277,4.769,1278,3.235,1279,3.235,1280,3.235,1475,3.235,1477,3.235,1478,3.235,1479,3.779,1552,2.918,1553,3.235,1554,2.918,1555,2.918,1691,3.235,1692,3.235,1693,3.235,1882,3.235,1883,3.715,1884,3.715,1885,3.235]],["title/properties.html",[102,1.32,1746,2.912]],["body/properties.html",[9,1.412,26,0.013,94,0.012,95,0.012,102,1.741,1871,5.55,1878,5.55,1886,6.374,1887,6.374,1888,6.374]],["title/miscellaneous/variables.html",[1767,2.103,1889,4.206]],["body/miscellaneous/variables.html",[9,1.502,12,0.043,13,0.122,26,0.013,27,0.925,28,0.172,31,0.445,35,0.737,45,0.697,49,0.229,50,0.419,61,1.027,66,0.215,71,0.333,81,0.616,90,0.419,92,0.234,94,0.004,95,0.002,97,0.878,102,0.498,104,0.328,137,0.377,176,0.664,177,0.555,209,0.616,210,1.98,211,1.027,212,0.616,242,2.613,251,1.147,252,0.944,253,0.555,258,3.899,261,0.555,308,0.822,364,0.616,381,1.027,385,1.027,388,2.419,390,2.947,392,1.829,399,1.589,406,1.139,411,1.102,416,1.98,444,1.275,475,0.944,476,0.51,528,1.027,560,1.589,638,2.095,644,3.612,646,3.284,651,0.616,677,0.616,682,3.803,683,4.263,738,1.433,741,0.616,834,1.866,856,1.139,859,2.947,865,0.616,894,0.555,918,0.555,929,0.51,983,0.555,988,1.225,1025,1.139,1040,0.775,1048,0.616,1059,0.616,1070,1.139,1084,2.136,1195,0.878,1204,0.445,1267,0.616,1274,1.786,1330,1.317,1342,1.678,1360,1.027,1404,2.613,1414,1.139,1415,4.189,1416,3.028,1417,3.357,1418,0.616,1419,2.896,1420,1.589,1421,1.139,1422,3.357,1423,2.896,1425,1.433,1426,5.499,1433,1.139,1436,0.616,1449,5.076,1450,0.616,1451,1.98,1452,3.369,1453,4.651,1454,1.98,1456,2.896,1457,2.896,1458,2.896,1459,0.616,1460,1.139,1461,1.589,1462,5.001,1463,2.613,1464,1.98,1507,1.139,1509,1.027,1524,1.139,1529,1.027,1531,2.323,1552,0.555,1554,1.027,1555,2.613,1559,0.616,1560,0.616,1572,1.98,1621,0.616,1639,0.616,1671,1.139,1688,1.433,1703,0.616,1717,0.616,1718,0.616,1719,1.139,1720,0.616,1721,0.616,1737,1.139,1740,0.616,1741,1.139,1742,1.139,1767,0.445,1785,4.651,1786,2.896,1787,4.437,1788,4.189,1790,2.896,1798,1.589,1800,0.616,1825,1.139,1829,1.139,1836,1.139,1840,0.616,1847,1.139,1850,0.616,1858,3.357,1870,1.139,1885,1.139,1889,0.616,1890,0.707,1891,0.707,1892,1.308,1893,0.707,1894,0.707,1895,0.707,1896,0.707,1897,0.707,1898,1.308,1899,0.707,1900,0.707,1901,0.707,1902,0.707,1903,0.707,1904,0.707,1905,1.824,1906,0.707,1907,0.707,1908,0.707,1909,6.741,1910,3.604,1911,2.668,1912,4.082,1913,2.668,1914,1.308,1915,1.824,1916,2.274,1917,1.308,1918,2.274,1919,5.341,1920,2.274,1921,1.308,1922,1.308,1923,0.707,1924,3.855,1925,2.668,1926,4.811,1927,2.274,1928,3.016,1929,4.652,1930,2.668,1931,1.824,1932,3.016,1933,1.308,1934,1.824,1935,0.707,1936,0.707,1937,1.308,1938,1.308,1939,1.308,1940,0.707,1941,0.707,1942,3.604,1943,2.274,1944,3.326,1945,4.082,1946,4.082,1947,3.016,1948,1.308,1949,1.824,1950,2.274,1951,1.308,1952,1.308,1953,2.668,1954,3.604,1955,1.824,1956,3.016,1957,2.274,1958,3.855,1959,2.274,1960,1.824,1961,3.326,1962,3.855,1963,3.855,1964,1.308,1965,1.824,1966,0.707,1967,4.478,1968,2.274,1969,4.478,1970,2.668,1971,2.274,1972,1.308,1973,4.959,1974,1.308,1975,0.707,1976,3.326,1977,1.308,1978,0.707,1979,1.824,1980,1.824,1981,4.478,1982,2.274,1983,2.668,1984,0.707,1985,0.707,1986,1.308,1987,5.988,1988,2.274,1989,0.707,1990,4.959,1991,1.308,1992,1.308,1993,1.308,1994,2.274,1995,0.707,1996,1.308,1997,1.824,1998,1.308,1999,1.308,2000,1.824,2001,0.707,2002,1.308,2003,0.707,2004,0.707,2005,0.707,2006,1.308,2007,0.707,2008,1.308,2009,3.016,2010,0.707,2011,1.308,2012,0.707,2013,0.707,2014,1.308,2015,2.668,2016,1.308,2017,1.824,2018,2.668,2019,1.308,2020,2.274,2021,0.707,2022,1.308,2023,1.308,2024,1.824,2025,1.824,2026,1.824,2027,2.668,2028,0.707,2029,2.274,2030,0.707,2031,0.707,2032,1.824,2033,1.308,2034,3.855,2035,1.824,2036,3.016,2037,0.707,2038,1.308,2039,3.326,2040,1.308,2041,1.308,2042,0.707,2043,2.274,2044,2.668,2045,0.707,2046,0.707,2047,0.707,2048,0.707,2049,2.668,2050,0.707,2051,0.707,2052,0.707,2053,2.274,2054,3.016,2055,1.308,2056,0.707,2057,0.707,2058,1.824,2059,0.707,2060,2.274,2061,1.308,2062,1.824,2063,2.274,2064,0.707,2065,1.824,2066,1.824,2067,0.707,2068,0.707,2069,1.308,2070,1.308,2071,1.308,2072,2.274,2073,1.824,2074,0.707,2075,1.824,2076,0.707,2077,0.707,2078,0.707,2079,2.274,2080,0.707,2081,1.824,2082,0.707,2083,0.707,2084,0.707,2085,0.707,2086,0.707,2087,1.308,2088,1.824,2089,1.824,2090,0.707,2091,1.308,2092,2.274,2093,3.016,2094,1.824,2095,1.308,2096,0.707,2097,1.308,2098,0.707,2099,0.707,2100,0.707,2101,1.308,2102,1.308,2103,1.824,2104,3.016,2105,1.308,2106,2.668,2107,1.308,2108,1.308,2109,0.707,2110,1.824,2111,0.707,2112,0.707,2113,1.824,2114,3.016,2115,1.308,2116,1.308,2117,3.604,2118,0.707,2119,1.308,2120,1.308,2121,1.308,2122,0.707,2123,0.707,2124,3.855,2125,1.824,2126,2.668,2127,1.824,2128,1.824,2129,2.668,2130,2.274,2131,1.824,2132,0.707,2133,0.707,2134,2.274,2135,0.707,2136,1.824,2137,1.824,2138,1.308,2139,0.707,2140,1.824,2141,0.707,2142,1.308,2143,1.308,2144,3.604,2145,1.308,2146,0.707,2147,1.308,2148,0.707,2149,1.308,2150,1.308,2151,2.274,2152,0.707,2153,1.308,2154,0.707,2155,0.707,2156,0.707,2157,1.308,2158,1.824,2159,2.668,2160,2.274,2161,2.274,2162,1.308,2163,0.707,2164,1.308,2165,3.326,2166,2.274,2167,1.308,2168,0.707,2169,0.707,2170,1.308,2171,1.824,2172,0.707,2173,0.707,2174,0.707,2175,2.274,2176,1.308,2177,1.824,2178,0.707,2179,0.707,2180,0.707,2181,3.604,2182,0.707,2183,0.707,2184,1.308,2185,1.824,2186,2.668,2187,1.308,2188,1.824,2189,0.707,2190,1.308,2191,3.326,2192,0.707,2193,0.707,2194,0.707,2195,0.707,2196,1.308,2197,0.707,2198,0.707,2199,1.308,2200,1.308,2201,1.308,2202,1.308,2203,0.707,2204,1.308,2205,0.707,2206,0.707,2207,0.707,2208,0.707,2209,0.707,2210,0.707,2211,4.289,2212,4.652,2213,1.824,2214,1.308,2215,1.824,2216,1.824,2217,1.824,2218,0.707,2219,1.308,2220,1.308,2221,0.707,2222,0.707,2223,2.274,2224,2.274,2225,1.308,2226,1.308,2227,0.707,2228,0.707,2229,0.707,2230,0.707,2231,0.707,2232,0.707,2233,0.707,2234,1.308,2235,2.274,2236,1.308,2237,0.707,2238,2.274,2239,1.824,2240,0.707,2241,0.707,2242,0.707,2243,0.707,2244,0.707,2245,1.308,2246,0.707,2247,1.824,2248,1.824,2249,1.308,2250,1.824,2251,0.707,2252,0.707,2253,1.308,2254,0.707,2255,0.707,2256,1.308,2257,0.707,2258,0.707,2259,1.308,2260,0.707,2261,0.707,2262,1.308,2263,0.707,2264,0.707,2265,0.707,2266,1.308,2267,3.326,2268,1.308,2269,2.274,2270,0.707,2271,1.308,2272,1.824,2273,3.016,2274,0.707,2275,1.308,2276,1.308,2277,0.707,2278,1.824,2279,0.707,2280,1.308,2281,0.707,2282,0.707,2283,0.707,2284,1.308,2285,0.707,2286,1.308,2287,0.707,2288,0.707,2289,0.707,2290,2.274,2291,0.707,2292,3.855,2293,0.707,2294,0.707,2295,2.274,2296,2.668,2297,0.707,2298,1.308,2299,0.707,2300,1.308,2301,0.707,2302,1.824,2303,1.308,2304,0.707,2305,0.707,2306,0.707,2307,3.604,2308,1.308,2309,0.707,2310,0.707,2311,2.274,2312,0.707,2313,0.707,2314,1.308,2315,0.707,2316,1.308,2317,3.326,2318,0.707,2319,0.707,2320,0.707,2321,0.707,2322,0.707,2323,2.274,2324,1.308,2325,0.707,2326,0.707,2327,0.707,2328,0.707,2329,0.707,2330,0.707,2331,0.707,2332,0.707,2333,3.326,2334,0.707,2335,0.707,2336,0.707,2337,0.707,2338,0.707,2339,0.707,2340,1.824,2341,0.707,2342,2.668,2343,0.707,2344,1.308,2345,1.308,2346,0.707,2347,0.707,2348,0.707,2349,0.707,2350,0.707,2351,2.274,2352,2.274,2353,0.707,2354,0.707,2355,0.707,2356,0.707,2357,0.707,2358,0.707,2359,0.707,2360,0.707,2361,1.308,2362,0.707,2363,0.707,2364,2.668,2365,1.308,2366,0.707,2367,0.707,2368,1.308,2369,1.824,2370,0.707,2371,0.707,2372,0.707,2373,0.707,2374,0.707,2375,0.707,2376,1.308,2377,0.707,2378,0.707,2379,1.308,2380,1.308,2381,0.707,2382,1.308,2383,0.707,2384,0.707,2385,0.707,2386,0.707,2387,0.707,2388,0.707,2389,0.707,2390,0.707,2391,0.707,2392,0.707,2393,1.824,2394,1.308,2395,0.707,2396,1.308,2397,0.707,2398,0.707,2399,0.707,2400,0.707,2401,0.707,2402,0.707,2403,0.707,2404,0.707,2405,0.707,2406,0.707,2407,0.707,2408,0.707,2409,0.707,2410,0.707,2411,0.707,2412,0.707,2413,2.274,2414,1.308,2415,1.308,2416,0.707,2417,0.707,2418,1.308,2419,0.707,2420,1.824,2421,1.824,2422,0.707,2423,0.707,2424,0.707,2425,1.824,2426,0.707,2427,1.824,2428,0.707,2429,2.274,2430,0.707,2431,1.308,2432,1.824,2433,0.707,2434,1.308,2435,0.707,2436,1.824,2437,0.707,2438,1.308,2439,3.326,2440,2.668,2441,1.308,2442,1.308,2443,1.308,2444,0.707,2445,1.824,2446,2.274,2447,2.668,2448,0.707,2449,0.707,2450,0.707,2451,0.707,2452,0.707,2453,1.824,2454,0.707,2455,1.308,2456,0.707,2457,1.308,2458,0.707,2459,0.707,2460,2.668,2461,1.308,2462,1.308,2463,2.274,2464,0.707,2465,0.707,2466,0.707,2467,0.707,2468,0.707,2469,0.707,2470,1.308,2471,0.707,2472,1.308,2473,1.308,2474,0.707,2475,2.274,2476,0.707,2477,0.707,2478,0.707,2479,0.707,2480,2.274,2481,0.707,2482,0.707,2483,0.707,2484,1.824,2485,2.274,2486,0.707,2487,0.707,2488,1.308,2489,0.707,2490,0.707,2491,0.707,2492,0.707,2493,1.308,2494,1.824,2495,0.707,2496,0.707,2497,0.707,2498,0.707,2499,0.707,2500,0.707,2501,0.707,2502,0.707,2503,0.707,2504,0.707,2505,0.707,2506,0.707,2507,1.824,2508,0.707,2509,0.707,2510,0.707,2511,0.707,2512,0.707,2513,0.707,2514,0.707,2515,0.707,2516,0.707,2517,0.707,2518,0.707,2519,0.707,2520,0.707,2521,0.707,2522,0.707,2523,1.824,2524,0.707,2525,1.824,2526,1.824,2527,0.707,2528,0.707,2529,3.326,2530,1.308,2531,1.308,2532,0.707,2533,0.707,2534,0.707,2535,0.707,2536,1.308,2537,0.707,2538,1.824,2539,0.707,2540,1.308,2541,0.707,2542,0.707,2543,0.707,2544,0.707,2545,0.707,2546,0.707,2547,0.707,2548,2.274,2549,1.308,2550,0.707,2551,0.707,2552,2.668,2553,0.707,2554,1.824,2555,0.707,2556,0.707,2557,0.707,2558,0.707,2559,1.308,2560,1.308,2561,0.707,2562,0.707,2563,0.707,2564,0.707,2565,1.308,2566,1.308,2567,0.707,2568,0.707,2569,1.308,2570,1.308,2571,0.707,2572,0.707,2573,0.707,2574,0.707,2575,0.707,2576,0.707,2577,1.308,2578,0.707,2579,0.707,2580,0.707,2581,0.707,2582,0.707,2583,0.707,2584,1.824,2585,2.668,2586,1.308,2587,2.274,2588,0.707,2589,0.707,2590,2.274,2591,0.707,2592,0.707,2593,0.707,2594,0.707,2595,0.707,2596,0.707,2597,0.707,2598,0.707,2599,0.707,2600,1.308,2601,0.707,2602,0.707,2603,1.824,2604,0.707,2605,0.707,2606,0.707,2607,0.707,2608,1.824,2609,1.824,2610,1.308,2611,0.707,2612,0.707,2613,1.308,2614,0.707,2615,0.707,2616,0.707,2617,0.707,2618,0.707,2619,0.707,2620,0.707,2621,0.707,2622,0.707,2623,0.707,2624,0.707,2625,0.707,2626,0.707,2627,0.707,2628,1.308,2629,0.707,2630,0.707,2631,1.308,2632,0.707,2633,0.707,2634,0.707,2635,0.707,2636,0.707,2637,0.707,2638,0.707,2639,0.707,2640,0.707,2641,0.707,2642,0.707,2643,0.707,2644,0.707,2645,0.707,2646,0.707,2647,0.707,2648,0.707,2649,0.707,2650,3.016,2651,2.274,2652,1.308,2653,0.707,2654,0.707,2655,0.707,2656,0.707,2657,0.707,2658,0.707,2659,0.707,2660,0.707,2661,1.308,2662,0.707,2663,1.308,2664,0.707,2665,0.707,2666,0.707,2667,0.707,2668,1.308,2669,0.707,2670,0.707,2671,0.707,2672,0.707,2673,0.707,2674,0.707,2675,0.707,2676,0.707,2677,2.668,2678,1.308,2679,0.707,2680,0.707,2681,0.707,2682,1.824,2683,1.308,2684,1.308,2685,0.707,2686,1.308,2687,1.308,2688,0.707,2689,0.707,2690,0.707,2691,0.707,2692,0.707,2693,0.707,2694,1.308,2695,1.824,2696,0.707,2697,0.707,2698,1.308,2699,0.707,2700,0.707,2701,0.707,2702,0.707,2703,0.707,2704,0.707,2705,0.707,2706,0.707,2707,0.707,2708,0.707,2709,0.707,2710,0.707,2711,0.707,2712,0.707,2713,2.668,2714,0.707,2715,0.707,2716,1.308,2717,0.707,2718,0.707,2719,0.707,2720,0.707,2721,0.707,2722,0.707,2723,0.707,2724,0.707,2725,1.308,2726,0.707,2727,0.707,2728,0.707,2729,0.707,2730,0.707,2731,1.308,2732,0.707,2733,0.707,2734,0.707,2735,0.707,2736,0.707,2737,1.824,2738,0.707,2739,0.707,2740,0.707,2741,1.824,2742,0.707,2743,0.707,2744,0.707,2745,0.707,2746,0.707,2747,1.308,2748,0.707,2749,0.707,2750,0.707,2751,0.707,2752,0.707,2753,2.668,2754,0.707,2755,0.707,2756,0.707,2757,0.707,2758,0.707,2759,0.707,2760,0.707,2761,0.707,2762,0.707,2763,0.707,2764,0.707,2765,0.707,2766,0.707,2767,0.707,2768,0.707,2769,0.707,2770,0.707,2771,0.707,2772,0.707,2773,0.707,2774,0.707,2775,0.707,2776,0.707,2777,0.707,2778,0.707,2779,0.707,2780,0.707,2781,0.707,2782,0.707,2783,0.707,2784,1.308,2785,0.707,2786,0.707,2787,0.707,2788,0.707,2789,0.707,2790,0.707,2791,0.707,2792,1.308,2793,0.707,2794,0.707,2795,0.707,2796,0.707,2797,0.707,2798,0.707,2799,0.707,2800,0.707,2801,0.707,2802,1.308,2803,0.707,2804,0.707,2805,0.707,2806,0.707,2807,1.824,2808,0.707,2809,0.707,2810,0.707,2811,0.707,2812,0.707,2813,0.707,2814,0.707,2815,0.707,2816,0.707,2817,0.707,2818,0.707,2819,0.707,2820,0.707,2821,1.308,2822,0.707,2823,0.707,2824,0.707,2825,0.707,2826,0.707,2827,0.707,2828,0.707,2829,0.707,2830,0.707,2831,0.707,2832,0.707,2833,0.707,2834,0.707]],["title/routes.html",[2835,4.781]],["body/routes.html",[26,0.012,94,0.012,95,0.012,2835,5.707]],["title/classes/Product.html",[64,0.043,136,1.135]],["body/classes/Product.html",[3,0.123,4,0.111,5,0.111,9,1.26,12,0.342,23,0.673,26,0.014,27,0.776,28,0.514,29,0.863,39,3.332,40,3.897,49,0.911,51,0.292,63,0.123,64,0.036,94,0.008,95,0.008,102,1.325,106,1.667,128,0.919,129,3.332,130,2.462,136,1.373,151,2.547,339,2.601,392,3.16,430,3.69,493,1.322,497,2.887,498,3.031,499,3.578,500,3.858,501,3.256,505,3.051,512,3.811,515,3.818,524,2.116,525,4.21,568,1.322,606,2.721,607,2.7,639,3.578,644,3.031,646,2.756,649,3.017,664,4.107,682,3.191,683,3.578,684,4.152,700,2.258,701,2.258,839,3.372,884,3.502,996,3.031,1040,2.875,1186,4.179,1191,3.502,1194,3.502,1195,3.256,1199,3.502,1201,3.502,1202,3.502,1203,3.502,1204,3.051,1209,4.107,1326,2.643,1327,4.224,1328,2.929,1329,4.224,1330,3.502,1331,6.087,1332,2.929,1333,2.643,1334,2.929,1335,2.929,1336,3.811,1337,2.929,1338,2.929,1339,2.929,1340,2.929,1341,2.929,1342,3.051,1343,2.929,1344,4.224,1345,2.929,1346,2.929,1347,2.929,1348,2.929,1349,2.929,1350,2.643,1351,2.643,1352,2.929,1353,2.929,1354,2.929,1355,2.929]]],"invertedIndex":[["",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{},"classes/Product.html":{}}}],["0",{"_index":649,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"classes/SeedProducts1759619432047.html":{},"coverage.html":{},"classes/Product.html":{}}}],["0.0.1",{"_index":1887,"title":{},"body":{"properties.html":{}}}],["0.14.2",{"_index":1756,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1764,"title":{},"body":{"dependencies.html":{}}}],["0.3.27",{"_index":1766,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1755,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1727,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1739,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1713,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1729,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1730,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1736,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1728,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1732,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1731,"title":{},"body":{"coverage.html":{}}}],["0ce2",{"_index":2733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":513,"title":{},"body":{"entities/CartItem.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllProductsProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/SeedProducts1759619432047.html":{}}}],["1.0.0",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/ProductsController.html":{}}}],["1.1.26",{"_index":1748,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1715,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1726,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":1744,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1040,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"miscellaneous/variables.html":{},"classes/Product.html":{}}}],["10.0",{"_index":2121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["10.0.0",{"_index":1749,"title":{},"body":{"dependencies.html":{}}}],["10.5",{"_index":2818,"title":{},"body":{"miscellaneous/variables.html":{}}}],["100",{"_index":1195,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{},"coverage.html":{},"miscellaneous/variables.html":{},"classes/Product.html":{}}}],["11.0",{"_index":2414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11.0.0",{"_index":1751,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":1753,"title":{},"body":{"dependencies.html":{}}}],["11/11",{"_index":1734,"title":{},"body":{"coverage.html":{}}}],["12.0",{"_index":1940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12.5",{"_index":2623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12.99",{"_index":1447,"title":{},"body":{"controllers/ProductsController.html":{}}}],["12oz",{"_index":2395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["13.0",{"_index":2546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["14.0",{"_index":2390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["14.5",{"_index":2692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["15",{"_index":1885,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["15.0",{"_index":2154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["15t04:32:09.837z",{"_index":1466,"title":{},"body":{"controllers/ProductsController.html":{}}}],["16",{"_index":2625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["16.0",{"_index":2361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["16t09:13:11.702z",{"_index":1435,"title":{},"body":{"controllers/ProductsController.html":{}}}],["16t09:35:37.131z",{"_index":1467,"title":{},"body":{"controllers/ProductsController.html":{}}}],["17.0",{"_index":2751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["17.2.3",{"_index":1758,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":2804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["18.0",{"_index":2179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["18.0.1",{"_index":1760,"title":{},"body":{"dependencies.html":{}}}],["19.0",{"_index":2641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1].charat(0).touppercase()}${pathsegments[pathsegments.length",{"_index":953,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["1].slice(1",{"_index":954,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["2",{"_index":1204,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{},"classes/Product.html":{}}}],["2/2",{"_index":1716,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1425,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["20.0",{"_index":2288,"title":{},"body":{"miscellaneous/variables.html":{}}}],["200",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{}}}],["201",{"_index":1368,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["2025",{"_index":1434,"title":{},"body":{"controllers/ProductsController.html":{}}}],["20oz",{"_index":2261,"title":{},"body":{"miscellaneous/variables.html":{}}}],["21.0",{"_index":2782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["22.0",{"_index":2231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["24",{"_index":2270,"title":{},"body":{"miscellaneous/variables.html":{}}}],["24.0",{"_index":2803,"title":{},"body":{"miscellaneous/variables.html":{}}}],["25",{"_index":1433,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["25.0",{"_index":1424,"title":{},"body":{"controllers/ProductsController.html":{}}}],["27",{"_index":1884,"title":{},"body":{"overview.html":{}}}],["28.0",{"_index":2658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2wulatjl.jpg",{"_index":2233,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3",{"_index":1552,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["3/3",{"_index":1722,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":1738,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":856,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["32oz",{"_index":2343,"title":{},"body":{"miscellaneous/variables.html":{}}}],["33",{"_index":1725,"title":{},"body":{"coverage.html":{}}}],["35",{"_index":2089,"title":{},"body":{"miscellaneous/variables.html":{}}}],["36125653336302.jpg?v=1750452777&width=2000",{"_index":2593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":1553,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"overview.html":{}}}],["4.0",{"_index":2309,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.2",{"_index":1750,"title":{},"body":{"dependencies.html":{}}}],["4.5",{"_index":2469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4/4",{"_index":1723,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":1743,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":2029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["400",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["401",{"_index":960,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/ProductsController.html":{}}}],["403",{"_index":962,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/ProductsController.html":{}}}],["404",{"_index":964,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/ProductsController.html":{}}}],["409",{"_index":966,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["40°f",{"_index":2534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["422",{"_index":968,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["429",{"_index":969,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["42d7",{"_index":2734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["45",{"_index":2204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["450°f",{"_index":1464,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["4636",{"_index":2208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["480°f",{"_index":2535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4ac5",{"_index":1383,"title":{},"body":{"controllers/ProductsController.html":{}}}],["4c26",{"_index":1430,"title":{},"body":{"controllers/ProductsController.html":{}}}],["5",{"_index":1554,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["5.0",{"_index":1999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5.5",{"_index":2448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5/5",{"_index":1724,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1330,"title":{},"body":{"entities/Product.html":{},"controllers/ProductsController.html":{},"miscellaneous/variables.html":{},"classes/Product.html":{}}}],["500",{"_index":971,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["502",{"_index":972,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["503",{"_index":974,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["504",{"_index":976,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["55",{"_index":2058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["58f4a6745939.4a0aae3c06dcdb4e3d94ae2cf91c1c3c.jpeg?odnheight=576&odnwidth=576&odnbg=ffffff",{"_index":2736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":1555,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["6.0",{"_index":2256,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6.0.0",{"_index":1754,"title":{},"body":{"dependencies.html":{}}}],["6.5",{"_index":2028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["60",{"_index":1737,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["65",{"_index":2415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7",{"_index":1883,"title":{},"body":{"overview.html":{}}}],["7.0",{"_index":2340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7.5",{"_index":2057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7.8.1",{"_index":1765,"title":{},"body":{"dependencies.html":{}}}],["70",{"_index":2470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["75",{"_index":2000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8.0",{"_index":1974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8.16.3",{"_index":1762,"title":{},"body":{"dependencies.html":{}}}],["8.5",{"_index":2711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8/8",{"_index":1733,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1742,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["85",{"_index":2512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9.0",{"_index":2088,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9.00",{"_index":1465,"title":{},"body":{"controllers/ProductsController.html":{}}}],["9.5",{"_index":2203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9.99",{"_index":1455,"title":{},"body":{"controllers/ProductsController.html":{}}}],["90",{"_index":2449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["93d3",{"_index":2735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["96",{"_index":1649,"title":{},"body":{"entities/User.html":{}}}],["9685",{"_index":1384,"title":{},"body":{"controllers/ProductsController.html":{}}}],["_",{"_index":91,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["a48ac60f",{"_index":1381,"title":{},"body":{"controllers/ProductsController.html":{}}}],["a526",{"_index":2209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abbe",{"_index":1431,"title":{},"body":{"controllers/ProductsController.html":{}}}],["absorb",{"_index":2600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["absorbent",{"_index":2425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["absorbing",{"_index":2640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["absorbs",{"_index":2559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["absorption",{"_index":2795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abstract",{"_index":1182,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["acacia",{"_index":2678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/GenerateTokensProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{}}}],["accessible",{"_index":1361,"title":{},"body":{"controllers/ProductsController.html":{}}}],["accesstoken",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["accidents",{"_index":2664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accommodate",{"_index":2201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accommodates",{"_index":2686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accompaniments",{"_index":2799,"title":{},"body":{"miscellaneous/variables.html":{}}}],["account",{"_index":1668,"title":{},"body":{"controllers/UsersController.html":{}}}],["action",{"_index":2441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["active",{"_index":1902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["activeuser",{"_index":475,"title":{},"body":{"controllers/CartController.html":{},"controllers/OrdersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["activeuser('sub",{"_index":487,"title":{},"body":{"controllers/CartController.html":{},"controllers/OrdersController.html":{}}}],["activeuserdata",{"_index":97,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["activities",{"_index":2283,"title":{},"body":{"miscellaneous/variables.html":{}}}],["add",{"_index":560,"title":{},"body":{"injectables/CartService.html":{},"miscellaneous/variables.html":{}}}],["adding",{"_index":2151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["address",{"_index":1578,"title":{},"body":{"classes/SignInDto.html":{}}}],["adds",{"_index":2683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addtocart",{"_index":111,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{}}}],["addtocart(@activeuser('sub",{"_index":483,"title":{},"body":{"controllers/CartController.html":{}}}],["addtocart(userid",{"_index":119,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{}}}],["addtocartprovider",{"_index":107,"title":{"injectables/AddToCartProvider.html":{}},"body":{"injectables/AddToCartProvider.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"coverage.html":{},"overview.html":{}}}],["adhesives",{"_index":2667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["adjust",{"_index":1559,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["admin",{"_index":1362,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/enumerations.html":{}}}],["aesthetic",{"_index":1998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["again",{"_index":862,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["agnes",{"_index":1681,"title":{},"body":{"controllers/UsersController.html":{}}}],["air",{"_index":2223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["airflow",{"_index":2616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["airtight",{"_index":2131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allow",{"_index":1515,"title":{},"body":{"guards/RolesGuard.html":{}}}],["allowedfields",{"_index":1633,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["allowedfields.includes(el",{"_index":1642,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["allowing",{"_index":2249,"title":{},"body":{"miscellaneous/variables.html":{}}}],["allows",{"_index":2239,"title":{},"body":{"miscellaneous/variables.html":{}}}],["already",{"_index":772,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{}}}],["alternative",{"_index":1572,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["aluminum",{"_index":2099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazing",{"_index":1865,"title":{},"body":{"index.html":{}}}],["amazon.com/images/i/413kbqce+cl.jpg",{"_index":2001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/41w9dl8ke3l.jpg",{"_index":2492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/519twmwo2tl.jpg",{"_index":2341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/51a6ztwcjel.jpg",{"_index":2528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/51abhippj4l.jpg",{"_index":2416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/51srqbmnpel.jpg",{"_index":2567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/51vq0ipxqul.jpg",{"_index":1975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/618gm",{"_index":2819,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/61a2v30mxol.jpg",{"_index":2391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/61bw3a5w0cl.jpg",{"_index":2712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/61csyqgirfl.jpg",{"_index":2675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/61s5b8hwuil.jpg",{"_index":2059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/61vgtekvpql.jpg",{"_index":1459,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["amazon.com/images/i/61wqnrbzqll.jpg",{"_index":2805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/71",{"_index":2232,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/712zqjxfuyl.jpg",{"_index":2155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/713aghybljl.jpg",{"_index":2659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/71eg5iyovel.jpg",{"_index":2752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/71g5unlihrl.jpg",{"_index":2547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/71hqarzk7al.jpg",{"_index":2642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/71ifr2n807l.jpg",{"_index":2834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/71lxsajgcgl.jpg",{"_index":2513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/71o0o8ppfvl.jpg",{"_index":2289,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/71ovt+reiyl.jpg",{"_index":1427,"title":{},"body":{"controllers/ProductsController.html":{}}}],["amazon.com/images/i/71phf6am0+l.jpg",{"_index":2767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/71tjvjfnnkl.jpg",{"_index":2090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/71tts6crs3l.jpg",{"_index":2471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/71wejvgp1fl.jpg",{"_index":2783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/818",{"_index":2257,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/81dlaomw94l.jpg",{"_index":2310,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/81i+oawo9pl.jpg",{"_index":2624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/81jbfallwbl.jpg",{"_index":1941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/81jwx",{"_index":2122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/81rwurfw",{"_index":2362,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/81s+ikiyxyl.jpg",{"_index":2693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/81vm",{"_index":2030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/i/91qleaoa2gl.jpg",{"_index":2180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazon.com/images/s/aplus",{"_index":2205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amount",{"_index":2555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["andwhere('ci.deletedat",{"_index":632,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["antibacterial",{"_index":1927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["antimicrobial",{"_index":2020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["any).code",{"_index":985,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["any).column",{"_index":990,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["any).constraint",{"_index":987,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["any).table",{"_index":989,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["anyone",{"_index":2411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apibadrequestresponse",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibearerauth",{"_index":1407,"title":{},"body":{"controllers/ProductsController.html":{}}}],["apibearerauth('bearer",{"_index":1410,"title":{},"body":{"controllers/ProductsController.html":{}}}],["apibearerauth('bearer')@apioperation({summary",{"_index":1359,"title":{},"body":{"controllers/ProductsController.html":{}}}],["apibody",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["apiconsumes",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiconsumes('application/json",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":1667,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiparam",{"_index":1408,"title":{},"body":{"controllers/ProductsController.html":{}}}],["apiproperty",{"_index":743,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["apiproperty({description",{"_index":724,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["apiresponse",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":1678,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiversion",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/ProductsController.html":{}}}],["app",{"_index":209,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["app.controller",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":154,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":147,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appetizers",{"_index":2739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application",{"_index":1842,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1801,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":158,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":153,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["area",{"_index":2574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["argumentshost",{"_index":887,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["around",{"_index":2103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":403,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["art",{"_index":2791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["artisan",{"_index":2797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["artisanal",{"_index":2388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["artisans",{"_index":2371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["asc",{"_index":1072,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["assorted",{"_index":2591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assumes",{"_index":1558,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["async",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"injectables/UsersService.html":{}}}],["asynchrousnously",{"_index":362,"title":{},"body":{"modules/AuthModule.html":{}}}],["atleast",{"_index":737,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["audience",{"_index":1135,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["auth",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.none",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["auth(authtype.none)@get",{"_index":1389,"title":{},"body":{"controllers/ProductsController.html":{}}}],["auth.controller",{"_index":352,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/config/jwt.config",{"_index":204,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/enums/role",{"_index":1662,"title":{},"body":{"entities/User.html":{}}}],["auth/guards/access",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/authentication/authentication.guard",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/roles/roles.guard",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_type_key",{"_index":385,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":248,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticates",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticating",{"_index":380,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authentication",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authenticationguard",{"_index":198,"title":{"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":410,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authmodule",{"_index":169,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1871,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":298,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":393,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":398,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":373,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":406,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((type",{"_index":412,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["autoloadentities",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":2199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["await",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"injectables/UsersService.html":{}}}],["away",{"_index":2521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["b091",{"_index":1382,"title":{},"body":{"controllers/ProductsController.html":{}}}],["baby",{"_index":2516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backdrop",{"_index":2796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backers",{"_index":1866,"title":{},"body":{"index.html":{}}}],["backpacks",{"_index":2400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bacteria",{"_index":2463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bacterial",{"_index":2446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bad",{"_index":1370,"title":{},"body":{"controllers/ProductsController.html":{}}}],["bags",{"_index":2181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["baked",{"_index":2480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["baking",{"_index":1452,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["balance",{"_index":2655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bamboo",{"_index":1909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base",{"_index":1665,"title":{},"body":{"controllers/UsersController.html":{}}}],["based",{"_index":381,"title":{},"body":{"guards/AuthenticationGuard.html":{},"entities/CartItem.html":{},"miscellaneous/variables.html":{}}}],["baseurl",{"_index":1306,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["basil",{"_index":2700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":422,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":442,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt",{"_index":440,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(data",{"_index":441,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":356,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":1776,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["beautiful",{"_index":1982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beautifully",{"_index":2774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beauty",{"_index":2684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["becoming",{"_index":2561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beechwood",{"_index":2550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beeswax",{"_index":2091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["before",{"_index":797,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["being",{"_index":2014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["better",{"_index":2339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["between",{"_index":1025,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"miscellaneous/variables.html":{}}}],["between(min",{"_index":1054,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["beverage",{"_index":2287,"title":{},"body":{"miscellaneous/variables.html":{}}}],["beverages",{"_index":2295,"title":{},"body":{"miscellaneous/variables.html":{}}}],["billingaddress",{"_index":583,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{}}}],["biodegradable",{"_index":2066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blade",{"_index":2656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blades",{"_index":2650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blemishes",{"_index":2728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blend",{"_index":2085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bnh4l.jpg",{"_index":2123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["board",{"_index":1858,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["boards",{"_index":2590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bodied",{"_index":2321,"title":{},"body":{"miscellaneous/variables.html":{}}}],["body",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":430,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"entities/Product.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"classes/UpdateProductDto.html":{},"classes/Product.html":{}}}],["bootstrap",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["borosilicate",{"_index":2127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["both",{"_index":2413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bottle",{"_index":2342,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bottles",{"_index":2351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bottom",{"_index":2519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bottoms",{"_index":2812,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bowl",{"_index":2677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bowls",{"_index":2017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bpa",{"_index":2033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["branded",{"_index":2800,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bread",{"_index":2648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["breads",{"_index":2620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["break",{"_index":1070,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"miscellaneous/variables.html":{}}}],["breathable",{"_index":2097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["brew",{"_index":2322,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bringing",{"_index":2372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["brings",{"_index":2067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bristles",{"_index":2009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["browse",{"_index":1881,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1879,"title":{},"body":{"modules.html":{}}}],["bruising",{"_index":2689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["brush",{"_index":2292,"title":{},"body":{"miscellaneous/variables.html":{}}}],["brushed",{"_index":2218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["brushes",{"_index":2464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer",{"_index":426,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["build",{"_index":1064,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["builder",{"_index":624,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["builderrorresponse",{"_index":912,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["builderrorresponse(exception",{"_index":1173,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["building",{"_index":1797,"title":{},"body":{"index.html":{}}}],["builds",{"_index":911,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["built",{"_index":1970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["burn",{"_index":2192,"title":{},"body":{"miscellaneous/variables.html":{}}}],["c07c263f161c",{"_index":1432,"title":{},"body":{"controllers/ProductsController.html":{}}}],["c3c01475d03b.__cr38,0,1872,1872_pt0_sx300_v1___.jpeg",{"_index":2210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["c53808b8",{"_index":1428,"title":{},"body":{"controllers/ProductsController.html":{}}}],["cakes",{"_index":2619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calculatesubtotal",{"_index":1142,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["calculatesubtotal(items",{"_index":1145,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["callhandler",{"_index":792,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["canactivate",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["cancelled",{"_index":1783,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["candies",{"_index":2605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canisters",{"_index":2213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cannotcreateentityidmaperror",{"_index":890,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["cap",{"_index":2346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["capacity",{"_index":2380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["car",{"_index":2301,"title":{},"body":{"miscellaneous/variables.html":{}}}],["carbon",{"_index":2649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["care",{"_index":2566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["carefully",{"_index":1984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["carrying",{"_index":1935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cart",{"_index":125,"title":{"interfaces/Cart.html":{}},"body":{"injectables/AddToCartProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"injectables/GetCartProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"coverage.html":{}}}],["cart.controller",{"_index":535,"title":{},"body":{"modules/CartModule.html":{}}}],["cart.provider",{"_index":133,"title":{},"body":{"injectables/AddToCartProvider.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["cart.provider.ts",{"_index":110,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/GetCartProvider.html":{},"coverage.html":{}}}],["cart.provider.ts:12",{"_index":118,"title":{},"body":{"injectables/AddToCartProvider.html":{}}}],["cart.provider.ts:17",{"_index":1147,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["cart.provider.ts:36",{"_index":121,"title":{},"body":{"injectables/AddToCartProvider.html":{}}}],["cart.provider.ts:37",{"_index":1146,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["cart.provider.ts:8",{"_index":1144,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["cart/cart",{"_index":1350,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{},"classes/Product.html":{}}}],["cart/cart.module",{"_index":207,"title":{},"body":{"modules/AppModule.html":{}}}],["cart['items",{"_index":1152,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["cartcontroller",{"_index":450,"title":{"controllers/CartController.html":{}},"body":{"controllers/CartController.html":{},"modules/CartModule.html":{},"coverage.html":{}}}],["cartid",{"_index":462,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["cartitem",{"_index":129,"title":{"entities/CartItem.html":{}},"body":{"injectables/AddToCartProvider.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Product.html":{},"injectables/UpdateCartItemProvider.html":{},"entities/User.html":{},"coverage.html":{},"classes/Product.html":{}}}],["cartitem.id",{"_index":1616,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["cartitem.product",{"_index":1327,"title":{},"body":{"entities/Product.html":{},"classes/Product.html":{}}}],["cartitem.quantity",{"_index":1614,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["cartitem.user",{"_index":1646,"title":{},"body":{"entities/User.html":{}}}],["cartitemrepository",{"_index":115,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["cartitems",{"_index":639,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Product.html":{},"injectables/UpdateCartItemProvider.html":{},"entities/User.html":{},"classes/Product.html":{}}}],["cartitems.length",{"_index":648,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["cartitems.map((item",{"_index":659,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{}}}],["cartitemsraw",{"_index":625,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["cartitemsraw.map((ci",{"_index":640,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["cartmodule",{"_index":170,"title":{"modules/CartModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules.html":{},"overview.html":{}}}],["cartrepository",{"_index":1611,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["cartservice",{"_index":473,"title":{"injectables/CartService.html":{}},"body":{"controllers/CartController.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"coverage.html":{},"overview.html":{}}}],["carved",{"_index":2064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cascade",{"_index":510,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"classes/SeedProducts1759619432047.html":{}}}],["case",{"_index":1068,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["catch",{"_index":90,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateOrderProvider.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/UpdateCartItemProvider.html":{},"miscellaneous/variables.html":{}}}],["catch(exception",{"_index":893,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["catcherror",{"_index":852,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["catcherror((error",{"_index":858,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["category",{"_index":682,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{},"classes/Product.html":{}}}],["category.enum",{"_index":701,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"entities/Product.html":{},"classes/Product.html":{}}}],["category.enum.ts",{"_index":1774,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cellulose",{"_index":2419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["centerpiece",{"_index":2749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ceramic",{"_index":2364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["certified",{"_index":1980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["challenges",{"_index":2491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["channel",{"_index":1833,"title":{},"body":{"index.html":{}}}],["character",{"_index":741,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["characters",{"_index":736,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["charcuterie",{"_index":2742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["charm",{"_index":2389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["charts",{"_index":2572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["check",{"_index":1820,"title":{},"body":{"index.html":{}}}],["checking",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["checkout",{"_index":1618,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["cheese",{"_index":2741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cheeses",{"_index":2798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chef",{"_index":2645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chemicals",{"_index":2177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chives",{"_index":2703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chlorine",{"_index":2757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chop",{"_index":2697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chopping",{"_index":2661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ci",{"_index":628,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["ci.id",{"_index":641,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["ci.product.id",{"_index":643,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["ci.product.price",{"_index":647,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["ci.product.stock",{"_index":645,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["ci.quantity",{"_index":642,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["cilantro",{"_index":2701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["circulation",{"_index":2250,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":64,"title":{"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseConnectionException.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateProductDto.html":{},"classes/ValidationException.html":{},"classes/Product.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"coverage.html":{},"dependencies.html":{},"classes/Product.html":{}}}],["classes",{"_index":568,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseConnectionException.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateProductDto.html":{},"classes/ValidationException.html":{},"overview.html":{},"classes/Product.html":{}}}],["classic",{"_index":2563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clay",{"_index":2369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clean",{"_index":1968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cleanedquery",{"_index":1033,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleanedquery.category",{"_index":1043,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleanedquery.name",{"_index":1055,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleanedquery.name.split",{"_index":1057,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleanedquery.price",{"_index":1046,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleaning",{"_index":1787,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["cleanquery",{"_index":1011,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleanquery(query",{"_index":1015,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["cleans",{"_index":2586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cleanup",{"_index":2710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clear",{"_index":1621,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{},"miscellaneous/variables.html":{}}}],["clearcart",{"_index":544,"title":{},"body":{"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["clearcart(userid",{"_index":551,"title":{},"body":{"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["cleared",{"_index":1622,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["clearusercart",{"_index":452,"title":{},"body":{"controllers/CartController.html":{}}}],["clearusercart(@activeuser('sub",{"_index":480,"title":{},"body":{"controllers/CartController.html":{}}}],["clearusercart(userid",{"_index":458,"title":{},"body":{"controllers/CartController.html":{}}}],["clerks",{"_index":2240,"title":{},"body":{"miscellaneous/variables.html":{}}}],["closure",{"_index":2244,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cloths",{"_index":2494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":344,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":346,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":345,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_cartmodule",{"_index":529,"title":{},"body":{"modules/CartModule.html":{},"overview.html":{}}}],["cluster_cartmodule_exports",{"_index":532,"title":{},"body":{"modules/CartModule.html":{},"overview.html":{}}}],["cluster_cartmodule_imports",{"_index":530,"title":{},"body":{"modules/CartModule.html":{},"overview.html":{}}}],["cluster_cartmodule_providers",{"_index":531,"title":{},"body":{"modules/CartModule.html":{},"overview.html":{}}}],["cluster_ordersmodule",{"_index":1240,"title":{},"body":{"modules/OrdersModule.html":{},"overview.html":{}}}],["cluster_ordersmodule_imports",{"_index":1242,"title":{},"body":{"modules/OrdersModule.html":{}}}],["cluster_ordersmodule_providers",{"_index":1241,"title":{},"body":{"modules/OrdersModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":1278,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":1279,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":1280,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_productsmodule",{"_index":1475,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_exports",{"_index":1478,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_imports",{"_index":1476,"title":{},"body":{"modules/ProductsModule.html":{}}}],["cluster_productsmodule_providers",{"_index":1477,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1691,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1692,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1693,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["coarse",{"_index":2487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coaster",{"_index":2826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coasters",{"_index":2821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coated",{"_index":2035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coconut",{"_index":2060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["code",{"_index":885,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["coffee",{"_index":2144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coir",{"_index":2472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cold",{"_index":2269,"title":{},"body":{"miscellaneous/variables.html":{}}}],["collapses",{"_index":2403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["collapsible",{"_index":2392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["colors",{"_index":2276,"title":{},"body":{"miscellaneous/variables.html":{}}}],["column",{"_index":525,"title":{},"body":{"entities/CartItem.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{},"classes/Product.html":{}}}],["column({default",{"_index":512,"title":{},"body":{"entities/CartItem.html":{},"entities/Product.html":{},"classes/Product.html":{}}}],["column({length",{"_index":1329,"title":{},"body":{"entities/Product.html":{},"classes/Product.html":{}}}],["column({nullable",{"_index":1339,"title":{},"body":{"entities/Product.html":{},"classes/Product.html":{}}}],["column({type",{"_index":1186,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{},"classes/Product.html":{}}}],["comb",{"_index":2708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["come",{"_index":1823,"title":{},"body":{"index.html":{}}}],["comes",{"_index":1933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["comfort",{"_index":2026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["comfortable",{"_index":1932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["commit",{"_index":669,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["common/interceptors/data",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["common/pagination/interfaces/paginated.interface",{"_index":1406,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["commuting",{"_index":2281,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compact",{"_index":2052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compactly",{"_index":2673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compared",{"_index":2330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["comparepassword",{"_index":423,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepassword(data",{"_index":425,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparing",{"_index":429,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["compatible",{"_index":2334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["complements",{"_index":2229,"title":{},"body":{"miscellaneous/variables.html":{}}}],["complete",{"_index":672,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["completely",{"_index":2160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["completing",{"_index":2467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compodoc/compodoc",{"_index":1747,"title":{},"body":{"dependencies.html":{}}}],["composition",{"_index":2381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compost",{"_index":2082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compostable",{"_index":2161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["composted",{"_index":2442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["comprehensive",{"_index":2644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["condensation",{"_index":2825,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conditions",{"_index":1065,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["conduct",{"_index":1991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthModule.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokensProvider.html":{}}}],["config/app.config",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["config/enviroment.validation",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":353,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{}}}],["configmodule",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":240,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{}}}],["configservice.get('database.autoloadentities",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":235,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["confirmed",{"_index":1780,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["conflict",{"_index":1556,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["conflictexception",{"_index":604,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["conflictexception('cart",{"_index":650,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["conflictexception('could",{"_index":671,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["conforms",{"_index":2809,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connect",{"_index":619,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["connecting",{"_index":818,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["connection",{"_index":678,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"classes/ValidationException.html":{}}}],["connectionerrorcodes",{"_index":868,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["connectionerrorcodes.some((code",{"_index":876,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["conscious",{"_index":2178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consistent",{"_index":2553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log('before",{"_index":796,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["console.log('clearing",{"_index":481,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{}}}],["console.log('controller",{"_index":900,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["console.log('qty",{"_index":490,"title":{},"body":{"controllers/CartController.html":{}}}],["console.log(error",{"_index":617,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["console.log(product",{"_index":1636,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["const",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":1905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constraint",{"_index":986,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["construction",{"_index":2219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constructor",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{}}}],["constructor(addtocartprovider",{"_index":548,"title":{},"body":{"injectables/CartService.html":{}}}],["constructor(cartitemrepository",{"_index":1143,"title":{},"body":{"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["constructor(configservice",{"_index":789,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["constructor(createorderprovider",{"_index":1253,"title":{},"body":{"injectables/OrdersService.html":{}}}],["constructor(createproductprovider",{"_index":1488,"title":{},"body":{"injectables/ProductsService.html":{}}}],["constructor(createuserprovider",{"_index":1700,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(datasource",{"_index":599,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["constructor(errors",{"_index":823,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["constructor(jwtservice",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["constructor(operation",{"_index":808,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["constructor(orderrepository",{"_index":998,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{}}}],["constructor(private",{"_index":155,"title":{},"body":{"controllers/AppController.html":{},"guards/RolesGuard.html":{}}}],["constructor(productsrepository",{"_index":710,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["constructor(productsservice",{"_index":112,"title":{},"body":{"injectables/AddToCartProvider.html":{}}}],["constructor(reflector",{"_index":376,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["constructor(request",{"_index":1284,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(signinprovider",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(usersrepository",{"_index":755,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{}}}],["constructor(usersservice",{"_index":1585,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["containers",{"_index":2104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["containing",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{}}}],["contains",{"_index":2763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["content",{"_index":2630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contents",{"_index":2136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["context",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":409,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":408,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getresponse",{"_index":798,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["contours",{"_index":2724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["control",{"_index":2025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controller",{"_index":146,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CartController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CartController.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('cart",{"_index":479,"title":{},"body":{"controllers/CartController.html":{}}}],["controller('orders",{"_index":1234,"title":{},"body":{"controllers/OrdersController.html":{}}}],["controller('products",{"_index":1409,"title":{},"body":{"controllers/ProductsController.html":{}}}],["controller('users",{"_index":1679,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":148,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CartController.html":{},"modules/CartModule.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["controller}::${handler",{"_index":907,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["convenient",{"_index":1934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conversion",{"_index":2571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cookies",{"_index":2538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cooking",{"_index":1965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cookware",{"_index":1953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cool",{"_index":2116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cooling",{"_index":2608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cork",{"_index":2215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["corrosion",{"_index":2654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cotton",{"_index":2095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["countertop",{"_index":2666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["countertops",{"_index":2507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["countless",{"_index":2254,"title":{},"body":{"miscellaneous/variables.html":{}}}],["courses",{"_index":1840,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":1710,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["covers",{"_index":2657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crack",{"_index":2687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cracking",{"_index":2639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crafted",{"_index":1910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["create",{"_index":411,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/SeedProducts1759619432047.html":{},"classes/UpdateProductDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["createcartitemdto",{"_index":120,"title":{"classes/CreateCartItemDto.html":{}},"body":{"injectables/AddToCartProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"coverage.html":{}}}],["created",{"_index":1369,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["createdat",{"_index":497,"title":{},"body":{"entities/CartItem.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"entities/Order.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"classes/Product.html":{}}}],["createdatecolumn",{"_index":501,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{},"classes/Product.html":{}}}],["createdatecolumn()@index",{"_index":1333,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{},"classes/Product.html":{}}}],["createorder",{"_index":598,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["createorder(userid",{"_index":602,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["createorderdto",{"_index":580,"title":{"classes/CreateOrderDto.html":{}},"body":{"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"coverage.html":{}}}],["createorderprovider",{"_index":595,"title":{"injectables/CreateOrderProvider.html":{}},"body":{"injectables/CreateOrderProvider.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"overview.html":{}}}],["createparamdecorator",{"_index":1897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createproduct",{"_index":709,"title":{},"body":{"injectables/CreateProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["createproduct(@body",{"_index":1441,"title":{},"body":{"controllers/ProductsController.html":{}}}],["createproduct(createproductdto",{"_index":713,"title":{},"body":{"injectables/CreateProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["createproductdto",{"_index":679,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["createproductprovider",{"_index":706,"title":{"injectables/CreateProductProvider.html":{}},"body":{"injectables/CreateProductProvider.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["createquerybuilder(cartitem",{"_index":627,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["creates",{"_index":1360,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["createuser",{"_index":754,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":758,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":721,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":771,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserprovider",{"_index":751,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["creating",{"_index":1703,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["creation",{"_index":1365,"title":{},"body":{"controllers/ProductsController.html":{}}}],["creations",{"_index":2013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["credentials",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["crystal",{"_index":2132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx",{"_index":894,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":897,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":896,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["culinary",{"_index":2012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cup",{"_index":2393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cupcakes",{"_index":2599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cups",{"_index":1451,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["current",{"_index":1275,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpage",{"_index":1271,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["custom",{"_index":1901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cutlery",{"_index":1414,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["cutting",{"_index":1788,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["cycle",{"_index":2468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["d72b",{"_index":2207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["daily",{"_index":2055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["damage",{"_index":2021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dangerous",{"_index":2662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dark",{"_index":1412,"title":{},"body":{"controllers/ProductsController.html":{}}}],["dashes",{"_index":1060,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["data",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"classes/SeedProducts1759619432047.html":{},"controllers/UsersController.html":{}}}],["data.interface",{"_index":1126,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["data.interface.ts",{"_index":100,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["database",{"_index":234,"title":{},"body":{"modules/AppModule.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/ProductsController.html":{},"classes/ValidationException.html":{}}}],["databaseconfig",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseconnectionexception",{"_index":803,"title":{"classes/DatabaseConnectionException.html":{}},"body":{"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"classes/ValidationException.html":{},"coverage.html":{}}}],["databaseerror",{"_index":924,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["dataresponseinterceptor",{"_index":194,"title":{"injectables/DataResponseInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["datasource",{"_index":600,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["date",{"_index":500,"title":{},"body":{"entities/CartItem.html":{},"injectables/DeleteProductProvider.html":{},"entities/Order.html":{},"entities/Product.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"classes/Product.html":{}}}],["date().toisostring",{"_index":935,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["db",{"_index":522,"title":{},"body":{"entities/CartItem.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["decimal",{"_index":1201,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"classes/Product.html":{}}}],["decimal(10,2",{"_index":1542,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["declarations",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decoraror",{"_index":1907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorator",{"_index":1507,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["decorator/auth.decorator",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators",{"_index":151,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/GetProductsBaseDto.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"classes/SignInDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"classes/Product.html":{}}}],["decrementquantity",{"_index":453,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["decrementquantity(userid",{"_index":461,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["deductstock",{"_index":1602,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["deductstock(userid",{"_index":1607,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["deep",{"_index":2515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deeper",{"_index":1835,"title":{},"body":{"index.html":{}}}],["default",{"_index":392,"title":{},"body":{"guards/AuthenticationGuard.html":{},"entities/CartItem.html":{},"injectables/FindAllProductsProvider.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{},"classes/Product.html":{}}}],["defaultauthtype",{"_index":375,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defaultroletype",{"_index":1511,"title":{},"body":{"guards/RolesGuard.html":{}}}],["defined",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"classes/Product.html":{}}}],["delete",{"_index":471,"title":{},"body":{"controllers/CartController.html":{},"entities/CartItem.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["delete(':cartid",{"_index":469,"title":{},"body":{"controllers/CartController.html":{}}}],["delete(':productid",{"_index":1471,"title":{},"body":{"controllers/ProductsController.html":{}}}],["delete('clear",{"_index":459,"title":{},"body":{"controllers/CartController.html":{}}}],["deleted",{"_index":840,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"controllers/ProductsController.html":{}}}],["deletedat",{"_index":498,"title":{},"body":{"entities/CartItem.html":{},"injectables/DeleteProductProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"classes/Product.html":{}}}],["deletedatecolumn",{"_index":503,"title":{},"body":{"entities/CartItem.html":{}}}],["deleteproduct",{"_index":829,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["deleteproduct(@param('productid",{"_index":1473,"title":{},"body":{"controllers/ProductsController.html":{}}}],["deleteproduct(productid",{"_index":831,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["deleteproductprovider",{"_index":827,"title":{"injectables/DeleteProductProvider.html":{}},"body":{"injectables/DeleteProductProvider.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["deletes",{"_index":1375,"title":{},"body":{"controllers/ProductsController.html":{}}}],["delicate",{"_index":1983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["delivered",{"_index":1782,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["demands",{"_index":2056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dense",{"_index":2792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dependencies",{"_index":160,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["depending",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/RolesGuard.html":{}}}],["deposits",{"_index":2770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["desc",{"_index":1007,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{}}}],["description",{"_index":9,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"classes/ValidationException.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{},"classes/Product.html":{}}}],["design",{"_index":2053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["designed",{"_index":2036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["desserts",{"_index":2743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["details",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["development",{"_index":1808,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1846,"title":{},"body":{"index.html":{}}}],["diff",{"_index":400,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["different",{"_index":918,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["directly",{"_index":2105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dirt",{"_index":2498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disable",{"_index":83,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["discord",{"_index":1832,"title":{},"body":{"index.html":{}}}],["dish",{"_index":2473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dishes",{"_index":2485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dishwasher",{"_index":1969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["display",{"_index":2802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disposable",{"_index":2285,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distribution",{"_index":2536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dive",{"_index":1834,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1711,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":1686,"title":{},"body":{"controllers/UsersController.html":{}}}],["doesn't",{"_index":2748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["don't",{"_index":667,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["dotenv",{"_index":1757,"title":{},"body":{"dependencies.html":{}}}],["double",{"_index":2262,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dough",{"_index":2552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["down",{"_index":1524,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["down(queryrunner",{"_index":1525,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["dramatically",{"_index":2315,"title":{},"body":{"miscellaneous/variables.html":{}}}],["drawer",{"_index":2674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["drawstring",{"_index":2243,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dressings",{"_index":2007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dries",{"_index":2443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["drinking",{"_index":2386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["drinks",{"_index":2266,"title":{},"body":{"miscellaneous/variables.html":{}}}],["drinkware",{"_index":1786,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["drippers",{"_index":2337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["drop",{"_index":1568,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["dry",{"_index":2128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto",{"_index":456,"title":{},"body":{"controllers/CartController.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SignInDto.html":{}}}],["dtos/create",{"_index":124,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":1021,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["dtos/pagination",{"_index":1290,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["dtos/sign",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["dtos/update",{"_index":478,"title":{},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["dull",{"_index":2584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["duplicates",{"_index":1548,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["durability",{"_index":1917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["durable",{"_index":1944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["during",{"_index":1963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dust",{"_index":2497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["duty",{"_index":2680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dyes",{"_index":2758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["décor",{"_index":2230,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e2e",{"_index":1817,"title":{},"body":{"index.html":{}}}],["each",{"_index":1924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["earth",{"_index":2084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ease",{"_index":2431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["easily",{"_index":2134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["easy",{"_index":1967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eco",{"_index":1912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["econnrefused",{"_index":869,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["econnreset",{"_index":872,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["edge",{"_index":2652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["edges",{"_index":2628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["effective",{"_index":2455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["effectively",{"_index":2499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["efficient",{"_index":1798,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["effort",{"_index":2699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["effortless",{"_index":2715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["effortlessly",{"_index":2541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eggs",{"_index":2005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eigt",{"_index":735,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ejim",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{}}}],["ejim'})@isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":729,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["elegance",{"_index":2069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["elegant",{"_index":2130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["elevated",{"_index":2621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eliminate",{"_index":2577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eliminates",{"_index":1914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email",{"_index":103,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["email.provider",{"_index":1697,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["email.provider.ts",{"_index":1101,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"coverage.html":{}}}],["email.provider.ts:21",{"_index":1105,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{}}}],["email.provider.ts:7",{"_index":1103,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{}}}],["empty",{"_index":651,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"miscellaneous/variables.html":{}}}],["encrypted",{"_index":427,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["end",{"_index":2162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["endpoint",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["endpoints",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["ends",{"_index":2080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["engineered",{"_index":2495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["engraved",{"_index":2569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["engravings",{"_index":2828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enhance",{"_index":2785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enjoy",{"_index":2338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enotfound",{"_index":870,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["enough",{"_index":2296,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ensure",{"_index":2384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ensures",{"_index":1931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ensuring",{"_index":2596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enterprise",{"_index":1849,"title":{},"body":{"index.html":{}}}],["entertaining",{"_index":2787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entire",{"_index":2466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities",{"_index":494,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":493,"title":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{}},"body":{"entities/CartItem.html":{},"injectables/CreateOrderProvider.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"entities/User.html":{},"coverage.html":{},"classes/Product.html":{}}}],["entity('cart_items",{"_index":527,"title":{},"body":{"entities/CartItem.html":{}}}],["entity('order_items",{"_index":1221,"title":{},"body":{"entities/OrderItem.html":{}}}],["entity('orders",{"_index":1212,"title":{},"body":{"entities/Order.html":{}}}],["entity('products",{"_index":1353,"title":{},"body":{"entities/Product.html":{},"classes/Product.html":{}}}],["entitynotfounderror",{"_index":889,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["entityvalidationerror",{"_index":932,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["enum",{"_index":1199,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{},"classes/Product.html":{}}}],["enumerations",{"_index":1768,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/auth",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{}}}],["enums/order",{"_index":1210,"title":{},"body":{"entities/Order.html":{}}}],["enums/product",{"_index":700,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"entities/Product.html":{},"classes/Product.html":{}}}],["enums/role",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{}}}],["env",{"_index":211,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":216,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["enviromentvalidation",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":210,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["environmental",{"_index":1938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ergonomic",{"_index":1961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err",{"_index":420,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["err_bad_gateway",{"_index":973,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_bad_request",{"_index":959,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_conflict",{"_index":967,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_db_connection",{"_index":820,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["err_db_query_failed",{"_index":925,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_entity_not_found",{"_index":930,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_entity_validation",{"_index":933,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_forbidden",{"_index":963,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_gateway_timeout",{"_index":977,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_internal",{"_index":917,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_not_found",{"_index":965,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_rate_limit",{"_index":970,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_service_unavailable",{"_index":975,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_unauthorized",{"_index":961,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_unknown",{"_index":934,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_unknown_http",{"_index":979,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["err_validation",{"_index":825,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["error",{"_index":414,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateOrderProvider.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/ValidationException.html":{}}}],["error.message.tolowercase",{"_index":875,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["errorcode",{"_index":819,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["errorhandlinginterceptor",{"_index":841,"title":{"injectables/ErrorHandlingInterceptor.html":{}},"body":{"injectables/ErrorHandlingInterceptor.html":{},"coverage.html":{}}}],["errormessage",{"_index":874,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["errormessage.includes(code.tolowercase",{"_index":877,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["errorresponse",{"_index":878,"title":{"interfaces/ErrorResponse.html":{}},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["errorresponse.errortype",{"_index":906,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["errors",{"_index":822,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/ProductsController.html":{},"classes/ValidationException.html":{}}}],["errortype",{"_index":881,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["eslint",{"_index":82,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["eslint/no",{"_index":87,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["etimedout",{"_index":871,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["even",{"_index":2460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["events",{"_index":1167,"title":{},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["everyday",{"_index":1920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["everything",{"_index":2045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["example",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"controllers/ProductsController.html":{},"classes/SignInDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["examples",{"_index":1366,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["excellent",{"_index":2440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["excels",{"_index":2483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exception",{"_index":805,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["exception.constructor.name",{"_index":921,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":880,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:115",{"_index":1174,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:175",{"_index":1177,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:193",{"_index":1178,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:209",{"_index":1179,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:232",{"_index":1180,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:70",{"_index":1172,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:77",{"_index":1175,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.getresponse",{"_index":923,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exception.getstatus",{"_index":919,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exception.message",{"_index":920,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exception.stack",{"_index":909,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exceptionally",{"_index":2375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exceptionfilter",{"_index":886,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["exceptions.filter",{"_index":765,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["exceptions.filter.ts",{"_index":804,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{},"coverage.html":{}}}],["exceptions.filter.ts:28",{"_index":1709,"title":{},"body":{"classes/ValidationException.html":{}}}],["exceptions.filter.ts:6",{"_index":809,"title":{},"body":{"classes/DatabaseConnectionException.html":{}}}],["exclude",{"_index":1660,"title":{},"body":{"entities/User.html":{}}}],["excluded",{"_index":1676,"title":{},"body":{"controllers/UsersController.html":{}}}],["execution",{"_index":402,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["executioncontext",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1108,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{}}}],["existinguser",{"_index":769,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["exists",{"_index":773,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/SeedProducts1759619432047.html":{},"controllers/UsersController.html":{}}}],["exists})@post('')@httpcode(httpstatus.created)@auth(authtype.none",{"_index":1674,"title":{},"body":{"controllers/UsersController.html":{}}}],["expand",{"_index":2426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expands",{"_index":2401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expensive",{"_index":1995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["experience",{"_index":1837,"title":{},"body":{"index.html":{}}}],["expertly",{"_index":2003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiresin",{"_index":1122,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["explicit",{"_index":1534,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["export",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"classes/Product.html":{}}}],["exports",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["expose",{"_index":991,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["express",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["extend",{"_index":2246,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extended",{"_index":1964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extends",{"_index":806,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/UpdateProductDto.html":{},"classes/ValidationException.html":{}}}],["exterior",{"_index":2275,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extract",{"_index":898,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["extracting",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(request",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extras",{"_index":2299,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eye",{"_index":2726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fabric",{"_index":2234,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fade",{"_index":2607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["failed",{"_index":824,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/ProductsController.html":{},"classes/ValidationException.html":{}}}],["fallback",{"_index":1075,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["falling",{"_index":2615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":40,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/FindAllProductsProvider.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"classes/Product.html":{}}}],["false})@exclude",{"_index":1656,"title":{},"body":{"entities/User.html":{}}}],["family",{"_index":2298,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fatigue",{"_index":2722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["favorite",{"_index":2040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["favour",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{}}}],["favour'})@isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":727,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["favour233",{"_index":1581,"title":{},"body":{"classes/SignInDto.html":{}}}],["favour233'})@isnotempty()@isstring",{"_index":1579,"title":{},"body":{"classes/SignInDto.html":{}}}],["favour@ejim1",{"_index":748,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["favour@ejim1'})@isstring()@isnotempty()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":731,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["favour@gmail.com",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["favour@gmail.com'})@isemail()@isnotempty",{"_index":1576,"title":{},"body":{"classes/SignInDto.html":{}}}],["favour@gmail.com'})@isemail()@isnotempty()@maxlength(96",{"_index":725,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["fb98",{"_index":1429,"title":{},"body":{"controllers/ProductsController.html":{}}}],["fbehl.jpg",{"_index":2820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fe9aec69d2b3",{"_index":1444,"title":{},"body":{"controllers/ProductsController.html":{}}}],["fe9aec69d2b3'})@apibody({description",{"_index":1398,"title":{},"body":{"controllers/ProductsController.html":{}}}],["fe9aec69d2b3'})@apiresponse({status",{"_index":1385,"title":{},"body":{"controllers/ProductsController.html":{}}}],["feature",{"_index":2137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["features",{"_index":2278,"title":{},"body":{"miscellaneous/variables.html":{}}}],["featuring",{"_index":2049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["festival",{"_index":2409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["few",{"_index":1821,"title":{},"body":{"index.html":{}}}],["fiber",{"_index":2158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fibers",{"_index":2475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["field",{"_index":1898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fields",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"coverage.html":{},"classes/Product.html":{}}}],["file.ts",{"_index":1741,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["filter",{"_index":867,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["filteredpayload",{"_index":1637,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["filtering",{"_index":2326,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filterobj",{"_index":1631,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["filterobj(obj",{"_index":1632,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["filters",{"_index":2311,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finally",{"_index":675,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["finalresponse",{"_index":1315,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["find",{"_index":1258,"title":{},"body":{"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":1289,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["findallorders",{"_index":997,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/OrdersService.html":{}}}],["findallorders(userid",{"_index":1001,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/OrdersService.html":{}}}],["findallordersforuserprovider",{"_index":994,"title":{"injectables/FindAllOrdersForUserProvider.html":{}},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"overview.html":{}}}],["findallproducts",{"_index":1012,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["findallproducts(productquery",{"_index":1018,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"injectables/ProductsService.html":{}}}],["findallproducts(productsquery",{"_index":1388,"title":{},"body":{"controllers/ProductsController.html":{}}}],["findallproductsprovider",{"_index":1008,"title":{"injectables/FindAllProductsProvider.html":{}},"body":{"injectables/FindAllProductsProvider.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["finding",{"_index":1106,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{}}}],["findoptionsorder",{"_index":1026,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["findorderbyid",{"_index":1087,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{},"injectables/OrdersService.html":{}}}],["findorderbyid(userid",{"_index":1089,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{},"injectables/OrdersService.html":{}}}],["findorderbyidprovider",{"_index":1085,"title":{"injectables/FindOrderByIdProvider.html":{}},"body":{"injectables/FindOrderByIdProvider.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"overview.html":{}}}],["findproductbyid",{"_index":1095,"title":{},"body":{"injectables/FindProductByIdProvider.html":{},"injectables/ProductsService.html":{}}}],["findproductbyid(productid",{"_index":1096,"title":{},"body":{"injectables/FindProductByIdProvider.html":{},"injectables/ProductsService.html":{}}}],["findproductbyidprovider",{"_index":1094,"title":{"injectables/FindProductByIdProvider.html":{}},"body":{"injectables/FindProductByIdProvider.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["finduserbyemail",{"_index":1102,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["finduserbyemail(email",{"_index":1104,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["finduserbyemailprovider",{"_index":1099,"title":{"injectables/FindUserByEmailProvider.html":{}},"body":{"injectables/FindUserByEmailProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["finduserbyid",{"_index":1110,"title":{},"body":{"injectables/FindUserByIdProvider.html":{},"injectables/UsersService.html":{}}}],["finduserbyid(userid",{"_index":1111,"title":{},"body":{"injectables/FindUserByIdProvider.html":{},"injectables/UsersService.html":{}}}],["finduserbyidprovider",{"_index":1109,"title":{"injectables/FindUserByIdProvider.html":{}},"body":{"injectables/FindUserByIdProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["fine",{"_index":2324,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finish",{"_index":1930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finished",{"_index":2771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fire",{"_index":417,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["firm",{"_index":2457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["first",{"_index":1273,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["firstname",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fish",{"_index":2046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["five",{"_index":2696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fixed",{"_index":622,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["flat",{"_index":2397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["flavor",{"_index":2329,"title":{},"body":{"miscellaneous/variables.html":{}}}],["flavors",{"_index":2272,"title":{},"body":{"miscellaneous/variables.html":{}}}],["flexible",{"_index":1950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["flipping",{"_index":2037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["flour",{"_index":2142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["flows",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["foil",{"_index":2100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["folds",{"_index":2396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["follow",{"_index":1851,"title":{},"body":{"index.html":{}}}],["food",{"_index":1453,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["foods",{"_index":2041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["footprint",{"_index":2766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forbidden",{"_index":1372,"title":{},"body":{"controllers/ProductsController.html":{}}}],["forbiddenexception",{"_index":1508,"title":{},"body":{"guards/RolesGuard.html":{}}}],["forbiddenexception('user",{"_index":1516,"title":{},"body":{"guards/RolesGuard.html":{}}}],["forget",{"_index":668,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["forgot",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{}}}],["fork",{"_index":1418,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["format",{"_index":637,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["formatting",{"_index":794,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["forwardref",{"_index":351,"title":{},"body":{"modules/AuthModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":837,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByIdProvider.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"injectables/UpdateProductProvider.html":{}}}],["fragrances",{"_index":2759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["frame",{"_index":2610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["framework",{"_index":1796,"title":{},"body":{"index.html":{}}}],["free",{"_index":2034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["freezer",{"_index":2184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["freezing",{"_index":2601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fresh",{"_index":2114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["freshness",{"_index":2190,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fridge",{"_index":2174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["friendly",{"_index":1913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fruit",{"_index":2731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fruits",{"_index":2247,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fsc",{"_index":1979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["full",{"_index":904,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/SeedProducts1759619432047.html":{},"index.html":{}}}],["fuller",{"_index":2320,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fully",{"_index":2065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["functional",{"_index":2790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["functionality",{"_index":2086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["functions",{"_index":1791,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furniture",{"_index":2822,"title":{},"body":{"miscellaneous/variables.html":{}}}],["future",{"_index":2451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gathering",{"_index":2750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gatherings",{"_index":2765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gaurding",{"_index":1908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generate",{"_index":438,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["generatetokenprovider",{"_index":1586,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["generatetokens",{"_index":1116,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokens(user",{"_index":1119,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokensprovider",{"_index":348,"title":{"injectables/GenerateTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["generating",{"_index":1115,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generations",{"_index":2564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generous",{"_index":2379,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generously",{"_index":2745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gentle",{"_index":2015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get(':id",{"_index":1228,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getcart",{"_index":545,"title":{},"body":{"injectables/CartService.html":{},"injectables/GetCartProvider.html":{}}}],["getcart(userid",{"_index":554,"title":{},"body":{"injectables/CartService.html":{},"injectables/GetCartProvider.html":{}}}],["getcartprovider",{"_index":117,"title":{"injectables/GetCartProvider.html":{}},"body":{"injectables/AddToCartProvider.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"coverage.html":{},"overview.html":{}}}],["getcontrollername",{"_index":1168,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["getcontrollername(request",{"_index":940,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["gethandlername",{"_index":1169,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["gethandlername(request",{"_index":949,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["gethello",{"_index":150,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gethttperrorcode",{"_index":1170,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["gethttperrorcode(status",{"_index":957,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["getmany",{"_index":635,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["getorder",{"_index":1224,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getorder(userid",{"_index":1227,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getorders",{"_index":1225,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getorders(@activeuser('sub",{"_index":1236,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getorders(userid",{"_index":1230,"title":{},"body":{"controllers/OrdersController.html":{}}}],["getproductsbasedto",{"_index":1155,"title":{"classes/GetProductsBaseDto.html":{}},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"coverage.html":{}}}],["getproductsdto",{"_index":1016,"title":{"classes/GetProductsDto.html":{}},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["getting",{"_index":938,"title":{"index.html":{}},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["getusercart",{"_index":454,"title":{},"body":{"controllers/CartController.html":{}}}],["getusercart(@activeuser('sub",{"_index":485,"title":{},"body":{"controllers/CartController.html":{}}}],["getusercart(userid",{"_index":466,"title":{},"body":{"controllers/CartController.html":{}}}],["glass",{"_index":2124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["glasses",{"_index":2831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["glaze",{"_index":2383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["glazed",{"_index":2768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["glazes",{"_index":2772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["glide",{"_index":1951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["global",{"_index":866,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["globalexceptionfilter",{"_index":891,"title":{"classes/GlobalExceptionFilter.html":{}},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["go",{"_index":2171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["goers",{"_index":2410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gold",{"_index":2312,"title":{},"body":{"miscellaneous/variables.html":{}}}],["goods",{"_index":2129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grab",{"_index":2504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grade",{"_index":1454,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["grain",{"_index":2072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grains",{"_index":2146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["graph",{"_index":1843,"title":{},"body":{"index.html":{}}}],["grease",{"_index":2479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["greens",{"_index":2690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grid",{"_index":2612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grime",{"_index":2459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grip",{"_index":1962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gripping",{"_index":2038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grips",{"_index":2665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["groove",{"_index":2634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grounds",{"_index":2327,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grow",{"_index":1862,"title":{},"body":{"index.html":{}}}],["growth",{"_index":2447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["guarding",{"_index":1904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{},"overview.html":{}}}],["hand",{"_index":2063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handcrafted",{"_index":1978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handle",{"_index":859,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["handled",{"_index":865,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["handler",{"_index":882,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["handles",{"_index":1531,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["handling",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ErrorHandlingInterceptor.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["handling.interceptor.ts",{"_index":844,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"coverage.html":{}}}],["handling.interceptor.ts:24",{"_index":846,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["handling.interceptor.ts:55",{"_index":849,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["handling/error",{"_index":843,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"coverage.html":{}}}],["hands",{"_index":1836,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["handy",{"_index":1824,"title":{},"body":{"index.html":{}}}],["hanging",{"_index":2801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hangs",{"_index":2816,"title":{},"body":{"miscellaneous/variables.html":{}}}],["harbor",{"_index":2462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["harder",{"_index":2626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["harmful",{"_index":2176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["harsh",{"_index":2500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["harvested",{"_index":2476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashed",{"_index":436,"title":{},"body":{"injectables/BcryptProvider.html":{},"controllers/UsersController.html":{}}}],["hashed.'})@apibody({description",{"_index":1672,"title":{},"body":{"controllers/UsersController.html":{}}}],["hashing",{"_index":435,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashing.provider",{"_index":437,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashingprovider",{"_index":347,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":424,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(data",{"_index":433,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hasrole",{"_index":1517,"title":{},"body":{"guards/RolesGuard.html":{}}}],["head",{"_index":2524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["headers",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["heat",{"_index":1945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["heavy",{"_index":2047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hello",{"_index":246,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1847,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["herb",{"_index":2694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["herbs",{"_index":2698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["here",{"_index":1869,"title":{},"body":{"index.html":{}}}],["high",{"_index":2216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["highlights",{"_index":2744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["highly",{"_index":2424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hikers",{"_index":2408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hold",{"_index":2505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["holder",{"_index":2833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["honey",{"_index":2788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hooks",{"_index":2503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["host",{"_index":232,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":895,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["hot",{"_index":2267,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hours",{"_index":2268,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":956,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["httpcode",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["httpcode(204",{"_index":1472,"title":{},"body":{"controllers/ProductsController.html":{}}}],["httpcode(httpstatus.created",{"_index":1689,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpcode(httpstatus.ok",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":807,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["https",{"_index":1550,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["https://i5.walmartimages.com/seo/stainless",{"_index":2729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://images",{"_index":1456,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["https://m.media",{"_index":1426,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":1875,"title":{},"body":{"index.html":{}}}],["https://plantishfuture.com/cdn/shop/products/plantish",{"_index":2450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://www.zulaykitchen.com/cdn/shop/files/bamboo",{"_index":2589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpstatus",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{},"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/UsersController.html":{},"classes/ValidationException.html":{}}}],["httpstatus.bad_request",{"_index":826,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ValidationException.html":{}}}],["httpstatus.internal_server_error",{"_index":913,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["httpstatus.not_found",{"_index":927,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["httpstatus.request_timeout",{"_index":821,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["hundreds",{"_index":2119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["husks",{"_index":2477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hydrated",{"_index":2359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hydration",{"_index":2284,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ice",{"_index":2357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["id",{"_index":106,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/Cart.html":{},"entities/CartItem.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/Product.html":{}}}],["id.provider",{"_index":1250,"title":{},"body":{"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["id.provider.ts",{"_index":1086,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByIdProvider.html":{},"coverage.html":{}}}],["id.provider.ts:12",{"_index":1091,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{}}}],["id.provider.ts:16",{"_index":1097,"title":{},"body":{"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByIdProvider.html":{}}}],["id.provider.ts:7",{"_index":1088,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByIdProvider.html":{}}}],["ideal",{"_index":1957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["identifier",{"_index":1380,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{}}}],["identify",{"_index":2135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["identity",{"_index":1571,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["idx_category",{"_index":1545,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["idx_name",{"_index":1544,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["ignore",{"_index":1547,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["ilike",{"_index":1027,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["ilike(`%${searchterm",{"_index":1063,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["iloghaluagneskc@gmail.com",{"_index":1682,"title":{},"body":{"controllers/UsersController.html":{}}}],["images",{"_index":1458,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["imageurl",{"_index":683,"title":{},"body":{"classes/CreateProductDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{},"classes/Product.html":{}}}],["impact",{"_index":1939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implements",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{}}}],["import",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"classes/Product.html":{}}}],["imports",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["in')@auth(authtype.none)@httpcode(httpstatus.ok)@apioperation({summary",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{}}}],["in(cleanedquery.category.split",{"_index":1045,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["in.dto",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["in.dto.ts",{"_index":1575,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["in.dto.ts:17",{"_index":1577,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.dto.ts:28",{"_index":1580,"title":{},"body":{"classes/SignInDto.html":{}}}],["in.provider",{"_index":359,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["in.provider.ts",{"_index":1583,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["in.provider.ts:17",{"_index":1587,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["in.provider.ts:47",{"_index":1588,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["inch",{"_index":2405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["included",{"_index":2291,"title":{},"body":{"miscellaneous/variables.html":{}}}],["includes",{"_index":2307,"title":{},"body":{"miscellaneous/variables.html":{}}}],["including",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{},"classes/Product.html":{}}}],["index(['category",{"_index":1355,"title":{},"body":{"entities/Product.html":{},"classes/Product.html":{}}}],["index(['name",{"_index":1354,"title":{},"body":{"entities/Product.html":{},"classes/Product.html":{}}}],["indicates",{"_index":431,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["individual",{"_index":2602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["individually",{"_index":2070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"classes/Product.html":{}}}],["information",{"_index":984,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["infused",{"_index":2108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inherent",{"_index":2631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inhibit",{"_index":2632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(forwardref",{"_index":768,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(jwtconfig.key",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["inject(request",{"_index":1294,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["injectable",{"_index":53,"title":{"injectables/AddToCartProvider.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/HashingProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"injectables/UsersService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/HashingProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":108,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/HashingProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":135,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"controllers/OrdersController.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["injectrepository",{"_index":131,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["injectrepository(cartitem",{"_index":140,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["injectrepository(order",{"_index":1003,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{}}}],["injectrepository(product",{"_index":717,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["injectrepository(user",{"_index":767,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{}}}],["innerjoinandselect('ci.product",{"_index":629,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["inorder",{"_index":1292,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["insert",{"_index":1546,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["installcompile",{"_index":1807,"title":{},"body":{"index.html":{}}}],["instance",{"_index":418,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["instanceof",{"_index":860,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["instantly",{"_index":2402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["insufficient",{"_index":1438,"title":{},"body":{"controllers/ProductsController.html":{}}}],["insulated",{"_index":2260,"title":{},"body":{"miscellaneous/variables.html":{}}}],["insulation",{"_index":2265,"title":{},"body":{"miscellaneous/variables.html":{}}}],["integer",{"_index":1437,"title":{},"body":{"controllers/ProductsController.html":{},"classes/SeedProducts1759619432047.html":{}}}],["interact",{"_index":1844,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":788,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["intercept(context",{"_index":791,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["interceptor",{"_index":787,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["interest",{"_index":2830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interface",{"_index":96,"title":{"interfaces/ActiveUserData.html":{},"interfaces/Cart.html":{},"interfaces/ErrorResponse.html":{},"interfaces/Paginated.html":{}},"body":{"interfaces/ActiveUserData.html":{},"interfaces/Cart.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"interfaces/Paginated.html":{},"coverage.html":{}}}],["interfaces",{"_index":98,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/Cart.html":{},"interfaces/ErrorResponse.html":{},"interfaces/Paginated.html":{},"overview.html":{}}}],["interfaces/active",{"_index":1125,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["interfaces/cart.interface",{"_index":127,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["interfaces/paginated.interface",{"_index":1293,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["interior",{"_index":2075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["internal",{"_index":914,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["internalservererror",{"_index":916,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["intersectiontype",{"_index":1165,"title":{},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["invalid",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["invaliduser",{"_index":1684,"title":{},"body":{"controllers/UsersController.html":{}}}],["isboolean",{"_index":1629,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["isconnectionerror",{"_index":845,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["isconnectionerror(error",{"_index":847,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["isdeleted",{"_index":839,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"classes/Product.html":{}}}],["isemail",{"_index":744,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isenum",{"_index":697,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isenum(productcategory",{"_index":705,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isenum(productcategory)@isnotempty",{"_index":685,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isglobal",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":1164,"title":{},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["isin(['newest",{"_index":1166,"title":{},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["isint",{"_index":576,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateProductDto.html":{},"classes/UpdateCartItemDto.html":{}}}],["isint()@isnotempty",{"_index":693,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isint()@isnotempty()@min(1",{"_index":695,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isint()@min(1",{"_index":574,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/UpdateCartItemDto.html":{}}}],["isnan(max",{"_index":1052,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["isnan(min",{"_index":1051,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["isnotempty",{"_index":591,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isnotempty()@isstring",{"_index":586,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["isoptional",{"_index":592,"title":{},"body":{"classes/CreateOrderDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/PaginationQueryDto.html":{},"classes/UpdateProductDto.html":{}}}],["isoptional()@isboolean",{"_index":1626,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["isoptional()@ispositive",{"_index":1323,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isoptional()@isstring",{"_index":588,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["isoptional()@isstring()@isin(['newest",{"_index":1162,"title":{},"body":{"classes/GetProductsBaseDto.html":{}}}],["ispasswordequal",{"_index":1590,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["ispositive",{"_index":1325,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":572,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/SignInDto.html":{}}}],["isstring()@isnotempty",{"_index":689,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isstring()@isnotempty()@minlength(5)@maxlength(150",{"_index":691,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isstring()@isnotempty()@minlength(5)@maxlength(350",{"_index":687,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["isstring()@isoptional",{"_index":1158,"title":{},"body":{"classes/GetProductsBaseDto.html":{}}}],["issuer",{"_index":1137,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["item",{"_index":139,"title":{},"body":{"injectables/AddToCartProvider.html":{},"entities/CartItem.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["item.dto",{"_index":126,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["item.dto.ts",{"_index":570,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/UpdateCartItemDto.html":{},"coverage.html":{}}}],["item.dto.ts:5",{"_index":573,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["item.dto.ts:6",{"_index":1599,"title":{},"body":{"classes/UpdateCartItemDto.html":{}}}],["item.dto.ts:9",{"_index":575,"title":{},"body":{"classes/CreateCartItemDto.html":{}}}],["item.entity",{"_index":130,"title":{},"body":{"injectables/AddToCartProvider.html":{},"modules/CartModule.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Order.html":{},"modules/OrdersModule.html":{},"entities/Product.html":{},"injectables/UpdateCartItemProvider.html":{},"entities/User.html":{},"classes/Product.html":{}}}],["item.entity.ts",{"_index":496,"title":{},"body":{"entities/CartItem.html":{},"entities/OrderItem.html":{},"coverage.html":{}}}],["item.entity.ts:11",{"_index":1220,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:14",{"_index":1218,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:17",{"_index":1217,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:18",{"_index":506,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:20",{"_index":1219,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.entity.ts:21",{"_index":514,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:24",{"_index":518,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:29",{"_index":511,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:32",{"_index":502,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:35",{"_index":516,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:38",{"_index":504,"title":{},"body":{"entities/CartItem.html":{}}}],["item.entity.ts:8",{"_index":1215,"title":{},"body":{"entities/OrderItem.html":{}}}],["item.id",{"_index":1149,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["item.price",{"_index":654,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["item.product",{"_index":1150,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["item.product.price",{"_index":1153,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["item.product.stock",{"_index":1619,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.productid",{"_index":661,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["item.provider",{"_index":539,"title":{},"body":{"modules/CartModule.html":{},"injectables/CartService.html":{}}}],["item.provider.ts",{"_index":1601,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{},"coverage.html":{}}}],["item.provider.ts:101",{"_index":1605,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.provider.ts:15",{"_index":1604,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.provider.ts:32",{"_index":1606,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.provider.ts:58",{"_index":1609,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.provider.ts:72",{"_index":1610,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.provider.ts:88",{"_index":1608,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["item.quantity",{"_index":655,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["item.stock",{"_index":652,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["items",{"_index":444,"title":{},"body":{"interfaces/Cart.html":{},"entities/CartItem.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Order.html":{},"classes/PaginationQueryDto.html":{},"miscellaneous/variables.html":{}}}],["items.product",{"_index":1006,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{}}}],["itemsperpage",{"_index":1269,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["jar",{"_index":2669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jars",{"_index":2125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jellies",{"_index":2604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["job",{"_index":1855,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1857,"title":{},"body":{"index.html":{}}}],["john",{"_index":1685,"title":{},"body":{"controllers/UsersController.html":{}}}],["john.doe@example.com",{"_index":1687,"title":{},"body":{"controllers/UsersController.html":{}}}],["joi",{"_index":1759,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":1058,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"index.html":{}}}],["jojoba",{"_index":2109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jsbfiwhvfquobdfj",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{}}}],["juice",{"_index":2633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/ProductsController.html":{}}}],["jwtconfig",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{}}}],["jwtconfiguration",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["jwtmodule",{"_index":205,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":241,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtservice",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["kamil",{"_index":1872,"title":{},"body":{"index.html":{}}}],["keep",{"_index":2113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keeping",{"_index":2188,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keeps",{"_index":2245,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kelechi",{"_index":1680,"title":{},"body":{"controllers/UsersController.html":{}}}],["key",{"_index":1539,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["keyof",{"_index":1639,"title":{},"body":{"injectables/UpdateProductProvider.html":{},"miscellaneous/variables.html":{}}}],["keyword",{"_index":391,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["kind",{"_index":2071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kitchen",{"_index":1973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kneading",{"_index":2575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["knife",{"_index":1419,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["knives",{"_index":2585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ladle",{"_index":2062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":1274,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"miscellaneous/variables.html":{}}}],["lasting",{"_index":2221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lastname",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["later",{"_index":817,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"classes/ValidationException.html":{}}}],["lather",{"_index":2435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["leach",{"_index":2350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lead",{"_index":2382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["leak",{"_index":2156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["learn",{"_index":1828,"title":{},"body":{"index.html":{}}}],["leave",{"_index":2304,"title":{},"body":{"miscellaneous/variables.html":{}}}],["leaving",{"_index":2755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["leftovers",{"_index":2170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legend",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":1194,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{},"classes/Product.html":{}}}],["less",{"_index":2404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lets",{"_index":2133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["letter",{"_index":739,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":1878,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1860,"title":{},"body":{"index.html":{}}}],["lid",{"_index":2280,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lids",{"_index":2126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["life",{"_index":2079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lifetime",{"_index":2187,"title":{},"body":{"miscellaneous/variables.html":{}}}],["light",{"_index":2222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lightweight",{"_index":1928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["limit",{"_index":1035,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/PaginationQueryDto.html":{}}}],["line",{"_index":85,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["liners",{"_index":2594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linkedin",{"_index":1853,"title":{},"body":{"index.html":{}}}],["links",{"_index":1264,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["lint",{"_index":2510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["liquids",{"_index":2635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["literal",{"_index":447,"title":{},"body":{"interfaces/Cart.html":{},"interfaces/Paginated.html":{}}}],["load",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["lock",{"_index":2164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["locking",{"_index":2050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["locks",{"_index":2189,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log",{"_index":903,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["logged",{"_index":101,"title":{},"body":{"interfaces/ActiveUserData.html":{},"guards/AuthenticationGuard.html":{}}}],["logger",{"_index":888,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["logger(globalexceptionfilter.name",{"_index":892,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["logging",{"_index":239,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["long",{"_index":2220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["longer",{"_index":2653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["longevity",{"_index":1989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["looking",{"_index":1854,"title":{},"body":{"index.html":{}}}],["loop",{"_index":415,"title":{},"body":{"guards/AuthenticationGuard.html":{},"index.html":{}}}],["lost",{"_index":2707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lunches",{"_index":2172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["machine",{"_index":2253,"title":{},"body":{"miscellaneous/variables.html":{}}}],["made",{"_index":1947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["main",{"_index":2740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maintain",{"_index":2224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maintaining",{"_index":2286,"title":{},"body":{"miscellaneous/variables.html":{}}}],["make",{"_index":1937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["makers",{"_index":2336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["makes",{"_index":399,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["making",{"_index":1956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manytoone",{"_index":526,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{}}}],["manytoone(undefined",{"_index":507,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{}}}],["map",{"_index":394,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["map((data",{"_index":800,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["map((p",{"_index":1049,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["maple",{"_index":2627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marble",{"_index":2557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marinating",{"_index":2193,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marked",{"_index":1377,"title":{},"body":{"controllers/ProductsController.html":{}}}],["marks",{"_index":2824,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mat",{"_index":2529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["match",{"_index":2277,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matches",{"_index":745,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":750,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matching",{"_index":95,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{},"classes/Product.html":{}}}],["material",{"_index":2175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["materials",{"_index":2461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["math.ceil(totalitems",{"_index":1312,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["max",{"_index":1047,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["maximizes",{"_index":2148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maximum",{"_index":2225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maxlength",{"_index":698,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(150",{"_index":703,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["maxlength(350",{"_index":704,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["maxlength(96",{"_index":747,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["meal",{"_index":2168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meals",{"_index":1921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["means",{"_index":387,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["measurements",{"_index":2570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["measuring",{"_index":2580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mechanism",{"_index":2051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["media/sc/478fe6bb",{"_index":2206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["medium",{"_index":2456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meets",{"_index":1505,"title":{},"body":{"guards/RolesGuard.html":{}}}],["mesh",{"_index":2235,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/ProductsController.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/ValidationException.html":{}}}],["messes",{"_index":2430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meta",{"_index":1265,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["metadata",{"_index":401,"title":{},"body":{"guards/AuthenticationGuard.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["metal",{"_index":1992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metallic",{"_index":2305,"title":{},"body":{"miscellaneous/variables.html":{}}}],["method",{"_index":405,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/CreateOrderDto.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{}}}],["methods",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["method}${pathsegments[pathsegments.length",{"_index":952,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["method}handler",{"_index":955,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["microfiber",{"_index":2493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["microplastics",{"_index":2423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["microwave",{"_index":2159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migration",{"_index":1535,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["migrationinterface",{"_index":1523,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["mildew",{"_index":2488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["millions",{"_index":2501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["min",{"_index":577,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateProductDto.html":{},"injectables/FindAllProductsProvider.html":{},"classes/UpdateCartItemDto.html":{}}}],["min(1",{"_index":579,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateProductDto.html":{},"classes/UpdateCartItemDto.html":{}}}],["minimal",{"_index":2436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["minimum",{"_index":734,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":699,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":746,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(5",{"_index":702,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["minlength(8",{"_index":749,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1767,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["misses",{"_index":1076,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["missing",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["mit",{"_index":1859,"title":{},"body":{"index.html":{}}}],["mixing",{"_index":2016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mocked",{"_index":594,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{}}}],["mode",{"_index":1811,"title":{},"body":{"index.html":{}}}],["modern",{"_index":2152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["module",{"_index":157,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":159,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moisture",{"_index":2140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mold",{"_index":2832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["molds",{"_index":2102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["moment",{"_index":815,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["more",{"_index":1829,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["most_purchased",{"_index":1073,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["mounted",{"_index":2454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mouth",{"_index":2355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["move",{"_index":2583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["muffin",{"_index":1450,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["muffins",{"_index":2598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mug",{"_index":2365,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mugs",{"_index":2367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multiple",{"_index":1460,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["myśliwiec",{"_index":1873,"title":{},"body":{"index.html":{}}}],["na.ssl",{"_index":1457,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["name",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"miscellaneous/variables.html":{},"classes/Product.html":{}}}],["napkins",{"_index":2753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["narrow",{"_index":2517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["natural",{"_index":1987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["naturally",{"_index":1926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["need",{"_index":638,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["needed",{"_index":1560,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["needs",{"_index":2202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nest",{"_index":1802,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1877,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":795,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["nestjs",{"_index":1826,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokensProvider.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/PaginationProvider.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1752,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"controllers/ProductsController.html":{},"classes/SignInDto.html":{},"classes/UpdateProductDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":132,"title":{},"body":{"injectables/AddToCartProvider.html":{},"modules/AppModule.html":{},"modules/CartModule.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GetCartProvider.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["new",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["newest",{"_index":1066,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["newobj",{"_index":1640,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["newobj[el",{"_index":1643,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["newproduct",{"_index":718,"title":{},"body":{"injectables/CreateProductProvider.html":{}}}],["newurl",{"_index":1309,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${nextpage",{"_index":1319,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${paginationquery.page",{"_index":1318,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${prevpage",{"_index":1320,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${totalpages",{"_index":1317,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=1",{"_index":1316,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":774,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.createdat",{"_index":783,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.email",{"_index":781,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.firstname",{"_index":779,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.id",{"_index":778,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.lastname",{"_index":780,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["newuser.role",{"_index":782,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["next",{"_index":84,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllProductsProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["next.handle().pipe",{"_index":799,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["nextpage",{"_index":1313,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":1795,"title":{},"body":{"index.html":{}}}],["non",{"_index":1958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["none",{"_index":1777,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notfoundexception",{"_index":833,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["notfoundexception('item",{"_index":1613,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["notfoundexception('order",{"_index":1093,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{}}}],["notfoundexception('product",{"_index":836,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["notfoundexception(`user",{"_index":1112,"title":{},"body":{"injectables/FindUserByIdProvider.html":{}}}],["nothing",{"_index":1557,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["npm",{"_index":1806,"title":{},"body":{"index.html":{}}}],["null",{"_index":633,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"controllers/ProductsController.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{}}}],["nullable",{"_index":1331,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{},"classes/Product.html":{}}}],["number",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Cart.html":{},"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ErrorResponse.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"classes/UpdateCartItemDto.html":{},"classes/Product.html":{}}}],["number(limit",{"_index":1039,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["number(page",{"_index":1042,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["number(subtotal.tofixed(2",{"_index":1154,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["numerous",{"_index":2764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nutrients",{"_index":2083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["obj",{"_index":1635,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["obj[el",{"_index":1644,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["object",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/UsersController.html":{}}}],["object.entries(query).filter",{"_index":1083,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["object.fromentries",{"_index":1082,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["object.keys(obj).foreach((el",{"_index":1641,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["objectliteral",{"_index":1291,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["observable",{"_index":382,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["occasional",{"_index":2636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["occasionally",{"_index":2691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["odor",{"_index":2794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["odors",{"_index":2273,"title":{},"body":{"miscellaneous/variables.html":{}}}],["offer",{"_index":1856,"title":{},"body":{"index.html":{}}}],["offering",{"_index":2237,"title":{},"body":{"miscellaneous/variables.html":{}}}],["offers",{"_index":2023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["official",{"_index":1838,"title":{},"body":{"index.html":{}}}],["oil",{"_index":2110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oiling",{"_index":2637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oils",{"_index":1988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oldest",{"_index":1071,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["olive",{"_index":2784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ondelete",{"_index":509,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{}}}],["one",{"_index":738,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/PaginationProvider.html":{},"miscellaneous/variables.html":{}}}],["onetomany",{"_index":1209,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{},"classes/Product.html":{}}}],["onetomany(undefined",{"_index":1191,"title":{},"body":{"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{},"classes/Product.html":{}}}],["open",{"_index":1861,"title":{},"body":{"index.html":{}}}],["opener",{"_index":2670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["opening",{"_index":2356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["openings",{"_index":2527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operation",{"_index":810,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["operations",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["optimal",{"_index":2551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"injectables/CartService.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"classes/Product.html":{}}}],["options",{"_index":1077,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"injectables/PaginationProvider.html":{}}}],["options.order",{"_index":1304,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["options.relations",{"_index":1301,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["options.select",{"_index":1302,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["options.where",{"_index":1303,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["order",{"_index":607,"title":{"entities/Order.html":{}},"body":{"injectables/CreateOrderProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"entities/Product.html":{},"injectables/UpdateCartItemProvider.html":{},"entities/User.html":{},"coverage.html":{},"classes/Product.html":{}}}],["order.createdat",{"_index":1069,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["order.dto",{"_index":611,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["order.dto.ts",{"_index":582,"title":{},"body":{"classes/CreateOrderDto.html":{},"coverage.html":{}}}],["order.dto.ts:10",{"_index":587,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.dto.ts:15",{"_index":589,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.dto.ts:6",{"_index":590,"title":{},"body":{"classes/CreateOrderDto.html":{}}}],["order.entity",{"_index":608,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"entities/OrderItem.html":{},"modules/OrdersModule.html":{}}}],["order.items",{"_index":1216,"title":{},"body":{"entities/OrderItem.html":{}}}],["order.product",{"_index":1344,"title":{},"body":{"entities/Product.html":{},"classes/Product.html":{}}}],["order.provider",{"_index":1246,"title":{},"body":{"modules/OrdersModule.html":{},"injectables/OrdersService.html":{}}}],["order.provider.ts",{"_index":597,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"coverage.html":{}}}],["order.provider.ts:16",{"_index":601,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["order.provider.ts:21",{"_index":603,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["order.purchasecount",{"_index":1074,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["order.user",{"_index":1654,"title":{},"body":{"entities/User.html":{}}}],["orderid",{"_index":1090,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["orderitem",{"_index":606,"title":{"entities/OrderItem.html":{}},"body":{"injectables/CreateOrderProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"modules/OrdersModule.html":{},"entities/Product.html":{},"coverage.html":{},"classes/Product.html":{}}}],["orderitem.order",{"_index":1192,"title":{},"body":{"entities/Order.html":{}}}],["orderitems",{"_index":658,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["orderrepository",{"_index":1000,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{}}}],["orders",{"_index":996,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"entities/Product.html":{},"injectables/UpdateCartItemProvider.html":{},"entities/User.html":{},"coverage.html":{},"classes/Product.html":{}}}],["orders.controller",{"_index":1244,"title":{},"body":{"modules/OrdersModule.html":{}}}],["orders/order",{"_index":1352,"title":{},"body":{"entities/Product.html":{},"classes/Product.html":{}}}],["orders/order.entity",{"_index":1351,"title":{},"body":{"entities/Product.html":{},"entities/User.html":{},"classes/Product.html":{}}}],["orders/orders.module",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["orderscontroller",{"_index":1222,"title":{"controllers/OrdersController.html":{}},"body":{"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"coverage.html":{}}}],["ordersmodule",{"_index":171,"title":{"modules/OrdersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OrdersModule.html":{},"modules.html":{},"overview.html":{}}}],["ordersservice",{"_index":1232,"title":{"injectables/OrdersService.html":{}},"body":{"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"coverage.html":{},"overview.html":{}}}],["orderstatus",{"_index":1198,"title":{},"body":{"entities/Order.html":{},"miscellaneous/enumerations.html":{}}}],["orderstatus.pending",{"_index":1213,"title":{},"body":{"entities/Order.html":{}}}],["organic",{"_index":2094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["organized",{"_index":2153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["original",{"_index":864,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["originated",{"_index":939,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["out",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["outdoor",{"_index":2282,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oven",{"_index":1461,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["over",{"_index":2186,"title":{},"body":{"miscellaneous/variables.html":{}}}],["overview",{"_index":1882,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["ozeozl.jpg",{"_index":2031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["p",{"_index":630,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["pack",{"_index":2093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["package",{"_index":1746,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packing",{"_index":2197,"title":{},"body":{"miscellaneous/variables.html":{}}}],["page",{"_index":1036,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/PaginationQueryDto.html":{}}}],["pages",{"_index":1268,"title":{},"body":{"interfaces/Paginated.html":{}}}],["paginated",{"_index":1023,"title":{"interfaces/Paginated.html":{}},"body":{"injectables/FindAllProductsProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["paginatedproducts",{"_index":1079,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["paginating",{"_index":1288,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pagination",{"_index":1032,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{}}}],["paginationmodule",{"_index":1277,"title":{"modules/PaginationModule.html":{}},"body":{"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":1013,"title":{"injectables/PaginationProvider.html":{}},"body":{"injectables/FindAllProductsProvider.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquery",{"_index":1078,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"injectables/PaginationProvider.html":{}}}],["paginationquery(paginationquery",{"_index":1286,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.limit",{"_index":1299,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.page",{"_index":1298,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto",{"_index":1028,"title":{"classes/PaginationQueryDto.html":{}},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["paired",{"_index":2514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pans",{"_index":1960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pantry",{"_index":2149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["paper",{"_index":2317,"title":{},"body":{"miscellaneous/variables.html":{}}}],["param",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"miscellaneous/variables.html":{}}}],["param('cartid",{"_index":488,"title":{},"body":{"controllers/CartController.html":{}}}],["param('id",{"_index":1238,"title":{},"body":{"controllers/OrdersController.html":{}}}],["param('productid",{"_index":1469,"title":{},"body":{"controllers/ProductsController.html":{}}}],["parameters",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{}}}],["parchment",{"_index":2531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["paring",{"_index":2646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parsefloat(p.trim",{"_index":1050,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["parsley",{"_index":2702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["part",{"_index":1848,"title":{},"body":{"index.html":{}}}],["partial",{"_index":1396,"title":{},"body":{"controllers/ProductsController.html":{}}}],["partialtype",{"_index":1628,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["partialtype(createproductdto",{"_index":1624,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["particles",{"_index":2506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parties",{"_index":2762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["party",{"_index":2746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pass",{"_index":2325,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passing",{"_index":364,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["password",{"_index":230,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["password1",{"_index":1683,"title":{},"body":{"controllers/UsersController.html":{}}}],["pasta",{"_index":2145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pastries",{"_index":2539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pastry",{"_index":2568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":472,"title":{},"body":{"controllers/CartController.html":{},"controllers/ProductsController.html":{}}}],["patch(':cartid",{"_index":464,"title":{},"body":{"controllers/CartController.html":{}}}],["patch(':productid",{"_index":1468,"title":{},"body":{"controllers/ProductsController.html":{}}}],["path",{"_index":883,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["pathsegments",{"_index":944,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["pathsegments.length",{"_index":946,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["pathsegments[2].charat(0).touppercase()}${pathsegments[2].slice(1)}controller",{"_index":947,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["pattern",{"_index":2613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patterns",{"_index":2073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pay",{"_index":2331,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{}}}],["payment",{"_index":593,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{}}}],["paymentmethod",{"_index":584,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{}}}],["peeler",{"_index":2713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["peeler_a69fddff",{"_index":2732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["peelers",{"_index":2714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["peeling",{"_index":2716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pending",{"_index":1779,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["per",{"_index":521,"title":{},"body":{"entities/CartItem.html":{}}}],["perfect",{"_index":1919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["perfectly",{"_index":2525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["permission",{"_index":1519,"title":{},"body":{"guards/RolesGuard.html":{}}}],["permissions",{"_index":1439,"title":{},"body":{"controllers/ProductsController.html":{}}}],["persists",{"_index":520,"title":{},"body":{"entities/CartItem.html":{}}}],["personal",{"_index":1670,"title":{},"body":{"controllers/UsersController.html":{}}}],["pests",{"_index":2141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pg",{"_index":1761,"title":{},"body":{"dependencies.html":{}}}],["picnics",{"_index":1922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["piece",{"_index":1925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pieces",{"_index":2705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pin",{"_index":2549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pins",{"_index":2558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pl.jpg",{"_index":2363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["place",{"_index":2814,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plant",{"_index":2418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plastic",{"_index":1422,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["platinum",{"_index":2183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["platter",{"_index":2737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":816,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"classes/ValidationException.html":{},"index.html":{}}}],["pockets",{"_index":2398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["polished",{"_index":2074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["porous",{"_index":2432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["port",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["portable",{"_index":2394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["portions",{"_index":2603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["positive",{"_index":1436,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["post('/sign",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["postgres",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["posts",{"_index":1296,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pot",{"_index":2811,"title":{},"body":{"miscellaneous/variables.html":{}}}],["potato",{"_index":2725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pots",{"_index":2484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pouch",{"_index":1936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pour",{"_index":2314,"title":{},"body":{"miscellaneous/variables.html":{}}}],["powder",{"_index":2274,"title":{},"body":{"miscellaneous/variables.html":{}}}],["power",{"_index":2422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["powerful",{"_index":2478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["precise",{"_index":2573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["precision",{"_index":1202,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"classes/Product.html":{}}}],["preferences",{"_index":2720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preferred",{"_index":1569,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["prefix",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CartController.html":{},"controllers/OrdersController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["premature",{"_index":2251,"title":{},"body":{"miscellaneous/variables.html":{}}}],["premium",{"_index":1911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prep",{"_index":2169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preparation",{"_index":2027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prepping",{"_index":2681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["presenting",{"_index":2738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preserve",{"_index":2706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pressure",{"_index":2556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prevent",{"_index":2165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preventing",{"_index":2560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prevents",{"_index":2191,"title":{},"body":{"miscellaneous/variables.html":{}}}],["previous",{"_index":1276,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["prevpage",{"_index":1314,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["price",{"_index":646,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/UpdateProductProvider.html":{},"miscellaneous/variables.html":{},"classes/Product.html":{}}}],["primary",{"_index":1538,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["primarygeneratedcolumn",{"_index":524,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{},"classes/Product.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":505,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"entities/User.html":{},"classes/Product.html":{}}}],["private",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":814,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["process.env.node_env",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["produce",{"_index":2106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["producing",{"_index":2318,"title":{},"body":{"miscellaneous/variables.html":{}}}],["product",{"_index":136,"title":{"entities/Product.html":{},"classes/Product.html":{}},"body":{"injectables/AddToCartProvider.html":{},"interfaces/Cart.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"coverage.html":{},"overview.html":{},"classes/Product.html":{}}}],["product.cartitems",{"_index":508,"title":{},"body":{"entities/CartItem.html":{}}}],["product.category",{"_index":1562,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["product.description",{"_index":1563,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["product.dto",{"_index":716,"title":{},"body":{"injectables/CreateProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{}}}],["product.dto.ts",{"_index":681,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:11",{"_index":1625,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.dto.ts:17",{"_index":692,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:23",{"_index":688,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:27",{"_index":686,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:31",{"_index":694,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:36",{"_index":696,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:40",{"_index":690,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:8",{"_index":1627,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["product.entity",{"_index":715,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/UpdateProductProvider.html":{}}}],["product.imageurl",{"_index":1565,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["product.name",{"_index":1561,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["product.price",{"_index":1564,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["product.provider",{"_index":1482,"title":{},"body":{"modules/ProductsModule.html":{},"injectables/ProductsService.html":{}}}],["product.provider.ts",{"_index":708,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/UpdateProductProvider.html":{},"coverage.html":{}}}],["product.provider.ts:16",{"_index":832,"title":{},"body":{"injectables/DeleteProductProvider.html":{}}}],["product.provider.ts:17",{"_index":714,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["product.provider.ts:42",{"_index":1634,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["product.provider.ts:7",{"_index":830,"title":{},"body":{"injectables/DeleteProductProvider.html":{}}}],["product.provider.ts:8",{"_index":711,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["product.stock",{"_index":145,"title":{},"body":{"injectables/AddToCartProvider.html":{},"classes/SeedProducts1759619432047.html":{}}}],["productcategory",{"_index":684,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"entities/Product.html":{},"miscellaneous/enumerations.html":{},"classes/Product.html":{}}}],["productid",{"_index":571,"title":{},"body":{"classes/CreateCartItemDto.html":{},"injectables/CreateOrderProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindProductByIdProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/UpdateProductProvider.html":{}}}],["production",{"_index":237,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["productquery",{"_index":1020,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"injectables/ProductsService.html":{}}}],["productrepository",{"_index":1603,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["products",{"_index":834,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/UpdateProductProvider.html":{},"miscellaneous/variables.html":{}}}],["products.controller",{"_index":1481,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products.dto",{"_index":1022,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["products.dto.ts",{"_index":1157,"title":{},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"coverage.html":{}}}],["products.dto.ts:12",{"_index":1160,"title":{},"body":{"classes/GetProductsBaseDto.html":{}}}],["products.dto.ts:19",{"_index":1159,"title":{},"body":{"classes/GetProductsBaseDto.html":{}}}],["products.dto.ts:26",{"_index":1161,"title":{},"body":{"classes/GetProductsBaseDto.html":{}}}],["products.dto.ts:31",{"_index":1163,"title":{},"body":{"classes/GetProductsBaseDto.html":{}}}],["products.provider",{"_index":1483,"title":{},"body":{"modules/ProductsModule.html":{},"injectables/ProductsService.html":{}}}],["products.provider.ts",{"_index":1010,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"coverage.html":{}}}],["products.provider.ts:11",{"_index":1014,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["products.provider.ts:25",{"_index":1019,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["products.provider.ts:95",{"_index":1017,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["products/product.entity",{"_index":448,"title":{},"body":{"interfaces/Cart.html":{},"entities/CartItem.html":{},"entities/OrderItem.html":{}}}],["products/products.module",{"_index":206,"title":{},"body":{"modules/AppModule.html":{}}}],["productscontroller",{"_index":1356,"title":{"controllers/ProductsController.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["productsmodule",{"_index":172,"title":{"modules/ProductsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CartModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["productsquery",{"_index":1391,"title":{},"body":{"controllers/ProductsController.html":{}}}],["productsrepository",{"_index":712,"title":{},"body":{"injectables/CreateProductProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["productsservice",{"_index":113,"title":{"injectables/ProductsService.html":{}},"body":{"injectables/AddToCartProvider.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["professional",{"_index":2643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["progressive",{"_index":1794,"title":{},"body":{"index.html":{}}}],["project",{"_index":1804,"title":{},"body":{"index.html":{}}}],["promise",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/HashingProvider.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":142,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/GenerateTokensProvider.html":{}}}],["promise.resolve(instance.canactivate(context",{"_index":419,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["proof",{"_index":2157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["proper",{"_index":2565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":102,"title":{"properties.html":{}},"body":{"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"interfaces/Cart.html":{},"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ErrorResponse.html":{},"classes/GetProductsBaseDto.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"classes/SignInDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateProductDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"properties.html":{},"miscellaneous/variables.html":{},"classes/Product.html":{}}}],["property",{"_index":389,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["protect",{"_index":2043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protected",{"_index":2139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protecting",{"_index":1993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protection",{"_index":2353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protective",{"_index":2344,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protects",{"_index":2671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provide",{"_index":242,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":931,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/UsersController.html":{}}}],["provider",{"_index":141,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/HashingProvider.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"injectables/ProductsService.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UsersService.html":{}}}],["providers",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/add",{"_index":536,"title":{},"body":{"modules/CartModule.html":{}}}],["providers/auth.service",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/bcrypt.provider",{"_index":357,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/cart.service",{"_index":474,"title":{},"body":{"controllers/CartController.html":{},"modules/CartModule.html":{}}}],["providers/create",{"_index":1245,"title":{},"body":{"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["providers/delete",{"_index":1485,"title":{},"body":{"modules/ProductsModule.html":{}}}],["providers/find",{"_index":1248,"title":{},"body":{"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["providers/generate",{"_index":360,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/get",{"_index":537,"title":{},"body":{"modules/CartModule.html":{}}}],["providers/hashing.provider",{"_index":355,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/orders.service",{"_index":1233,"title":{},"body":{"controllers/OrdersController.html":{},"modules/OrdersModule.html":{}}}],["providers/pagination.provider",{"_index":1282,"title":{},"body":{"modules/PaginationModule.html":{}}}],["providers/products.service",{"_index":1402,"title":{},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{}}}],["providers/sign",{"_index":358,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/update",{"_index":538,"title":{},"body":{"modules/CartModule.html":{},"modules/ProductsModule.html":{}}}],["providers/users.service",{"_index":1677,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["providing",{"_index":1916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/PaginationProvider.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["purchasecount",{"_index":664,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"classes/Product.html":{}}}],["purses",{"_index":2399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["quality",{"_index":2217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["quantity",{"_index":449,"title":{},"body":{"interfaces/Cart.html":{},"entities/CartItem.html":{},"classes/CreateCartItemDto.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"entities/OrderItem.html":{},"controllers/ProductsController.html":{},"classes/UpdateCartItemDto.html":{}}}],["queries",{"_index":1263,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["query",{"_index":623,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllProductsProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/ProductsController.html":{}}}],["query.dto",{"_index":1030,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"injectables/PaginationProvider.html":{}}}],["query.dto.ts",{"_index":1321,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:12",{"_index":1322,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:19",{"_index":1324,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryfailederror",{"_index":848,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["queryrunner",{"_index":613,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"classes/SeedProducts1759619432047.html":{}}}],["queryrunner.committransaction",{"_index":666,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.connect",{"_index":615,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager",{"_index":626,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.create(order",{"_index":656,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.getrepository(order).save(order",{"_index":657,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.getrepository(orderitem).create",{"_index":660,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.getrepository(orderitem).save(orderitems",{"_index":662,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.getrepository(product).update",{"_index":663,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.getrepository(user).findone",{"_index":621,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.manager.softdelete(cartitem",{"_index":665,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.query",{"_index":1536,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["queryrunner.query(`drop",{"_index":1573,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["queryrunner.release",{"_index":676,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.rollbacktransaction",{"_index":670,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["queryrunner.starttransaction",{"_index":616,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["questions",{"_index":1830,"title":{},"body":{"index.html":{}}}],["quickly",{"_index":2333,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rack",{"_index":2609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["raised",{"_index":2747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["raw",{"_index":992,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["re",{"_index":863,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"classes/SeedProducts1759619432047.html":{}}}],["reaches",{"_index":2518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["read",{"_index":1868,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["real",{"_index":1845,"title":{},"body":{"index.html":{}}}],["recipe",{"_index":2582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["record",{"_index":396,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/UpdateProductProvider.html":{}}}],["recycled",{"_index":2368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reduce",{"_index":2316,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reduces",{"_index":2532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reducing",{"_index":1972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":1763,"title":{},"body":{"dependencies.html":{}}}],["reflection",{"_index":942,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["reflector",{"_index":377,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["refreshtoken",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["refused",{"_index":873,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["register",{"_index":1669,"title":{},"body":{"controllers/UsersController.html":{}}}],["registering",{"_index":363,"title":{},"body":{"modules/AuthModule.html":{}}}],["registration",{"_index":1673,"title":{},"body":{"controllers/UsersController.html":{}}}],["rejectunauthorized",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["related",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["relations",{"_index":1005,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["release",{"_index":677,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"miscellaneous/variables.html":{}}}],["releases",{"_index":2537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["removal",{"_index":2481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remove",{"_index":982,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["removecartitem",{"_index":546,"title":{},"body":{"injectables/CartService.html":{}}}],["removecartitem(userid",{"_index":556,"title":{},"body":{"injectables/CartService.html":{}}}],["removefromcart",{"_index":455,"title":{},"body":{"controllers/CartController.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["removefromcart(userid",{"_index":468,"title":{},"body":{"controllers/CartController.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["removers",{"_index":2727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["renewable",{"_index":2482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["renewal",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{}}}],["replace",{"_index":1059,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"miscellaneous/variables.html":{}}}],["replaces",{"_index":2530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replacing",{"_index":2508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["repository",{"_index":116,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GetCartProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"index.html":{}}}],["repository.count",{"_index":1311,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository.find",{"_index":1295,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["request",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"classes/ValidationException.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":93,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request.method",{"_index":937,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["request.method.tolowercase",{"_index":950,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["request.route?.path",{"_index":943,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["request.url",{"_index":936,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["request.url.split('/').filter(boolean",{"_index":951,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["request[request_user_key",{"_index":81,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requested",{"_index":928,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["requests",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{},"classes/PaginationQueryDto.html":{}}}],["requesttimeoutexception",{"_index":605,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["requesttimeoutexception('could",{"_index":618,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["required",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["requiredroles",{"_index":1513,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":1518,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requirements",{"_index":1506,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requires",{"_index":1363,"title":{},"body":{"controllers/ProductsController.html":{}}}],["reset",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["residue",{"_index":2522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["residues",{"_index":2756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resin",{"_index":2112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resist",{"_index":2445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resistance",{"_index":2786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resistant",{"_index":1946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resisting",{"_index":2793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resists",{"_index":2587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resource",{"_index":929,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["resources",{"_index":1822,"title":{},"body":{"index.html":{}}}],["response",{"_index":786,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"interfaces/Paginated.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["response.interceptor",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["response.interceptor.ts",{"_index":785,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:14",{"_index":790,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response.interceptor.ts:32",{"_index":793,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response.status(errorresponse.statuscode).json(errorresponse",{"_index":910,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["response.statuscode",{"_index":802,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response/data",{"_index":196,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["restart",{"_index":1570,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["resulting",{"_index":2328,"title":{},"body":{"miscellaneous/variables.html":{}}}],["results",{"_index":94,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{},"classes/Product.html":{}}}],["retain",{"_index":2271,"title":{},"body":{"miscellaneous/variables.html":{}}}],["retained",{"_index":1376,"title":{},"body":{"controllers/ProductsController.html":{}}}],["retaining",{"_index":2374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["retains",{"_index":2781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["return",{"_index":92,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1266,"title":{},"body":{"interfaces/Paginated.html":{}}}],["returns",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/PaginationProvider.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reusable",{"_index":1942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reuse",{"_index":2118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rice",{"_index":2775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rich",{"_index":2434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["richer",{"_index":2319,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rim",{"_index":2377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rings",{"_index":2823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rinse",{"_index":2543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ritual",{"_index":2373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roasted",{"_index":2540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roasting",{"_index":2622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["role",{"_index":104,"title":{},"body":{"interfaces/ActiveUserData.html":{},"controllers/AuthController.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.admin",{"_index":1512,"title":{},"body":{"guards/RolesGuard.html":{}}}],["role.user",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{}}}],["roles",{"_index":1404,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":1440,"title":{},"body":{"controllers/ProductsController.html":{}}}],["roles_key",{"_index":1509,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":200,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rollback",{"_index":1566,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["rolling",{"_index":2548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rolls",{"_index":2672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["route",{"_index":941,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["route.split('/').filter(boolean",{"_index":945,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["routes",{"_index":2835,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["rulers",{"_index":2579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":1549,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"index.html":{}}}],["rust",{"_index":2214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rustic",{"_index":1996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":383,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/ErrorHandlingInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":854,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["safe",{"_index":1462,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["safelimit",{"_index":1038,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["safely",{"_index":2173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["safepage",{"_index":1041,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["salad",{"_index":2676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["salads",{"_index":2682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["salt",{"_index":439,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["same",{"_index":432,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["sanded",{"_index":1985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sanitizedatabaseerror",{"_index":1171,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["sanitizedatabaseerror(error",{"_index":981,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["sanitizing",{"_index":980,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["sauces",{"_index":2006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["saving",{"_index":2817,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scalable",{"_index":1799,"title":{},"body":{"index.html":{}}}],["scale",{"_index":1203,"title":{},"body":{"entities/Order.html":{},"entities/OrderItem.html":{},"entities/Product.html":{},"classes/Product.html":{}}}],["schema",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["scissors",{"_index":2695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scratch",{"_index":1994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scratching",{"_index":1955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scrub",{"_index":2453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scrubbing",{"_index":2421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seal",{"_index":2107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seals",{"_index":2138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seamlessly",{"_index":2777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["searchterm",{"_index":1056,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["second",{"_index":857,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["secret",{"_index":1139,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["secure",{"_index":2044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["securely",{"_index":1671,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["see",{"_index":2241,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seed",{"_index":1530,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["seedproducts",{"_index":1529,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["seedproducts.ts",{"_index":1522,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"coverage.html":{}}}],["seedproducts.ts:39",{"_index":1526,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["seedproducts.ts:5",{"_index":1528,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["seedproducts1759619432047",{"_index":1520,"title":{"classes/SeedProducts1759619432047.html":{}},"body":{"classes/SeedProducts1759619432047.html":{},"coverage.html":{}}}],["seeking",{"_index":2412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["select",{"_index":1107,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/PaginationProvider.html":{},"entities/User.html":{}}}],["sensitive",{"_index":983,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["separate",{"_index":2578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serial",{"_index":1537,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["serve",{"_index":2096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server",{"_index":915,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"index.html":{}}}],["serves",{"_index":2679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serveware",{"_index":1790,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["service",{"_index":137,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/OrdersController.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["serving",{"_index":2039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["servware",{"_index":1789,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sessions",{"_index":1966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["set",{"_index":1415,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["setlock('pessimistic_write",{"_index":634,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["setmetadata(auth_type_key",{"_index":1903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(roles_key",{"_index":1906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":2685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1805,"title":{},"body":{"index.html":{}}}],["shaped",{"_index":2597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shaping",{"_index":2576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sharp",{"_index":2651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sheets",{"_index":2545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shell",{"_index":2061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shipped",{"_index":1781,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["shippingaddress",{"_index":585,"title":{},"body":{"classes/CreateOrderDto.html":{},"entities/Order.html":{}}}],["shock",{"_index":2349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shopping",{"_index":2236,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":1800,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["sigining",{"_index":1584,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["sign",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"classes/SignInDto.html":{}}}],["signed",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{}}}],["signin",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signin(@body",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signindto",{"_index":268,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["signindto.password",{"_index":1592,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["signindto})@apiresponse({status",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{}}}],["signing",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signinprovider",{"_index":349,"title":{"injectables/SignInProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["signs",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GenerateTokensProvider.html":{}}}],["signtoken",{"_index":1117,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signtoken(userid",{"_index":1121,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["silica",{"_index":2629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["silicone",{"_index":1449,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["silver",{"_index":1413,"title":{},"body":{"controllers/ProductsController.html":{}}}],["simply",{"_index":2081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["single",{"_index":1915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sipping",{"_index":2378,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sized",{"_index":2526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sizes",{"_index":2200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skilled",{"_index":2370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skin",{"_index":2760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skins",{"_index":2721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skip",{"_index":1297,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["sleek",{"_index":2228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sleeve",{"_index":2345,"title":{},"body":{"miscellaneous/variables.html":{}}}],["slides",{"_index":2709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sliding",{"_index":2663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["slightly",{"_index":2387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["slip",{"_index":2352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["small",{"_index":2614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["smooth",{"_index":1929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["smoothies",{"_index":2358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["smoothly",{"_index":1952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["snacks",{"_index":2198,"title":{},"body":{"miscellaneous/variables.html":{}}}],["snap",{"_index":2163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["soap",{"_index":2437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["soft",{"_index":528,"title":{},"body":{"entities/CartItem.html":{},"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["solution",{"_index":2489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sophistication",{"_index":2773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sort",{"_index":1037,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{}}}],["soups",{"_index":2076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"modules/CartModule.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"index.html":{},"classes/Product.html":{}}}],["sourced",{"_index":2769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sous",{"_index":2194,"title":{},"body":{"miscellaneous/variables.html":{}}}],["space",{"_index":2150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["spaces",{"_index":1061,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["spatulas",{"_index":1943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["special",{"_index":740,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specialized",{"_index":2308,"title":{},"body":{"miscellaneous/variables.html":{}}}],["specific",{"_index":404,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/ErrorHandlingInterceptor.html":{}}}],["spill",{"_index":2279,"title":{},"body":{"miscellaneous/variables.html":{}}}],["spills",{"_index":2166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["split",{"_index":1048,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"miscellaneous/variables.html":{}}}],["spoiling",{"_index":2252,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sponge",{"_index":2417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sponge_2048x2048.webp?v=1712813576",{"_index":2452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sponges",{"_index":2420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sponsors",{"_index":1864,"title":{},"body":{"index.html":{}}}],["spoon",{"_index":1420,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["spoons",{"_index":1977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["spray",{"_index":2542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sql",{"_index":993,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["src/.../active",{"_index":1890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.module.ts",{"_index":1893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth",{"_index":1769,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constant.ts",{"_index":1892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1792,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../order",{"_index":1771,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../product",{"_index":1773,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role",{"_index":1775,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role.constant.ts",{"_index":1895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.decorator.ts",{"_index":1894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../seed",{"_index":1896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":149,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":152,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":244,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":245,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:97",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1696,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":350,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/config/jwt.config",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["src/auth/constants/auth.constant",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["src/auth/constants/auth.constant.ts",{"_index":1717,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/constants/role.constant",{"_index":1510,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/constants/role.constant.ts",{"_index":1718,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorator/active",{"_index":476,"title":{},"body":{"controllers/CartController.html":{},"controllers/OrdersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorator/auth.decorator",{"_index":1403,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["src/auth/decorator/auth.decorator.ts",{"_index":1720,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorator/role.decorator",{"_index":1405,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/auth/decorator/role.decorator.ts",{"_index":1721,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/sign",{"_index":1574,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/enums/auth",{"_index":384,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["src/auth/enums/role",{"_index":766,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts",{"_index":372,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:33",{"_index":378,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:59",{"_index":379,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/roles/roles.guard.ts",{"_index":1501,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles/roles.guard.ts:16",{"_index":1502,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles/roles.guard.ts:31",{"_index":1503,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/interfaces/active",{"_index":99,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:19",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:6",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":421,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:15",{"_index":434,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:27",{"_index":428,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/generate",{"_index":1113,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider",{"_index":761,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":1181,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:12",{"_index":1184,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:19",{"_index":1183,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/sign",{"_index":1582,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["src/cart/cart",{"_index":495,"title":{},"body":{"entities/CartItem.html":{},"injectables/CreateOrderProvider.html":{},"coverage.html":{}}}],["src/cart/cart.controller.ts",{"_index":451,"title":{},"body":{"controllers/CartController.html":{},"coverage.html":{}}}],["src/cart/cart.controller.ts:25",{"_index":460,"title":{},"body":{"controllers/CartController.html":{}}}],["src/cart/cart.controller.ts:31",{"_index":457,"title":{},"body":{"controllers/CartController.html":{}}}],["src/cart/cart.controller.ts:36",{"_index":467,"title":{},"body":{"controllers/CartController.html":{}}}],["src/cart/cart.controller.ts:41",{"_index":470,"title":{},"body":{"controllers/CartController.html":{}}}],["src/cart/cart.controller.ts:49",{"_index":465,"title":{},"body":{"controllers/CartController.html":{}}}],["src/cart/cart.module",{"_index":1247,"title":{},"body":{"modules/OrdersModule.html":{}}}],["src/cart/cart.module.ts",{"_index":534,"title":{},"body":{"modules/CartModule.html":{}}}],["src/cart/dtos/create",{"_index":569,"title":{},"body":{"classes/CreateCartItemDto.html":{},"coverage.html":{}}}],["src/cart/dtos/update",{"_index":1598,"title":{},"body":{"classes/UpdateCartItemDto.html":{},"coverage.html":{}}}],["src/cart/entities/cart",{"_index":519,"title":{},"body":{"entities/CartItem.html":{}}}],["src/cart/interfaces/cart.interface.ts",{"_index":443,"title":{},"body":{"interfaces/Cart.html":{},"coverage.html":{}}}],["src/cart/providers/add",{"_index":109,"title":{},"body":{"injectables/AddToCartProvider.html":{},"coverage.html":{}}}],["src/cart/providers/cart.service",{"_index":610,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["src/cart/providers/cart.service.ts",{"_index":543,"title":{},"body":{"injectables/CartService.html":{},"coverage.html":{}}}],["src/cart/providers/cart.service.ts:27",{"_index":550,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/cart.service.ts:31",{"_index":555,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/cart.service.ts:35",{"_index":557,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/cart.service.ts:39",{"_index":553,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/cart.service.ts:51",{"_index":559,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/cart.service.ts:55",{"_index":552,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/cart.service.ts:9",{"_index":549,"title":{},"body":{"injectables/CartService.html":{}}}],["src/cart/providers/get",{"_index":1141,"title":{},"body":{"injectables/GetCartProvider.html":{},"coverage.html":{}}}],["src/cart/providers/update",{"_index":1600,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{},"coverage.html":{}}}],["src/common/filters/common",{"_index":764,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"classes/ValidationException.html":{},"coverage.html":{}}}],["src/common/filters/global",{"_index":879,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["src/common/interceptors/data",{"_index":784,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/error",{"_index":842,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{},"coverage.html":{}}}],["src/common/pagination/dtos/pagination",{"_index":1029,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/pagination/interfaces/paginated.interface",{"_index":1024,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["src/common/pagination/interfaces/paginated.interface.ts",{"_index":1262,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.module",{"_index":1484,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/common/pagination/pagination.module.ts",{"_index":1281,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/providers/pagination.provider",{"_index":1031,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts",{"_index":1283,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:14",{"_index":1285,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:34",{"_index":1287,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/main.ts",{"_index":1735,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/migrations/1759619432047",{"_index":1521,"title":{},"body":{"classes/SeedProducts1759619432047.html":{},"coverage.html":{}}}],["src/orders/dtos/create",{"_index":581,"title":{},"body":{"classes/CreateOrderDto.html":{},"coverage.html":{}}}],["src/orders/enums/order",{"_index":1778,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/orders/order",{"_index":1214,"title":{},"body":{"entities/OrderItem.html":{},"coverage.html":{}}}],["src/orders/order.entity.ts",{"_index":1185,"title":{},"body":{"entities/Order.html":{},"coverage.html":{}}}],["src/orders/order.entity.ts:17",{"_index":1190,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:20",{"_index":1205,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:23",{"_index":1200,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:28",{"_index":1197,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:33",{"_index":1188,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:40",{"_index":1196,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:43",{"_index":1189,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:46",{"_index":1206,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:49",{"_index":1208,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/order.entity.ts:52",{"_index":1193,"title":{},"body":{"entities/Order.html":{}}}],["src/orders/orders.controller.ts",{"_index":1223,"title":{},"body":{"controllers/OrdersController.html":{},"coverage.html":{}}}],["src/orders/orders.controller.ts:16",{"_index":1226,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.controller.ts:24",{"_index":1231,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.controller.ts:29",{"_index":1229,"title":{},"body":{"controllers/OrdersController.html":{}}}],["src/orders/orders.module.ts",{"_index":1243,"title":{},"body":{"modules/OrdersModule.html":{}}}],["src/orders/providers/create",{"_index":596,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"coverage.html":{}}}],["src/orders/providers/find",{"_index":995,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"coverage.html":{}}}],["src/orders/providers/orders.service.ts",{"_index":1252,"title":{},"body":{"injectables/OrdersService.html":{},"coverage.html":{}}}],["src/orders/providers/orders.service.ts:20",{"_index":1255,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/providers/orders.service.ts:24",{"_index":1256,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/providers/orders.service.ts:28",{"_index":1257,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/orders/providers/orders.service.ts:8",{"_index":1254,"title":{},"body":{"injectables/OrdersService.html":{}}}],["src/products/dtos/create",{"_index":680,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/products/dtos/get",{"_index":1156,"title":{},"body":{"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"coverage.html":{}}}],["src/products/dtos/update",{"_index":1623,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/products/enums/product",{"_index":1784,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/products/product.entity",{"_index":540,"title":{},"body":{"modules/CartModule.html":{},"injectables/CreateOrderProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["src/products/product.entity.ts",{"_index":1326,"title":{},"body":{"entities/Product.html":{},"coverage.html":{},"classes/Product.html":{}}}],["src/products/product.entity.ts:20",{"_index":1338,"title":{},"body":{"entities/Product.html":{},"classes/Product.html":{}}}],["src/products/product.entity.ts:23",{"_index":1343,"title":{},"body":{"entities/Product.html":{},"classes/Product.html":{}}}],["src/products/product.entity.ts:26",{"_index":1332,"title":{},"body":{"entities/Product.html":{},"classes/Product.html":{}}}],["src/products/product.entity.ts:29",{"_index":1337,"title":{},"body":{"entities/Product.html":{},"classes/Product.html":{}}}],["src/products/product.entity.ts:32",{"_index":1346,"title":{},"body":{"entities/Product.html":{},"classes/Product.html":{}}}],["src/products/product.entity.ts:35",{"_index":1348,"title":{},"body":{"entities/Product.html":{},"classes/Product.html":{}}}],["src/products/product.entity.ts:38",{"_index":1340,"title":{},"body":{"entities/Product.html":{},"classes/Product.html":{}}}],["src/products/product.entity.ts:42",{"_index":1334,"title":{},"body":{"entities/Product.html":{},"classes/Product.html":{}}}],["src/products/product.entity.ts:45",{"_index":1349,"title":{},"body":{"entities/Product.html":{},"classes/Product.html":{}}}],["src/products/product.entity.ts:51",{"_index":1341,"title":{},"body":{"entities/Product.html":{},"classes/Product.html":{}}}],["src/products/product.entity.ts:57",{"_index":1335,"title":{},"body":{"entities/Product.html":{},"classes/Product.html":{}}}],["src/products/product.entity.ts:62",{"_index":1347,"title":{},"body":{"entities/Product.html":{},"classes/Product.html":{}}}],["src/products/product.entity.ts:65",{"_index":1328,"title":{},"body":{"entities/Product.html":{},"classes/Product.html":{}}}],["src/products/product.entity.ts:68",{"_index":1345,"title":{},"body":{"entities/Product.html":{},"classes/Product.html":{}}}],["src/products/products.controller.ts",{"_index":1357,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{}}}],["src/products/products.controller.ts:113",{"_index":1374,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:119",{"_index":1390,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:228",{"_index":1401,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.controller.ts:286",{"_index":1387,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/products/products.module",{"_index":541,"title":{},"body":{"modules/CartModule.html":{}}}],["src/products/products.module.ts",{"_index":1480,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/products/providers/create",{"_index":707,"title":{},"body":{"injectables/CreateProductProvider.html":{},"coverage.html":{}}}],["src/products/providers/delete",{"_index":828,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"coverage.html":{}}}],["src/products/providers/find",{"_index":1009,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"injectables/FindProductByIdProvider.html":{},"coverage.html":{}}}],["src/products/providers/products.service",{"_index":123,"title":{},"body":{"injectables/AddToCartProvider.html":{}}}],["src/products/providers/products.service.ts",{"_index":1487,"title":{},"body":{"injectables/ProductsService.html":{},"coverage.html":{}}}],["src/products/providers/products.service.ts:14",{"_index":1489,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:42",{"_index":1490,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:46",{"_index":1492,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:52",{"_index":1495,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:62",{"_index":1491,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/products.service.ts:66",{"_index":1493,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/products/providers/update",{"_index":1630,"title":{},"body":{"injectables/UpdateProductProvider.html":{},"coverage.html":{}}}],["src/seed",{"_index":1740,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/dtos/create",{"_index":722,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/providers/create",{"_index":752,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["src/users/providers/find",{"_index":1100,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":134,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/SignInProvider.html":{}}}],["src/users/providers/users.service.ts",{"_index":1699,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:32",{"_index":1702,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:38",{"_index":1704,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:42",{"_index":1705,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:9",{"_index":1701,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":609,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["src/users/user.entity.ts",{"_index":1645,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:18",{"_index":1652,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:25",{"_index":1651,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:32",{"_index":1653,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:40",{"_index":1650,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:47",{"_index":1658,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:56",{"_index":1657,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:60",{"_index":1648,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:63",{"_index":1659,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:66",{"_index":1647,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:69",{"_index":1655,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1664,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:82",{"_index":1675,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":354,"title":{},"body":{"modules/AuthModule.html":{},"modules/CartModule.html":{}}}],["src/users/users.module.ts",{"_index":1694,"title":{},"body":{"modules/UsersModule.html":{}}}],["ssl",{"_index":236,"title":{},"body":{"modules/AppModule.html":{}}}],["stability",{"_index":2780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stable",{"_index":2660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stack",{"_index":908,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["stackable",{"_index":2147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stain",{"_index":2815,"title":{},"body":{"miscellaneous/variables.html":{}}}],["staining",{"_index":2588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stainless",{"_index":2211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stains",{"_index":2523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["standard",{"_index":2335,"title":{},"body":{"miscellaneous/variables.html":{}}}],["staples",{"_index":2227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start",{"_index":1809,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1812,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1813,"title":{},"body":{"index.html":{}}}],["started",{"_index":1793,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1803,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1712,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":374,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{}}}],["status",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["status.enum",{"_index":1211,"title":{},"body":{"entities/Order.html":{}}}],["status.enum.ts",{"_index":1772,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statuscode",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DataResponseInterceptor.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/ProductsController.html":{}}}],["statuscodes",{"_index":958,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["statuscodes[status",{"_index":978,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["stay",{"_index":1850,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["stays",{"_index":2618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["steaks",{"_index":2048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["steel",{"_index":2212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stews",{"_index":2077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stick",{"_index":1959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sticking",{"_index":2554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sticky",{"_index":2562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stiff",{"_index":2474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stock",{"_index":644,"title":{},"body":{"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"miscellaneous/variables.html":{},"classes/Product.html":{}}}],["storage",{"_index":1785,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["storing",{"_index":2196,"title":{},"body":{"miscellaneous/variables.html":{}}}],["straight",{"_index":2718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["straw",{"_index":2293,"title":{},"body":{"miscellaneous/variables.html":{}}}],["straws",{"_index":2290,"title":{},"body":{"miscellaneous/variables.html":{}}}],["streak",{"_index":2511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/SignInDto.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"miscellaneous/variables.html":{},"classes/Product.html":{}}}],["string(error",{"_index":674,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["strong",{"_index":2294,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stronger",{"_index":2761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["structure",{"_index":2433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stuck",{"_index":2458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sturdy",{"_index":2022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["style",{"_index":1918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["styles",{"_index":2719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stylish",{"_index":2347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sub",{"_index":105,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{}}}],["substantial",{"_index":2778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subtotal",{"_index":445,"title":{},"body":{"interfaces/Cart.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{}}}],["successful",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["successfully",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DeleteProductProvider.html":{},"controllers/ProductsController.html":{},"injectables/UpdateCartItemProvider.html":{},"controllers/UsersController.html":{}}}],["such",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["sugar",{"_index":2143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sum",{"_index":653,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["summary",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":812,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["superior",{"_index":2024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["support",{"_index":1831,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supports",{"_index":1395,"title":{},"body":{"controllers/ProductsController.html":{}}}],["surface",{"_index":2439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["surfaces",{"_index":1954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sustainability",{"_index":2087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sustainable",{"_index":1417,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["sustainably",{"_index":2360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["svg",{"_index":1880,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":1067,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["swivel",{"_index":2723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sync",{"_index":1533,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["synchronize",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["synthetic",{"_index":2008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t",{"_index":1123,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["table",{"_index":988,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"classes/SeedProducts1759619432047.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tables",{"_index":2808,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1745,"title":{},"body":{"coverage.html":{}}}],["tackle",{"_index":2428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["take",{"_index":1300,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["tall",{"_index":2520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tapes",{"_index":2581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tasks",{"_index":2486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["taste",{"_index":2306,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tasteful",{"_index":2827,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tea",{"_index":2226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tearing",{"_index":2595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["temperature",{"_index":2303,"title":{},"body":{"miscellaneous/variables.html":{}}}],["temperatures",{"_index":1949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test",{"_index":1816,"title":{},"body":{"index.html":{}}}],["test:covresources",{"_index":1819,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1818,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1814,"title":{},"body":{"index.html":{}}}],["text",{"_index":1336,"title":{},"body":{"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"classes/Product.html":{}}}],["texture",{"_index":2011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textured",{"_index":2438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["thanks",{"_index":1863,"title":{},"body":{"index.html":{}}}],["themselves",{"_index":2332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["thermal",{"_index":2348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["thick",{"_index":2406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.accesstokenguard",{"_index":397,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.addtocartprovider.addtocart(userid",{"_index":562,"title":{},"body":{"injectables/CartService.html":{}}}],["this.appservice.gethello",{"_index":156,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.signin(signindto",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type]).flat",{"_index":413,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.builderrorresponse",{"_index":902,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["this.calculatesubtotal(items",{"_index":1151,"title":{},"body":{"injectables/GetCartProvider.html":{}}}],["this.cartitemrepository.find",{"_index":1148,"title":{},"body":{"injectables/GetCartProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["this.cartitemrepository.findone",{"_index":1612,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["this.cartitemrepository.softdelete",{"_index":1615,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["this.cartservice.addtocart(userid",{"_index":484,"title":{},"body":{"controllers/CartController.html":{}}}],["this.cartservice.clearcart(userid",{"_index":482,"title":{},"body":{"controllers/CartController.html":{}}}],["this.cartservice.decrementquantity",{"_index":492,"title":{},"body":{"controllers/CartController.html":{}}}],["this.cartservice.getcart(userid",{"_index":486,"title":{},"body":{"controllers/CartController.html":{}}}],["this.cartservice.removecartitem(userid",{"_index":489,"title":{},"body":{"controllers/CartController.html":{}}}],["this.cartservice.validatecartstock(userid",{"_index":620,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["this.cleanquery(productquery",{"_index":1034,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["this.configservice.get('appconfig.apiversion",{"_index":801,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["this.createorderprovider.createorder(userid",{"_index":1259,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.createproductprovider.createproduct(createproductdto",{"_index":1496,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.createuserprovider.createuser(createuserdto",{"_index":1706,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.datasource.createqueryrunner",{"_index":614,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["this.deleteproductprovider.deleteproduct(productid",{"_index":1499,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.extractrequestfromheader(request",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.filterobj",{"_index":1638,"title":{},"body":{"injectables/UpdateProductProvider.html":{}}}],["this.findallordersforuserprovider.findallorders(userid",{"_index":1260,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.findallproductsprovider.findallproducts(productquery",{"_index":1497,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.findorderbyidprovider.findorderbyid(userid",{"_index":1261,"title":{},"body":{"injectables/OrdersService.html":{}}}],["this.findproductbyidprovider.findproductbyid(productid",{"_index":1500,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.finduserbyemailprovider.finduserbyemail(email",{"_index":1707,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.finduserbyidprovider.finduserbyid(userid",{"_index":1708,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.generatetokenprovider.generatetokens(user",{"_index":1595,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.getcartprovider.getcart(userid",{"_index":563,"title":{},"body":{"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["this.getcontrollername(request",{"_index":899,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["this.gethandlername(request",{"_index":901,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["this.gethttperrorcode(status",{"_index":922,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["this.hashingprovider.comparepassword",{"_index":1591,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.hashingprovider.hashpassword(createuserdto.password",{"_index":776,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.isconnectionerror(error",{"_index":861,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["this.jwtconfiguration",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":1129,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.audience",{"_index":1136,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.issuer",{"_index":1138,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.refreshtokenttl",{"_index":1133,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":1140,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.signasync",{"_index":1134,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.verify",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.logger.error",{"_index":905,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["this.orderrepository.find",{"_index":1004,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{}}}],["this.orderrepository.findone",{"_index":1092,"title":{},"body":{"injectables/FindOrderByIdProvider.html":{}}}],["this.ordersservice.createorder(userid",{"_index":1235,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.ordersservice.findallorders(userid",{"_index":1237,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.ordersservice.findorderbyid(userid",{"_index":1239,"title":{},"body":{"controllers/OrdersController.html":{}}}],["this.paginationprovider.paginationquery",{"_index":1080,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["this.productrepository.save(item.product",{"_index":1620,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["this.productsrepository",{"_index":1081,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["this.productsrepository.create",{"_index":719,"title":{},"body":{"injectables/CreateProductProvider.html":{}}}],["this.productsrepository.findone",{"_index":1098,"title":{},"body":{"injectables/FindProductByIdProvider.html":{}}}],["this.productsrepository.findoneby",{"_index":835,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["this.productsrepository.save",{"_index":838,"title":{},"body":{"injectables/DeleteProductProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["this.productsrepository.save(newproduct",{"_index":720,"title":{},"body":{"injectables/CreateProductProvider.html":{}}}],["this.productsservice.createproduct(createproductdto",{"_index":1442,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.deleteproduct(productid",{"_index":1474,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.findallproducts(productsquery",{"_index":1443,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.findproductbyid(createcartitemdto.productid",{"_index":144,"title":{},"body":{"injectables/AddToCartProvider.html":{}}}],["this.productsservice.updateproduct(updateproductdto",{"_index":1470,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.reflector.getallandoverride(auth_type_key",{"_index":407,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":1514,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.request.headers.host",{"_index":1308,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol",{"_index":1307,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.sanitizedatabaseerror(exception",{"_index":926,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["this.signinprovider.signin(signindto",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signtoken",{"_index":1127,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.signtoken(user.id",{"_index":1132,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.updatecartitemprovider.clearcart(userid",{"_index":567,"title":{},"body":{"injectables/CartService.html":{}}}],["this.updatecartitemprovider.decrementquantity",{"_index":565,"title":{},"body":{"injectables/CartService.html":{}}}],["this.updatecartitemprovider.removefromcart(userid",{"_index":564,"title":{},"body":{"injectables/CartService.html":{}}}],["this.updatecartitemprovider.validatecartstock(userid",{"_index":566,"title":{},"body":{"injectables/CartService.html":{}}}],["this.updateproductprovider.updateproduct",{"_index":1498,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.usersrepository.create",{"_index":775,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersrepository.findone",{"_index":770,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{}}}],["this.usersrepository.save(newuser",{"_index":777,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":1690,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.finduserbyemail(signindto.email",{"_index":1589,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.usersservice.finduserbyid(userid",{"_index":143,"title":{},"body":{"injectables/AddToCartProvider.html":{}}}],["thousands",{"_index":2185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["through",{"_index":416,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["throw",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{}}}],["throwerror",{"_index":850,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["thrown",{"_index":2366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tight",{"_index":2611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["time",{"_index":1688,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["timeout",{"_index":853,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["timeout(30000",{"_index":855,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["timeouterror",{"_index":851,"title":{},"body":{"injectables/ErrorHandlingInterceptor.html":{}}}],["times",{"_index":2120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timestamp",{"_index":884,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Product.html":{},"classes/Product.html":{}}}],["tines",{"_index":2010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tiny",{"_index":2502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tips",{"_index":2042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["token",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/ProductsController.html":{},"injectables/SignInProvider.html":{}}}],["token.'})@apibody({description",{"_index":1364,"title":{},"body":{"controllers/ProductsController.html":{}}}],["token.guard",{"_index":203,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:18",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:42",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:72",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["tokens",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["tokens.'})@apiconsumes('application/json')@apibody({description",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens.provider",{"_index":361,"title":{},"body":{"modules/AuthModule.html":{},"injectables/SignInProvider.html":{}}}],["tokens.provider.ts",{"_index":1114,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"coverage.html":{}}}],["tokens.provider.ts:12",{"_index":1118,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:36",{"_index":1120,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:64",{"_index":1124,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tone",{"_index":2313,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tones",{"_index":2789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tongs",{"_index":2032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tool",{"_index":2019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["toss",{"_index":2544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tossing",{"_index":2688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["total",{"_index":446,"title":{},"body":{"interfaces/Cart.html":{},"injectables/CreateOrderProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Order.html":{}}}],["totalitems",{"_index":1270,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpages",{"_index":1272,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["touch",{"_index":1870,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["tough",{"_index":2429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["toughest",{"_index":2490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["towels",{"_index":2509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["toxin",{"_index":2385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["traditional",{"_index":2018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transaction",{"_index":673,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["transactions",{"_index":612,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["transfer",{"_index":2813,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transform",{"_index":636,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["transformer",{"_index":1661,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["transitions",{"_index":2776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transport",{"_index":2167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trap",{"_index":2496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["travel",{"_index":1923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["travelers",{"_index":2407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["treated",{"_index":1986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tree",{"_index":2111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trips",{"_index":2255,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trivet",{"_index":2806,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trivets",{"_index":2807,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tropical",{"_index":2068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"injectables/DeleteProductProvider.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"classes/Product.html":{}}}],["truncate",{"_index":1567,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["try",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateOrderProvider.html":{},"classes/DatabaseConnectionException.html":{},"injectables/ErrorHandlingInterceptor.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/ValidationException.html":{}}}],["tumbler",{"_index":2259,"title":{},"body":{"miscellaneous/variables.html":{}}}],["twitter",{"_index":1876,"title":{},"body":{"index.html":{}}}],["type",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"interfaces/Cart.html":{},"controllers/CartController.html":{},"entities/CartItem.html":{},"injectables/CartService.html":{},"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateProductDto.html":{},"injectables/CreateProductProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"classes/DatabaseConnectionException.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GetProductsBaseDto.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/HashingProvider.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RolesGuard.html":{},"classes/SeedProducts1759619432047.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/ValidationException.html":{},"coverage.html":{},"miscellaneous/variables.html":{},"classes/Product.html":{}}}],["type.enum",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateUserProvider.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["type.enum.ts",{"_index":1770,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeorm",{"_index":128,"title":{},"body":{"injectables/AddToCartProvider.html":{},"entities/CartItem.html":{},"injectables/CreateOrderProvider.html":{},"injectables/CreateProductProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DeleteProductProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindAllProductsProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindProductByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GetCartProvider.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"entities/OrderItem.html":{},"injectables/PaginationProvider.html":{},"entities/Product.html":{},"classes/SeedProducts1759619432047.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UpdateProductProvider.html":{},"entities/User.html":{},"dependencies.html":{},"classes/Product.html":{}}}],["typeormmodule",{"_index":188,"title":{},"body":{"modules/AppModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([cartitem",{"_index":542,"title":{},"body":{"modules/CartModule.html":{}}}],["typeormmodule.forfeature([order",{"_index":1251,"title":{},"body":{"modules/OrdersModule.html":{}}}],["typeormmodule.forfeature([product",{"_index":1486,"title":{},"body":{"modules/ProductsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1698,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":395,"title":{},"body":{"guards/AuthenticationGuard.html":{},"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["typescript",{"_index":86,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{},"index.html":{}}}],["ultra",{"_index":2323,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unable",{"_index":813,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{}}}],["unauthorized",{"_index":1371,"title":{},"body":{"controllers/ProductsController.html":{}}}],["unauthorizedexception",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AddToCartProvider.html":{},"guards/AuthenticationGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["unauthorizedexception('incorrect",{"_index":1594,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["unbleached",{"_index":2754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllProductsProvider.html":{},"classes/GlobalExceptionFilter.html":{},"entities/Order.html":{},"miscellaneous/variables.html":{}}}],["undefined})@apibadrequestresponse({description",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@apiresponse({status",{"_index":1367,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["undefined})@post('')@roles(role.admin",{"_index":1373,"title":{},"body":{"controllers/ProductsController.html":{}}}],["undefined})@roles(role.admin)@delete(':productid",{"_index":1386,"title":{},"body":{"controllers/ProductsController.html":{}}}],["undefined})@roles(role.admin)@patch(':productid",{"_index":1400,"title":{},"body":{"controllers/ProductsController.html":{}}}],["underneath",{"_index":2617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uneven",{"_index":2810,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uniform",{"_index":2704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unique",{"_index":1342,"title":{},"body":{"entities/Product.html":{},"controllers/ProductsController.html":{},"classes/SeedProducts1759619432047.html":{},"entities/User.html":{},"miscellaneous/variables.html":{},"classes/Product.html":{}}}],["unit",{"_index":1815,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CartService.html":{},"interfaces/ErrorResponse.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{}}}],["unknowncontroller",{"_index":948,"title":{},"body":{"interfaces/ErrorResponse.html":{},"classes/GlobalExceptionFilter.html":{}}}],["unlicensed",{"_index":1888,"title":{},"body":{"properties.html":{}}}],["unlike",{"_index":2302,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unused",{"_index":88,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["up",{"_index":1463,"title":{},"body":{"controllers/ProductsController.html":{},"classes/SeedProducts1759619432047.html":{},"miscellaneous/variables.html":{}}}],["up(queryrunner",{"_index":1527,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["update",{"_index":561,"title":{},"body":{"injectables/CartService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["updateall",{"_index":1448,"title":{},"body":{"controllers/ProductsController.html":{}}}],["updatecartitemdto",{"_index":463,"title":{"classes/UpdateCartItemDto.html":{}},"body":{"controllers/CartController.html":{},"injectables/CartService.html":{},"classes/UpdateCartItemDto.html":{},"injectables/UpdateCartItemProvider.html":{},"coverage.html":{}}}],["updatecartitemdto.quantity",{"_index":491,"title":{},"body":{"controllers/CartController.html":{}}}],["updatecartitemprovider",{"_index":533,"title":{"injectables/UpdateCartItemProvider.html":{}},"body":{"modules/CartModule.html":{},"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{},"coverage.html":{},"overview.html":{}}}],["updated",{"_index":1399,"title":{},"body":{"controllers/ProductsController.html":{}}}],["updatedat",{"_index":499,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/Product.html":{},"controllers/ProductsController.html":{},"entities/User.html":{},"classes/Product.html":{}}}],["updatedatecolumn",{"_index":515,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{},"entities/Product.html":{},"entities/User.html":{},"classes/Product.html":{}}}],["updateprice",{"_index":1446,"title":{},"body":{"controllers/ProductsController.html":{}}}],["updateproduct",{"_index":1358,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/UpdateProductProvider.html":{}}}],["updateproduct(productid",{"_index":1392,"title":{},"body":{"controllers/ProductsController.html":{}}}],["updateproduct(updateproductdto",{"_index":1494,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/UpdateProductProvider.html":{}}}],["updateproductdto",{"_index":1393,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductDto.html":{},"injectables/UpdateProductProvider.html":{},"coverage.html":{}}}],["updateproductprovider",{"_index":1479,"title":{"injectables/UpdateProductProvider.html":{}},"body":{"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"injectables/UpdateProductProvider.html":{},"coverage.html":{},"overview.html":{}}}],["updates",{"_index":1394,"title":{},"body":{"controllers/ProductsController.html":{},"index.html":{}}}],["updates.'})@apiparam({name",{"_index":1397,"title":{},"body":{"controllers/ProductsController.html":{}}}],["updatestock",{"_index":1445,"title":{},"body":{"controllers/ProductsController.html":{}}}],["upon",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["url",{"_index":1666,"title":{},"body":{"controllers/UsersController.html":{}}}],["url(this.request.url",{"_index":1310,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["urls",{"_index":1305,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["use",{"_index":388,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateOrderProvider.html":{},"interfaces/ErrorResponse.html":{},"injectables/FindAllProductsProvider.html":{},"classes/GlobalExceptionFilter.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["useclass",{"_index":243,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["usefactory",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["useful",{"_index":2078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user",{"_index":35,"title":{"entities/User.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AddToCartProvider.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"entities/CartItem.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"entities/Order.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"injectables/UpdateCartItemProvider.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user.cartitems",{"_index":517,"title":{},"body":{"entities/CartItem.html":{}}}],["user.decorator",{"_index":477,"title":{},"body":{"controllers/CartController.html":{},"controllers/OrdersController.html":{}}}],["user.decorator.ts",{"_index":1719,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":762,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":723,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:23",{"_index":728,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":730,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:48",{"_index":726,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:65",{"_index":742,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":1130,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["user.entity",{"_index":760,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.firstname",{"_index":1596,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.id",{"_index":1128,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["user.lastname",{"_index":1597,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.orders",{"_index":1207,"title":{},"body":{"entities/Order.html":{}}}],["user.password",{"_index":1593,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.provider",{"_index":1249,"title":{},"body":{"modules/OrdersModule.html":{},"injectables/OrdersService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.provider.ts",{"_index":753,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:11",{"_index":756,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:12",{"_index":1002,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{}}}],["user.provider.ts:26",{"_index":759,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:7",{"_index":999,"title":{},"body":{"injectables/FindAllOrdersForUserProvider.html":{}}}],["user.role",{"_index":1131,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{}}}],["user?.[field",{"_index":1900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":122,"title":{},"body":{"injectables/AddToCartProvider.html":{},"controllers/CartController.html":{},"injectables/CartService.html":{},"injectables/CreateOrderProvider.html":{},"injectables/FindAllOrdersForUserProvider.html":{},"injectables/FindOrderByIdProvider.html":{},"injectables/FindUserByIdProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GetCartProvider.html":{},"controllers/OrdersController.html":{},"injectables/OrdersService.html":{},"injectables/UpdateCartItemProvider.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":138,"title":{},"body":{"injectables/AddToCartProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{},"controllers/ProductsController.html":{},"guards/RolesGuard.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{}}}],["users.'})@apiparam({name",{"_index":1378,"title":{},"body":{"controllers/ProductsController.html":{}}}],["users.controller",{"_index":1695,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/user.entity",{"_index":523,"title":{},"body":{"entities/CartItem.html":{},"entities/Order.html":{}}}],["users/users.module",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":1663,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":173,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":757,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/FindUserByIdProvider.html":{}}}],["usersservice",{"_index":114,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AddToCartProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":2444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["using",{"_index":386,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/GenerateTokensProvider.html":{},"guards/RolesGuard.html":{},"index.html":{}}}],["utensils",{"_index":1416,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["utility",{"_index":2647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uuid",{"_index":1379,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["vacuum",{"_index":2264,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["validate",{"_index":1617,"title":{},"body":{"injectables/UpdateCartItemProvider.html":{}}}],["validatecartstock",{"_index":547,"title":{},"body":{"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["validatecartstock(userid",{"_index":558,"title":{},"body":{"injectables/CartService.html":{},"injectables/UpdateCartItemProvider.html":{}}}],["validating",{"_index":1504,"title":{},"body":{"guards/RolesGuard.html":{}}}],["validation",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{},"classes/DatabaseConnectionException.html":{},"injectables/FindAllProductsProvider.html":{},"controllers/ProductsController.html":{},"classes/ValidationException.html":{}}}],["validationexception",{"_index":763,"title":{"classes/ValidationException.html":{}},"body":{"injectables/CreateUserProvider.html":{},"classes/DatabaseConnectionException.html":{},"classes/ValidationException.html":{},"coverage.html":{}}}],["validationschema",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":578,"title":{},"body":{"classes/CreateCartItemDto.html":{},"classes/CreateOrderDto.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/GetProductsBaseDto.html":{},"classes/GetProductsDto.html":{},"classes/PaginationQueryDto.html":{},"classes/SignInDto.html":{},"classes/UpdateCartItemDto.html":{},"classes/UpdateProductDto.html":{},"dependencies.html":{}}}],["validuser",{"_index":1411,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["value",{"_index":1084,"title":{},"body":{"injectables/FindAllProductsProvider.html":{},"classes/GlobalExceptionFilter.html":{},"classes/PaginationQueryDto.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1551,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["varchar",{"_index":1187,"title":{},"body":{"entities/Order.html":{},"entities/User.html":{}}}],["varchar(100",{"_index":1540,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["varchar(255",{"_index":1543,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["varchar(50",{"_index":1541,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["variable",{"_index":1714,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1889,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":1267,"title":{},"body":{"interfaces/Paginated.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":89,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindAllProductsProvider.html":{}}}],["vegetable",{"_index":2730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vegetables",{"_index":2248,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{}}}],["versatile",{"_index":2054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1886,"title":{},"body":{"properties.html":{}}}],["via",{"_index":1532,"title":{},"body":{"classes/SeedProducts1759619432047.html":{}}}],["vibrant",{"_index":2606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vide",{"_index":2195,"title":{},"body":{"miscellaneous/variables.html":{}}}],["video",{"_index":1839,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1827,"title":{},"body":{"index.html":{}}}],["visual",{"_index":2829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["visualize",{"_index":1841,"title":{},"body":{"index.html":{}}}],["void",{"_index":1176,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["wall",{"_index":2263,"title":{},"body":{"miscellaneous/variables.html":{}}}],["warm",{"_index":1997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["warmth",{"_index":2101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["warping",{"_index":2638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wash",{"_index":2115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["washable",{"_index":2238,"title":{},"body":{"miscellaneous/variables.html":{}}}],["waste",{"_index":1423,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["watch",{"_index":1810,"title":{},"body":{"index.html":{}}}],["water",{"_index":2117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["website",{"_index":1874,"title":{},"body":{"index.html":{}}}],["weigh",{"_index":2242,"title":{},"body":{"miscellaneous/variables.html":{}}}],["weight",{"_index":2779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["well",{"_index":2376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wet",{"_index":2427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["where('ci.user.id",{"_index":631,"title":{},"body":{"injectables/CreateOrderProvider.html":{}}}],["where.category",{"_index":1044,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["where.name",{"_index":1062,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["where.price",{"_index":1053,"title":{},"body":{"injectables/FindAllProductsProvider.html":{}}}],["whether",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/ErrorHandlingInterceptor.html":{},"guards/RolesGuard.html":{}}}],["whipping",{"_index":2004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whisk",{"_index":2002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whole",{"_index":2297,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wide",{"_index":2354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["without",{"_index":390,"title":{},"body":{"guards/AuthenticationGuard.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["withstand",{"_index":1948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["withstands",{"_index":2533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["won't",{"_index":1990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wood",{"_index":1981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wooden",{"_index":1976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["work",{"_index":2300,"title":{},"body":{"miscellaneous/variables.html":{}}}],["working",{"_index":1825,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["works",{"_index":2668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["world",{"_index":247,"title":{},"body":{"injectables/AppService.html":{}}}],["worn",{"_index":2465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wrap",{"_index":2098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wraps",{"_index":2092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x",{"_index":1852,"title":{},"body":{"index.html":{}}}],["y",{"_index":2717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["years",{"_index":1971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yes",{"_index":811,"title":{},"body":{"classes/DatabaseConnectionException.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/PaginationProvider.html":{}}}],["you'd",{"_index":1867,"title":{},"body":{"index.html":{}}}],["z3xbekl.jpg",{"_index":2258,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z])(?=.*\\d)(?=.*[\\w_]).{8",{"_index":733,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":732,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zero",{"_index":1421,"title":{},"body":{"controllers/ProductsController.html":{},"miscellaneous/variables.html":{}}}],["zip",{"_index":2182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CartModule.html":{},"modules/OrdersModule.html":{},"modules/PaginationModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["zulay",{"_index":2592,"title":{},"body":{"miscellaneous/variables.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token/access-token.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    guard for access token\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token/access-token.guard.ts:18\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:42\n                        \n                    \n\n\n            \n                \n                        function for checking if user has access token\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                true or false depending on whether user is signed in or not\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:72\n                        \n                    \n\n\n            \n                \n                        function for extracting the access token from the request headers\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                access token\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { REQUEST_USER_KEY } from 'src/auth/constants/auth.constant';\n\n/**\n * guard for access token\n */\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  /**\n   * constructor\n   * @param jwtService\n   * @param jwtConfiguration\n   */\n  constructor(\n    /**\n     * Inject jwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * inject jwt config\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  /**\n   * function for checking if user has access token\n   * @param context\n   * @returns true or false depending on whether user is signed in or not\n   */\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n\n    const token = this.extractRequestFromHeader(request);\n\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n\n    try {\n      const payload = await this.jwtService.verify(\n        token,\n        this.jwtConfiguration,\n      );\n\n      request[REQUEST_USER_KEY] = payload;\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    } catch (_) {\n      throw new UnauthorizedException();\n    }\n\n    return true;\n  }\n\n  /**\n   * function for extracting the access token from the request headers\n   * @param request\n   * @returns access token\n   */\n  private extractRequestFromHeader(request: Request): string | undefined {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, token] = request.headers.authorization?.split(' ') ?? [];\n    return token;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActiveUserData.html":{"url":"interfaces/ActiveUserData.html","title":"interface - ActiveUserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActiveUserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/active-user-data.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                interface for a user that has logged in (payload)\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    user email\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    user role\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    id for user\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ActiveUserData {\n  /**\n   * id for user\n   */\n  sub: string;\n\n  /**\n   * user email\n   */\n  email: string;\n\n  /**\n   * user role\n   */\n  role: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AddToCartProvider.html":{"url":"injectables/AddToCartProvider.html","title":"injectable - AddToCartProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AddToCartProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/providers/add-to-cart.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addToCart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsService: ProductsService, usersService: UsersService, cartItemRepository: Repository, getCartProvider: GetCartProvider)\n                    \n                \n                        \n                            \n                                Defined in src/cart/providers/add-to-cart.provider.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsService\n                                                  \n                                                        \n                                                                        ProductsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cartItemRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        getCartProvider\n                                                  \n                                                        \n                                                                        GetCartProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addToCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    addToCart(userId: string, createCartItemDto: CreateCartItemDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/add-to-cart.provider.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createCartItemDto\n                                            \n                                                            CreateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ProductsService } from 'src/products/providers/products.service';\nimport { CreateCartItemDto } from '../dtos/create-cart-item.dto';\nimport { Cart } from '../interfaces/cart.interface';\nimport { Repository } from 'typeorm';\nimport { CartItem } from '../cart-item.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { GetCartProvider } from './get-cart.provider';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AddToCartProvider {\n  constructor(\n    /**\n     * injecting the product service\n     */\n    private readonly productsService: ProductsService,\n\n    /**\n     * injecting the users service\n     */\n    private readonly usersService: UsersService,\n\n    /**\n     * injecting the cart item repository\n     */\n    @InjectRepository(CartItem)\n    private readonly cartItemRepository: Repository,\n\n    /**\n     * injecting the get cart provider\n     */\n    private readonly getCartProvider: GetCartProvider,\n  ) {}\n\n  async addToCart(\n    userId: string,\n    createCartItemDto: CreateCartItemDto,\n  ): Promise {\n    const [user, product] = await Promise.all([\n      this.usersService.findUserById(userId),\n      this.productsService.findProductById(createCartItemDto.productId),\n    ]);\n\n    if (product.stock \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCartModule\n\nCartModule\n\nAppModule -->\n\nCartModule->AppModule\n\n\n\n\n\nOrdersModule\n\nOrdersModule\n\nAppModule -->\n\nOrdersModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CartModule\n                        \n                        \n                            OrdersModule\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport enviromentValidation from './config/enviroment.validation';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { DataResponseInterceptor } from './common/interceptors/data-response/data-response.interceptor';\nimport { AuthenticationGuard } from './auth/guards/authentication/authentication.guard';\nimport { RolesGuard } from './auth/guards/roles/roles.guard';\nimport { AccessTokenGuard } from './auth/guards/access-token/access-token.guard';\nimport jwtConfig from './auth/config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ProductsModule } from './products/products.module';\nimport { CartModule } from './cart/cart.module';\nimport { OrdersModule } from './orders/orders.module';\n\n/**\n * app environment\n */\nconst ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n      validationSchema: enviromentValidation,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        return {\n          type: 'postgres',\n          autoLoadEntities: configService.get('database.autoLoadEntities'),\n          synchronize: configService.get('database.synchronize'),\n          port: +configService.get('database.port'),\n          username: configService.get('database.user'),\n          password: configService.get('database.password'),\n          host: configService.get('database.host'),\n          database: configService.get('database.name'),\n          ssl:\n            process.env.NODE_ENV === 'production'\n              ? {\n                  rejectUnauthorized: false,\n                }\n              : false,\n          logging: true,\n        };\n      },\n    }),\n    UsersModule,\n    AuthModule,\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    ProductsModule,\n    CartModule,\n    OrdersModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: DataResponseInterceptor,\n    },\n\n    { provide: APP_GUARD, useClass: AuthenticationGuard },\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard,\n    },\n    AccessTokenGuard,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Controller handling authentication-related operations such as sign-in\nThis controller provides endpoints for user authentication flows, including login, forgot password, reset password, and email verification.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/sign-in')@Auth(AuthType.None)@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Sign in a user with email and password', description: 'Authenticates a user and returns access and refresh tokens.'})@ApiConsumes('application/json')@ApiBody({description: 'Sign-in credentials', required: true, type: SignInDto})@ApiResponse({status: 200, description: 'User signed in successfully', schema: undefined})@ApiBadRequestResponse({description: 'Invalid credentials or missing fields', schema: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:97\n                        \n                    \n\n\n            \n                \n                        Signs in a user with valid email and password.\nThis endpoint authenticates the user and returns access and refresh tokens upon successful validation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe sign-in credentials (email and password).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                An object containing the access token and refresh token.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiConsumes,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { Auth } from './decorator/auth.decorator';\nimport { AuthType } from './enums/auth-type.enum';\nimport { SignInDto } from './dtos/sign-in.dto';\nimport { Role } from './enums/role-type.enum';\n\n/**\n * Controller handling authentication-related operations such as sign-in\n *\n * This controller provides endpoints for user authentication flows, including login, forgot password, reset password, and email verification.\n */\n@ApiTags('Auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    /**\n     * injecting the auth service\n     */\n    private readonly authService: AuthService,\n  ) {}\n\n  /**\n   * Signs in a user with valid email and password.\n   *\n   * This endpoint authenticates the user and returns access and refresh tokens upon successful validation.\n   *\n   * @param signInDto - The sign-in credentials (email and password).\n   * @returns An object containing the access token and refresh token.\n   */\n  @Post('/sign-in')\n  @Auth(AuthType.None)\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Sign in a user with email and password',\n    description: 'Authenticates a user and returns access and refresh tokens.',\n  })\n  @ApiConsumes('application/json')\n  @ApiBody({\n    description: 'Sign-in credentials',\n    required: true,\n    type: SignInDto,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'User signed in successfully',\n    schema: {\n      type: 'object',\n      properties: {\n        apiVersion: { type: 'string', example: '1.0.0' },\n        data: {\n          type: 'object',\n          example: {\n            accessToken: {\n              type: 'string',\n              description: 'JWT access token for authenticated requests',\n              example: 'jsbfiwhvfquobdfj',\n            },\n            refreshToken: {\n              type: 'string',\n              description: 'JWT refresh token for token renewal',\n              example: 'jsbfiwhvfquobdfj',\n            },\n            user: {\n              type: 'object',\n              description: 'user details',\n              example: {\n                firstname: 'favour',\n                lastname: 'ejim',\n                email: 'favour@gmail.com',\n                role: Role.USER,\n              },\n            },\n          },\n        },\n      },\n    },\n  })\n  @ApiBadRequestResponse({\n    description: 'Invalid credentials or missing fields',\n    schema: {\n      type: 'object',\n      properties: {\n        statusCode: { type: 'number', example: 400 },\n        message: { type: 'string', example: 'Invalid email or password' },\n      },\n    },\n  })\n  public signIn(@Body() signInDto: SignInDto) {\n    return this.authService.signIn(signInDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GenerateTokensProvider\n                        \n                        \n                            SignInProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { ConfigModule } from '@nestjs/config';\nimport jwtConfig from './config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { UsersModule } from 'src/users/users.module';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { BcryptProvider } from './providers/bcrypt.provider';\nimport { SignInProvider } from './providers/sign-in.provider';\nimport { GenerateTokensProvider } from './providers/generate-tokens.provider';\n\n@Module({\n  imports: [\n    forwardRef(() => UsersModule),\n    ConfigModule.forFeature(jwtConfig),\n    // for asynchrousnously registering the jwt module and passing the config to the module\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    { provide: HashingProvider, useClass: BcryptProvider },\n    SignInProvider,\n    GenerateTokensProvider,\n  ],\n  exports: [HashingProvider],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(signInProvider: SignInProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        signInProvider\n                                                  \n                                                        \n                                                                        SignInProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:19\n                        \n                    \n\n\n            \n                \n                        function for signing in a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                access and refresh tokens\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { SignInProvider } from './sign-in.provider';\nimport { SignInDto } from '../dtos/sign-in.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    /**\n     * injecting the sign in provider\n     */\n    private readonly signInProvider: SignInProvider,\n  ) {}\n\n  /**\n   * function for signing in a user\n   * @param signInDto\n   * @returns access and refresh tokens\n   */\n  public async signIn(signInDto: SignInDto) {\n    return await this.signInProvider.signIn(signInDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication/authentication.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    guard for authentication\n\n                \n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authentication/authentication.guard.ts:33\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/authentication/authentication.guard.ts:59\n                        \n                    \n\n\n            \n                \n                        function for authenticating a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                true or false based on whether user is logged in or not\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n// import { Observable } from 'rxjs';\nimport { AccessTokenGuard } from '../access-token/access-token.guard';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { AUTH_TYPE_KEY } from 'src/auth/constants/auth.constant';\n\n/**\n * guard for authentication\n */\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  // using static means you can use the name of the property of the class without the \"this\" keyword\n  /**\n   * default auth type\n   */\n  private static readonly defaultAuthType = AuthType.Bearer;\n\n  /**\n   * map for auth types and guards they use\n   */\n  private readonly authTypeGuardMap: Record = {\n    [AuthType.Bearer]: this.accessTokenGuard,\n    [AuthType.None]: { canActivate: () => true },\n  };\n\n  /**\n   * constructor\n   * @param reflector\n   * @param accessTokenGuard\n   */\n  constructor(\n    /**\n     * injecting the reflector class\n     * The reflector class makes you access diff metadata from the execution context\n     */\n    private readonly reflector: Reflector,\n\n    /**\n     * Injecting the access token guard\n     *\n     */\n    private readonly accessTokenGuard: AccessTokenGuard,\n  ) {}\n\n  /**\n   * function for authenticating a user\n   * @param context\n   * @returns true or false based on whether user is logged in or not\n   */\n  async canActivate(context: ExecutionContext): Promise {\n    // Get all the auth types from reflector\n    // This returns an array of the auth types for a specific class or method in a class\n    const authTypes = this.reflector.getAllAndOverride(AUTH_TYPE_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]) ?? [AuthenticationGuard.defaultAuthType];\n\n    // create an array of the guards\n    const guards = authTypes.map((type) => this.authTypeGuardMap[type]).flat();\n\n    // Default error\n    const error = new UnauthorizedException();\n\n    // loop through the guards and fire the canActivate\n    for (const instance of guards) {\n      let canActivate;\n\n      try {\n        canActivate = await Promise.resolve(instance.canActivate(context));\n      } catch (err) {\n        throw err;\n      }\n\n      if (canActivate) {\n        return true;\n      }\n    }\n\n    throw error;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                bcrypt provider\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                comparePassword\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:27\n                        \n                    \n\n\n            \n                \n                        function for comparing password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                a boolean that indicates whether it is same password or not\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:15\n                        \n                    \n\n\n            \n                \n                        function for hashing user password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                hashed password\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing.provider';\nimport * as bcrypt from 'bcrypt';\n\n/**\n * bcrypt provider\n */\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n  /**\n   * function for hashing user password\n   * @param data\n   * @returns hashed password\n   */\n  public async hashPassword(data: string | Buffer): Promise {\n    // generate salt\n    const salt = await bcrypt.genSalt();\n    return bcrypt.hash(data, salt);\n  }\n\n  /**\n   * function for comparing password\n   * @param data\n   * @param encrypted\n   * @returns a boolean that indicates whether it is same password or not\n   */\n  public async comparePassword(\n    data: string | Buffer,\n    encrypted: string,\n  ): Promise {\n    return await bcrypt.compare(data, encrypted);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Cart.html":{"url":"interfaces/Cart.html","title":"interface - Cart","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Cart\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/interfaces/cart.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            items\n                                        \n                                \n                                \n                                        \n                                            subtotal\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        items:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subtotal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subtotal:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Product } from '../../products/product.entity';\n\nexport interface Cart {\n  items: {\n    id: string;\n    product: Product;\n    quantity: number;\n  }[];\n  subtotal: number;\n  total: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CartController.html":{"url":"controllers/CartController.html","title":"controller - CartController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CartController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/cart.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                cart\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addToCart\n                            \n                            \n                                    \n                                clearUserCart\n                            \n                            \n                                    \n                                decrementQuantity\n                            \n                            \n                                    \n                                getUserCart\n                            \n                            \n                                    \n                                removeFromCart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addToCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    addToCart(userId: string, dto: CreateCartItemDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('')\n                \n            \n\n                    \n                        \n                            Defined in src/cart/cart.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        clearUserCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearUserCart(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('clear')\n                \n            \n\n                    \n                        \n                            Defined in src/cart/cart.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        decrementQuantity\n                        \n                    \n                \n            \n            \n                \n                        \n                    decrementQuantity(userId: string, cartId: string, updateCartItemDto: UpdateCartItemDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':cartId')\n                \n            \n\n                    \n                        \n                            Defined in src/cart/cart.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCartItemDto\n                                            \n                                                            UpdateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getUserCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserCart(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('')\n                \n            \n\n                    \n                        \n                            Defined in src/cart/cart.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeFromCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFromCart(userId: string, cartId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':cartId')\n                \n            \n\n                    \n                        \n                            Defined in src/cart/cart.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport { CartService } from './providers/cart.service';\nimport { ActiveUser } from 'src/auth/decorator/active-user.decorator';\nimport { CreateCartItemDto } from './dtos/create-cart-item.dto';\nimport { UpdateCartItemDto } from './dtos/update-cart-item.dto';\n\n@Controller('cart')\nexport class CartController {\n  constructor(\n    /**\n     * injecting the cartService\n     */\n    private readonly cartService: CartService,\n  ) {}\n\n  @Delete('clear')\n  clearUserCart(@ActiveUser('sub') userId: string) {\n    console.log('clearing...');\n    return this.cartService.clearCart(userId);\n  }\n\n  @Post('')\n  addToCart(@ActiveUser('sub') userId: string, @Body() dto: CreateCartItemDto) {\n    return this.cartService.addToCart(userId, dto);\n  }\n\n  @Get('')\n  getUserCart(@ActiveUser('sub') userId: string) {\n    return this.cartService.getCart(userId);\n  }\n\n  @Delete(':cartId')\n  removeFromCart(\n    @ActiveUser('sub') userId: string,\n    @Param('cartId') cartId: string,\n  ) {\n    return this.cartService.removeCartItem(userId, cartId);\n  }\n\n  @Patch(':cartId')\n  decrementQuantity(\n    @ActiveUser('sub') userId: string,\n    @Param('cartId') cartId: string,\n    @Body() updateCartItemDto: UpdateCartItemDto,\n  ) {\n    console.log('qty', updateCartItemDto.quantity);\n    return this.cartService.decrementQuantity(\n      userId,\n      cartId,\n      updateCartItemDto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CartItem.html":{"url":"entities/CartItem.html","title":"entity - CartItem","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CartItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/cart-item.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                product\n                            \n                            \n                                    \n                                quantity\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, product => product.cartItems, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.cartItems, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/cart-item.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // src/cart/entities/cart-item.entity.ts\n// User-based cart item entity: Persists cart per user in DB\nimport { Product } from '../products/product.entity';\nimport { User } from '../users/user.entity';\nimport {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  DeleteDateColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity('cart_items')\nexport class CartItem {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ default: 1 })\n  quantity: number;\n\n  @ManyToOne(() => User, (user) => user.cartItems, { onDelete: 'CASCADE' })\n  user: User;\n\n  @ManyToOne(() => Product, (product) => product.cartItems, {\n    onDelete: 'CASCADE',\n  })\n  product: Product;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @DeleteDateColumn()\n  deletedAt?: Date; // Soft delete for cart items\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CartModule.html":{"url":"modules/CartModule.html","title":"module - CartModule","body":"\n                   \n\n\n\n\n    Modules\n    CartModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CartModule\n\n\n\ncluster_CartModule_imports\n\n\n\ncluster_CartModule_providers\n\n\n\ncluster_CartModule_exports\n\n\n\n\nProduct\n\nProduct\n\n\n\nCartModule\n\nCartModule\n\nCartModule -->\n\nProduct->CartModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nCartModule -->\n\nProductsModule->CartModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nCartModule -->\n\nUsersModule->CartModule\n\n\n\n\n\nCartService \n\nCartService \n\nCartService  -->\n\nCartModule->CartService \n\n\n\n\n\nAddToCartProvider\n\nAddToCartProvider\n\nCartModule -->\n\nAddToCartProvider->CartModule\n\n\n\n\n\nCartService\n\nCartService\n\nCartModule -->\n\nCartService->CartModule\n\n\n\n\n\nGetCartProvider\n\nGetCartProvider\n\nCartModule -->\n\nGetCartProvider->CartModule\n\n\n\n\n\nUpdateCartItemProvider\n\nUpdateCartItemProvider\n\nCartModule -->\n\nUpdateCartItemProvider->CartModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cart/cart.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AddToCartProvider\n                        \n                        \n                            CartService\n                        \n                        \n                            GetCartProvider\n                        \n                        \n                            UpdateCartItemProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CartController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            Product\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CartService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CartController } from './cart.controller';\nimport { CartItem } from './cart-item.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CartService } from './providers/cart.service';\nimport { AddToCartProvider } from './providers/add-to-cart.provider';\nimport { GetCartProvider } from './providers/get-cart.provider';\nimport { UsersModule } from 'src/users/users.module';\nimport { UpdateCartItemProvider } from './providers/update-cart-item.provider';\nimport { Product } from 'src/products/product.entity';\nimport { ProductsModule } from 'src/products/products.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([CartItem]),\n    Product,\n    UsersModule,\n    ProductsModule,\n  ],\n  controllers: [CartController],\n  providers: [\n    CartService,\n    AddToCartProvider,\n    GetCartProvider,\n    UpdateCartItemProvider,\n  ],\n  exports: [CartService],\n})\nexport class CartModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CartService.html":{"url":"injectables/CartService.html","title":"injectable - CartService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CartService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/providers/cart.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addToCart\n                            \n                            \n                                    Async\n                                clearCart\n                            \n                            \n                                    Async\n                                decrementQuantity\n                            \n                            \n                                    Async\n                                getCart\n                            \n                            \n                                    Async\n                                removeCartItem\n                            \n                            \n                                    Async\n                                validateCartStock\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(addToCartProvider: AddToCartProvider, getCartProvider: GetCartProvider, updateCartItemProvider: UpdateCartItemProvider)\n                    \n                \n                        \n                            \n                                Defined in src/cart/providers/cart.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        addToCartProvider\n                                                  \n                                                        \n                                                                        AddToCartProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        getCartProvider\n                                                  \n                                                        \n                                                                        GetCartProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateCartItemProvider\n                                                  \n                                                        \n                                                                        UpdateCartItemProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addToCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    addToCart(userId: string, createCartItemDto: CreateCartItemDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/cart.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createCartItemDto\n                                            \n                                                            CreateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        clearCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearCart(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/cart.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decrementQuantity\n                        \n                    \n                \n            \n            \n                \n                        \n                    decrementQuantity(userId: string, cartId: string, updateCartItemDto: UpdateCartItemDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/cart.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCartItemDto\n                                            \n                                                            UpdateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCart(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/cart.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeCartItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeCartItem(userId: string, cartId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/cart.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateCartStock\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateCartStock(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/cart.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AddToCartProvider } from './add-to-cart.provider';\nimport { CreateCartItemDto } from '../dtos/create-cart-item.dto';\nimport { GetCartProvider } from './get-cart.provider';\nimport { UpdateCartItemProvider } from './update-cart-item.provider';\nimport { UpdateCartItemDto } from '../dtos/update-cart-item.dto';\n\n@Injectable()\nexport class CartService {\n  constructor(\n    /**\n     * injecting the addToCartProvider\n     */\n    private readonly addToCartProvider: AddToCartProvider,\n\n    /**\n     * injecting the getCartProvider\n     */\n    private readonly getCartProvider: GetCartProvider,\n\n    /**\n     * injecting the update\n     */\n    private readonly updateCartItemProvider: UpdateCartItemProvider,\n  ) {}\n\n  async addToCart(userId: string, createCartItemDto: CreateCartItemDto) {\n    return await this.addToCartProvider.addToCart(userId, createCartItemDto);\n  }\n\n  async getCart(userId: string) {\n    return await this.getCartProvider.getCart(userId);\n  }\n\n  async removeCartItem(userId: string, cartId: string) {\n    return await this.updateCartItemProvider.removeFromCart(userId, cartId);\n  }\n\n  async decrementQuantity(\n    userId: string,\n    cartId: string,\n    updateCartItemDto: UpdateCartItemDto,\n  ) {\n    return await this.updateCartItemProvider.decrementQuantity(\n      userId,\n      cartId,\n      updateCartItemDto,\n    );\n  }\n\n  async validateCartStock(userId: string) {\n    return await this.updateCartItemProvider.validateCartStock(userId);\n  }\n\n  async clearCart(userId: string) {\n    console.log('Clearing cart for user:', userId);\n    return await this.updateCartItemProvider.clearCart(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCartItemDto.html":{"url":"classes/CreateCartItemDto.html","title":"class - CreateCartItemDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCartItemDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/dtos/create-cart-item.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                productId\n                            \n                            \n                                    \n                                    \n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/dtos/create-cart-item.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/dtos/create-cart-item.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsString, Min } from 'class-validator';\n\nexport class CreateCartItemDto {\n  @IsString()\n  productId: string;\n\n  @IsInt()\n  @Min(1)\n  quantity: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateOrderDto.html":{"url":"classes/CreateOrderDto.html","title":"class - CreateOrderDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateOrderDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/dtos/create-order.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                billingAddress\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                paymentMethod\n                            \n                            \n                                    \n                                    \n                                shippingAddress\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        billingAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dtos/create-order.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        paymentMethod\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dtos/create-order.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        shippingAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/dtos/create-order.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport class CreateOrderDto {\n  @IsNotEmpty()\n  @IsString()\n  shippingAddress: string;\n\n  @IsNotEmpty()\n  @IsString()\n  billingAddress: string;\n\n  // Optional: Payment method (mocked)\n  @IsOptional()\n  @IsString()\n  paymentMethod?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateOrderProvider.html":{"url":"injectables/CreateOrderProvider.html","title":"injectable - CreateOrderProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateOrderProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/providers/create-order.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource, cartService: CartService)\n                    \n                \n                        \n                            \n                                Defined in src/orders/providers/create-order.provider.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cartService\n                                                  \n                                                        \n                                                                        CartService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrder(userId: string, createOrderDto: CreateOrderDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/create-order.provider.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createOrderDto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { OrderItem } from '../order-item.entity';\nimport { Order } from '../order.entity';\nimport { User } from 'src/users/user.entity';\nimport { DataSource } from 'typeorm';\nimport { Product } from 'src/products/product.entity';\nimport { CartService } from 'src/cart/providers/cart.service';\nimport { CreateOrderDto } from '../dtos/create-order.dto';\nimport { CartItem } from 'src/cart/cart-item.entity';\n\n@Injectable()\nexport class CreateOrderProvider {\n  constructor(\n    private readonly dataSource: DataSource, // For transactions\n    private readonly cartService: CartService,\n  ) {}\n  async createOrder(\n    userId: string,\n    createOrderDto: CreateOrderDto,\n  ): Promise {\n    const queryRunner = this.dataSource.createQueryRunner();\n\n    try {\n      await queryRunner.connect();\n      await queryRunner.startTransaction();\n    } catch (error) {\n      console.log(error);\n      throw new RequestTimeoutException('Could not connect to datasource');\n    }\n\n    try {\n      await this.cartService.validateCartStock(userId);\n\n      const user = await queryRunner.manager.getRepository(User).findOne({\n        where: { id: userId },\n      });\n\n      // Fixed: Use CartItem entity and Query Builder\n      const cartItemsRaw = await queryRunner.manager\n        .createQueryBuilder(CartItem, 'ci')\n        .innerJoinAndSelect('ci.product', 'p')\n        .where('ci.user.id = :userId', { userId })\n        .andWhere('ci.deletedAt IS NULL')\n        .setLock('pessimistic_write')\n        .getMany();\n\n      // Transform to the format you need\n      const cartItems = cartItemsRaw.map((ci) => ({\n        id: ci.id,\n        quantity: ci.quantity,\n        productId: ci.product.id,\n        stock: ci.product.stock,\n        price: ci.product.price,\n      }));\n\n      if (cartItems.length === 0) {\n        throw new ConflictException('Cart is empty');\n      }\n\n      for (const item of cartItems) {\n        if (item.stock  sum + item.price * item.quantity,\n        0,\n      );\n      const total = subtotal;\n\n      const order = queryRunner.manager.create(Order, {\n        user,\n        total,\n        ...createOrderDto,\n      });\n      await queryRunner.manager.getRepository(Order).save(order);\n\n      const orderItems = cartItems.map((item) =>\n        queryRunner.manager.getRepository(OrderItem).create({\n          order,\n          product: { id: item.productId },\n          quantity: item.quantity,\n          price: item.price,\n        }),\n      );\n      await queryRunner.manager.getRepository(OrderItem).save(orderItems);\n\n      for (const item of cartItems) {\n        await queryRunner.manager.getRepository(Product).update(\n          { id: item.productId },\n          {\n            stock: () => `stock - ${item.quantity}`,\n            purchaseCount: () => `\"purchaseCount\" + ${item.quantity}`,\n          },\n        );\n      }\n\n      await queryRunner.manager.softDelete(CartItem, { user: { id: userId } });\n\n      await queryRunner.commitTransaction(); // Don't forget to commit!\n      return order;\n    } catch (error) {\n      await queryRunner.rollbackTransaction();\n      throw new ConflictException('Could not complete the transaction', {\n        description: String(error),\n      });\n    } finally {\n      try {\n        await queryRunner.release();\n      } catch (error) {\n        throw new RequestTimeoutException('Could not release the connection', {\n          description: String(error),\n        });\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dtos/create-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                imageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                stock\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ProductCategory)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(5)@MaxLength(350)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(5)@MaxLength(150)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/create-product.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEnum,\n  IsInt,\n  IsNotEmpty,\n  IsString,\n  MaxLength,\n  Min,\n  MinLength,\n} from 'class-validator';\nimport { ProductCategory } from '../enums/product-category.enum';\n\nexport class CreateProductDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(5)\n  @MaxLength(150)\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(5)\n  @MaxLength(350)\n  description: string;\n\n  @IsEnum(ProductCategory)\n  @IsNotEmpty()\n  category: ProductCategory;\n\n  @IsInt()\n  @IsNotEmpty()\n  price: number;\n\n  @IsInt()\n  @IsNotEmpty()\n  @Min(1)\n  stock: number;\n\n  @IsString()\n  @IsNotEmpty()\n  imageUrl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateProductProvider.html":{"url":"injectables/CreateProductProvider.html","title":"injectable - CreateProductProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateProductProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/create-product.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/create-product.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProduct(createProductDto: CreateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/create-product.provider.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Product } from '../product.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateProductDto } from '../dtos/create-product.dto';\n\n@Injectable()\nexport class CreateProductProvider {\n  constructor(\n    /**\n     * injecting the product repository\n     */\n    @InjectRepository(Product)\n    private readonly productsRepository: Repository,\n  ) {}\n\n  async createProduct(createProductDto: CreateProductDto): Promise {\n    const newProduct = this.productsRepository.create({\n      ...createProductDto,\n    });\n\n    return await this.productsRepository.save(newProduct);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                firstname\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                lastname\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'user email', example: 'favour@gmail.com'})@IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:48\n                        \n                    \n\n            \n                \n                    user email\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'user firstname', example: 'favour'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:23\n                        \n                    \n\n            \n                \n                    user firstname\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'user lastname', example: 'ejim'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:36\n                        \n                    \n\n            \n                \n                    user lastname\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'user password', example: 'favour@Ejim1'})@IsString()@IsNotEmpty()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[\\W_]).{8,}$/, {message: 'Minimum eigt characters, atleast one letter, number and special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:65\n                        \n                    \n\n            \n                \n                    user password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  /**\n   * user firstname\n   */\n  @ApiProperty({\n    description: 'user firstname',\n    example: 'favour',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstname: string;\n\n  /**\n   * user lastname\n   */\n  @ApiProperty({\n    description: 'user lastname',\n    example: 'ejim',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  lastname: string;\n\n  /**\n   * user email\n   */\n  @ApiProperty({\n    description: 'user email',\n    example: 'favour@gmail.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  /**\n   * user password\n   */\n  @ApiProperty({\n    description: 'user password',\n    example: 'favour@Ejim1',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(/^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[\\W_]).{8,}$/, {\n    message:\n      'Minimum eigt characters, atleast one letter, number and special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, hashingProvider: HashingProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-user.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-user.provider.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { ValidationException } from 'src/common/filters/common-exceptions.filter';\nimport { Role } from 'src/auth/enums/role-type.enum';\n\n@Injectable()\nexport class CreateUserProvider {\n  constructor(\n    /**\n     * injecting the users repository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n\n    /**\n     * Injecting hashing provider\n     */\n    @Inject(forwardRef(() => HashingProvider))\n    private readonly hashingProvider: HashingProvider,\n  ) {}\n\n  public async createUser(\n    createUserDto: CreateUserDto,\n  ): Promise> {\n    const existingUser = await this.usersRepository.findOne({\n      where: { email: createUserDto.email },\n    });\n\n    if (existingUser) {\n      throw new ValidationException([\n        `user with ${createUserDto.email} already exists`,\n      ]);\n    }\n\n    // create a new user\n    let newUser = this.usersRepository.create({\n      ...createUserDto,\n      role: Role.USER,\n      password: await this.hashingProvider.hashPassword(createUserDto.password),\n    });\n\n    newUser = await this.usersRepository.save(newUser);\n\n    return {\n      id: newUser.id,\n      firstname: newUser.firstname,\n      lastname: newUser.lastname,\n      email: newUser.email,\n      role: newUser.role,\n      createdAt: newUser.createdAt,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataResponseInterceptor.html":{"url":"injectables/DataResponseInterceptor.html","title":"injectable - DataResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/data-response/data-response.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for the data response interceptor\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/data-response/data-response.interceptor.ts:14\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/data-response/data-response.interceptor.ts:32\n                        \n                    \n\n\n            \n                \n                        function for formatting the response data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                the response in {apiVersion: \"1.0.0\", data: ...} format\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { map, Observable } from 'rxjs';\n\n/**\n * provider for the data response interceptor\n */\n@Injectable()\nexport class DataResponseInterceptor implements NestInterceptor {\n  /**\n   * constructor\n   * @param configService\n   */\n  constructor(\n    /**\n     * injecting config service\n     */\n    private readonly configService: ConfigService,\n  ) {}\n\n  /**\n   * function for formatting the response data\n   * @param context\n   * @param next\n   * @returns the response in {apiVersion: \"1.0.0\", data: ...} format\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    // console.log('Before ...');\n    // before method execution\n\n    const response = context.switchToHttp().getResponse();\n    return next.handle().pipe(\n      map((data) => ({\n        apiVersion: this.configService.get('appConfig.apiVersion'),\n        statusCode: response.statusCode,\n        data: data,\n      })),\n    );\n    // After method execution\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DatabaseConnectionException.html":{"url":"classes/DatabaseConnectionException.html","title":"class - DatabaseConnectionException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DatabaseConnectionException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/common-exceptions.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                database connection exception\n\n            \n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(operation?: string)\n                    \n                \n                        \n                            \n                                Defined in src/common/filters/common-exceptions.filter.ts:6\n                            \n                        \n\n                \n                    \n                            constructor for the database connection exception\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        operation\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\n/**\n * database connection exception\n */\nexport class DatabaseConnectionException extends HttpException {\n  /**\n   * constructor for the database connection exception\n   * @param operation\n   */\n  constructor(operation?: string) {\n    super(\n      {\n        message:\n          'Unable to process your request at the moment, please try later',\n        description: 'Error connecting to the database',\n        operation,\n        errorCode: 'ERR_DB_CONNECTION',\n      },\n      HttpStatus.REQUEST_TIMEOUT,\n    );\n  }\n}\n\n/**\n * validation exception\n */\nexport class ValidationException extends HttpException {\n  /**\n   * constructor for the validation exception\n   * @param errors\n   */\n  constructor(errors: string[]) {\n    super(\n      {\n        message: 'Validation failed',\n        errors,\n        errorCode: 'ERR_VALIDATION',\n      },\n      HttpStatus.BAD_REQUEST,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DeleteProductProvider.html":{"url":"injectables/DeleteProductProvider.html","title":"injectable - DeleteProductProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DeleteProductProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/delete-product.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                deleteProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/delete-product.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProduct(productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/delete-product.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Product } from '../product.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class DeleteProductProvider {\n  constructor(\n    /**\n     * injecting the products repository\n     */\n    @InjectRepository(Product)\n    private readonly productsRepository: Repository,\n  ) {}\n\n  public async deleteProduct(productId: string): Promise {\n    const product = await this.productsRepository.findOneBy({ id: productId });\n\n    if (!product) throw new NotFoundException('Product not found');\n\n    await this.productsRepository.save({\n      ...product,\n      isDeleted: true,\n      deletedAt: new Date(),\n    });\n\n    return {\n      message: 'Product deleted successfully.',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ErrorHandlingInterceptor.html":{"url":"injectables/ErrorHandlingInterceptor.html","title":"injectable - ErrorHandlingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ErrorHandlingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/error-handling/error-handling.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                interceptor for handling error\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                isConnectionError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/error-handling/error-handling.interceptor.ts:24\n                        \n                    \n\n\n            \n                \n                        intercept function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isConnectionError\n                        \n                    \n                \n            \n            \n                \n                        \n                    isConnectionError(error: QueryFailedError)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/error-handling/error-handling.interceptor.ts:55\n                        \n                    \n\n\n            \n                \n                        function for checking whether it is a connection error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                        QueryFailedError\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                boolean for whether it is a connection error\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { Observable, throwError, TimeoutError } from 'rxjs';\nimport { catchError, timeout } from 'rxjs/operators';\nimport { DatabaseConnectionException } from 'src/common/filters/common-exceptions.filter';\nimport { QueryFailedError } from 'typeorm';\n\n/**\n * interceptor for handling error\n */\n@Injectable()\nexport class ErrorHandlingInterceptor implements NestInterceptor {\n  /**\n   * intercept function\n   * @param context\n   * @param next\n   * @returns\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      timeout(30000), // 30 second timeout\n      catchError((error) => {\n        // Handle specific database errors\n        if (error instanceof QueryFailedError) {\n          if (this.isConnectionError(error)) {\n            return throwError(() => new DatabaseConnectionException());\n          }\n        }\n\n        if (error instanceof TimeoutError) {\n          return throwError(\n            () =>\n              new RequestTimeoutException(\n                'Request timeout - please try again later',\n              ),\n          );\n        }\n\n        // Re-throw the original error to be handled by global filter\n        return throwError(() => error);\n      }),\n    );\n  }\n\n  /**\n   * function for checking whether it is a connection error\n   * @param error\n   * @returns boolean for whether it is a connection error\n   */\n  private isConnectionError(error: QueryFailedError): boolean {\n    const connectionErrorCodes = [\n      'ECONNREFUSED',\n      'ENOTFOUND',\n      'ETIMEDOUT',\n      'ECONNRESET',\n      'connection refused',\n      'connect timeout',\n    ];\n\n    const errorMessage = error.message.toLowerCase();\n    return connectionErrorCodes.some((code) =>\n      errorMessage.includes(code.toLowerCase()),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ErrorResponse.html":{"url":"interfaces/ErrorResponse.html","title":"interface - ErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/global-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                error response interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            controller\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            details\n                                        \n                                \n                                \n                                        \n                                            errorCode\n                                        \n                                \n                                \n                                        \n                                            errorType\n                                        \n                                \n                                \n                                        \n                                            handler\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            method\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        controller\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        controller:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    controller name\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        details\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        details:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    error details\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    error code\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    error type\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        handler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        handler:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    handler name\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    error message\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    controller method name\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    controller path\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    status code\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    timestamp\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport {\n  QueryFailedError,\n  EntityNotFoundError,\n  CannotCreateEntityIdMapError,\n} from 'typeorm';\n\n/**\n * error response interface\n */\nexport interface ErrorResponse {\n  /**\n   * status code\n   */\n  statusCode: number;\n  /**\n   * timestamp\n   */\n  timestamp: string;\n  /**\n   * controller path\n   */\n  path: string;\n  /**\n   * controller method name\n   */\n  method: string;\n  /**\n   * controller name\n   */\n  controller: string;\n  /**\n   * handler name\n   */\n  handler: string;\n  /**\n   * error type\n   */\n  errorType: string;\n  /**\n   * error code\n   */\n  errorCode: string;\n  /**\n   * error message\n   */\n  message: string;\n  /**\n   * error details\n   */\n  details?: any;\n}\n\n/**\n * global exception filter\n */\n@Catch()\nexport class GlobalExceptionFilter implements ExceptionFilter {\n  /**\n   * logger\n   */\n  private readonly logger = new Logger(GlobalExceptionFilter.name);\n\n  /**\n   * catch function\n   * @param exception\n   * @param host\n   */\n  catch(exception: unknown, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n\n    // Extract controller and handler info from request\n    const controller = this.getControllerName(request);\n\n    console.log('controller: ', controller);\n    const handler = this.getHandlerName(request);\n\n    const errorResponse = this.buildErrorResponse(\n      exception,\n      request,\n      controller,\n      handler,\n    );\n\n    // Log the error with full context\n    this.logger.error(\n      `${errorResponse.errorType} in ${controller}::${handler}`,\n      {\n        ...errorResponse,\n        stack: exception instanceof Error ? exception.stack : undefined,\n      },\n    );\n\n    response.status(errorResponse.statusCode).json(errorResponse);\n  }\n\n  /**\n   * builds the error response\n   * @param exception\n   * @param request\n   * @param controller\n   * @param handler\n   * @returns error response\n   */\n  private buildErrorResponse(\n    exception: unknown,\n    request: Request,\n    controller: string,\n    handler: string,\n  ): ErrorResponse {\n    let status = HttpStatus.INTERNAL_SERVER_ERROR;\n    let message = 'Internal server error';\n    let errorType = 'InternalServerError';\n    let errorCode = 'ERR_INTERNAL';\n    let details: any;\n\n    // Handle different error types\n    if (exception instanceof HttpException) {\n      status = exception.getStatus();\n      message = exception.message;\n      errorType = exception.constructor.name;\n      errorCode = this.getHttpErrorCode(status);\n      details = exception.getResponse();\n    } else if (exception instanceof QueryFailedError) {\n      status = HttpStatus.BAD_REQUEST;\n      message = 'Database query failed';\n      errorType = 'DatabaseError';\n      errorCode = 'ERR_DB_QUERY_FAILED';\n      details = this.sanitizeDatabaseError(exception);\n    } else if (exception instanceof EntityNotFoundError) {\n      status = HttpStatus.NOT_FOUND;\n      message = 'Requested resource not found';\n      errorType = 'EntityNotFoundError';\n      errorCode = 'ERR_ENTITY_NOT_FOUND';\n    } else if (exception instanceof CannotCreateEntityIdMapError) {\n      status = HttpStatus.BAD_REQUEST;\n      message = 'Invalid entity data provided';\n      errorType = 'EntityValidationError';\n      errorCode = 'ERR_ENTITY_VALIDATION';\n    } else if (exception instanceof Error) {\n      message = exception.message;\n      errorType = exception.constructor.name;\n      errorCode = 'ERR_UNKNOWN';\n    }\n\n    return {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      method: request.method,\n      controller,\n      handler,\n      errorType,\n      errorCode,\n      message,\n      details,\n    };\n  }\n\n  /**\n   * function for getting the controller name where the error originated from\n   * @param request\n   * @returns controller name\n   */\n  private getControllerName(request: Request): string {\n    // Extract controller from route path or use reflection metadata\n    const route = request.route?.path || request.url;\n\n    const pathSegments = route.split('/').filter(Boolean);\n\n    if (pathSegments.length > 0) {\n      return `${pathSegments[2].charAt(0).toUpperCase()}${pathSegments[2].slice(1)}Controller`;\n    }\n\n    return 'UnknownController';\n  }\n\n  /**\n   * function for getting the handler name of the handler function where the error originated from\n   * @param request\n   * @returns the handler name\n   */\n  private getHandlerName(request: Request): string {\n    const method = request.method.toLowerCase();\n    const pathSegments = request.url.split('/').filter(Boolean);\n\n    if (pathSegments.length > 1) {\n      return `${method}${pathSegments[pathSegments.length - 1].charAt(0).toUpperCase()}${pathSegments[pathSegments.length - 1].slice(1)}`;\n    }\n\n    return `${method}Handler`;\n  }\n\n  /**\n   * function for getting the http error code\n   * @param status\n   * @returns  http error code\n   */\n  private getHttpErrorCode(status: number): string {\n    const statusCodes = {\n      400: 'ERR_BAD_REQUEST',\n      401: 'ERR_UNAUTHORIZED',\n      403: 'ERR_FORBIDDEN',\n      404: 'ERR_NOT_FOUND',\n      409: 'ERR_CONFLICT',\n      422: 'ERR_VALIDATION',\n      429: 'ERR_RATE_LIMIT',\n      500: 'ERR_INTERNAL',\n      502: 'ERR_BAD_GATEWAY',\n      503: 'ERR_SERVICE_UNAVAILABLE',\n      504: 'ERR_GATEWAY_TIMEOUT',\n    };\n\n    return statusCodes[status] || 'ERR_UNKNOWN_HTTP';\n  }\n\n  /**\n   * function for sanitizing the db error\n   * @param error\n   * @returns db error object\n   */\n  private sanitizeDatabaseError(error: QueryFailedError): any {\n    // Remove sensitive information from database errors\n    return {\n      code: (error as any).code,\n      constraint: (error as any).constraint,\n      table: (error as any).table,\n      column: (error as any).column,\n      // Don't expose raw SQL or sensitive details\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindAllOrdersForUserProvider.html":{"url":"injectables/FindAllOrdersForUserProvider.html","title":"injectable - FindAllOrdersForUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindAllOrdersForUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/providers/find-all-orders-for-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAllOrders\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(orderRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/orders/providers/find-all-orders-for-user.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        orderRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllOrders\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllOrders(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/find-all-orders-for-user.provider.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Order } from '../order.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class FindAllOrdersForUserProvider {\n  constructor(\n    @InjectRepository(Order)\n    private readonly orderRepository: Repository,\n  ) {}\n  async findAllOrders(userId: string): Promise {\n    const orders = await this.orderRepository.find({\n      where: { user: { id: userId } },\n      relations: ['items', 'items.product'],\n      order: { createdAt: 'DESC' },\n    });\n\n    return orders;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindAllProductsProvider.html":{"url":"injectables/FindAllProductsProvider.html","title":"injectable - FindAllProductsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindAllProductsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/find-all-products.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cleanQuery\n                            \n                            \n                                    Async\n                                findAllProducts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository, paginationProvider: PaginationProvider)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/find-all-products.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cleanQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanQuery(query: GetProductsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/find-all-products.provider.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            GetProductsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         GetProductsDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllProducts(productQuery: GetProductsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/find-all-products.provider.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productQuery\n                                            \n                                                            GetProductsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { GetProductsDto } from '../dtos/get-products.dto';\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\nimport { Product } from '../product.entity';\nimport { Between, FindOptionsOrder, ILike, In, Repository } from 'typeorm';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\n\n@Injectable()\nexport class FindAllProductsProvider {\n  constructor(\n    /**\n     * injecting the products repository\n     */\n    @InjectRepository(Product)\n    private readonly productsRepository: Repository,\n\n    /**\n     * injecting the pagination provider\n     */\n    private readonly paginationProvider: PaginationProvider,\n  ) {}\n\n  async findAllProducts(\n    productQuery: GetProductsDto,\n  ): Promise> {\n    const cleanedQuery = this.cleanQuery(productQuery);\n\n    const { limit, page, sort } = cleanedQuery;\n\n    const safeLimit = Number(limit) > 0 ? Number(limit) : 10;\n    const safePage = Number(page) > 0 ? Number(page) : 1;\n\n    const where: any = {\n      isDeleted: false,\n    };\n\n    if (cleanedQuery.category) {\n      where.category = In(cleanedQuery.category.split(','));\n    }\n    if (cleanedQuery.price) {\n      const [min, max] = cleanedQuery.price\n        .split('-')\n        .map((p) => parseFloat(p.trim()));\n\n      if (!isNaN(min) && !isNaN(max)) {\n        where.price = Between(min, max);\n      }\n    }\n    if (cleanedQuery.name) {\n      const searchTerm = cleanedQuery.name.split('-').join(' '); // Replace dashes with spaces\n      where.name = ILike(`%${searchTerm}%`);\n    }\n\n    // Build order conditions (default to newest)\n    const order: FindOptionsOrder = { createdAt: 'DESC' };\n    if (sort) {\n      switch (sort) {\n        case 'newest':\n          order.createdAt = 'DESC';\n          break;\n        case 'oldest':\n          order.createdAt = 'ASC';\n          break;\n        case 'most_purchased':\n          order.purchaseCount = 'DESC';\n          break;\n\n        default:\n          // Fallback if validation misses\n          order.createdAt = 'DESC';\n      }\n    }\n\n    // Use PaginationProvider with options\n    const paginationQuery: PaginationQueryDto = {\n      limit: safeLimit,\n      page: safePage,\n    };\n\n    const paginatedProducts =\n      await this.paginationProvider.paginationQuery(\n        paginationQuery,\n        this.productsRepository,\n        {\n          where,\n          order,\n        },\n      );\n\n    return paginatedProducts;\n  }\n\n  private cleanQuery(query: GetProductsDto): GetProductsDto {\n    return Object.fromEntries(\n      Object.entries(query).filter(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        ([_, value]) =>\n          value !== 'undefined' && value !== undefined && value !== '',\n      ),\n    ) as GetProductsDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOrderByIdProvider.html":{"url":"injectables/FindOrderByIdProvider.html","title":"injectable - FindOrderByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOrderByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/providers/find-order-by-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findOrderById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(orderRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/orders/providers/find-order-by-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        orderRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOrderById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOrderById(userId: string, orderId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/find-order-by-id.provider.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Order } from '../order.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class FindOrderByIdProvider {\n  constructor(\n    @InjectRepository(Order)\n    private readonly orderRepository: Repository,\n  ) {}\n  async findOrderById(userId: string, orderId: string): Promise {\n    const order = await this.orderRepository.findOne({\n      where: { id: orderId, user: { id: userId } },\n      relations: ['items', 'items.product'],\n    });\n\n    if (!order) {\n      throw new NotFoundException('Order not found');\n    }\n\n    return order;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindProductByIdProvider.html":{"url":"injectables/FindProductByIdProvider.html","title":"injectable - FindProductByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindProductByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/find-product-by-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findProductById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/find-product-by-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findProductById(productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/find-product-by-id.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Product } from '../product.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindProductByIdProvider {\n  constructor(\n    /**\n     * injecting the products repository\n     */\n    @InjectRepository(Product)\n    private readonly productsRepository: Repository,\n  ) {}\n\n  public async findProductById(productId: string): Promise {\n    const product = await this.productsRepository.findOne({\n      where: {\n        id: productId,\n      },\n    });\n\n    if (!product) throw new NotFoundException('Product not found!');\n\n    return product;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindUserByEmailProvider.html":{"url":"injectables/FindUserByEmailProvider.html","title":"injectable - FindUserByEmailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindUserByEmailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-user-by-email.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findUserByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-user-by-email.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-user-by-email.provider.ts:21\n                        \n                    \n\n\n            \n                \n                        function for finding user by email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                User\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindUserByEmailProvider {\n  constructor(\n    /**\n     * injecting the users repository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  /**\n   * function for finding user by email\n   * @param email\n   * @returns User\n   */\n  public async findUserByEmail(email: string): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { email },\n      select: ['id', 'password', 'email', 'role', 'firstname', 'lastname'],\n    });\n\n    if (!user)\n      throw new NotFoundException(\n        `user with this email: ${email} does not exist.`,\n      );\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindUserByIdProvider.html":{"url":"injectables/FindUserByIdProvider.html","title":"injectable - FindUserByIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindUserByIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-user-by-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findUserById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-user-by-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserById(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-user-by-id.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindUserByIdProvider {\n  constructor(\n    /**\n     * injecting the users repository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  async findUserById(userId: string): Promise {\n    const user = await this.usersRepository.findOne({\n      where: {\n        id: userId,\n      },\n    });\n\n    if (!user) throw new NotFoundException(`user not found!`);\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokensProvider.html":{"url":"injectables/GenerateTokensProvider.html","title":"injectable - GenerateTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-tokens.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for generating tokens\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                            \n                                    Private\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-tokens.provider.ts:12\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:36\n                        \n                    \n\n\n            \n                \n                        function for generating tokens\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                access and refresh tokens\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(userId: string, expiresIn: number, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:64\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        function for using jwt to sign the user info\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                the object containing payload when a user signs in\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../config/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { User } from 'src/users/user.entity';\nimport { ActiveUserData } from '../interfaces/active-user-data.interface';\n\n/**\n * provider for generating tokens\n */\n@Injectable()\nexport class GenerateTokensProvider {\n  /**\n   * constructor\n   * @param jwtService\n   * @param jwtConfiguration\n   */\n  constructor(\n    /**\n     * Injecting the jwt service\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * Injecting the jwt config\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  /**\n   * function for generating tokens\n   * @param user\n   * @returns access and refresh tokens\n   */\n  public async generateTokens(user: User) {\n    const [accessToken, refreshToken] = await Promise.all([\n      // Generate the access token\n      this.signToken>(\n        user.id,\n        this.jwtConfiguration.accessTokenTtl,\n        {\n          email: user.email,\n          role: user.role,\n        },\n      ),\n      // Generate the refresh token\n      this.signToken(user.id, this.jwtConfiguration.refreshTokenTtl),\n    ]);\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  /**\n   * function for using jwt to sign the user info\n   * @param userId\n   * @param expiresIn\n   * @param payload\n   * @returns the object containing payload when a user signs in\n   */\n  private async signToken(userId: string, expiresIn: number, payload?: T) {\n    return await this.jwtService.signAsync(\n      {\n        sub: userId,\n        ...payload,\n      },\n      {\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n        secret: this.jwtConfiguration.secret,\n        expiresIn,\n      },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GetCartProvider.html":{"url":"injectables/GetCartProvider.html","title":"injectable - GetCartProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GetCartProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/providers/get-cart.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                calculateSubtotal\n                            \n                            \n                                    Async\n                                getCart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cartItemRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/cart/providers/get-cart.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cartItemRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        calculateSubtotal\n                        \n                    \n                \n            \n            \n                \n                        \n                    calculateSubtotal(items: Cart)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/get-cart.provider.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                items\n                                            \n                                                            Cart\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCart(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/get-cart.provider.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Cart } from '../interfaces/cart.interface';\nimport { Repository } from 'typeorm';\nimport { CartItem } from '../cart-item.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class GetCartProvider {\n  constructor(\n    /**\n     * injecting the cart item repository\n     */\n    @InjectRepository(CartItem)\n    private readonly cartItemRepository: Repository,\n  ) {}\n\n  async getCart(userId: string): Promise {\n    const cartItems = await this.cartItemRepository.find({\n      where: { user: { id: userId }, deletedAt: null },\n      relations: ['product'],\n    });\n\n    const items = cartItems.map((item) => ({\n      id: item.id,\n      product: item.product,\n      quantity: item.quantity,\n    }));\n\n    const subtotal = await this.calculateSubtotal(items);\n    return {\n      items,\n      subtotal,\n      total: subtotal,\n    };\n  }\n\n  private async calculateSubtotal(items: Cart['items']): Promise {\n    let subtotal = 0;\n    for (const item of items) {\n      subtotal += item.product.price * item.quantity;\n    }\n    return Number(subtotal.toFixed(2));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetProductsBaseDto.html":{"url":"classes/GetProductsBaseDto.html","title":"class - GetProductsBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetProductsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dtos/get-products.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                category\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                sort\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/get-products.dto.ts:19\n                        \n                    \n\n            \n                \n                    product category\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/get-products.dto.ts:12\n                        \n                    \n\n            \n                \n                    product name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/get-products.dto.ts:26\n                        \n                    \n\n            \n                \n                    product price\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"newest\" | \"oldest\" | \"most_purchased\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsIn(['newest', 'oldest', 'most_purchased'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/get-products.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsOptional, IsString } from 'class-validator';\nimport { ProductCategory } from '../enums/product-category.enum';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\nimport { IntersectionType } from '@nestjs/swagger';\n\nexport class GetProductsBaseDto {\n  /**\n   * product name\n   */\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  /**\n   * product category\n   */\n  @IsString()\n  @IsOptional()\n  category?: ProductCategory;\n\n  /**\n   * product price\n   */\n  @IsString()\n  @IsOptional()\n  price?: string;\n\n  @IsOptional()\n  @IsString()\n  @IsIn(['newest', 'oldest', 'most_purchased'])\n  sort?: 'newest' | 'oldest' | 'most_purchased';\n}\n\n/**\n * dto for get events\n */\nexport class GetProductsDto extends IntersectionType(\n  GetProductsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetProductsDto.html":{"url":"classes/GetProductsDto.html","title":"class - GetProductsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetProductsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dtos/get-products.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                dto for get events\n\n            \n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetProductsBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsOptional, IsString } from 'class-validator';\nimport { ProductCategory } from '../enums/product-category.enum';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\nimport { IntersectionType } from '@nestjs/swagger';\n\nexport class GetProductsBaseDto {\n  /**\n   * product name\n   */\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  /**\n   * product category\n   */\n  @IsString()\n  @IsOptional()\n  category?: ProductCategory;\n\n  /**\n   * product price\n   */\n  @IsString()\n  @IsOptional()\n  price?: string;\n\n  @IsOptional()\n  @IsString()\n  @IsIn(['newest', 'oldest', 'most_purchased'])\n  sort?: 'newest' | 'oldest' | 'most_purchased';\n}\n\n/**\n * dto for get events\n */\nexport class GetProductsDto extends IntersectionType(\n  GetProductsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GlobalExceptionFilter.html":{"url":"classes/GlobalExceptionFilter.html","title":"class - GlobalExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GlobalExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/global-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                global exception filter\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                buildErrorResponse\n                            \n                            \n                                catch\n                            \n                            \n                                    Private\n                                getControllerName\n                            \n                            \n                                    Private\n                                getHandlerName\n                            \n                            \n                                    Private\n                                getHttpErrorCode\n                            \n                            \n                                    Private\n                                sanitizeDatabaseError\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(GlobalExceptionFilter.name)\n                    \n                \n                    \n                        \n                                Defined in src/common/filters/global-exception.filter.ts:70\n                        \n                    \n\n            \n                \n                    logger\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        buildErrorResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    buildErrorResponse(exception, request: Request, controller: string, handler: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/global-exception.filter.ts:115\n                        \n                    \n\n\n            \n                \n                        builds the error response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                controller\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                handler\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ErrorResponse\n\n                        \n                            \n                                error response\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/global-exception.filter.ts:77\n                        \n                    \n\n\n            \n                \n                        catch function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getControllerName\n                        \n                    \n                \n            \n            \n                \n                        \n                    getControllerName(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/global-exception.filter.ts:175\n                        \n                    \n\n\n            \n                \n                        function for getting the controller name where the error originated from\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                controller name\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getHandlerName\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHandlerName(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/global-exception.filter.ts:193\n                        \n                    \n\n\n            \n                \n                        function for getting the handler name of the handler function where the error originated from\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                the handler name\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getHttpErrorCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHttpErrorCode(status: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/global-exception.filter.ts:209\n                        \n                    \n\n\n            \n                \n                        function for getting the http error code\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                http error code\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeDatabaseError\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeDatabaseError(error: QueryFailedError)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/global-exception.filter.ts:232\n                        \n                    \n\n\n            \n                \n                        function for sanitizing the db error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                        QueryFailedError\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                db error object\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport {\n  QueryFailedError,\n  EntityNotFoundError,\n  CannotCreateEntityIdMapError,\n} from 'typeorm';\n\n/**\n * error response interface\n */\nexport interface ErrorResponse {\n  /**\n   * status code\n   */\n  statusCode: number;\n  /**\n   * timestamp\n   */\n  timestamp: string;\n  /**\n   * controller path\n   */\n  path: string;\n  /**\n   * controller method name\n   */\n  method: string;\n  /**\n   * controller name\n   */\n  controller: string;\n  /**\n   * handler name\n   */\n  handler: string;\n  /**\n   * error type\n   */\n  errorType: string;\n  /**\n   * error code\n   */\n  errorCode: string;\n  /**\n   * error message\n   */\n  message: string;\n  /**\n   * error details\n   */\n  details?: any;\n}\n\n/**\n * global exception filter\n */\n@Catch()\nexport class GlobalExceptionFilter implements ExceptionFilter {\n  /**\n   * logger\n   */\n  private readonly logger = new Logger(GlobalExceptionFilter.name);\n\n  /**\n   * catch function\n   * @param exception\n   * @param host\n   */\n  catch(exception: unknown, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n\n    // Extract controller and handler info from request\n    const controller = this.getControllerName(request);\n\n    console.log('controller: ', controller);\n    const handler = this.getHandlerName(request);\n\n    const errorResponse = this.buildErrorResponse(\n      exception,\n      request,\n      controller,\n      handler,\n    );\n\n    // Log the error with full context\n    this.logger.error(\n      `${errorResponse.errorType} in ${controller}::${handler}`,\n      {\n        ...errorResponse,\n        stack: exception instanceof Error ? exception.stack : undefined,\n      },\n    );\n\n    response.status(errorResponse.statusCode).json(errorResponse);\n  }\n\n  /**\n   * builds the error response\n   * @param exception\n   * @param request\n   * @param controller\n   * @param handler\n   * @returns error response\n   */\n  private buildErrorResponse(\n    exception: unknown,\n    request: Request,\n    controller: string,\n    handler: string,\n  ): ErrorResponse {\n    let status = HttpStatus.INTERNAL_SERVER_ERROR;\n    let message = 'Internal server error';\n    let errorType = 'InternalServerError';\n    let errorCode = 'ERR_INTERNAL';\n    let details: any;\n\n    // Handle different error types\n    if (exception instanceof HttpException) {\n      status = exception.getStatus();\n      message = exception.message;\n      errorType = exception.constructor.name;\n      errorCode = this.getHttpErrorCode(status);\n      details = exception.getResponse();\n    } else if (exception instanceof QueryFailedError) {\n      status = HttpStatus.BAD_REQUEST;\n      message = 'Database query failed';\n      errorType = 'DatabaseError';\n      errorCode = 'ERR_DB_QUERY_FAILED';\n      details = this.sanitizeDatabaseError(exception);\n    } else if (exception instanceof EntityNotFoundError) {\n      status = HttpStatus.NOT_FOUND;\n      message = 'Requested resource not found';\n      errorType = 'EntityNotFoundError';\n      errorCode = 'ERR_ENTITY_NOT_FOUND';\n    } else if (exception instanceof CannotCreateEntityIdMapError) {\n      status = HttpStatus.BAD_REQUEST;\n      message = 'Invalid entity data provided';\n      errorType = 'EntityValidationError';\n      errorCode = 'ERR_ENTITY_VALIDATION';\n    } else if (exception instanceof Error) {\n      message = exception.message;\n      errorType = exception.constructor.name;\n      errorCode = 'ERR_UNKNOWN';\n    }\n\n    return {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      method: request.method,\n      controller,\n      handler,\n      errorType,\n      errorCode,\n      message,\n      details,\n    };\n  }\n\n  /**\n   * function for getting the controller name where the error originated from\n   * @param request\n   * @returns controller name\n   */\n  private getControllerName(request: Request): string {\n    // Extract controller from route path or use reflection metadata\n    const route = request.route?.path || request.url;\n\n    const pathSegments = route.split('/').filter(Boolean);\n\n    if (pathSegments.length > 0) {\n      return `${pathSegments[2].charAt(0).toUpperCase()}${pathSegments[2].slice(1)}Controller`;\n    }\n\n    return 'UnknownController';\n  }\n\n  /**\n   * function for getting the handler name of the handler function where the error originated from\n   * @param request\n   * @returns the handler name\n   */\n  private getHandlerName(request: Request): string {\n    const method = request.method.toLowerCase();\n    const pathSegments = request.url.split('/').filter(Boolean);\n\n    if (pathSegments.length > 1) {\n      return `${method}${pathSegments[pathSegments.length - 1].charAt(0).toUpperCase()}${pathSegments[pathSegments.length - 1].slice(1)}`;\n    }\n\n    return `${method}Handler`;\n  }\n\n  /**\n   * function for getting the http error code\n   * @param status\n   * @returns  http error code\n   */\n  private getHttpErrorCode(status: number): string {\n    const statusCodes = {\n      400: 'ERR_BAD_REQUEST',\n      401: 'ERR_UNAUTHORIZED',\n      403: 'ERR_FORBIDDEN',\n      404: 'ERR_NOT_FOUND',\n      409: 'ERR_CONFLICT',\n      422: 'ERR_VALIDATION',\n      429: 'ERR_RATE_LIMIT',\n      500: 'ERR_INTERNAL',\n      502: 'ERR_BAD_GATEWAY',\n      503: 'ERR_SERVICE_UNAVAILABLE',\n      504: 'ERR_GATEWAY_TIMEOUT',\n    };\n\n    return statusCodes[status] || 'ERR_UNKNOWN_HTTP';\n  }\n\n  /**\n   * function for sanitizing the db error\n   * @param error\n   * @returns db error object\n   */\n  private sanitizeDatabaseError(error: QueryFailedError): any {\n    // Remove sensitive information from database errors\n    return {\n      code: (error as any).code,\n      constraint: (error as any).constraint,\n      table: (error as any).table,\n      column: (error as any).column,\n      // Don't expose raw SQL or sensitive details\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                hashing provider\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePassword\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:19\n                        \n                    \n\n\n            \n                \n                        abstract method for comparing password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:12\n                        \n                    \n\n\n            \n                \n                        abstract method for hashing password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * hashing provider\n */\n@Injectable()\nexport abstract class HashingProvider {\n  /**\n   * abstract method for hashing password\n   * @param data\n   */\n  abstract hashPassword(data: string | Buffer): Promise;\n\n  /**\n   * abstract method for comparing password\n   * @param data\n   * @param encrypted\n   */\n  abstract comparePassword(\n    data: string | Buffer,\n    encrypted: string,\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Order.html":{"url":"entities/Order.html","title":"entity - Order","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Order\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/order.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                billingAddress\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                items\n                            \n                            \n                                    \n                                paymentMethod\n                            \n                            \n                                    \n                                shippingAddress\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                total\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        billingAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OrderItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, orderItem => orderItem.order)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        paymentMethod\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 100, default: 'Mocked Payment Method'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        shippingAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OrderStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: OrderStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        total\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.orders, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order.entity.ts:49\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from '../users/user.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { OrderItem } from './order-item.entity';\nimport { OrderStatus } from './enums/order-status.enum';\n\n@Entity('orders')\nexport class Order {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  total: number;\n\n  @Column({ type: 'enum', enum: OrderStatus, default: OrderStatus.PENDING })\n  status: OrderStatus;\n\n  @Column({\n    type: 'varchar',\n  })\n  shippingAddress: string;\n\n  @Column({\n    type: 'varchar',\n  })\n  billingAddress: string;\n\n  @Column({\n    type: 'varchar',\n    length: 100,\n    default: 'Mocked Payment Method',\n  })\n  paymentMethod: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @ManyToOne(() => User, (user) => user.orders, { onDelete: 'CASCADE' })\n  user: User;\n\n  @OneToMany(() => OrderItem, (orderItem) => orderItem.order)\n  items: OrderItem[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/OrderItem.html":{"url":"entities/OrderItem.html","title":"entity - OrderItem","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  OrderItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/order-item.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                order\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                product\n                            \n                            \n                                    \n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, order => order.items, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        product\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Product\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/orders/order-item.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Order } from './order.entity';\nimport { Product } from '../products/product.entity';\n\n@Entity('order_items')\nexport class OrderItem {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  quantity: number;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\n  price: number;\n\n  @ManyToOne(() => Order, (order) => order.items, { onDelete: 'CASCADE' })\n  order: Order;\n\n  @ManyToOne(() => Product, { onDelete: 'CASCADE' })\n  product: Product;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OrdersController.html":{"url":"controllers/OrdersController.html","title":"controller - OrdersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OrdersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/orders.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                orders\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                createOrder\n                            \n                            \n                                    \n                                    Async\n                                getOrder\n                            \n                            \n                                    \n                                    Async\n                                getOrders\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrder(userId: string, createOrderDto: CreateOrderDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/orders/orders.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createOrderDto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrder(userId: string, orderId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/orders/orders.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getOrders\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOrders(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/orders/orders.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post } from '@nestjs/common';\nimport { OrdersService } from './providers/orders.service';\nimport { ActiveUser } from 'src/auth/decorator/active-user.decorator';\nimport { CreateOrderDto } from './dtos/create-order.dto';\n\n@Controller('orders')\nexport class OrdersController {\n  constructor(\n    /**\n     * injecting the orders service\n     */\n    private readonly ordersService: OrdersService,\n  ) {}\n\n  @Post()\n  async createOrder(\n    @ActiveUser('sub') userId: string,\n    @Body() createOrderDto: CreateOrderDto,\n  ) {\n    return this.ordersService.createOrder(userId, createOrderDto);\n  }\n\n  @Get()\n  async getOrders(@ActiveUser('sub') userId: string) {\n    return this.ordersService.findAllOrders(userId);\n  }\n\n  @Get(':id')\n  async getOrder(\n    @ActiveUser('sub') userId: string,\n    @Param('id') orderId: string,\n  ) {\n    return this.ordersService.findOrderById(userId, orderId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OrdersModule.html":{"url":"modules/OrdersModule.html","title":"module - OrdersModule","body":"\n                   \n\n\n\n\n    Modules\n    OrdersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OrdersModule\n\n\n\ncluster_OrdersModule_providers\n\n\n\ncluster_OrdersModule_imports\n\n\n\n\nCartModule\n\nCartModule\n\n\n\nOrdersModule\n\nOrdersModule\n\nOrdersModule -->\n\nCartModule->OrdersModule\n\n\n\n\n\nCreateOrderProvider\n\nCreateOrderProvider\n\nOrdersModule -->\n\nCreateOrderProvider->OrdersModule\n\n\n\n\n\nFindAllOrdersForUserProvider\n\nFindAllOrdersForUserProvider\n\nOrdersModule -->\n\nFindAllOrdersForUserProvider->OrdersModule\n\n\n\n\n\nFindOrderByIdProvider\n\nFindOrderByIdProvider\n\nOrdersModule -->\n\nFindOrderByIdProvider->OrdersModule\n\n\n\n\n\nOrdersService\n\nOrdersService\n\nOrdersModule -->\n\nOrdersService->OrdersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/orders/orders.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateOrderProvider\n                        \n                        \n                            FindAllOrdersForUserProvider\n                        \n                        \n                            FindOrderByIdProvider\n                        \n                        \n                            OrdersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OrdersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CartModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OrdersController } from './orders.controller';\nimport { OrdersService } from './providers/orders.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Order } from './order.entity';\nimport { OrderItem } from './order-item.entity';\nimport { CreateOrderProvider } from './providers/create-order.provider';\nimport { CartModule } from 'src/cart/cart.module';\nimport { FindAllOrdersForUserProvider } from './providers/find-all-orders-for-user.provider';\nimport { FindOrderByIdProvider } from './providers/find-order-by-id.provider';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Order, OrderItem]), CartModule],\n  controllers: [OrdersController],\n  providers: [\n    OrdersService,\n    CreateOrderProvider,\n    FindAllOrdersForUserProvider,\n    FindOrderByIdProvider,\n  ],\n})\nexport class OrdersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OrdersService.html":{"url":"injectables/OrdersService.html","title":"injectable - OrdersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OrdersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/orders/providers/orders.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createOrder\n                            \n                            \n                                    Async\n                                findAllOrders\n                            \n                            \n                                    Async\n                                findOrderById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createOrderProvider: CreateOrderProvider, findAllOrdersForUserProvider: FindAllOrdersForUserProvider, findOrderByIdProvider: FindOrderByIdProvider)\n                    \n                \n                        \n                            \n                                Defined in src/orders/providers/orders.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createOrderProvider\n                                                  \n                                                        \n                                                                        CreateOrderProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findAllOrdersForUserProvider\n                                                  \n                                                        \n                                                                        FindAllOrdersForUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOrderByIdProvider\n                                                  \n                                                        \n                                                                        FindOrderByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createOrder\n                        \n                    \n                \n            \n            \n                \n                        \n                    createOrder(userId: string, createOrderDto: CreateOrderDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/orders.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createOrderDto\n                                            \n                                                            CreateOrderDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllOrders\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllOrders(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/orders.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOrderById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOrderById(userId: string, orderId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/orders/providers/orders.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                orderId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateOrderProvider } from './create-order.provider';\nimport { CreateOrderDto } from '../dtos/create-order.dto';\nimport { FindAllOrdersForUserProvider } from './find-all-orders-for-user.provider';\nimport { FindOrderByIdProvider } from './find-order-by-id.provider';\n\n@Injectable()\nexport class OrdersService {\n  constructor(\n    /**\n     * createOrder provider\n     */\n    private readonly createOrderProvider: CreateOrderProvider,\n\n    private readonly findAllOrdersForUserProvider: FindAllOrdersForUserProvider,\n\n    private readonly findOrderByIdProvider: FindOrderByIdProvider,\n  ) {}\n\n  async createOrder(userId: string, createOrderDto: CreateOrderDto) {\n    return await this.createOrderProvider.createOrder(userId, createOrderDto);\n  }\n\n  async findAllOrders(userId: string) {\n    return await this.findAllOrdersForUserProvider.findAllOrders(userId);\n  }\n\n  async findOrderById(userId: string, orderId: string) {\n    return await this.findOrderByIdProvider.findOrderById(userId, orderId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/interfaces/paginated.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                interface for the response on paginated queries\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the data to be returned\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    various links for the pages of the data\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the metadata for the data\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n  /**\n   * the data to be returned\n   */\n  data: T[];\n\n  /**\n   * the metadata for the data\n   */\n  meta: {\n    itemsPerPage: number;\n    totalItems: number;\n    currentPage: number;\n    totalPages: number;\n  };\n\n  /**\n   * various links for the pages of the data\n   */\n  links: {\n    first: string;\n    last: string;\n    current: string;\n    next: string;\n    previous: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationProvider } from './providers/pagination.provider';\n\n@Module({\n  providers: [PaginationProvider],\n  exports: [PaginationProvider],\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/providers/pagination.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for pagination\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginationQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/providers/pagination.provider.ts:14\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginationQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginationQuery(paginationQuery: PaginationQueryDto, repository: Repository, options?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/providers/pagination.provider.ts:34\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        function for paginating find all queries\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                data, metadata and links for the findAll queries\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { PaginationQueryDto } from '../dtos/pagination-query.dto';\nimport { ObjectLiteral, Repository } from 'typeorm';\n\n// inorder to inject a request to a provider\nimport { Request } from 'express';\nimport { REQUEST } from '@nestjs/core';\nimport { Paginated } from '../interfaces/paginated.interface';\n\n/**\n * provider for pagination\n */\n@Injectable()\nexport class PaginationProvider {\n  /**\n   * constructor\n   * @param request\n   */\n  constructor(\n    /**\n     * Injecting request\n     */\n    @Inject(REQUEST)\n    private readonly request: Request,\n  ) {}\n\n  /**\n   * function for paginating find all queries\n   * @param paginationQuery\n   * @param repository\n   * @param options\n   * @returns data, metadata and links for the findAll queries\n   */\n  public async paginationQuery(\n    paginationQuery: PaginationQueryDto,\n    repository: Repository,\n    options?: any,\n  ): Promise> {\n    const results = await repository.find({\n      // no of posts to skip in one query\n      skip: (paginationQuery.page - 1) * paginationQuery.limit,\n      // the no of posts to take in one query\n      take: paginationQuery.limit,\n      relations: options.relations,\n      select: options.select,\n      where: options.where,\n      order: options.order,\n    });\n\n    /**\n     * Create the request URLS\n     */\n    const baseURL =\n      this.request.protocol + '://' + this.request.headers.host + '/';\n\n    const newUrl = new URL(this.request.url, baseURL);\n\n    const totalItems = await repository.count({\n      // no of posts to skip in one query\n      skip: (paginationQuery.page - 1) * paginationQuery.limit,\n      // the no of posts to take in one query\n      take: paginationQuery.limit,\n      relations: options.relations,\n      select: options.select,\n      where: options.where,\n    });\n    const totalPages = Math.ceil(totalItems / paginationQuery.limit);\n    const nextPage =\n      paginationQuery.page === totalPages\n        ? paginationQuery.page\n        : paginationQuery.page + 1;\n    const prevPage =\n      paginationQuery.page === 1\n        ? paginationQuery.page\n        : paginationQuery.page - 1;\n\n    const finalResponse: Paginated = {\n      data: results,\n      meta: {\n        itemsPerPage: paginationQuery.limit,\n        totalItems: totalItems,\n        currentPage: paginationQuery.page,\n        totalPages: totalPages,\n      },\n      links: {\n        first: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=1`,\n        last: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${totalPages}`,\n        current: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${paginationQuery.page}`,\n        next: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${nextPage}`,\n        previous: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${prevPage}`,\n      },\n    };\n\n    return finalResponse;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/dtos/pagination-query.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                dto for the pagination query\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:12\n                        \n                    \n\n            \n                \n                    limit for the number of items in the get all requests\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:19\n                        \n                    \n\n            \n                \n                    page number for the get all requests\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from 'class-validator';\n\n/**\n * dto for the pagination query\n */\nexport class PaginationQueryDto {\n  /**\n   * limit for the number of items in the get all requests\n   */\n  @IsOptional()\n  limit?: number = 0;\n\n  /**\n   * page number for the get all requests\n   */\n  @IsOptional()\n  @IsPositive()\n  page?: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Product.html":{"url":"entities/Product.html","title":"entity - Product","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/product.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                cartItems\n                            \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                imageUrl\n                            \n                            \n                                    \n                                isDeleted\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                orders\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                purchaseCount\n                            \n                            \n                                    \n                                stock\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        cartItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CartItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, cartItem => cartItem.product)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 50, nullable: false, enum: ProductCategory})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()@Index()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 100, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, order => order.product)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        purchaseCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:45\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  Index,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n} from 'typeorm';\nimport { ProductCategory } from './enums/product-category.enum';\nimport { CartItem } from '../cart/cart-item.entity';\nimport { Order } from '../orders/order.entity';\nimport { OrderItem } from '../orders/order-item.entity';\n\n@Entity('products')\n@Index(['name'])\n@Index(['category'])\nexport class Product {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ length: 100, nullable: false, unique: true })\n  name: string;\n\n  @Column({ length: 50, nullable: false, enum: ProductCategory })\n  category: ProductCategory;\n\n  @Column({ type: 'text', nullable: false })\n  description: string;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2, nullable: false })\n  price: number;\n\n  @Column({ default: 0, nullable: false })\n  stock: number;\n\n  @Column({ nullable: true })\n  imageUrl?: string;\n\n  @CreateDateColumn()\n  @Index()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @Column({\n    type: 'boolean',\n    default: false,\n  })\n  isDeleted: boolean;\n\n  @Column({\n    type: 'timestamp',\n    nullable: true,\n  })\n  deletedAt?: Date;\n\n  @Column({\n    default: 0,\n  })\n  purchaseCount: number;\n\n  @OneToMany(() => CartItem, (cartItem) => cartItem.product)\n  cartItems?: CartItem[];\n\n  @OneToMany(() => OrderItem, (order) => order.product)\n  orders: Order[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductsController.html":{"url":"controllers/ProductsController.html","title":"controller - ProductsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                products\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                createProduct\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                deleteProduct\n                            \n                            \n                                    \n                                    \n                                findAllProducts\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                updateProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProduct(createProductDto: CreateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth('bearer')@ApiOperation({summary: 'Create a new product', description: 'Creates a new product. Only accessible by admin users. Requires a valid JWT token.'})@ApiBody({description: 'Product creation data', required: true, type: CreateProductDto, examples: undefined})@ApiResponse({status: 201, description: 'Product created successfully', type: Product, example: undefined})@ApiResponse({status: 400, description: 'Bad request - Invalid product data', example: undefined})@ApiResponse({status: 401, description: 'Unauthorized - Missing or invalid JWT token', example: undefined})@ApiResponse({status: 403, description: 'Forbidden - User does not have admin role', example: undefined})@Post('')@Roles(Role.ADMIN)\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        deleteProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProduct(productId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth('bearer')@ApiOperation({summary: 'Delete a product', description: 'Soft deletes a product by ID. The product data is retained in the database but marked as deleted. Only accessible by admin users.'})@ApiParam({name: 'productid', type: 'string', format: 'uuid', description: 'The unique identifier of the product to delete', example: 'a48ac60f-b091-4ac5-9685-fe9aec69d2b3'})@ApiResponse({status: 200, description: 'Product deleted successfully', example: undefined})@ApiResponse({status: 401, description: 'Unauthorized - Missing or invalid JWT token', example: undefined})@ApiResponse({status: 403, description: 'Forbidden - User does not have admin role', example: undefined})@ApiResponse({status: 404, description: 'Product not found', example: undefined})@Roles(Role.ADMIN)@Delete(':productid')\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:286\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAllProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllProducts(productsQuery: GetProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Auth(AuthType.None)@Get('')\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productsQuery\n                                            \n                                                            GetProductsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        updateProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProduct(productId: string, updateProductDto: UpdateProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth('bearer')@ApiOperation({summary: 'Update a product', description: 'Updates product details by ID. Only accessible by admin users. Supports partial updates.'})@ApiParam({name: 'productid', type: 'string', format: 'uuid', description: 'The unique identifier of the product to update', example: 'a48ac60f-b091-4ac5-9685-fe9aec69d2b3'})@ApiBody({description: 'Product update data (all fields are optional)', type: UpdateProductDto, examples: undefined})@ApiResponse({status: 200, description: 'Product updated successfully', type: Product, example: undefined})@ApiResponse({status: 400, description: 'Bad request - Invalid product data', example: undefined})@ApiResponse({status: 401, description: 'Unauthorized - Missing or invalid JWT token', example: undefined})@ApiResponse({status: 403, description: 'Forbidden - User does not have admin role', example: undefined})@ApiResponse({status: 404, description: 'Product not found', example: undefined})@Roles(Role.ADMIN)@Patch(':productid')\n                \n            \n\n                    \n                        \n                            Defined in src/products/products.controller.ts:228\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { ProductsService } from './providers/products.service';\nimport { CreateProductDto } from './dtos/create-product.dto';\nimport { Auth } from 'src/auth/decorator/auth.decorator';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { Roles } from 'src/auth/decorator/role.decorator';\nimport { Role } from 'src/auth/enums/role-type.enum';\nimport { Product } from './product.entity';\nimport { GetProductsDto } from './dtos/get-products.dto';\nimport { Paginated } from '../common/pagination/interfaces/paginated.interface';\nimport { UpdateProductDto } from './dtos/update-product.dto';\nimport {\n  ApiBearerAuth,\n  ApiBody,\n  ApiOperation,\n  ApiParam,\n  ApiResponse,\n} from '@nestjs/swagger';\n\n@Controller('products')\nexport class ProductsController {\n  constructor(\n    /**\n     * injecting the productsService\n     */\n    private readonly productsService: ProductsService,\n  ) {}\n\n  @ApiBearerAuth('bearer')\n  @ApiOperation({\n    summary: 'Create a new product',\n    description:\n      'Creates a new product. Only accessible by admin users. Requires a valid JWT token.',\n  })\n  @ApiBody({\n    description: 'Product creation data',\n    required: true,\n    type: CreateProductDto,\n    examples: {\n      validUser: {\n        summary: 'valid user response',\n        value: {\n          name: 'Dark Silver Cutlery Set',\n          category: 'Utensils',\n          description:\n            'Sustainable fork, knife, spoon set – zero plastic waste.',\n          price: 25.0,\n          stock: 20,\n          imageUrl: 'https://m.media-amazon.com/images/I/71ovT+ReiYL.jpg',\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Product created successfully',\n    type: Product,\n    example: {\n      id: 'c53808b8-fb98-4c26-abbe-c07c263f161c',\n      name: 'Dark Silver Cutlery Set',\n      category: 'Utensils',\n      description: 'Sustainable fork, knife, spoon set – zero plastic waste.',\n      price: 25,\n      stock: 20,\n      imageUrl: 'https://m.media-amazon.com/images/I/71ovT+ReiYL.jpg',\n      createdAt: '2025-10-16T09:13:11.702Z',\n      updatedAt: '2025-10-16T09:13:11.702Z',\n      deletedAt: null,\n      isDeleted: false,\n      purchaseCount: 0,\n    },\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Bad request - Invalid product data',\n    example: {\n      apiVersion: '1.0.0',\n      statusCode: 400,\n      message: 'Validation failed',\n      errors: [\n        'price must be a positive number',\n        'stock must be a positive integer',\n      ],\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - Missing or invalid JWT token',\n    example: {\n      statusCode: 401,\n      message: 'Unauthorized',\n    },\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Forbidden - User does not have admin role',\n    example: {\n      statusCode: 403,\n      message: 'Insufficient permissions',\n    },\n  })\n  @Post('')\n  @Roles(Role.ADMIN)\n  createProduct(@Body() createProductDto: CreateProductDto): Promise {\n    return this.productsService.createProduct(createProductDto);\n  }\n\n  @Auth(AuthType.None)\n  @Get('')\n  findAllProducts(\n    @Query() productsQuery: GetProductsDto,\n  ): Promise> {\n    return this.productsService.findAllProducts(productsQuery);\n  }\n\n  @ApiBearerAuth('bearer')\n  @ApiOperation({\n    summary: 'Update a product',\n    description:\n      'Updates product details by ID. Only accessible by admin users. Supports partial updates.',\n  })\n  @ApiParam({\n    name: 'productid',\n    type: 'string',\n    format: 'uuid',\n    description: 'The unique identifier of the product to update',\n    example: 'a48ac60f-b091-4ac5-9685-fe9aec69d2b3',\n  })\n  @ApiBody({\n    description: 'Product update data (all fields are optional)',\n    type: UpdateProductDto,\n    examples: {\n      updateStock: {\n        value: {\n          stock: 50,\n        },\n        description: 'Update only stock quantity',\n      },\n      updatePrice: {\n        value: {\n          price: 12.99,\n        },\n        description: 'Update only price',\n      },\n      updateAll: {\n        value: {\n          name: 'Silicone Muffin Cups',\n          category: 'Baking',\n          description: 'Food-grade silicone baking cups...',\n          price: 9.99,\n          stock: 50,\n          imageUrl:\n            'https://images-na.ssl-images-amazon.com/images/I/61VGTeKVpqL.jpg',\n        },\n        description: 'Update multiple fields',\n      },\n    },\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Product updated successfully',\n    type: Product,\n    example: {\n      id: 'a48ac60f-b091-4ac5-9685-fe9aec69d2b3',\n      name: 'Silicone Muffin Cups',\n      category: 'Baking',\n      description:\n        'Food-grade silicone baking cups that are oven-safe up to 450°F...',\n      price: '9.00',\n      stock: 50,\n      imageUrl:\n        'https://images-na.ssl-images-amazon.com/images/I/61VGTeKVpqL.jpg',\n      createdAt: '2025-10-15T04:32:09.837Z',\n      updatedAt: '2025-10-16T09:35:37.131Z',\n      isDeleted: false,\n      deletedAt: null,\n      purchaseCount: 0,\n    },\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Bad request - Invalid product data',\n    example: {\n      apiVersion: '1.0.0',\n      statusCode: 400,\n      message: 'Validation failed',\n      errors: [\n        'price must be a positive number',\n        'stock must be a positive integer',\n      ],\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - Missing or invalid JWT token',\n    example: {\n      statusCode: 401,\n      message: 'Unauthorized',\n    },\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Forbidden - User does not have admin role',\n    example: {\n      statusCode: 403,\n      message: 'Insufficient permissions',\n    },\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Product not found',\n    example: {\n      statusCode: 404,\n      message: 'Product not found',\n    },\n  })\n  @Roles(Role.ADMIN)\n  @Patch(':productid')\n  updateProduct(\n    @Param('productid') productId: string,\n    @Body() updateProductDto: UpdateProductDto,\n  ) {\n    return this.productsService.updateProduct(updateProductDto, productId);\n  }\n\n  @ApiBearerAuth('bearer')\n  @ApiOperation({\n    summary: 'Delete a product',\n    description:\n      'Soft deletes a product by ID. The product data is retained in the database but marked as deleted. Only accessible by admin users.',\n  })\n  @ApiParam({\n    name: 'productid',\n    type: 'string',\n    format: 'uuid',\n    description: 'The unique identifier of the product to delete',\n    example: 'a48ac60f-b091-4ac5-9685-fe9aec69d2b3',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Product deleted successfully',\n    example: {\n      apiVersion: '1.0.0',\n      statusCode: 200,\n      data: {\n        message: 'Product deleted successfully.',\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - Missing or invalid JWT token',\n    example: {\n      statusCode: 401,\n      message: 'Unauthorized',\n    },\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Forbidden - User does not have admin role',\n    example: {\n      statusCode: 403,\n      message: 'Insufficient permissions',\n    },\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Product not found',\n    example: {\n      statusCode: 404,\n      message: 'Product not found',\n    },\n  })\n  @Roles(Role.ADMIN)\n  @Delete(':productid')\n  // @HttpCode(204)\n  deleteProduct(@Param('productid') productId: string) {\n    return this.productsService.deleteProduct(productId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductsModule.html":{"url":"modules/ProductsModule.html","title":"module - ProductsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_imports\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_ProductsModule_exports\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nProductsModule\n\nProductsModule\n\nProductsModule -->\n\nPaginationModule->ProductsModule\n\n\n\n\n\nProductsService \n\nProductsService \n\nProductsService  -->\n\nProductsModule->ProductsService \n\n\n\n\n\nCreateProductProvider\n\nCreateProductProvider\n\nProductsModule -->\n\nCreateProductProvider->ProductsModule\n\n\n\n\n\nDeleteProductProvider\n\nDeleteProductProvider\n\nProductsModule -->\n\nDeleteProductProvider->ProductsModule\n\n\n\n\n\nFindAllProductsProvider\n\nFindAllProductsProvider\n\nProductsModule -->\n\nFindAllProductsProvider->ProductsModule\n\n\n\n\n\nFindProductByIdProvider\n\nFindProductByIdProvider\n\nProductsModule -->\n\nFindProductByIdProvider->ProductsModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\nUpdateProductProvider\n\nUpdateProductProvider\n\nProductsModule -->\n\nUpdateProductProvider->ProductsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/products/products.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateProductProvider\n                        \n                        \n                            DeleteProductProvider\n                        \n                        \n                            FindAllProductsProvider\n                        \n                        \n                            FindProductByIdProvider\n                        \n                        \n                            ProductsService\n                        \n                        \n                            UpdateProductProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProductsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductsController } from './products.controller';\nimport { ProductsService } from './providers/products.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Product } from './product.entity';\nimport { CreateProductProvider } from './providers/create-product.provider';\nimport { FindAllProductsProvider } from './providers/find-all-products.provider';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\nimport { UpdateProductProvider } from './providers/update-product.provider';\nimport { DeleteProductProvider } from './providers/delete-product.provider';\nimport { FindProductByIdProvider } from './providers/find-product-by-id.provider';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Product]), PaginationModule],\n  controllers: [ProductsController],\n  providers: [\n    ProductsService,\n    CreateProductProvider,\n    FindAllProductsProvider,\n    UpdateProductProvider,\n    DeleteProductProvider,\n    FindProductByIdProvider,\n  ],\n  exports: [ProductsService, TypeOrmModule],\n})\nexport class ProductsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsService.html":{"url":"injectables/ProductsService.html","title":"injectable - ProductsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/products.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createProduct\n                            \n                            \n                                    Async\n                                deleteProduct\n                            \n                            \n                                    Async\n                                findAllProducts\n                            \n                            \n                                    Async\n                                findProductById\n                            \n                            \n                                    Async\n                                updateProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createProductProvider: CreateProductProvider, findAllProductsProvider: FindAllProductsProvider, updateProductProvider: UpdateProductProvider, deleteProductProvider: DeleteProductProvider, findProductByIdProvider: FindProductByIdProvider)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/products.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createProductProvider\n                                                  \n                                                        \n                                                                        CreateProductProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findAllProductsProvider\n                                                  \n                                                        \n                                                                        FindAllProductsProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        updateProductProvider\n                                                  \n                                                        \n                                                                        UpdateProductProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        deleteProductProvider\n                                                  \n                                                        \n                                                                        DeleteProductProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findProductByIdProvider\n                                                  \n                                                        \n                                                                        FindProductByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProduct(createProductDto: CreateProductDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createProductDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteProduct(productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllProducts(productQuery: GetProductsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productQuery\n                                            \n                                                            GetProductsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findProductById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findProductById(productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProduct(updateProductDto: UpdateProductDto, productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/products.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateProductProvider } from './create-product.provider';\nimport { CreateProductDto } from '../dtos/create-product.dto';\nimport { Product } from '../product.entity';\nimport { FindAllProductsProvider } from './find-all-products.provider';\nimport { GetProductsDto } from '../dtos/get-products.dto';\nimport { Paginated } from '../../common/pagination/interfaces/paginated.interface';\nimport { UpdateProductProvider } from './update-product.provider';\nimport { UpdateProductDto } from '../dtos/update-product.dto';\nimport { DeleteProductProvider } from './delete-product.provider';\nimport { FindProductByIdProvider } from './find-product-by-id.provider';\n\n@Injectable()\nexport class ProductsService {\n  constructor(\n    /**\n     * injecting the create product provider\n     */\n    private readonly createProductProvider: CreateProductProvider,\n\n    /**\n     * injecting the find all products provider\n     */\n    private readonly findAllProductsProvider: FindAllProductsProvider,\n\n    /**\n     * injecting the update product provider\n     */\n    private readonly updateProductProvider: UpdateProductProvider,\n\n    /**\n     * injecting the deleteProductProvider\n     */\n    private readonly deleteProductProvider: DeleteProductProvider,\n\n    /**\n     * injecting the findProductByIdProvider\n     */\n    private readonly findProductByIdProvider: FindProductByIdProvider,\n  ) {}\n\n  async createProduct(createProductDto: CreateProductDto): Promise {\n    return this.createProductProvider.createProduct(createProductDto);\n  }\n\n  async findAllProducts(\n    productQuery: GetProductsDto,\n  ): Promise> {\n    return this.findAllProductsProvider.findAllProducts(productQuery);\n  }\n\n  async updateProduct(\n    updateProductDto: UpdateProductDto,\n    productId: string,\n  ): Promise {\n    return await this.updateProductProvider.updateProduct(\n      updateProductDto,\n      productId,\n    );\n  }\n\n  async deleteProduct(productId: string): Promise {\n    return await this.deleteProductProvider.deleteProduct(productId);\n  }\n\n  async findProductById(productId: string): Promise {\n    return await this.findProductByIdProvider.findProductById(productId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles/roles.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    role guard\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles/roles.guard.ts:16\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles/roles.guard.ts:31\n                        \n                    \n\n\n            \n                \n                        function for validating role of user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true or false depending whether the users role meets the role requirements in the role decorator\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from 'src/auth/constants/role.constant';\nimport { Role } from 'src/auth/enums/role-type.enum';\n\n/**\n * role guard\n */\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  // using static means you can use the name of the property of the class without the \"this\" keyword\n  //   private static readonly defaultRoleType: Role = Role.ADMIN;\n\n  /**\n   * constructor\n   * @param reflector\n   */\n  constructor(private reflector: Reflector) {}\n\n  /**\n   * function for validating role of user\n   * @param context\n   * @returns true or false depending whether the users role meets the role requirements in the role decorator\n   */\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (!requiredRoles) {\n      return true; //  allow access.\n    }\n\n    const { user } = context.switchToHttp().getRequest();\n\n    if (!user) {\n      throw new ForbiddenException('User not found.');\n    }\n\n    const hasRole = requiredRoles.some((role) => user.role === role);\n\n    if (!hasRole) {\n      throw new ForbiddenException(\n        'You do not have permission to access this resource.',\n      );\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SeedProducts1759619432047.html":{"url":"classes/SeedProducts1759619432047.html","title":"class - SeedProducts1759619432047","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SeedProducts1759619432047\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations/1759619432047-SeedProducts.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/migrations/1759619432047-SeedProducts.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/migrations/1759619432047-SeedProducts.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { seedProducts } from '../seed-file';\nimport { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class SeedProducts1759619432047 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    // Create table if not exists (TypeORM handles this via entity sync, but explicit for migration)\n    await queryRunner.query(`\n      CREATE TABLE IF NOT EXISTS products (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(100) NOT NULL UNIQUE,\n        category VARCHAR(50) NOT NULL,\n        description TEXT NOT NULL,\n        price DECIMAL(10,2) NOT NULL,\n        stock INTEGER NOT NULL DEFAULT 0,\n        \"imageUrl\" VARCHAR(255) NULL,\n        INDEX idx_name (name),\n        INDEX idx_category (category)\n      );\n    `);\n\n    // Insert seed data (ignore duplicates if re-run)\n    https: for (const product of seedProducts) {\n      await queryRunner.query(\n        `INSERT INTO products (name, category, description, price, stock, \"imageUrl\") \n         VALUES ($1, $2, $3, $4, $5, $6) \n         ON CONFLICT (name) DO NOTHING;`, // Assumes name is unique; adjust if needed\n        [\n          product.name,\n          product.category,\n          product.description,\n          product.price,\n          product.stock,\n          product.imageUrl,\n        ],\n      );\n    }\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    // Rollback: Truncate seed data (or drop table if preferred)\n    await queryRunner.query(\n      `TRUNCATE TABLE products RESTART IDENTITY CASCADE;`,\n    );\n    // Alternative full drop: await queryRunner.query(`DROP TABLE IF EXISTS products;`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/sign-in.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                sign in dto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the email of the user', example: 'Favour@gmail.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/sign-in.dto.ts:17\n                        \n                    \n\n            \n                \n                    email address\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the password of the user', example: '@Favour233'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/sign-in.dto.ts:28\n                        \n                    \n\n            \n                \n                    password\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * sign in dto\n */\nexport class SignInDto {\n  /**\n   * email address\n   */\n  @ApiProperty({\n    description: 'This is the email of the user',\n    example: 'Favour@gmail.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  /**\n   * password\n   */\n  @ApiProperty({\n    description: 'This is the password of the user',\n    example: '@Favour233',\n  })\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SignInProvider.html":{"url":"injectables/SignInProvider.html","title":"injectable - SignInProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SignInProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/sign-in.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                provider for sigining in users\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, hashingProvider: HashingProvider, generateTokenProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/sign-in.provider.ts:17\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.provider.ts:47\n                        \n                    \n\n\n            \n                \n                        function for signing in users\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                access and refresh tokens\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { HashingProvider } from './hashing.provider';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\nimport { SignInDto } from '../dtos/sign-in.dto';\nimport { User } from 'src/users/user.entity';\n\n/**\n * provider for sigining in users\n */\n@Injectable()\nexport class SignInProvider {\n  /**\n   * constructor\n   * @param usersService\n   * @param hashingProvider\n   * @param generateTokenProvider\n   */\n  constructor(\n    /**\n     * injecting the user service\n     */\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n\n    /**\n     * Injecting the hashing provider\n     */\n    private readonly hashingProvider: HashingProvider,\n\n    /**\n     * injecting the generate token provider\n     */\n    private readonly generateTokenProvider: GenerateTokensProvider,\n  ) {}\n\n  /**\n   * function for signing in users\n   * @param signInDto\n   * @returns access and refresh tokens\n   */\n  public async signIn(signInDto: SignInDto): Promise;\n  }> {\n    const user: User = await this.usersService.findUserByEmail(signInDto.email);\n\n    let isPasswordEqual: boolean = false;\n\n    isPasswordEqual = await this.hashingProvider.comparePassword(\n      signInDto.password,\n      user.password,\n    );\n\n    if (!isPasswordEqual) {\n      throw new UnauthorizedException('Incorrect email or password');\n    }\n\n    // generate an access token\n    const { accessToken, refreshToken } =\n      await this.generateTokenProvider.generateTokens(user);\n\n    return {\n      accessToken,\n      refreshToken,\n      user: {\n        id: user.id,\n        firstname: user.firstname,\n        lastname: user.lastname,\n        role: user.role,\n        email: user.email,\n      },\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCartItemDto.html":{"url":"classes/UpdateCartItemDto.html","title":"class - UpdateCartItemDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCartItemDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/dtos/update-cart-item.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cart/dtos/update-cart-item.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, Min } from 'class-validator';\n\nexport class UpdateCartItemDto {\n  @IsInt()\n  @Min(1)\n  quantity: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UpdateCartItemProvider.html":{"url":"injectables/UpdateCartItemProvider.html","title":"injectable - UpdateCartItemProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UpdateCartItemProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cart/providers/update-cart-item.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clearCart\n                            \n                            \n                                    Async\n                                decrementQuantity\n                            \n                            \n                                    Async\n                                deductStock\n                            \n                            \n                                    Async\n                                removeFromCart\n                            \n                            \n                                    Async\n                                validateCartStock\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cartItemRepository: Repository, getCartProvider: GetCartProvider, productRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/cart/providers/update-cart-item.provider.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cartItemRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        getCartProvider\n                                                  \n                                                        \n                                                                        GetCartProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        productRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        clearCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearCart(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/update-cart-item.provider.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decrementQuantity\n                        \n                    \n                \n            \n            \n                \n                        \n                    decrementQuantity(userId: string, cartId: string, updateCartItemDto: UpdateCartItemDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/update-cart-item.provider.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCartItemDto\n                                            \n                                                            UpdateCartItemDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deductStock\n                        \n                    \n                \n            \n            \n                \n                        \n                    deductStock(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/update-cart-item.provider.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeFromCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFromCart(userId: string, cartId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/update-cart-item.provider.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cartId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateCartStock\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateCartStock(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cart/providers/update-cart-item.provider.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { CartItem } from '../cart-item.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Cart } from '../interfaces/cart.interface';\nimport { GetCartProvider } from './get-cart.provider';\nimport { Product } from 'src/products/product.entity';\nimport { UpdateCartItemDto } from '../dtos/update-cart-item.dto';\n\n@Injectable()\nexport class UpdateCartItemProvider {\n  constructor(\n    /**\n     * injecting the cartRepository\n     */\n    @InjectRepository(CartItem)\n    private readonly cartItemRepository: Repository,\n\n    /**\n     * injecting the get cart provider\n     */\n    private readonly getCartProvider: GetCartProvider,\n\n    @InjectRepository(Product)\n    private readonly productRepository: Repository,\n  ) {}\n\n  async decrementQuantity(\n    userId: string,\n    cartId: string,\n    updateCartItemDto: UpdateCartItemDto,\n  ): Promise {\n    const cartItem = await this.cartItemRepository.findOne({\n      where: { user: { id: userId }, id: cartId },\n    });\n\n    if (!cartItem) {\n      throw new NotFoundException('Item not in cart');\n    }\n\n    if (\n      cartItem.quantity  {\n    const cartItem = await this.cartItemRepository.findOne({\n      where: { user: { id: userId }, id: cartId },\n    });\n\n    if (!cartItem) {\n      throw new NotFoundException('Item not in cart');\n    }\n\n    await this.cartItemRepository.softDelete({ id: cartItem.id });\n    return this.getCartProvider.getCart(userId);\n  }\n\n  // For orders: Validate stock before checkout\n  async validateCartStock(userId: string): Promise {\n    const cartItems = await this.cartItemRepository.find({\n      where: { user: { id: userId }, deletedAt: null },\n      relations: ['product'],\n    });\n\n    for (const item of cartItems) {\n      if (item.product.stock  {\n    const cartItems = await this.cartItemRepository.find({\n      where: { user: { id: userId }, deletedAt: null },\n      relations: ['product'],\n    });\n\n    for (const item of cartItems) {\n      item.product.stock -= item.quantity;\n      await this.productRepository.save(item.product);\n    }\n  }\n\n  // Clear cart after order\n  async clearCart(userId: string): Promise {\n    try {\n      await this.cartItemRepository.softDelete({ user: { id: userId } });\n    } catch (error) {\n      console.log(error);\n    }\n\n    return {\n      message: 'Cart cleared successfully',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/dtos/update-product.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateProductDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isDeleted\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/update-product.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/dtos/update-product.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateProductDto } from './create-product.dto';\nimport { IsBoolean, IsOptional } from 'class-validator';\n\nexport class UpdateProductDto extends PartialType(CreateProductDto) {\n  @IsOptional()\n  @IsBoolean()\n  isDeleted?: boolean;\n\n  @IsOptional()\n  deletedAt?: Date | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UpdateProductProvider.html":{"url":"injectables/UpdateProductProvider.html","title":"injectable - UpdateProductProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UpdateProductProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/providers/update-product.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                filterObj\n                            \n                            \n                                    Public\n                                    Async\n                                updateProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/products/providers/update-product.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        filterObj\n                        \n                    \n                \n            \n            \n                \n                        \n                    filterObj(obj: T, ...allowedFields: ()[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/update-product.provider.ts:42\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                allowedFields\n                                            \n                                                        ()[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Record\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updateProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProduct(updateProductDto: UpdateProductDto, productId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/products/providers/update-product.provider.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateProductDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Product } from '../product.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UpdateProductDto } from '../dtos/update-product.dto';\n\n@Injectable()\nexport class UpdateProductProvider {\n  constructor(\n    /**\n     * injecting the products repository\n     */\n    @InjectRepository(Product)\n    private readonly productsRepository: Repository,\n  ) {}\n\n  public async updateProduct(\n    updateProductDto: UpdateProductDto,\n    productId: string,\n  ): Promise {\n    const product = await this.productsRepository.findOneBy({ id: productId });\n\n    console.log(product);\n\n    if (!product) throw new NotFoundException('Product not found');\n\n    const filteredPayload = this.filterObj(\n      updateProductDto,\n      'description',\n      'price',\n      'stock',\n      'isDeleted',\n      'deletedAt',\n    );\n\n    return await this.productsRepository.save({\n      ...product,\n      ...filteredPayload,\n    });\n  }\n\n  private filterObj>(\n    obj: T,\n    ...allowedFields: (keyof T)[]\n  ) {\n    const newObj = {} as Record;\n    Object.keys(obj).forEach((el) => {\n      if (allowedFields.includes(el)) {\n        newObj[el] = obj[el];\n      }\n    });\n    return newObj;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                cartItems\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                    Optional\n                                firstname\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastname\n                            \n                            \n                                    \n                                orders\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        cartItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CartItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, cartItem => cartItem.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()@Index()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, order => order.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, select: false})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Role, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:63\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport { Role } from '../auth/enums/role-type.enum';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  Index,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { CartItem } from '../cart/cart-item.entity';\nimport { Order } from '../orders/order.entity';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstname?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  lastname: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n\n  @Column({\n    type: 'enum',\n    enum: Role,\n    nullable: false,\n  })\n  role: Role;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    select: false,\n  })\n  @Exclude()\n  password: string;\n\n  @CreateDateColumn()\n  @Index()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @OneToMany(() => CartItem, (cartItem) => cartItem.user)\n  cartItems?: CartItem[];\n\n  @OneToMany(() => Order, (order) => order.user)\n  orders: Order[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Controller handling user-related operations\nBase URL: /users\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new user account', description: 'Register a new user with personal details and credentials. Password will be securely hashed.'})@ApiBody({description: 'User registration details', required: true, type: CreateUserDto, examples: undefined})@ApiResponse({status: 201, description: 'User account created successfully. Returns user details without password.', schema: undefined})@ApiResponse({status: 400, description: user with {email} already exists})@Post('')@HttpCode(HttpStatus.CREATED)@Auth(AuthType.None)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:82\n                        \n                    \n\n\n            \n                \n                        Creates a new user account with the provided user details\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user registration data including firstName, lastName, email and password\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                Promise - The created user object (password excluded from response)\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { User } from './user.entity';\nimport { ApiBody, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { Auth } from 'src/auth/decorator/auth.decorator';\nimport { UsersService } from './providers/users.service';\nimport { Role } from 'src/auth/enums/role-type.enum';\nimport { CreateUserDto } from './dtos/create-user.dto';\n\n/**\n * Controller handling user-related operations\n * Base URL: /users\n */\n@ApiTags('Users')\n@Controller('users')\nexport class UsersController {\n  constructor(\n    /**\n     * Injecting the users service for user-related operations\n     */\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * Creates a new user account with the provided user details\n   *\n   * @param createUserDto - The user registration data including firstName, lastName, email and password\n   * @returns Promise - The created user object (password excluded from response)\n   */\n  @ApiOperation({\n    summary: 'Create a new user account',\n    description:\n      'Register a new user with personal details and credentials. Password will be securely hashed.',\n  })\n  @ApiBody({\n    description: 'User registration details',\n    required: true,\n    type: CreateUserDto,\n    examples: {\n      validUser: {\n        summary: 'Valid user registration',\n        value: {\n          firstname: 'Kelechi',\n          lastname: 'Agnes',\n          email: 'iloghaluagneskc@gmail.com',\n          password: '@Password1',\n        },\n      },\n      invalidUser: {\n        summary: 'Invalid registration - missing password',\n        value: {\n          firstname: 'Kelechi',\n          lastname: 'Agnes',\n          email: 'iloghaluagneskc@gmail.com',\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 201,\n    description:\n      'User account created successfully. Returns user details without password.',\n    schema: {\n      type: 'object',\n      properties: {\n        id: { type: 'string', example: 'uuid-string' },\n        firstName: { type: 'string', example: 'John' },\n        lastName: { type: 'string', example: 'Doe' },\n        email: { type: 'string', example: 'john.doe@example.com' },\n        role: { type: 'string', example: Role.USER },\n        createdAt: { type: 'string', format: 'date-time' },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 400,\n    description: `user with {email} already exists`,\n  })\n  @Post('')\n  @HttpCode(HttpStatus.CREATED)\n  @Auth(AuthType.None)\n  public createUser(\n    @Body() createUserDto: CreateUserDto,\n  ): Promise> {\n    return this.usersService.createUser(createUserDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindUserByEmailProvider\n\nFindUserByEmailProvider\n\nUsersModule -->\n\nFindUserByEmailProvider->UsersModule\n\n\n\n\n\nFindUserByIdProvider\n\nFindUserByIdProvider\n\nUsersModule -->\n\nFindUserByIdProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateUserProvider\n                        \n                        \n                            FindUserByEmailProvider\n                        \n                        \n                            FindUserByIdProvider\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { CreateUserProvider } from './providers/create-user.provider';\nimport { FindUserByEmailProvider } from './providers/find-user-by-email.provider';\nimport { FindUserByIdProvider } from './providers/find-user-by-id.provider';\n\n@Module({\n  imports: [forwardRef(() => AuthModule), TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [\n    UsersService,\n    CreateUserProvider,\n    FindUserByEmailProvider,\n    FindUserByIdProvider,\n  ],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findUserById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(createUserProvider: CreateUserProvider, findUserByEmailProvider: FindUserByEmailProvider, findUserByIdProvider: FindUserByIdProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findUserByEmailProvider\n                                                  \n                                                        \n                                                                        FindUserByEmailProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findUserByIdProvider\n                                                  \n                                                        \n                                                                        FindUserByIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:32\n                        \n                    \n\n\n            \n                \n                        service for creating a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                User\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserById(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateUserProvider } from './create-user.provider';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { User } from '../user.entity';\nimport { FindUserByEmailProvider } from './find-user-by-email.provider';\nimport { FindUserByIdProvider } from './find-user-by-id.provider';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    /**\n     * injecting the create user provider\n     */\n    private readonly createUserProvider: CreateUserProvider,\n\n    /**\n     * injecting the find user by email provider\n     */\n    private readonly findUserByEmailProvider: FindUserByEmailProvider,\n\n    /**\n     * injecting the find user by id provider\n     */\n    private readonly findUserByIdProvider: FindUserByIdProvider,\n  ) {}\n\n  /**\n   * service for creating a user\n   * @param createUserDto\n   * @returns User\n   */\n  public async createUser(\n    createUserDto: CreateUserDto,\n  ): Promise> {\n    return await this.createUserProvider.createUser(createUserDto);\n  }\n\n  public async findUserByEmail(email: string): Promise {\n    return await this.findUserByEmailProvider.findUserByEmail(email);\n  }\n\n  public async findUserById(userId: string): Promise {\n    return await this.findUserByIdProvider.findUserById(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationException.html":{"url":"classes/ValidationException.html","title":"class - ValidationException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/common-exceptions.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                validation exception\n\n            \n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(errors: string[])\n                    \n                \n                        \n                            \n                                Defined in src/common/filters/common-exceptions.filter.ts:28\n                            \n                        \n\n                \n                    \n                            constructor for the validation exception\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        errors\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\n/**\n * database connection exception\n */\nexport class DatabaseConnectionException extends HttpException {\n  /**\n   * constructor for the database connection exception\n   * @param operation\n   */\n  constructor(operation?: string) {\n    super(\n      {\n        message:\n          'Unable to process your request at the moment, please try later',\n        description: 'Error connecting to the database',\n        operation,\n        errorCode: 'ERR_DB_CONNECTION',\n      },\n      HttpStatus.REQUEST_TIMEOUT,\n    );\n  }\n}\n\n/**\n * validation exception\n */\nexport class ValidationException extends HttpException {\n  /**\n   * constructor for the validation exception\n   * @param errors\n   */\n  constructor(errors: string[]) {\n    super(\n      {\n        message: 'Validation failed',\n        errors,\n        errorCode: 'ERR_VALIDATION',\n      },\n      HttpStatus.BAD_REQUEST,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/app.module.ts\n            \n            variable\n            ENV\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/auth/constants/auth.constant.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/constants/auth.constant.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/constants/role.constant.ts\n            \n            variable\n            ROLES_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/decorator/active-user.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/decorator/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/auth/decorator/role.decorator.ts\n            \n            variable\n            Roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/sign-in.dto.ts\n            \n            class\n            SignInDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/guards/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/interfaces/active-user-data.interface.ts\n            \n            interface\n            ActiveUserData\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-tokens.provider.ts\n            \n            injectable\n            GenerateTokensProvider\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/providers/sign-in.provider.ts\n            \n            injectable\n            SignInProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/cart/cart-item.entity.ts\n            \n            entity\n            CartItem\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/cart/cart.controller.ts\n            \n            controller\n            CartController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/cart/dtos/create-cart-item.dto.ts\n            \n            class\n            CreateCartItemDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/cart/dtos/update-cart-item.dto.ts\n            \n            class\n            UpdateCartItemDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/cart/interfaces/cart.interface.ts\n            \n            interface\n            Cart\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cart/providers/add-to-cart.provider.ts\n            \n            injectable\n            AddToCartProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/cart/providers/cart.service.ts\n            \n            injectable\n            CartService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/cart/providers/get-cart.provider.ts\n            \n            injectable\n            GetCartProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cart/providers/update-cart-item.provider.ts\n            \n            injectable\n            UpdateCartItemProvider\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/common/filters/common-exceptions.filter.ts\n            \n            class\n            DatabaseConnectionException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/filters/common-exceptions.filter.ts\n            \n            class\n            ValidationException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/filters/global-exception.filter.ts\n            \n            class\n            GlobalExceptionFilter\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/common/filters/global-exception.filter.ts\n            \n            interface\n            ErrorResponse\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/common/interceptors/data-response/data-response.interceptor.ts\n            \n            injectable\n            DataResponseInterceptor\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/error-handling/error-handling.interceptor.ts\n            \n            injectable\n            ErrorHandlingInterceptor\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/pagination/dtos/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/pagination/interfaces/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/pagination/providers/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/migrations/1759619432047-SeedProducts.ts\n            \n            class\n            SeedProducts1759619432047\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/orders/dtos/create-order.dto.ts\n            \n            class\n            CreateOrderDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/orders/order-item.entity.ts\n            \n            entity\n            OrderItem\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/orders/order.entity.ts\n            \n            entity\n            Order\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/orders/orders.controller.ts\n            \n            controller\n            OrdersController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/orders/providers/create-order.provider.ts\n            \n            injectable\n            CreateOrderProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/orders/providers/find-all-orders-for-user.provider.ts\n            \n            injectable\n            FindAllOrdersForUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/orders/providers/find-order-by-id.provider.ts\n            \n            injectable\n            FindOrderByIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/orders/providers/orders.service.ts\n            \n            injectable\n            OrdersService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/products/dtos/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/products/dtos/get-products.dto.ts\n            \n            class\n            GetProductsBaseDto\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/products/dtos/get-products.dto.ts\n            \n            class\n            GetProductsDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/products/dtos/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/product.entity.ts\n            \n            entity\n            Product\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/products/product.entity.ts\n            \n            class\n            Product\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/products/products.controller.ts\n            \n            controller\n            ProductsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/products/providers/create-product.provider.ts\n            \n            injectable\n            CreateProductProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/providers/delete-product.provider.ts\n            \n            injectable\n            DeleteProductProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/providers/find-all-products.provider.ts\n            \n            injectable\n            FindAllProductsProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/products/providers/find-product-by-id.provider.ts\n            \n            injectable\n            FindProductByIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/products/providers/products.service.ts\n            \n            injectable\n            ProductsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/products/providers/update-product.provider.ts\n            \n            injectable\n            UpdateProductProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/seed-file.ts\n            \n            variable\n            seedProducts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/users/providers/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-user-by-email.provider.ts\n            \n            injectable\n            FindUserByEmailProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-user-by-id.provider.ts\n            \n            injectable\n            FindUserByIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (2/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            bcrypt : ^6.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            dotenv : ^17.2.3\n        \n            joi : ^18.0.1\n        \n            pg : ^8.16.3\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.27\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth-type.enum.ts)\n                        \n                        \n                            OrderStatus   (src/.../order-status.enum.ts)\n                        \n                        \n                            ProductCategory   (src/.../product-category.enum.ts)\n                        \n                        \n                            Role   (src/.../role-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/auth-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n    src/orders/enums/order-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        OrderStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 CONFIRMED\n                            \n                        \n                        \n                            \n                                Value : confirmed\n                            \n                        \n                        \n                            \n                                 SHIPPED\n                            \n                        \n                        \n                            \n                                Value : shipped\n                            \n                        \n                        \n                            \n                                 DELIVERED\n                            \n                        \n                        \n                            \n                                Value : delivered\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n    src/products/enums/product-category.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ProductCategory\n                    \n                \n                        \n                            \n                                 UTENSILS\n                            \n                        \n                        \n                            \n                                Value : Utensils\n                            \n                        \n                        \n                            \n                                 STORAGE\n                            \n                        \n                        \n                            \n                                Value : Storage\n                            \n                        \n                        \n                            \n                                 DRINKWARE\n                            \n                        \n                        \n                            \n                                Value : Drinkware\n                            \n                        \n                        \n                            \n                                 CLEANING\n                            \n                        \n                        \n                            \n                                Value : Cleaning\n                            \n                        \n                        \n                            \n                                 BAKING\n                            \n                        \n                        \n                            \n                                Value : Baking\n                            \n                        \n                        \n                            \n                                 CUTTING\n                            \n                        \n                        \n                            \n                                Value : Cutting\n                            \n                        \n                        \n                            \n                                 SERVWARE\n                            \n                        \n                        \n                            \n                                Value : Serveware\n                            \n                        \n            \n        \n\n    src/auth/enums/role-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CartModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OrdersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CartModule\n\n\n\ncluster_CartModule_imports\n\n\n\ncluster_CartModule_exports\n\n\n\ncluster_CartModule_providers\n\n\n\ncluster_OrdersModule\n\n\n\ncluster_OrdersModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_exports\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nCartModule\n\nCartModule\n\n\n\nOrdersModule\n\nOrdersModule\n\nOrdersModule -->\n\nCartModule->OrdersModule\n\n\n\nAppModule -->\n\nCartModule->AppModule\n\n\n\n\n\nCartService \n\nCartService \n\nCartService  -->\n\nCartModule->CartService \n\n\n\nAppModule -->\n\nOrdersModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nCartModule -->\n\nProductsModule->CartModule\n\n\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nProductsService \n\nProductsService \n\nProductsService  -->\n\nProductsModule->ProductsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nCartModule -->\n\nUsersModule->CartModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\nProduct\n\nProduct\n\nCartModule -->\n\nProduct->CartModule\n\n\n\n\n\nAddToCartProvider\n\nAddToCartProvider\n\nCartModule -->\n\nAddToCartProvider->CartModule\n\n\n\n\n\nCartService\n\nCartService\n\nCartModule -->\n\nCartService->CartModule\n\n\n\n\n\nGetCartProvider\n\nGetCartProvider\n\nCartModule -->\n\nGetCartProvider->CartModule\n\n\n\n\n\nUpdateCartItemProvider\n\nUpdateCartItemProvider\n\nCartModule -->\n\nUpdateCartItemProvider->CartModule\n\n\n\n\n\nCreateOrderProvider\n\nCreateOrderProvider\n\nOrdersModule -->\n\nCreateOrderProvider->OrdersModule\n\n\n\n\n\nFindAllOrdersForUserProvider\n\nFindAllOrdersForUserProvider\n\nOrdersModule -->\n\nFindAllOrdersForUserProvider->OrdersModule\n\n\n\n\n\nFindOrderByIdProvider\n\nFindOrderByIdProvider\n\nOrdersModule -->\n\nFindOrderByIdProvider->OrdersModule\n\n\n\n\n\nOrdersService\n\nOrdersService\n\nOrdersModule -->\n\nOrdersService->OrdersModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nProductsModule -->\n\nPaginationModule->ProductsModule\n\n\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nCreateProductProvider\n\nCreateProductProvider\n\nProductsModule -->\n\nCreateProductProvider->ProductsModule\n\n\n\n\n\nDeleteProductProvider\n\nDeleteProductProvider\n\nProductsModule -->\n\nDeleteProductProvider->ProductsModule\n\n\n\n\n\nFindAllProductsProvider\n\nFindAllProductsProvider\n\nProductsModule -->\n\nFindAllProductsProvider->ProductsModule\n\n\n\n\n\nFindProductByIdProvider\n\nFindProductByIdProvider\n\nProductsModule -->\n\nFindProductByIdProvider->ProductsModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\nUpdateProductProvider\n\nUpdateProductProvider\n\nProductsModule -->\n\nUpdateProductProvider->ProductsModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindUserByEmailProvider\n\nFindUserByEmailProvider\n\nUsersModule -->\n\nFindUserByEmailProvider->UsersModule\n\n\n\n\n\nFindUserByIdProvider\n\nFindUserByIdProvider\n\nUsersModule -->\n\nFindUserByIdProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    27 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../active-user.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.constant.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constant.ts)\n                        \n                        \n                            Roles   (src/.../role.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../role.constant.ts)\n                        \n                        \n                            seedProducts   (src/.../seed-file.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorator/active-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof ActiveUserData | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user: ActiveUserData = request[REQUEST_USER_KEY];\n\n    return field ? user?.[field] : user;\n  },\n)\n                    \n                \n\n            \n                \n                    Custom param decorator for the active user\n\n                \n            \n\n        \n    \n\n    src/auth/decorator/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) =>\n  SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n            \n                \n                    decorator for guarding user authentication\n\n                \n            \n\n        \n    \n\n    src/auth/constants/auth.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n            \n                \n                    constant for auth type\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n            \n                \n                    constant for request user\n\n                \n            \n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n            \n                \n                    app environment\n\n                \n            \n\n        \n    \n\n    src/auth/decorator/role.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n            \n                \n                    decoraror for gaurding the user roles\n\n                \n            \n\n        \n    \n\n    src/auth/constants/role.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n            \n                \n                    constant for the roles\n\n                \n            \n\n        \n    \n\n    src/seed-file.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        seedProducts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  // Utensils (6 products)\n  {\n    name: 'Bamboo Cutlery Set',\n    category: 'Utensils',\n    description:\n      'Sustainable fork, knife, spoon set crafted from premium bamboo. This eco-friendly cutlery eliminates the need for single-use plastic utensils while providing durability and style. Perfect for everyday meals, picnics, or travel, each piece is naturally antibacterial and lightweight. The smooth finish ensures comfortable handling, and the set comes with a convenient carrying pouch. Make a positive environmental impact with zero plastic waste.',\n    price: 12.0,\n    stock: 50,\n    imageUrl: 'https://m.media-amazon.com/images/I/81jBfaLlwBL.jpg',\n  },\n  {\n    name: 'Reusable Silicone Spatulas',\n    category: 'Utensils',\n    description:\n      'Durable, heat-resistant spatulas made from premium food-grade silicone that can withstand temperatures up to 450°F. These flexible spatulas glide smoothly across all cookware surfaces without scratching, making them ideal for non-stick pans. The ergonomic handles provide a comfortable grip during extended cooking sessions. Easy to clean and dishwasher safe, these spatulas are built to last for years while reducing kitchen waste.',\n    price: 8.0,\n    stock: 30,\n    imageUrl: 'https://m.media-amazon.com/images/I/51vq0IpXquL.jpg',\n  },\n  {\n    name: 'Wooden Spoons Set',\n    category: 'Utensils',\n    description: `Handcrafted from FSC-certified sustainable wood, this beautiful spoon set is perfect for non-stick cookware and delicate surfaces. Each spoon is carefully sanded to a smooth finish and treated with natural oils for longevity. The natural wood won't conduct heat like metal utensils, protecting your hands during cooking. These spoons won't scratch your expensive cookware and add a rustic, warm aesthetic to your kitchen.`,\n    price: 5.0,\n    stock: 75,\n    imageUrl: 'https://m.media-amazon.com/images/I/413kbQCe+cL.jpg',\n  },\n  {\n    name: 'Bamboo Whisk',\n    category: 'Utensils',\n    description: `Eco-friendly whisk expertly crafted from natural bamboo for whipping eggs, sauces, and dressings without synthetic bristles. The flexible bamboo tines create the perfect texture for your culinary creations while being gentle on your mixing bowls. This traditional tool is naturally antimicrobial and won't scratch or damage cookware. Lightweight yet sturdy, it offers superior control and comfort during food preparation.`,\n    price: 6.5,\n    stock: 40,\n    imageUrl: 'https://m.media-amazon.com/images/I/81Vm-oZEOzL.jpg',\n  },\n  {\n    name: 'Silicone Tongs',\n    category: 'Utensils',\n    description:\n      'BPA-free silicone-coated tongs designed for safe flipping, gripping, and serving of all your favorite foods. The heat-resistant silicone tips protect non-stick surfaces while providing a secure grip on everything from delicate fish to heavy steaks. Featuring a locking mechanism for compact storage and an ergonomic design for comfortable handling. These versatile tongs are dishwasher safe and built to withstand daily kitchen demands.',\n    price: 7.5,\n    stock: 55,\n    imageUrl:\n      'https://images-na.ssl-images-amazon.com/images/I/61S5b8hwuIL.jpg',\n  },\n  {\n    name: 'Coconut Shell Ladle',\n    category: 'Utensils',\n    description:\n      'Hand-carved from natural coconut shell, this unique ladle is fully biodegradable and brings tropical elegance to your kitchen. Each piece is individually crafted, making every ladle one-of-a-kind with its own natural grain patterns. The smooth polished interior is perfect for serving soups, stews, and sauces. When its useful life ends, simply compost it to return nutrients to the earth. A beautiful blend of functionality and sustainability.',\n    price: 9.0,\n    stock: 35,\n    imageUrl: 'https://m.media-amazon.com/images/I/71TjVJFNNkL.jpg',\n  },\n  // Storage (6 products)\n  {\n    name: 'Beeswax Wraps Pack',\n    category: 'Storage',\n    description:\n      'Natural beeswax-coated organic cotton wraps that serve as a reusable, breathable alternative to plastic wrap and aluminum foil. The warmth of your hands molds these wraps around food containers, bowls, or directly around produce, creating a natural seal. Infused with jojoba oil and tree resin for antibacterial properties, these wraps keep food fresh while being gentle on the environment. Simply wash with cool water and reuse hundreds of times.',\n    price: 10.0,\n    stock: 60,\n    imageUrl: 'https://m.media-amazon.com/images/I/81jwx-bnh4L.jpg',\n  },\n  {\n    name: 'Glass Jars with Lids',\n    category: 'Storage',\n    description:\n      'Premium borosilicate glass jars designed for dry goods storage with elegant airtight bamboo lids. The crystal-clear glass lets you easily identify contents while the eco-friendly bamboo lids feature silicone seals to keep food fresh and protected from moisture and pests. These versatile jars are perfect for flour, sugar, coffee, pasta, grains, and more. Stackable design maximizes pantry space while adding a modern, organized aesthetic to your kitchen.',\n    price: 15.0,\n    stock: 25,\n    imageUrl: 'https://m.media-amazon.com/images/I/712zqjxfUYL.jpg',\n  },\n  {\n    name: 'Bamboo Food Containers',\n    category: 'Storage',\n    description:\n      'Leak-proof containers made from natural bamboo fiber that are microwave-safe and completely compostable at end of life. These lightweight yet durable containers feature secure snap-lock lids that prevent spills during transport. Ideal for meal prep, leftovers, or on-the-go lunches, they can safely go from fridge to microwave to dishwasher. The natural bamboo material is free from harmful chemicals and provides an eco-conscious alternative to plastic containers.',\n    price: 18.0,\n    stock: 35,\n    imageUrl: 'https://m.media-amazon.com/images/I/91qleaoa2gL.jpg',\n  },\n  {\n    name: 'Silicone Food Bags',\n    category: 'Storage',\n    description:\n      'Reusable zip-lock bags crafted from platinum-grade silicone that are freezer-safe, microwave-safe, and dishwasher-safe. These versatile bags replace thousands of single-use plastic bags over their lifetime while keeping food fresh and organized. The airtight seal locks in freshness and prevents freezer burn, making them perfect for marinating, sous vide cooking, storing leftovers, or packing snacks. Available in multiple sizes to accommodate all your storage needs.',\n    price: 9.5,\n    stock: 45,\n    imageUrl:\n      'https://m.media-amazon.com/images/S/aplus-media/sc/478fe6bb-d72b-4636-a526-c3c01475d03b.__CR38,0,1872,1872_PT0_SX300_V1___.jpeg',\n  },\n  {\n    name: 'Stainless Steel Canisters',\n    category: 'Storage',\n    description:\n      'Rust-proof stainless steel canisters with sustainable cork seals that provide airtight storage for dry goods. The high-quality brushed stainless steel construction ensures long-lasting durability while the natural cork lids add a touch of organic warmth. These canisters protect contents from light, moisture, and air to maintain maximum freshness. Perfect for storing coffee, tea, flour, sugar, and other pantry staples. Their sleek design complements any kitchen décor.',\n    price: 22.0,\n    stock: 20,\n    imageUrl: 'https://m.media-amazon.com/images/I/71-2WuLATJL.jpg',\n  },\n  {\n    name: 'Fabric Produce Bags',\n    category: 'Storage',\n    description:\n      'Organic cotton mesh bags designed for fresh produce shopping and storage, offering a washable and breathable alternative to plastic produce bags. The lightweight mesh allows produce clerks to easily see and weigh contents while the drawstring closure keeps items secure. These bags help extend the life of fruits and vegetables by allowing air circulation that prevents premature spoiling. Machine washable and built to last through countless shopping trips and years of use.',\n    price: 6.0,\n    stock: 80,\n    imageUrl:\n      'https://images-na.ssl-images-amazon.com/images/I/818-Z3XBeKL.jpg',\n  },\n  // Drinkware (6 products)\n  {\n    name: 'Stainless Steel Tumbler',\n    category: 'Drinkware',\n    description: `Insulated 20oz tumbler with double-wall vacuum insulation that keeps drinks hot for up to 6 hours or cold for 24 hours. Made from premium BPA-free stainless steel that won't retain flavors or odors. The powder-coated exterior provides a secure grip and comes in various colors to match your style. Features a spill-resistant lid perfect for commuting, outdoor activities, or everyday hydration. Eliminates the need for disposable cups while maintaining perfect beverage temperatures.`,\n    price: 20.0,\n    stock: 20,\n    imageUrl: 'https://m.media-amazon.com/images/I/71o0O8PPFvL.jpg',\n  },\n  {\n    name: 'Bamboo Straws Pack (10-pack)',\n    category: 'Drinkware',\n    description: `Reusable bamboo straws with included cleaning brush that are naturally antibacterial and biodegradable. Each straw is individually crafted from sustainable bamboo, making them smooth, strong, and safe for hot and cold beverages. The 10-pack provides enough straws for the whole family or for keeping extras at work and in your car. Unlike metal straws, these won't conduct temperature or leave a metallic taste. Includes a specialized brush for easy cleaning.`,\n    price: 4.0,\n    stock: 100,\n    imageUrl: 'https://m.media-amazon.com/images/I/81DLAoMW94L.jpg',\n  },\n  {\n    name: 'Reusable Coffee Filters',\n    category: 'Drinkware',\n    description:\n      'Gold-tone mesh filters designed for pour-over coffee that dramatically reduce paper waste while producing a richer, fuller-bodied brew. The ultra-fine mesh allows coffee oils to pass through while filtering out grounds, resulting in superior flavor compared to paper filters. Easy to clean and dishwasher safe, these filters last for years and pay for themselves quickly. Compatible with most standard pour-over coffee makers and drippers. Enjoy better coffee while protecting the environment.',\n    price: 7.0,\n    stock: 55,\n    imageUrl:\n      'https://images-na.ssl-images-amazon.com/images/I/519TwMWO2TL.jpg',\n  },\n  {\n    name: 'Glass Water Bottle',\n    category: 'Drinkware',\n    description: `32oz borosilicate glass bottle featuring a protective silicone sleeve and sustainable bamboo cap for stylish hydration on the go. The high-quality borosilicate glass is thermal shock resistant and won't leach chemicals or retain flavors like plastic bottles. The non-slip silicone sleeve provides grip and impact protection while the wide mouth opening makes cleaning and adding ice easy. Perfect for water, smoothies, or infused beverages. Stay hydrated sustainably with this elegant bottle.`,\n    price: 16.0,\n    stock: 15,\n    imageUrl: 'https://m.media-amazon.com/images/I/81RwUrFW-PL.jpg',\n  },\n  {\n    name: 'Ceramic Mug Set',\n    category: 'Drinkware',\n    description:\n      'Hand-thrown ceramic mugs crafted from recycled clay by skilled artisans, bringing unique character to your daily coffee or tea ritual. Each mug is microwave and dishwasher safe while retaining heat exceptionally well. The ergonomic handle and smooth rim provide comfortable sipping, and the generous capacity is perfect for your favorite hot beverages. The natural clay composition and lead-free glaze ensure safe, toxin-free drinking. Every piece is slightly unique, adding artisanal charm to your kitchen.',\n    price: 14.0,\n    stock: 40,\n    imageUrl: 'https://m.media-amazon.com/images/I/61a2v30mxOL.jpg',\n  },\n  {\n    name: 'Collapsible Silicone Cup',\n    category: 'Drinkware',\n    description:\n      'Portable 12oz cup that folds completely flat for easy storage in pockets, purses, or backpacks, made from food-safe silicone. Expands instantly when needed and collapses to less than an inch thick when empty. Perfect for travelers, hikers, festival-goers, or anyone seeking to reduce single-use cup waste. The durable silicone is heat-resistant and can handle both hot and cold beverages. Includes a secure lid to prevent spills during transport.',\n    price: 11.0,\n    stock: 65,\n    imageUrl: 'https://m.media-amazon.com/images/I/51abhIpPj4L.jpg',\n  },\n  // Cleaning (5 products)\n  {\n    name: 'Eco Sponge Set',\n    category: 'Cleaning',\n    description:\n      'Plant-based cellulose sponges that are completely biodegradable and feature natural scrubbing power without microplastics. These highly absorbent sponges expand when wet and tackle tough kitchen messes with ease. The porous structure creates rich lather with minimal soap while the textured surface provides excellent scrubbing action. Unlike synthetic sponges, these break down naturally at end of life and can be composted. Dries quickly between uses to resist odors and bacterial growth.',\n    price: 5.5,\n    stock: 90,\n    imageUrl:\n      'https://plantishfuture.com/cdn/shop/products/plantish-future-set-of-2-eco-sponge_2048x2048.webp?v=1712813576',\n  },\n  {\n    name: 'Bamboo Scrub Brush',\n    category: 'Cleaning',\n    description: `Natural fiber bristles mounted on a sustainable bamboo handle create this effective and fully compostable scrub brush. The medium-firm bristles are tough on stuck-on food and grime but gentle enough for most cookware surfaces. The ergonomic bamboo handle provides a comfortable grip even when wet, and the natural materials won't harbor bacteria like plastic brushes. When worn out, the entire brush can be composted, completing a zero-waste cycle.`,\n    price: 4.5,\n    stock: 70,\n    imageUrl: 'https://m.media-amazon.com/images/I/71TTs6crS3L.jpg',\n  },\n  {\n    name: 'Coconut Coir Dish Brush',\n    category: 'Cleaning',\n    description:\n      'Stiff coir fibers harvested from coconut husks provide powerful scrubbing action for tough grease and baked-on food removal. This renewable resource creates a naturally durable brush that excels at cleaning pots, pans, and dishes without scratching. The sturdy wooden handle offers excellent control and comfort during cleaning tasks. The coarse fibers are naturally resistant to bacteria and dry quickly to prevent mildew. An effective, sustainable solution for your toughest kitchen cleaning challenges.',\n    price: 6.0,\n    stock: 50,\n    imageUrl: 'https://m.media-amazon.com/images/I/41w9Dl8KE3L.jpg',\n  },\n  {\n    name: 'Reusable Microfiber Cloths',\n    category: 'Cleaning',\n    description:\n      'Washable microfiber cloths engineered to trap dust, dirt, and spills effectively without the need for harsh chemicals. The ultra-fine fibers create millions of tiny hooks that grab and hold particles, making cleaning more efficient with just water. These versatile cloths are safe for all surfaces including glass, stainless steel, wood, and countertops. Machine washable hundreds of times, replacing thousands of paper towels over their lifetime. Lint-free and streak-free results every time.',\n    price: 8.0,\n    stock: 85,\n    imageUrl: 'https://m.media-amazon.com/images/I/71LXSAJGCGL.jpg',\n  },\n  {\n    name: 'Wooden Bottle Brush',\n    category: 'Cleaning',\n    description:\n      'FSC-certified wood handle paired with natural plant-based bristles for deep cleaning water bottles, baby bottles, and narrow containers. The long handle reaches to the bottom of tall bottles while the firm bristles scrub away residue and stains. The brush head is perfectly sized for most bottle openings and the bristles are gentle enough not to scratch glass or stainless steel. Dries quickly on its own and the natural materials resist bacterial growth.',\n    price: 7.0,\n    stock: 60,\n    imageUrl: 'https://m.media-amazon.com/images/I/51a6zTwcjEL.jpg',\n  },\n  // Baking (5 products)\n  {\n    name: 'Silicone Baking Mat',\n    category: 'Baking',\n    description:\n      'Non-stick, reusable mat that completely replaces parchment paper and reduces kitchen waste while providing superior baking results. Made from food-grade silicone that withstands temperatures from -40°F to 480°F, this mat ensures even heat distribution for perfectly baked goods every time. The smooth surface releases cookies, pastries, and roasted vegetables effortlessly without oil or spray. Simply rinse clean or toss in the dishwasher. One mat replaces thousands of sheets of parchment paper.',\n    price: 13.0,\n    stock: 45,\n    imageUrl: 'https://m.media-amazon.com/images/I/71g5uNliHRL.jpg',\n  },\n  {\n    name: 'Wooden Rolling Pin',\n    category: 'Baking',\n    description:\n      'Smooth FSC-certified beechwood rolling pin crafted for optimal dough preparation with consistent results. The natural wood surface prevents dough from sticking while maintaining the perfect amount of texture for easy rolling. The comfortable handles provide excellent control and even pressure distribution. Unlike marble or silicone pins, wood naturally absorbs moisture, preventing dough from becoming too sticky. This classic kitchen tool is durable enough to last generations with proper care.',\n    price: 10.0,\n    stock: 55,\n    imageUrl:\n      'https://images-na.ssl-images-amazon.com/images/I/51SrQbmNpEL.jpg',\n  },\n  {\n    name: 'Bamboo Pastry Board',\n    category: 'Baking',\n    description: `Portable bamboo board featuring engraved measurements and conversion charts for precise baking and dough work. The smooth, durable bamboo surface provides an ideal working area for rolling, kneading, and shaping dough. Built-in measurements eliminate the need for separate rulers or measuring tapes during recipe preparation. The lightweight design makes it easy to move around the kitchen, and the natural bamboo won't dull knives. Cleans easily and resists staining and odors.`,\n    price: 16.0,\n    stock: 30,\n    imageUrl:\n      'https://www.zulaykitchen.com/cdn/shop/files/Bamboo-Wooden-Cutting-Boards-3-Assorted-Sizes-Zulay-Kitchen-36125653336302.jpg?v=1750452777&width=2000',\n  },\n  {\n    name: 'Silicone Muffin Cups',\n    category: 'Baking',\n    description: `Food-grade silicone baking cups that are oven-safe up to 450°F and provide a reusable, eco-friendly alternative to paper liners. These flexible cups release baked goods easily without sticking or tearing, ensuring perfectly shaped muffins and cupcakes every time. The non-porous silicone won't absorb odors or flavors and cleans up quickly in the dishwasher. Use them for baking, freezing individual portions, or even as molds for jellies and candies. Available in vibrant colors that won't fade.`,\n    price: 9.0,\n    stock: 75,\n    imageUrl:\n      'https://images-na.ssl-images-amazon.com/images/I/61VGTeKVpqL.jpg',\n  },\n  {\n    name: 'Eco Cooling Rack',\n    category: 'Baking',\n    description: `Stainless steel rack featuring a sustainable bamboo frame that resists rust and provides excellent air circulation for cooling baked goods. The tight grid pattern prevents small cookies from falling through while allowing maximum airflow underneath. The bamboo frame stays cool to the touch and won't scratch countertops. Perfect for cooling cookies, cakes, breads, and roasted items, or use it as an elevated roasting rack in the oven. Stackable for efficient storage.`,\n    price: 12.5,\n    stock: 40,\n    imageUrl: 'https://m.media-amazon.com/images/I/81i+oawo9PL.jpg',\n  },\n  // Cutting (6 products)\n  {\n    name: 'Bamboo Cutting Board',\n    category: 'Cutting',\n    description: `Antibacterial bamboo cutting board that is naturally gentle on knives while providing a durable, eco-friendly food preparation surface. Bamboo is 16% harder than maple yet won't dull knife edges like plastic or glass boards. The natural silica content provides inherent antimicrobial properties that inhibit bacterial growth. Features a juice groove to catch liquids and prevent spills. Easy to maintain with occasional oiling, this board resists warping, cracking, and absorbing odors or stains.`,\n    price: 19.0,\n    stock: 25,\n    imageUrl: 'https://m.media-amazon.com/images/I/71HQaRZK7aL.jpg',\n  },\n  {\n    name: 'Eco Knife Set',\n    category: 'Cutting',\n    description:\n      'Professional-quality knives crafted from recycled stainless steel with ergonomic bamboo handles for comfort and sustainability. This comprehensive set includes chef knife, paring knife, utility knife, and bread knife to handle all your cutting needs. The high-carbon steel blades maintain their sharp edge longer and resist corrosion. The beautiful bamboo handles provide excellent grip and balance while adding natural elegance to your kitchen. Includes protective blade covers for safe storage.',\n    price: 28.0,\n    stock: 15,\n    imageUrl:\n      'https://images-na.ssl-images-amazon.com/images/I/713aghYBLjL.jpg',\n  },\n  {\n    name: 'Silicone Gripping Mat',\n    category: 'Cutting',\n    description:\n      'Non-slip mat designed to keep cutting boards stable during chopping and food preparation, preventing dangerous sliding and accidents. The textured silicone surface grips both the countertop and cutting board securely without adhesives. This versatile mat also works as a jar opener, protects surfaces from hot pots, and provides grip for mixing bowls. Rolls up compactly for drawer storage and is dishwasher safe for easy cleaning. Heat resistant up to 450°F.',\n    price: 11.0,\n    stock: 65,\n    imageUrl: 'https://m.media-amazon.com/images/I/61csYQGIRFL.jpg',\n  },\n  {\n    name: 'Wooden Salad Bowl',\n    category: 'Cutting',\n    description: `Acacia wood bowl that serves double duty for both prepping and serving fresh salads and side dishes. The natural wood grain adds rustic beauty to any table setting while the generous capacity accommodates family-sized portions. Acacia wood is naturally water-resistant and won't crack or split with proper care. The smooth interior is perfect for tossing salads without bruising delicate greens. Hand wash and occasionally oil to maintain the rich, warm finish for years of use.`,\n    price: 14.5,\n    stock: 35,\n    imageUrl: 'https://m.media-amazon.com/images/I/81S+ikiYxYL.jpg',\n  },\n  {\n    name: 'Herb Scissors',\n    category: 'Cutting',\n    description:\n      'Stainless steel scissors featuring five sharp blades that quickly chop fresh herbs directly over your dish with minimal effort. These specialized scissors eliminate the need for knives and cutting boards when working with delicate herbs like basil, cilantro, parsley, and chives. The multiple blades create uniform pieces and preserve herb oils that might be lost with traditional chopping methods. Includes a cleaning comb that slides between blades for easy cleanup. Dishwasher safe.',\n    price: 8.5,\n    stock: 80,\n    imageUrl:\n      'https://images-na.ssl-images-amazon.com/images/I/61bW3A5W0cL.jpg',\n  },\n  {\n    name: 'Peeler Set',\n    category: 'Cutting',\n    description:\n      'Ergonomic bamboo-handled peelers designed for effortless peeling of vegetables and fruits with minimal waste. The set includes both Y-peeler and straight peeler styles to accommodate different foods and preferences. Ultra-sharp stainless steel blades glide smoothly through tough skins while the soft-grip bamboo handles prevent hand fatigue during extended use. The swivel blades adjust to contours for efficient peeling. Built-in potato eye removers handle blemishes with ease.',\n    price: 7.0,\n    stock: 70,\n    imageUrl:\n      'https://i5.walmartimages.com/seo/Stainless-Steel-Potato-Peeler-Ultra-Sharp-Vegetable-Peeler-for-Kitchen-Ergonomic-Non-Slip-Handle-Fruit-Peeler_a69fddff-0ce2-42d7-93d3-58f4a6745939.4a0aae3c06dcdb4e3d94ae2cf91c1c3c.jpeg?odnHeight=576&odnWidth=576&odnBg=FFFFFF',\n  },\n  // Serveware (6 products)\n  {\n    name: 'Bamboo Serving Platter',\n    category: 'Serveware',\n    description: `Elegant bamboo platter perfect for presenting appetizers, main courses, cheese, charcuterie, or desserts with style. The smooth, food-safe finish highlights the natural grain patterns unique to each piece. This generously sized platter accommodates party portions while the raised edges prevent items from sliding off. Bamboo naturally resists bacteria and doesn't absorb odors or stains like traditional wood. The lightweight construction makes serving and passing easy. A beautiful centerpiece for any gathering.`,\n    price: 17.0,\n    stock: 40,\n    imageUrl: 'https://m.media-amazon.com/images/I/71Eg5IYOVeL.jpg',\n  },\n  {\n    name: 'Compostable Napkins Pack',\n    category: 'Serveware',\n    description:\n      'Unbleached bamboo fiber napkins that are fully compostable and break down naturally without leaving harmful residues. These soft, absorbent napkins are free from chlorine, dyes, and fragrances, making them safe for sensitive skin and the environment. The natural bamboo fibers are naturally antimicrobial and stronger than traditional paper napkins, even when wet. Perfect for everyday meals, parties, or picnics. Each pack contains enough napkins for numerous gatherings while reducing your environmental footprint.',\n    price: 5.0,\n    stock: 100,\n    imageUrl: 'https://m.media-amazon.com/images/I/71phF6Am0+L.jpg',\n  },\n  {\n    name: 'Ceramic Serving Bowl',\n    category: 'Serveware',\n    description:\n      'Glazed ceramic bowl sourced from sustainable clay deposits and finished with lead-free, food-safe glazes. The smooth interior prevents food from sticking while the elegant exterior adds sophistication to any table. This versatile bowl works beautifully for serving salads, pasta, rice dishes, or fruit, and transitions seamlessly from oven to table. The substantial weight provides stability, and the ceramic material retains temperature well. Microwave and dishwasher safe for convenient everyday use.',\n    price: 21.0,\n    stock: 20,\n    imageUrl: 'https://m.media-amazon.com/images/I/71WEJvgP1fL.jpg',\n  },\n  {\n    name: 'Wooden Cheese Board',\n    category: 'Serveware',\n    description: `Olive wood board treated with natural oils to enhance its inherent beauty and water resistance, perfect for cheese service and entertaining. The unique grain patterns and warm honey tones make each board a one-of-a-kind piece of functional art. Olive wood is naturally dense and non-porous, resisting bacterial growth and odor absorption. The smooth surface won't dull knives and provides an ideal backdrop for artisan cheeses, fruits, and accompaniments. Includes a branded edge for hanging display.`,\n    price: 24.0,\n    stock: 18,\n    imageUrl: 'https://m.media-amazon.com/images/I/61wqNrbzqLL.jpg',\n  },\n  {\n    name: 'Silicone Trivet Set',\n    category: 'Serveware',\n    description: `Heat-resistant trivets made from premium silicone that protect tables and countertops from hot dishes, pots, and pans up to 450°F. The flexible material conforms to uneven pot bottoms while the raised pattern allows air circulation and prevents heat transfer. These trivets are also slip-resistant, keeping hot items securely in place. Easy to clean and dishwasher safe, they won't stain, crack, or harbor bacteria like traditional cork or fabric trivets. Folds or hangs for space-saving storage.`,\n    price: 10.5,\n    stock: 50,\n    imageUrl: 'https://m.media-amazon.com/images/I/618GM-FbEhL.jpg',\n  },\n  {\n    name: 'Bamboo Coasters (Set of 6)',\n    category: 'Serveware',\n    description:\n      'Engraved bamboo coasters that are naturally absorbent and protect furniture surfaces from water rings and heat marks with style. The dense bamboo material quickly absorbs condensation from cold drinks while the smooth finish prevents scratching delicate surfaces. Each coaster features tasteful engravings that add visual interest and help grip glasses. The natural antimicrobial properties of bamboo prevent mold and mildew growth. Includes a holder for convenient storage and display when not in use.',\n    price: 9.0,\n    stock: 75,\n    imageUrl: 'https://m.media-amazon.com/images/I/71ifR2n807L.jpg',\n  },\n]\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Product.html":{"url":"classes/Product.html","title":"class - Product","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/product.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                cartItems\n                            \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                imageUrl\n                            \n                            \n                                    \n                                isDeleted\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                orders\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                purchaseCount\n                            \n                            \n                                    \n                                stock\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        cartItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CartItem[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, cartItem => cartItem.product)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 50, nullable: false, enum: ProductCategory})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()@Index()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 100, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        orders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, order => order.product)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'decimal', precision: 10, scale: 2, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        purchaseCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        stock\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 0, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/products/product.entity.ts:45\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  Index,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n} from 'typeorm';\nimport { ProductCategory } from './enums/product-category.enum';\nimport { CartItem } from '../cart/cart-item.entity';\nimport { Order } from '../orders/order.entity';\nimport { OrderItem } from '../orders/order-item.entity';\n\n@Entity('products')\n@Index(['name'])\n@Index(['category'])\nexport class Product {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ length: 100, nullable: false, unique: true })\n  name: string;\n\n  @Column({ length: 50, nullable: false, enum: ProductCategory })\n  category: ProductCategory;\n\n  @Column({ type: 'text', nullable: false })\n  description: string;\n\n  @Column({ type: 'decimal', precision: 10, scale: 2, nullable: false })\n  price: number;\n\n  @Column({ default: 0, nullable: false })\n  stock: number;\n\n  @Column({ nullable: true })\n  imageUrl?: string;\n\n  @CreateDateColumn()\n  @Index()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @Column({\n    type: 'boolean',\n    default: false,\n  })\n  isDeleted: boolean;\n\n  @Column({\n    type: 'timestamp',\n    nullable: true,\n  })\n  deletedAt?: Date;\n\n  @Column({\n    default: 0,\n  })\n  purchaseCount: number;\n\n  @OneToMany(() => CartItem, (cartItem) => cartItem.product)\n  cartItems?: CartItem[];\n\n  @OneToMany(() => OrderItem, (order) => order.product)\n  orders: Order[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
